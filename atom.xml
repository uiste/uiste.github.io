<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>uiste</title>
  <icon>https://www.gravatar.com/avatar/56992660d6f2c687a02a62364e5b9baf</icon>
  <subtitle>uiste</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.uiste.com/"/>
  <updated>2018-11-02T07:58:06.000Z</updated>
  <id>http://blog.uiste.com/</id>
  
  <author>
    <name>uiste</name>
    <email>hi@uiste.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mac 配置ssh 免密登录</title>
    <link href="http://blog.uiste.com/2018/20181102-3.html"/>
    <id>http://blog.uiste.com/2018/20181102-3.html</id>
    <published>2018-11-02T07:49:00.000Z</published>
    <updated>2018-11-02T07:58:06.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 配置ssh</span><br><span class="line">~ vim ~/.ssh/config</span><br><span class="line"></span><br><span class="line">Host *</span><br><span class="line">    ServerAliveInterval 10</span><br><span class="line"></span><br><span class="line">Host Mweb1</span><br><span class="line">    HostName        服务器IP地址</span><br><span class="line">    Port            端口</span><br><span class="line">    User            用户名</span><br><span class="line">    IdentityFile    私钥地址</span><br><span class="line"></span><br><span class="line">Host Mweb2</span><br><span class="line">    HostName        服务器IP地址</span><br><span class="line">    Port            22</span><br><span class="line">    User            uiste</span><br><span class="line">    IdentityFile    ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"># 登录方式</span><br><span class="line">➜  ~ ssh Mweb1</span><br><span class="line">Last login: Fri Nov  2 08:15:51 2018 from 180.173.83.33</span><br><span class="line">[root@VM_0_6_centos ~]#</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mac配置远程服务器隧道代理</title>
    <link href="http://blog.uiste.com/2018/20181102-2.html"/>
    <id>http://blog.uiste.com/2018/20181102-2.html</id>
    <published>2018-11-02T07:44:54.000Z</published>
    <updated>2018-11-03T00:13:03.743Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>因为安全原因远程服务器的数据库不允许本地直接访问，又没有开启访问IP白名单时，可以通过隧道代理访问。Windows系统通过xsheel可以设置隧道代理。Mac只需要运行如下命令</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 22  -i ~/.ssh/id_rsa -fNL 代理端口:代理IP:转发原端口 用户名@远程服务器IP</span><br><span class="line"></span><br><span class="line">ssh -p 22  -i ~/.ssh/id_rsa -fNL 3308:127.0.0.1:3306 root@118.xx.xxx.xx</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh -p &#123;ssh_port&#125; -i &#123;rsa_file&#125; -fNL &#123;local_port&#125;:&#123;mysql_ip&#125;:&#123;mysql_port&#125; </span><br><span class="line">&#123;ssh_user&#125;@&#123;ssh_ip&#125;</span><br><span class="line">ssh -p 22  -i ./id_rsa_jump -fNL 33060:mysql_ip:3306 jump@jump_ip   # 实例</span><br></pre></td></tr></table></figure><blockquote><p>-p {ssh_port}: 指定跳板机器的ssh服务的端口<br>-i {rsa_file}:指定连接跳板机的ssh公钥，由跳板机的ssh服务端生成，如果不指定公钥或者公钥验证失败则会弹出密码进行登录。<br>-f:需进行ssh认证<br>-N:只进行端口转发，不执行命令<br>-L:指定连接服务的格式 [bind_address:]port:host:hostport<br>{local_port}：本地监听的端口<br>{mysql_ip}：转发到的mysql的ip或域名<br>{mysql_port}：转发到的mysql的端口<br>{ssh_port}：跳板机的<br>{ssh_user}：跳板机的ssh用户名(如果为rsa登录，则ras对应的用户名和ssh_user一致)<br>{ssh_ip}：跳板机的ip或域名<br>检查是否启动成功<br>netstat  -aon|findstr  “33060”  #存在对应的监听则启动成功 如果要关闭则kill<br>连接mysql<br>ip:127.0.0.1<br>port:33060</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;因为安全原因远程服务器的数据库不允许本地直接访问，又没有开启访问IP白名单时，可以通过隧道代理访问。Windows系统通过xsheel可以设置隧道代理。Mac只需要运行如下命令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;hi
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>truffle geth 启动Ethereum测试节点</title>
    <link href="http://blog.uiste.com/2018/20181102-1.html"/>
    <id>http://blog.uiste.com/2018/20181102-1.html</id>
    <published>2018-11-02T07:42:14.000Z</published>
    <updated>2018-11-02T07:58:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="truffle-框架使用"><a href="#truffle-框架使用" class="headerlink" title="truffle 框架使用"></a>truffle 框架使用</h1><p><strong> uiste@uiste:~$     testrpc </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">uiste@uiste:~/www/blockchain/test_truffle_2$     truffle unbox webpack</span><br><span class="line">uiste@uiste:~/www/blockchain/test_truffle_2$     truffle develop</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Last login: Mon Apr  2 20:07:27 on ttys008</span><br><span class="line">uiste@uiste:~$     cd www/blockchain/test_truffle_2/</span><br><span class="line">uiste@uiste:~/www/blockchain/test_truffle_2$     npm run dev</span><br></pre></td></tr></table></figure></p><h1 id="geth-方式"><a href="#geth-方式" class="headerlink" title="geth 方式"></a>geth 方式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">`geth --datadir &quot;./Mychains/dev&quot; --identity &quot;mydev&quot; --rpccorsdomain &quot;*&quot; --networkid 99 console`</span><br><span class="line"></span><br><span class="line">uiste@uiste:~$     cd www/blockchain/test-geth</span><br><span class="line">uiste@uiste:~/www/blockchain/test-geth$     geth --datadir &quot;./Mychains/dev&quot; --identity &quot;mydev&quot; --rpc --rpcapi &quot;db,eth,net,web3,personal,web3&quot; --nodiscover --rpccorsdomain &quot;*&quot; --networkid 100 console</span><br><span class="line"></span><br><span class="line">uiste@uiste:/Applications$      /Applications/Mist.app/Contents/MacOS/Mist --rpc &quot;/Users/uiste/www/blockchain/test-geth/Mychains/dev/geth.ipc&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">geth --datadir &quot;./chain&quot; --identity &quot;mydev&quot; --rpc --rpcapi &quot;db,eth,net,web3,personal,web3&quot; --nodiscover --rpccorsdomain &quot;*&quot; --networkid 100 console 2&gt;&gt;eth_output.log</span><br><span class="line"></span><br><span class="line">geth --dev --rpc --rpccorsdomain &quot;*&quot; --rpcaddr &quot;0.0.0.0&quot; --rpcport &quot;8545&quot; --mine --rpcapi &quot;eth,txpool,web3&quot;</span><br><span class="line"></span><br><span class="line">geth --testnet --rpc --rpccorsdomain &quot;*&quot; --rpcaddr &quot;0.0.0.0&quot; --rpcport &quot;8545&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;truffle-框架使用&quot;&gt;&lt;a href=&quot;#truffle-框架使用&quot; class=&quot;headerlink&quot; title=&quot;truffle 框架使用&quot;&gt;&lt;/a&gt;truffle 框架使用&lt;/h1&gt;&lt;p&gt;&lt;strong&gt; uiste@uiste:~$     te
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【5】区块链-以太坊truffle 框架</title>
    <link href="http://blog.uiste.com/2018/20180511-5.html"/>
    <id>http://blog.uiste.com/2018/20180511-5.html</id>
    <published>2018-05-11T04:16:29.000Z</published>
    <updated>2019-04-02T04:36:45.010Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TestRPC安装"><a href="#TestRPC安装" class="headerlink" title="TestRPC安装"></a>TestRPC安装</h2><p>安装Ethereum客户端来支持JSON RPC API调用开发环境，推荐使用EthereumJS。<br>安装命令：</p><p><code>sudo npm install -g ethereumjs-testrpc</code></p><p>这里的安装如果无法下载，请参考上一篇博客中安装truffle中使用淘宝镜像的方法。此步安装遇到很多问题，也尝试了各种方法，比如gcc依赖的安装升级，Python的安装，npm的升级，git的配置，还有node版本是否影响。虽然最终把问题给解决了，但修改的地方太多具体什么原因导致安装过程中出现那么多问题，还有待大家去尝试分析。</p><p>在执行以上命令之后，只是把ethereumjs-testrpc安装在nodejs的以下路径：</p><p><code>/home/zhuzs/app/nodejs/node-v6.9.1/lib/node_modules/ethereumjs-testrpc</code></p><p>还行进行软连接的配置：</p><p><code>ln -s /home/zhuzs/app/nodejs/node-v6.9.1/lib/node_modules/ethereumjs-testrpc/bin/testrpc /usr/local/bin/testrpc</code></p><h2 id="truffle-安装"><a href="#truffle-安装" class="headerlink" title="truffle 安装"></a>truffle 安装</h2><p><code>npm install -g truffle</code></p><h2 id="truffle-使用"><a href="#truffle-使用" class="headerlink" title="truffle 使用"></a>truffle 使用</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">truffle init 初始化</span><br><span class="line">truffle  compile 编译</span><br><span class="line">truffle migrate 部署</span><br><span class="line">truffle serve 启动服务</span><br></pre></td></tr></table></figure><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ol><li><p>启动TestRPC<br><img src="//img.mukewang.com/5ac48d1e0001805713800986.png" alt="图片描述"></p></li><li><p>初始化项目<br><img src="//img.mukewang.com/5ac48d470001c60b12040374.png" alt="图片描述"></p></li><li><p>修改配置文件,编写简单的智能合约<br><img src="//img.mukewang.com/5ac48d52000118d719160480.png" alt="图片描述"></p></li></ol><blockquote><p>mac 默认读取的truffle.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  // See &lt;http://truffleframework.com/docs/advanced/configuration&gt;</span><br><span class="line">  // to customize your Truffle configuration!</span><br><span class="line">  networks: &#123;</span><br><span class="line">    development: &#123;</span><br><span class="line">      host: &quot;127.0.0.1&quot;,</span><br><span class="line">      port: 8545,</span><br><span class="line">      network_id: &quot;*&quot; // Match any network id</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></blockquote><p><img src="//img.mukewang.com/5ac48d630001615723740600.png" alt="图片描述"><br>SimpleStorage.sol<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.0;  </span><br><span class="line">contract SimpleStorage &#123;  </span><br><span class="line">  </span><br><span class="line">   uint storedData;  </span><br><span class="line">  </span><br><span class="line">   function set(uint x) public &#123;   </span><br><span class="line">    storedData = x;  </span><br><span class="line">   &#125;  </span><br><span class="line">  </span><br><span class="line">   function get() constant public returns (uint) &#123;   </span><br><span class="line">      return storedData;  </span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2_deploy_contracts.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const SimpleStorage = artifacts.require(&quot;./SimpleStorage.sol&quot;)</span><br><span class="line"></span><br><span class="line">module.exports = function(deployer) &#123;</span><br><span class="line">    deployer.deploy(SimpleStorage);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><ol start="4"><li>编译(保证编译不报错)<br><img src="//img.mukewang.com/5ac48d780001e92110340482.png" alt="图片描述"><br>truffle migrate –reset  使用这个命令便可解决以上问题</li><li>部署<br><img src="//img.mukewang.com/5ac48d81000127fc20080396.png" alt="图片描述"><blockquote><p>报错问题无法解决</p></blockquote></li></ol><h2 id="换一种方案实现"><a href="#换一种方案实现" class="headerlink" title="换一种方案实现"></a>换一种方案实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir test   //重新建一个项目目录test</span><br><span class="line">truffle unbox webpack</span><br><span class="line">truffle develop   // 启动一个控制台</span><br><span class="line">&gt; compile       //编译</span><br><span class="line">&gt;migrate        //迁移合约    当然这两部也可以不在控制台下完成   可以用 truffle compile  和 truffle migrate 完成。</span><br><span class="line">npm run dev  //运行webpack服务器进行前端热重新加载（在开发控制台之外）。</span><br></pre></td></tr></table></figure><p><img src="//img.mukewang.com/5ac48da80001814512440476.png" alt="图片描述"><br><img src="//img.mukewang.com/5ac48db100013cb813840938.png" alt="图片描述"><br><img src="//img.mukewang.com/5ac48db80001e13e11660652.png" alt="图片描述"><br><img src="//img.mukewang.com/5ac48dc00001639914141032.png" alt="图片描述"><br><img src="//img.mukewang.com/5ac48dc800019ef024601256.png" alt="图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;TestRPC安装&quot;&gt;&lt;a href=&quot;#TestRPC安装&quot; class=&quot;headerlink&quot; title=&quot;TestRPC安装&quot;&gt;&lt;/a&gt;TestRPC安装&lt;/h2&gt;&lt;p&gt;安装Ethereum客户端来支持JSON RPC API调用开发环境，推荐使用Eth
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【4】区块链-以太坊web3.js</title>
    <link href="http://blog.uiste.com/2018/20180511-4.html"/>
    <id>http://blog.uiste.com/2018/20180511-4.html</id>
    <published>2018-05-11T04:15:29.000Z</published>
    <updated>2019-04-02T04:36:52.374Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><code>uiste@uiste:~/www/blockchain/test_web3js$     git clone https://github.com/ethereum/web3.js.git</code></p><p><img src="//img.mukewang.com/5ac48b790001e22212920416.png" alt="图片描述"></p><h2 id="运行node-app-js"><a href="#运行node-app-js" class="headerlink" title="运行node-app.js"></a>运行node-app.js</h2><p><img src="//img.mukewang.com/5ac48b970001028312480162.png" alt="图片描述"><br>获取主账号地址，与账户余额<br><img src="//img.mukewang.com/5ac48ba50001f44a19700496.png" alt="图片描述"></p><h2 id="下载轻钱包"><a href="#下载轻钱包" class="headerlink" title="下载轻钱包"></a>下载轻钱包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/ConsenSys/eth-lightwallet.git</span><br><span class="line">cd eth-lightwallet</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p><img src="//img.mukewang.com/5ac48bb5000185f814721386.png" alt="图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h2&gt;&lt;p&gt;&lt;code&gt;uiste@uiste:~/www/blockchain/test_web3js$     git clone https://
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【3】区块链-以太坊代币合约</title>
    <link href="http://blog.uiste.com/2018/20180511-3.html"/>
    <id>http://blog.uiste.com/2018/20180511-3.html</id>
    <published>2018-05-11T04:14:29.000Z</published>
    <updated>2019-04-02T04:36:01.709Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编写智能合约"><a href="#编写智能合约" class="headerlink" title="编写智能合约"></a>编写智能合约</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.0;</span><br><span class="line"></span><br><span class="line">//创建一个基础合约，有些操作只能是当前合约的创建者才能操作</span><br><span class="line">contract owned&#123;</span><br><span class="line">    //声明一个用来接收合约创建者的状态变量</span><br><span class="line">    address public owner;</span><br><span class="line">    //构造函数，把当前交易的发送者（也就是合约的创建者）赋予owner变量</span><br><span class="line">    function owned() public &#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //声明一个修改器，用于有些方法只有合约的创建者才能操作</span><br><span class="line">    modifier onlyOwner&#123;</span><br><span class="line">        if(msg.sender != owner)&#123;</span><br><span class="line">            revert();</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            _;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //把该合约的拥有者转给其他人</span><br><span class="line">    function transferOwner(address newOwner) public onlyOwner&#123;</span><br><span class="line">        owner = newOwner;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract tokenCpc1 is owned &#123;</span><br><span class="line">    string public name ;//代币名字</span><br><span class="line">    string public symbol; //代币符号</span><br><span class="line">    uint8 public decimals = 0; //代币小数位</span><br><span class="line">    uint public totalSupply; //代币总量</span><br><span class="line">    </span><br><span class="line">    uint public sellPrice = 1 ether ; //设置代币的卖的价格等于一个以太币</span><br><span class="line">    uint public buyPrice = 1 ether ;//设置代币的买的价格等于一个以太币</span><br><span class="line">    </span><br><span class="line">    //用一个映射类型的变量，来记录所有账户的代币的余额</span><br><span class="line">    mapping(address =&gt; uint) public balanceOf;</span><br><span class="line">    //用一个映射类型的变量，来记录被冻结的账户</span><br><span class="line">    mapping(address=&gt;bool) public frozenAccount;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    event e(string _str);</span><br><span class="line">    //构造函数，初始化代币的变量和初始代币总量</span><br><span class="line">    function tokenCpc1(uint initialSupply,string _name , string _symbol, uint8 _decimals,address centralMinter) public payable&#123;</span><br><span class="line">        //手动指定代币的拥有者，如果不填，则默认为合约的部署者</span><br><span class="line">        if(centralMinter !=0)&#123;</span><br><span class="line">            owner = centralMinter;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        balanceOf[owner] = initialSupply;</span><br><span class="line">        name = _name;</span><br><span class="line">        symbol = _symbol;</span><br><span class="line">        decimals = _decimals;</span><br><span class="line">        totalSupply = initialSupply;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //发行代币，向指定的目标账户添加代币</span><br><span class="line">    function mintToken(address target,uint mintedAmount) public onlyOwner&#123;</span><br><span class="line">        //判断目标账户是否存在</span><br><span class="line">        if(target != 0)&#123;</span><br><span class="line">            //设置目标账户相应的代币余额</span><br><span class="line">            balanceOf[target] = mintedAmount;</span><br><span class="line">            //增加总量</span><br><span class="line">            totalSupply +=mintedAmount;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            revert();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //实现账户的冻结和解冻</span><br><span class="line">    function freezeAccount(address target,bool _bool) public onlyOwner&#123;</span><br><span class="line">        if(target != 0)&#123;</span><br><span class="line">            frozenAccount[target] = _bool;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //实现账户间，代币的转移</span><br><span class="line">    function transfer(address _to, uint _value) public &#123;</span><br><span class="line">        //检测交易的发起者的账户是不是被冻结了</span><br><span class="line">        if(frozenAccount[msg.sender])&#123;</span><br><span class="line">            revert();</span><br><span class="line">        &#125;</span><br><span class="line">        //检测交易发起者的账户的代币余额是否足够</span><br><span class="line">        if(balanceOf[msg.sender] &lt; _value)&#123;</span><br><span class="line">                revert();</span><br><span class="line">        &#125;</span><br><span class="line">        //检测溢出</span><br><span class="line">        if((balanceOf[_to] + _value) &lt;balanceOf[_to] )&#123;</span><br><span class="line">                    revert();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //实现代币转移</span><br><span class="line">        balanceOf[msg.sender] -=_value;</span><br><span class="line">        balanceOf[_to] +=_value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //设置代币的买卖价格</span><br><span class="line">    function setPrice(uint newSellPrice,uint newBuyPrice) public onlyOwner&#123;</span><br><span class="line">        sellPrice = newSellPrice;</span><br><span class="line">        buyPrice = newBuyPrice;</span><br><span class="line">    &#125;</span><br><span class="line">    //实现代币的卖操作</span><br><span class="line">    function sell(uint amount) public returns(uint revenue)&#123;</span><br><span class="line">        //检测交易的发起者的账户是不是被冻结了</span><br><span class="line">        if(frozenAccount[msg.sender])&#123;</span><br><span class="line">            revert();</span><br><span class="line">        &#125;</span><br><span class="line">        //检测交易发起者的账户的代币余额是否足够</span><br><span class="line">        if(balanceOf[msg.sender] &lt; amount)&#123;</span><br><span class="line">            revert();</span><br><span class="line">        &#125;</span><br><span class="line">        //把相应数量的代币给合约的拥有者</span><br><span class="line">        balanceOf[owner] +=amount ;</span><br><span class="line">        //卖家的账户减去相应的余额</span><br><span class="line">        balanceOf[msg.sender] -=amount;</span><br><span class="line">        //计算对应的以太币的价值</span><br><span class="line">        revenue = amount * sellPrice;</span><br><span class="line">        //向卖家的账户发送对应数量的以太币</span><br><span class="line">        if(msg.sender.send(revenue))&#123;</span><br><span class="line">            return revenue;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            //如果以太币发送失败，则终止程序，并且恢复状态变量</span><br><span class="line">            revert();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //实现买操作</span><br><span class="line">    function buy() public payable returns(uint amount) &#123;</span><br><span class="line">        //检测买家是不是大于0 </span><br><span class="line">        if(buyPrice &lt;= 0)&#123;</span><br><span class="line">            //如果不是，则终止</span><br><span class="line">            revert();</span><br><span class="line">        &#125;</span><br><span class="line">        //根据用户发送的以太币的数量和代币的买价，计算出代币的数量</span><br><span class="line">        amount = msg.value / buyPrice;</span><br><span class="line">        //检测合约的拥有者是否有足够多的代币</span><br><span class="line">        if(balanceOf[owner] &lt; amount)&#123;</span><br><span class="line">            revert();</span><br><span class="line">        &#125;</span><br><span class="line">        //向合约的拥有者转移以太币</span><br><span class="line">        if(!owner.send(msg.value))&#123;</span><br><span class="line">            //如果失败，则终止</span><br><span class="line">            revert();</span><br><span class="line">        &#125;</span><br><span class="line">        //从拥有者的账户上减去相应的代币</span><br><span class="line">        balanceOf[owner] -=amount ;</span><br><span class="line">        //买家的账户增加相应的余额</span><br><span class="line">        balanceOf[msg.sender] +=amount;</span><br><span class="line">        </span><br><span class="line">        return amount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="部署合约"><a href="#部署合约" class="headerlink" title="部署合约"></a>部署合约</h2><p><img src="//img.mukewang.com/5ac48a8600015feb21181220.png" alt="图片描述"><br><img src="//img.mukewang.com/5ac48a9400018a6b22201294.png" alt="图片描述"></p><h2 id="开启挖矿"><a href="#开启挖矿" class="headerlink" title="开启挖矿"></a>开启挖矿</h2><p><img src="//img.mukewang.com/5ac48aa400018ec415500486.png" alt="图片描述"></p><h2 id="添加代币"><a href="#添加代币" class="headerlink" title="添加代币"></a>添加代币</h2><p><img src="//img.mukewang.com/5ac48ab50001c01c23061122.png" alt="图片描述"><br><img src="//img.mukewang.com/5ac48ac80001da2c22581274.png" alt="图片描述"></p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p><img src="//img.mukewang.com/5ac48ad60001bbf322461104.png" alt="图片描述"><br><img src="//img.mukewang.com/5ac48adf00012d0422780956.png" alt="图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;编写智能合约&quot;&gt;&lt;a href=&quot;#编写智能合约&quot; class=&quot;headerlink&quot; title=&quot;编写智能合约&quot;&gt;&lt;/a&gt;编写智能合约&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【2】区块链-以太坊智能合约</title>
    <link href="http://blog.uiste.com/2018/20180511-2.html"/>
    <id>http://blog.uiste.com/2018/20180511-2.html</id>
    <published>2018-05-11T04:13:29.000Z</published>
    <updated>2019-04-02T04:35:54.821Z</updated>
    
    <content type="html"><![CDATA[<h1 id="以太坊智能合约实战"><a href="#以太坊智能合约实战" class="headerlink" title="以太坊智能合约实战"></a>以太坊智能合约实战</h1><h2 id="启动Remix-IDE工具"><a href="#启动Remix-IDE工具" class="headerlink" title="启动Remix IDE工具"></a>启动Remix IDE工具</h2><p><img src="//img.mukewang.com/5ac488130001914c25261476.png" alt="图片描述"></p><h2 id="设置IDE本地文件共享"><a href="#设置IDE本地文件共享" class="headerlink" title="设置IDE本地文件共享"></a>设置IDE本地文件共享</h2><p><img src="//img.mukewang.com/5ac4883300013f9920320678.png" alt="图片描述"><br><img src="//img.mukewang.com/5ac4883b00015ee317440998.png" alt="图片描述"><br><img src="//img.mukewang.com/5ac48847000183f712380512.png" alt="图片描述"></p><blockquote><p>参考连接</p><ol><li><a href="https://remix.readthedocs.io/en/latest/tutorial_remixd_filesystem.html" target="_blank" rel="noopener">https://remix.readthedocs.io/en/latest/tutorial_remixd_filesystem.html</a></li><li><a href="https://github.com/ethereum/remixd" target="_blank" rel="noopener">https://github.com/ethereum/remixd</a></li></ol></blockquote><h2 id="以太坊智能合约demo"><a href="#以太坊智能合约demo" class="headerlink" title="以太坊智能合约demo"></a>以太坊智能合约demo</h2><h3 id="新建账户的两种方案"><a href="#新建账户的两种方案" class="headerlink" title="新建账户的两种方案"></a>新建账户的两种方案</h3><p><img src="//img.mukewang.com/5ac488790001560a19400618.png" alt="图片描述"></p><h3 id="新建合约"><a href="#新建合约" class="headerlink" title="新建合约"></a>新建合约</h3><p><img src="//img.mukewang.com/5ac488870001c5ea20100656.png" alt="图片描述"></p><h3 id="编写合约代码"><a href="#编写合约代码" class="headerlink" title="编写合约代码"></a>编写合约代码</h3><p><img src="//img.mukewang.com/5ac488a500016b1020721012.png" alt="图片描述"></p><h3 id="合约部署"><a href="#合约部署" class="headerlink" title="合约部署"></a>合约部署</h3><p><img src="//img.mukewang.com/5ac488b3000105f620400848.png" alt="图片描述"></p><p><img src="//img.mukewang.com/5ac488c3000133bc16941388.png" alt="图片描述"></p><h3 id="开启挖矿"><a href="#开启挖矿" class="headerlink" title="开启挖矿"></a>开启挖矿</h3><p><img src="//img.mukewang.com/5ac488cc0001dc3c15440492.png" alt="图片描述"></p><h3 id="合约打包成功"><a href="#合约打包成功" class="headerlink" title="合约打包成功"></a>合约打包成功</h3><p><img src="//img.mukewang.com/5ac488d8000140b019701052.png" alt="图片描述"><br><img src="//img.mukewang.com/5ac488f200011c8520500486.png" alt="图片描述"></p><h3 id="查看部署好的合约"><a href="#查看部署好的合约" class="headerlink" title="查看部署好的合约"></a>查看部署好的合约</h3><p><img src="//img.mukewang.com/5ac489010001b91422461240.png" alt="图片描述"></p><h3 id="执行合约"><a href="#执行合约" class="headerlink" title="执行合约"></a>执行合约</h3><ol><li><p>给主账户设置100000块钱<br><img src="//img.mukewang.com/5ac489170001f40622521270.png" alt="图片描述"><br><img src="//img.mukewang.com/5ac4891f0001489e11321364.png" alt="图片描述"></p></li><li><p>查看合约执行状态<br><img src="//img.mukewang.com/5ac4892800014e1c20480618.png" alt="图片描述"><br><img src="//img.mukewang.com/5ac489370001278513640844.png" alt="图片描述"></p></li></ol><p><strong> 这里本来是100000多执行了一次1000000导致有1100000 </strong></p><ol start="3"><li>合约执行<br><img src="//img.mukewang.com/5ac4895700016b1121161130.png" alt="图片描述"></li></ol><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><h3 id="solidity-文档"><a href="#solidity-文档" class="headerlink" title="solidity 文档"></a>solidity 文档</h3><p><a href="http://solidity-cn.readthedocs.io/zh/develop/introduction-to-smart-contracts.html" target="_blank" rel="noopener">http://solidity-cn.readthedocs.io/zh/develop/introduction-to-smart-contracts.html</a></p><p><a href="http://www.tryblockchain.org/" target="_blank" rel="noopener">http://www.tryblockchain.org/</a></p><h3 id="Web3-js-文档"><a href="#Web3-js-文档" class="headerlink" title="Web3 js 文档"></a>Web3 js 文档</h3><p><a href="http://web3.tryblockchain.org/" target="_blank" rel="noopener">http://web3.tryblockchain.org/</a></p><h3 id="Truffle-文档"><a href="#Truffle-文档" class="headerlink" title="Truffle 文档"></a>Truffle 文档</h3><p><a href="http://truffle.tryblockchain.org/" target="_blank" rel="noopener">http://truffle.tryblockchain.org/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;以太坊智能合约实战&quot;&gt;&lt;a href=&quot;#以太坊智能合约实战&quot; class=&quot;headerlink&quot; title=&quot;以太坊智能合约实战&quot;&gt;&lt;/a&gt;以太坊智能合约实战&lt;/h1&gt;&lt;h2 id=&quot;启动Remix-IDE工具&quot;&gt;&lt;a href=&quot;#启动Remix-IDE工
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【1】区块链-以太坊搭建私有网络</title>
    <link href="http://blog.uiste.com/2018/20180511-1.html"/>
    <id>http://blog.uiste.com/2018/20180511-1.html</id>
    <published>2018-05-11T04:12:29.000Z</published>
    <updated>2019-04-02T04:29:04.291Z</updated>
    
    <content type="html"><![CDATA[<h1 id="以太坊搭建私有网络实战"><a href="#以太坊搭建私有网络实战" class="headerlink" title="以太坊搭建私有网络实战"></a>以太坊搭建私有网络实战</h1><h2 id="基本环境安装"><a href="#基本环境安装" class="headerlink" title="基本环境安装"></a>基本环境安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 安装nodejs</span><br><span class="line">2. brew tap ethereum/ethereum</span><br><span class="line">3. brew install ethereum</span><br><span class="line">4. Ethereum Wallet and Mist Beta 0.10.0</span><br><span class="line">https://github.com/ethereum/mist/releases/</span><br></pre></td></tr></table></figure><h2 id="配置创世区块文件"><a href="#配置创世区块文件" class="headerlink" title="配置创世区块文件"></a>配置创世区块文件</h2><ol><li>文件名：CustomGenesis.json<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;nonce&quot;: &quot;0x0000000000000042&quot;,     </span><br><span class="line">    &quot;timestamp&quot;: &quot;0x00&quot;,</span><br><span class="line">    &quot;parentHash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,</span><br><span class="line">    &quot;extraData&quot;: &quot;0x00&quot;,     </span><br><span class="line">    &quot;gasLimit&quot;: &quot;0x8000000&quot;,     </span><br><span class="line">    &quot;difficulty&quot;: &quot;0x400&quot;,</span><br><span class="line">    &quot;mixhash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,</span><br><span class="line">    &quot;coinbase&quot;: &quot;0x3333333333333333333333333333333333333333&quot;,     </span><br><span class="line">    &quot;alloc&quot;: &#123;</span><br><span class="line">     &#125;,</span><br><span class="line">     &quot;config&quot;: &#123;</span><br><span class="line">        &quot;chainId&quot;: 15,</span><br><span class="line">        &quot;homesteadBlock&quot;: 0,</span><br><span class="line">        &quot;eip155Block&quot;: 0,</span><br><span class="line">        &quot;eip158Block&quot;: 0</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><img src="//img.mukewang.com/5ac4846e000136c013360350.png" alt="图片描述"></p><h2 id="初始化创世区块"><a href="#初始化创世区块" class="headerlink" title="初始化创世区块"></a>初始化创世区块</h2><p><code>geth --identity &quot;mydev&quot; --rpc --rpccorsdomain &quot;*&quot; --datadir &quot;./Mychains/dev&quot; --rpcapi &quot;db,eth,net,web3&quot; init &quot;./CustomGenesis.json&quot;</code></p><p><img src="//img.mukewang.com/5ac4848a000100b316940468.png" alt="图片描述"></p><h2 id="开启私有网络"><a href="#开启私有网络" class="headerlink" title="开启私有网络"></a>开启私有网络</h2><ol><li>只开启rpc<br><code>geth --datadir &quot;./Mychains/dev&quot; --identity &quot;mydev&quot; --rpccorsdomain &quot;*&quot; --networkid 99 console</code><br><img src="//img.mukewang.com/5ac484b00001926c22840746.png" alt="图片描述"></li><li>开启rpc和http<br><code>geth --datadir &quot;./Mychains/dev&quot; --identity &quot;mydev&quot; --rpc --rpcapi &quot;db,eth,net,web3,personal,web3&quot; --nodiscover --rpccorsdomain &quot;*&quot; --networkid 100 console</code><br><img src="//img.mukewang.com/5ac484bb0001f09a15440802.png" alt="图片描述"></li></ol><h1 id="创建账户"><a href="#创建账户" class="headerlink" title="创建账户"></a>创建账户</h1><p><img src="//img.mukewang.com/5ac484d10001e0a816580202.png" alt="图片描述"></p><h2 id="IPC连接连接，并开启挖矿（新开一个客户端）"><a href="#IPC连接连接，并开启挖矿（新开一个客户端）" class="headerlink" title="IPC连接连接，并开启挖矿（新开一个客户端）"></a>IPC连接连接，并开启挖矿（新开一个客户端）</h2><p><code>geth attach /Users/uiste/www/blockchain/test-geth/Mychains/dev/geth.ipc</code></p><p><img src="//img.mukewang.com/5ac4851500013f7016480820.png" alt="图片描述"></p><blockquote><p>如果是Web应用的时候，就使用<a href="http://127.0.0.8545" target="_blank" rel="noopener">http://127.0.0.8545</a> 地址就是连接</p></blockquote><h2 id="开启mist浏览器"><a href="#开启mist浏览器" class="headerlink" title="开启mist浏览器"></a>开启mist浏览器</h2><p>Mac遇到启动mist失败</p><p><img src="//img.mukewang.com/5ac4852f000122ee09300898.png" alt="图片描述"><br>解决方案：</p><ol><li><p>通过命令行方式启动让Ethereum Wallet，添加参数让他和刚起的私有链同用一个ipc。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uiste@uiste:~/www/blockchain/test-geth/Mychains/dev$     cd /Applications/</span><br><span class="line">uiste@uiste:/Applications$     ./Ethereum\ Wallet.app/Contents/MacOS/Ethereum\ Wallet --rpc &quot;/Users/uiste/www/blockchain/test-geth/Mychains/dev/geth.ipc&quot;</span><br></pre></td></tr></table></figure></li><li><p>通过命令行方式启动Mist，添加参数让他和刚起的私有链同用一个ipc。<br><img src="//img.mukewang.com/5ac4855b0001651f14140316.png" alt="图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uiste@uiste:/Applications$      Mist.app/Contents/MacOS/Mist --rpc &quot;/Users/uiste/www/blockchain/test-geth/Mychains/dev/geth.ipc&quot;</span><br></pre></td></tr></table></figure></li></ol><p>启动Mist后的界面如下：</p><p><img src="//img.mukewang.com/5ac4856400013fe024441426.png" alt="图片描述"><br>停止挖矿，命令行查看账户余额<br><img src="//img.mukewang.com/5ac4857f0001cda615500390.png" alt="图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;以太坊搭建私有网络实战&quot;&gt;&lt;a href=&quot;#以太坊搭建私有网络实战&quot; class=&quot;headerlink&quot; title=&quot;以太坊搭建私有网络实战&quot;&gt;&lt;/a&gt;以太坊搭建私有网络实战&lt;/h1&gt;&lt;h2 id=&quot;基本环境安装&quot;&gt;&lt;a href=&quot;#基本环境安装&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2</title>
    <link href="http://blog.uiste.com/2018/20180402-2.html"/>
    <id>http://blog.uiste.com/2018/20180402-2.html</id>
    <published>2018-04-02T04:12:29.000Z</published>
    <updated>2019-04-02T04:19:04.374Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>NoSql</title>
    <link href="http://blog.uiste.com/2018/20180402-1.html"/>
    <id>http://blog.uiste.com/2018/20180402-1.html</id>
    <published>2018-04-02T01:43:44.000Z</published>
    <updated>2019-04-02T04:19:06.641Z</updated>
    
    <content type="html"><![CDATA[<h1 id="memcache"><a href="#memcache" class="headerlink" title="memcache"></a>memcache</h1><ul><li><p>Page为内存分配的最小单位。</p><blockquote><p>Memcached 的内存分配以page为单位，默认情况下一个page是1M，可以通过-I参数在启动时指定。如果需要申请内存 时，memcached会划分出一个新的page并分配给需要的slab区域。page一旦被分配在重启前不会被回收或者重新分配</p></blockquote></li><li><p>Slabs划分数据空间。</p><blockquote><p>Memcached 并不是将所有大小的数据都放在一起的，而是预先将数据空间划分为一系列slabs，每个slab只负责一定范围内的数据存储。每个slab只存储大于其上一个slab的size并小于或者等于自己最大size的数据。例如：slab 3只存储大小介于137 到 224 bytes的数据。如果一个数据大小为230byte将被分配到slab 4中。每个slab负责的空间其实是不等的，memcached默认情况下下一个slab的最大值为前一个的1.25倍，这个可以通过修 改-f参数来修改增长比例。</p></blockquote></li><li><p>Chunk才是存放缓存数据的单位。</p><blockquote><p>Chunk 是一系列固定的内存空间，这个大小就是管理它的slab的最大存放大小。例如：slab 1的所有chunk都是104byte，而slab 4的所有chunk都是280byte。chunk是memcached实际存放缓存数据的地方，因为chunk的大小固定为slab能够存放的最大值， 所以所有分配给当前slab的数据都可以被chunk存下。如果时间的数据大小小于chunk的大小，空余的空间将会被闲置，这个是为了防止内存碎片而设 计的。例如，chunk size是224byte，而存储的数据只有200byte，剩下的24byte将被闲置。 </p></blockquote></li><li><p>Slab的内存分配。</p><blockquote><p>Memcached在启动时通过-m指定最大使用内存，但是这个不会一启动就占用，是随着需要逐步分配给各slab的。<br>如果一个新的缓存数据要被存放，memcached首先选择一个合适的slab，然后查看该slab是否还有空闲的chunk，如果有则直接存放进去；如 果没有则要进行申请。slab申请内存时以page为单位，所以在放入第一个数据，无论大小为多少，都会有1M大小的page被分配给该slab。申请到 page后，slab会将这个page的内存按chunk的大小进行切分，这样就变成了一个chunk的数组，在从这个chunk数组中选择一个用于存储 数据。如下图，slab 1和slab 2都分配了一个page，并按各自的大小切分成chunk数组。 </p></blockquote></li><li><p>Memcached内存分配策略</p><blockquote><p>按slab需求分配page，各slab按需使用chunk存储。<br>Memcached分配出去的page不会被回收或者重新分配Memcached申请的内存不会被释放slab空闲的chunk不会借给任何其他slab使用，如果所有page都已经存满了。并且memcache已不能再分配新的内存空间。将根据LRU算法（最近最少使用）,清除某个item并将新项存储在该位置</p></blockquote></li><li><p>分布式解决方案</p></li></ul><ol><li><p>取模算法方式</p><blockquote><p>将key转换为32位的数字，并与memcached服务器的总数进行相除取得余数。而这个余数就是memcached服务器的节点node。有了这个node我们就可以确定memcached服务器，就可以发送命令给memcached执行了。 缺点是不方便扩展和机器宕机后不能自动调整集群<br><code>$node sprintf(&#39;%u&#39;, crc32($key)) % $total</code></p></blockquote></li><li><p>一致哈希算法方式</p><blockquote><p>通过虚拟节点的方式实现，可以使不可控的存储节点能够尽可能的均匀分布在圆环上，从而达到数据均匀缓存在各个主机里。其次增加与删除虚拟节点对于之前缓存的整体数据影响非常小。</p></blockquote></li></ol><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><p>高性能key-value 存储系统，它通常被称为数据结构服务器。因为值可以是：字符串、哈希、列表、集合、有序集合</p><ul><li><p>特点：单线程、快（每秒10万次SET操作）、拥有很多原子操作方法，保证数据一致性、将具有临时性和数据持久化</p></li><li><p>二进制安全、一个字符串类型的值最多能保存512M内容。</p></li><li><p>集合（set）</p><blockquote><p>集合是一个无需字符串集合。元素不能重复。一个集合最多可以包含2^32-1个元素。方便计算不同集合的交集、并集、差集。常用应用：关注列表、粉丝列表、共同关注或者粉丝等</p></blockquote></li><li><p>有序集合（zSet）</p><blockquote><p>每个有序集合成员都关联着一个评分，这个评分的用语把有序集合中的成员按最低分到最高分排列。（应用于各种有排序条件的列表：访问足迹最近访问的时间戳作为排序分）</p></blockquote></li><li><p>watch</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">"content-type:text/html;charset=utf-8"</span>);  </span><br><span class="line">$redis = <span class="keyword">new</span> redis();  </span><br><span class="line">$result = $redis-&gt;connect(<span class="string">'127.0.0.1'</span>, <span class="number">6379</span>);</span><br><span class="line">$watchkey = $redis-&gt;get(<span class="string">"watchkey"</span>);  </span><br><span class="line">$rob_total = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>($watchkey&lt;$rob_total)&#123;  </span><br><span class="line">    $redis-&gt;watch(<span class="string">"watchkey"</span>);  <span class="comment">// 监视某个key</span></span><br><span class="line">    $redis-&gt;multi();   <span class="comment">// 开启事物</span></span><br><span class="line">    $redis-&gt;hSet(<span class="string">"watchlist"</span>,<span class="string">"user_id_"</span>.mt_rand(<span class="number">1</span>, <span class="number">9999</span>),time());   <span class="comment">// 业务操作</span></span><br><span class="line">    $redis-&gt;incr(<span class="string">"watchkey"</span>);</span><br><span class="line">    $rob_result = $redis-&gt;exec(); <span class="comment">// 如果执行操作期间，被监视的KEY被其它客户端修改了，则exec失败  </span></span><br><span class="line">    <span class="keyword">if</span>($rob_result)&#123;  </span><br><span class="line">        $watchlist = $redis-&gt;hGetAll(<span class="string">"watchlist"</span>);  </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"抢购成功！&lt;br/&gt;"</span>;  </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"剩余数量："</span>.($rob_total-$watchkey<span class="number">-1</span>).<span class="string">"&lt;br/&gt;"</span>;  </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"用户列表：&lt;pre&gt;"</span>;  </span><br><span class="line">        var_dump($watchlist);  </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"手气不好，再抢购！"</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"已被抢购完!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数据持久化：RDB 和 AOF</p><blockquote><p>RDB：就是快照存储，是默认的持久化方式，按照一定的策略周期性的将数据保存到磁盘。对应产生的数据文件为dump.rdb,通过配置文件中的save参数来定义快照的周期.通过修改配置文件的dbfilename 来修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure></blockquote></li></ul><blockquote><p>AOF:修改配置appendonly yes 来开启，开启后写命令会依次记录到此文件。AOF 大！即使通过bgrewriteaof 命令移除冗余记录也大。恢复慢<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># appendfsync always每次命令都写，最安全，性能最差</span><br><span class="line">appendfsynceverysec每秒同步一次（默认）</span><br><span class="line"># appendfsyncno 不主动同步，由操作系统负责鞋服，约30秒一次</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="mongoDB"><a href="#mongoDB" class="headerlink" title="mongoDB"></a>mongoDB</h1><p>介于关系数据库和非关系型数据之间的文档数据库，支持的数据结构非常松散，类似json的bson格式，因此可以存储比较复杂的数据类型。支持对数据字段奖励索引</p><ul><li>模式自由，通过数据分片实现高伸缩性</li><li>处理地理信息</li><li>高可用，内置故障迁移</li><li>高性能低延时实时数据（查询QPS接近MySQL的两倍左右， 插入QPS接近MySQL的五倍左右）</li><li>局部索引，TTL索引，固定集合</li><li>不适合高度事务性系统，不适合需要复杂SQL处理的查询</li><li>与关系型数据库结构对比：文档≈行，集合≈表，数据库≈数据库</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;memcache&quot;&gt;&lt;a href=&quot;#memcache&quot; class=&quot;headerlink&quot; title=&quot;memcache&quot;&gt;&lt;/a&gt;memcache&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Page为内存分配的最小单位。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;M
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux 基础</title>
    <link href="http://blog.uiste.com/2018/20180401-2.html"/>
    <id>http://blog.uiste.com/2018/20180401-2.html</id>
    <published>2018-04-01T11:16:33.000Z</published>
    <updated>2019-04-02T04:19:10.562Z</updated>
    
    <content type="html"><![CDATA[<h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><ul><li><p>普通用户只能追加无法删除<br><code>chattr +a /var/log/access.log</code></p></li><li><p>r w x 4 2 1</p></li></ul><h2 id="磁盘文件统计"><a href="#磁盘文件统计" class="headerlink" title="磁盘文件统计"></a>磁盘文件统计</h2><ul><li>df 查看磁盘占用</li><li>du 统计文件占用</li><li>fdisk 分区管理</li><li>mount 磁盘挂载</li><li>umount 磁盘卸载</li><li>mkfs.ext4 磁盘格式化</li></ul><h2 id="查找find"><a href="#查找find" class="headerlink" title="查找find"></a>查找find</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">find . -mmin -60 修改时间为最近60分钟内的</span><br><span class="line">find . -mmin +5  修改时间为5分钟之前的</span><br><span class="line">find /tmp -atime -1 查找/tmp目录最近1天(24小时)内被访问过的文件</span><br><span class="line">find . -type f 查找本目录下的所有文件</span><br><span class="line">find . -type d 查找本目录下的所有目录</span><br><span class="line">find . -user root 查找本目录下所有root用户的文件</span><br><span class="line">find . -perm 600 查找本目录下所有权限为600的文件</span><br><span class="line">find . \( -name &quot;_*&quot; -or -user root \) -type f 查找本目录下（以_开头或root用户的） 文件</span><br><span class="line"></span><br><span class="line">逻辑运算符</span><br><span class="line">-not</span><br><span class="line">-or</span><br><span class="line">-and</span><br></pre></td></tr></table></figure><blockquote><p>分析文章访问日志文件，找出访问量最大的前10个IP地址，降序排序</p><ol><li>找出IP，每行一个 -f 表示需要取得哪个字段<br><code>cut -d &quot; &quot; -f1 /var/log/access.log</code></li><li>去重并计数<br><code>uniq -c</code></li><li>排序<br><code>sort -n -r</code></li><li>取前10行<br><code>head -10</code></li></ol></blockquote><p><code>$ cut -d &quot; &quot; -f1 /var/log/access.log | sort | uniq -c | sort -n -r | head -10</code></p><p>linux 中有三个系统文件描述符：0.标准输入，1.标准输出，2.标准错误输出</p><h2 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h2><ul><li><p>ps 命令，显示当前进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ps -ef 显示带启动命令行的进程信息</span><br><span class="line">ps -u root 显示某用户的进程</span><br><span class="line">ps -A 显示全部进程</span><br><span class="line">ps -ejH 显示进程树</span><br></pre></td></tr></table></figure></li><li><p>kill 命令：终止进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kill -s PID</span><br><span class="line">-s 指定信号</span><br><span class="line">-l 所有信号标识列表</span><br><span class="line">kill -9 PID  强制结束</span><br><span class="line">killall 进程名称</span><br></pre></td></tr></table></figure></li><li><p>fg 命令 将后台任务调到前台</p><blockquote><p>命令后加 <code>&amp;</code> 或者 <code>ctrl + z</code> 可将任务转到后台执行<br>后台执行中的任务，可以通过 <code>fg &amp;任务序号</code> 调到前台执行<br>jobs -l 查看后台任务<br><code>fg %1 恢复后台进程中的1工作号到前台执行，不写1表示恢复最后一个工作号（+）到前台执行，也可以不写%，fg 1</code></p></blockquote></li></ul><ul><li>开放端口：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT 4 -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT</span><br><span class="line">service iptables save #保存iptables规则</span><br></pre></td></tr></table></figure></li></ul><h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><ul><li><p>变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">区分大小写</span><br><span class="line">等号两边无空格</span><br><span class="line">所有变量都是字符串</span><br></pre></td></tr></table></figure></li><li><p>流程控制</p></li><li>命令列表</li><li>函数</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;权限&quot;&gt;&lt;a href=&quot;#权限&quot; class=&quot;headerlink&quot; title=&quot;权限&quot;&gt;&lt;/a&gt;权限&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;普通用户只能追加无法删除&lt;br&gt;&lt;code&gt;chattr +a /var/log/access.log&lt;/code&gt;&lt;/p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PHP细节-03</title>
    <link href="http://blog.uiste.com/2018/20180401-1.html"/>
    <id>http://blog.uiste.com/2018/20180401-1.html</id>
    <published>2018-04-01T00:55:26.000Z</published>
    <updated>2019-04-02T04:19:13.414Z</updated>
    
    <content type="html"><![CDATA[<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><blockquote><p>时间复杂度的算法具体步骤是：<br>⑴ 找出算法中的基本语句；<br>算法中执行次数最多的那条语句就是基本语句，通常是最内层循环的循环体。<br>⑵ 计算基本语句的执行次数的数量级；<br>只需计算基本语句执行次数的数量级，这就意味着只要保证基本语句执行次数的函数中的最高次幂正确即可，可以忽略所有低次幂和最高次幂的系数。这样能够简化算法分析，并且使注意力集中在最重要的一点上：增长率。<br>⑶ 用大Ο记号表示算法的时间性能。<br>将基本语句执行次数的数量级放入大Ο记号中。<br>如果算法中包含嵌套的循环，则基本语句通常是最内层的循环体，如果算法中包含并列的循环，则将并列循环的时间复杂度相加。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for (i=1; i&lt;=n; i++)  </span><br><span class="line">       x++;  </span><br><span class="line">for (i=1; i&lt;=n; i++)  </span><br><span class="line">    　for (j=1; j&lt;=n; j++)  </span><br><span class="line">          x++;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>第一个for循环的时间复杂度为Ο(n)，第二个for循环的时间复杂度为Ο(n2)，则整个算法的时间复杂度为Ο(n+n2)=Ο(n2)。<br>Ο(1)表示基本语句的执行次数是一个常数，一般来说，只要算法中不存在循环语句，其时间复杂度就是Ο(1)。其中Ο(log2n)、Ο(n)、 Ο(nlog2n)、Ο(n2)和Ο(n3)称为多项式时间，而Ο(2n)和Ο(n!)称为指数时间。计算机科学家普遍认为前者（即多项式时间复杂度的算法）是有效算法，把这类问题称为P（Polynomial,多项式）类问题，而把后者（即指数时间复杂度的算法）称为NP（Non-Deterministic Polynomial, 非确定多项式）问题。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;时间复杂度&quot;&gt;&lt;a href=&quot;#时间复杂度&quot; class=&quot;headerlink&quot; title=&quot;时间复杂度&quot;&gt;&lt;/a&gt;时间复杂度&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;时间复杂度的算法具体步骤是：&lt;br&gt;⑴ 找出算法中的基本语句；&lt;br&gt;算法中执行次数最多的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PHP细节-02</title>
    <link href="http://blog.uiste.com/2018/20180331-2.html"/>
    <id>http://blog.uiste.com/2018/20180331-2.html</id>
    <published>2018-03-31T14:44:26.000Z</published>
    <updated>2019-04-02T04:19:15.094Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><ul><li>二进制文件读写 pack() unpack()</li><li>系统函数判断图像类型：exif_imagetype()</li><li><p>文件指针</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fseek() 在文件指针中定位</span><br><span class="line">ftell() 返回文件指针读写的位置</span><br><span class="line">rewind() 倒回文件指针的位置</span><br><span class="line">feof() 测试文件指针是否到了文件结束的位置</span><br></pre></td></tr></table></figure></li><li><p>超大文件上传</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">swfUpload、uploadify 等flash组件</span><br><span class="line">XMLHTTPRequest 大文件断点续传+分段上传 ajax2.0</span><br></pre></td></tr></table></figure></li></ul><h1 id="PHP运行原理"><a href="#PHP运行原理" class="headerlink" title="PHP运行原理"></a>PHP运行原理</h1><blockquote><p>UA -&gt; apache -&gt; SAPI -&gt; zend engine -&gt; php script</p></blockquote><h1 id="PHP运行模式"><a href="#PHP运行模式" class="headerlink" title="PHP运行模式"></a>PHP运行模式</h1><ul><li><p>CLI模式 命令行接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">定时任务</span><br><span class="line">shell脚本中使用</span><br><span class="line">桌面应用程序</span><br><span class="line">PHP server 服务</span><br></pre></td></tr></table></figure></li><li><p>CGI 通用网关接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">就像桥梁一样，把网页和web服务器中的执行程序连接起来，它把http服务器接收的指令传递给执行程序，再把执行程序的结果返回http服务器。CGI跨平台性及佳，几乎可以在任何操作系统实现</span><br><span class="line"></span><br><span class="line">提供http服务</span><br><span class="line">性能比较差，一个请求fork一个进程</span><br></pre></td></tr></table></figure></li><li><p>FastCGI 快速通用网关接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">也是交互程序与web服务器通信协议。致力于介绍服务器与程序之前互动的开销</span><br><span class="line">web服务器启动时，载入FastCGI进程管理器 对于PHP来讲就是php-fpm</span><br><span class="line">FastCGI 会启动多个CGI进程等待web服务器的连接</span><br><span class="line">收到请求时由FastCGI子进程处理。子进程关闭连接时，请求处理完成。子进程接着等待并处理FastCGI进程管理器的下一个连接</span><br><span class="line"></span><br><span class="line">提供http服务</span><br><span class="line">支持大并发</span><br><span class="line">多进程消耗较多内存</span><br></pre></td></tr></table></figure></li><li><p>模块模式 apache 和 ISS</p></li></ul><h1 id="进程、线程、协程"><a href="#进程、线程、协程" class="headerlink" title="进程、线程、协程"></a>进程、线程、协程</h1><ul><li>单进程：单个CPU一次只能运行一个任务</li><li>一个进程可以包括多个线程（防止多个线程同时读写某一块区域加锁机制）</li><li>协程避免了无意义的调度，由此提高了性能。但因此要程序员自己承担调度的责任，同时也失去了标准线程使用多CPU的能力</li></ul><blockquote><p>多进程形式，允许多个任务同时运行<br>多线程形式，允许单个任务分成不同部分运行</p></blockquote><ul><li>ts Thread safe 线程安全，执行时会进程线程安全检查，防止有新要求就启动新线程的执行方式而耗尽系统资源</li><li>nts Non Thread Safe 非线程安全，在执行时不进行线程安全检查</li></ul><blockquote><p>由于ISAPI是线程执行的，所以选择PHP版本时要选择TS版本的。其它选择NTS版本就行了。</p></blockquote><ul><li><p>Apache 的 prefork 模块</p><blockquote><p>prefork 采用预派生子进程模式，用单独的子进程来处理不同的请求，进程之间彼此独立。httpd-mpm.conf 配置包括：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">StartServers 5 #  初始化进程数量</span><br><span class="line">MinSpareServers 5 # 空闲进程总数最小值</span><br><span class="line">MaxApareServers 10 # 空闲进程总数最大值</span><br><span class="line">MaxClients 150 # 最大客户端连接数量限制</span><br><span class="line">MaxRequestsPerChild 0 # 子进程减能处理的请求数量</span><br></pre></td></tr></table></figure></blockquote></li><li><p>Apache 的 worker 模块</p><blockquote><p>worker 全新的支持多线程和多进程混合模型的MPM，由于使用线程来处理，所以可以处理相对海量的数据请求。而系统资源的开销要小于基于进程的服务器</p></blockquote></li><li><p>Apache 的 event 模式</p></li></ul><p>为什么大访问量下NGINX性能更高？</p><blockquote><p>Apache 所采用的select 网络 I/O 模型非常低效<br>Nginx 使用了最新的epoll 和 kqueue(freebsd) 网络 I/O 模型<br>PHP是 Apache 的一个扩展模块，所以Apache 进程 干的事情也比较多，执行PHP、输出HTML 都得干，占用的资源也多（CPU，内存）</p></blockquote><h1 id="PHP运行机制与原理"><a href="#PHP运行机制与原理" class="headerlink" title="PHP运行机制与原理"></a>PHP运行机制与原理</h1><ul><li><p>PHP 底层原理</p><blockquote><p>PHP通过 SAPI 和 Apache相连<br>PHP总共有三个模块：内核、Zend引擎、以及扩展层<br>PHP内核用来处理请求、文件流、错误处理等相关操作<br>Zend引擎（ZE）用以将源文件转换成机器语言，然后在虚拟机上运行它；<br>扩展层是一株函数、类库和流，PHP使用它们来执行一些特定的操作，如：MySQL扩展来连接MySQL数据库<br>ZE引擎执行程序是可能需要连接若干扩展，这是ZE将控制权交给扩展，等待处理完任务和再返还<br>最后ZE将程序运行结果反回给PHP内核，它再将结果传送给SAPI传给Apache</p></blockquote></li><li><p>PHP运行机制</p><blockquote><ol><li>扫描</li></ol></blockquote></li></ul><ol start="2"><li>解析</li><li>编译</li><li>执行</li><li>输出</li></ol><h1 id="PHP垃圾回收机制"><a href="#PHP垃圾回收机制" class="headerlink" title="PHP垃圾回收机制"></a>PHP垃圾回收机制</h1><p>没有引用的内存变量就垃圾，PHP开启了很多内存空间，如果不销毁内存会一点点的被吃掉，最终导致内存溢出。</p><ol><li>找到所有已定义的变量：get_defined_vars</li><li>refcount_gc 是否为0 就知道是不是垃圾 无引用的变量 (清除为0的5.2版本以前   5.3以后 采用了引用计数系统中的同步周期回收算法来清除)</li><li>当我们存储的疑似垃圾区域满了的时候，就会被执行清除垃圾的操作。前提是开启了 php.ini 中的 zend.enable_gc 配置 也可以调用 gc_enable() 和 gc_disable() 打开和关闭垃圾回收机制  也可以通过 gc_collect_cycles() 强制执行周期回收 </li></ol><h1 id="PHP常用选项"><a href="#PHP常用选项" class="headerlink" title="PHP常用选项"></a>PHP常用选项</h1><ul><li>display_errors 是否显示错误信息 辅助开发使用，不要在生产环境使用</li><li>error_reporting 设置错误报告的级别</li><li>variables_order 设置EGPCS超全局变量的解析顺序</li><li>request_order 确定 <code>$_GET</code> 和 <code>$_POST</code> 等超全局变量的顺序，后面的会把前面的数据重写覆盖   “GP”</li><li>disable_classes 、 disable_functions 禁用某些类和某些函数</li></ul><h1 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /index.html HTTP/1.1</span><br><span class="line">HOST: www.example.com</span><br><span class="line">Range: bytcs-500-999</span><br><span class="line">Connection:keep-alive</span><br></pre></td></tr></table></figure><ul><li>HTTP 工作流程<br>访问一个网址时，发生了什么？<blockquote><ol><li>通过DNS解析域名对应的服务器IP地址</li><li>建立TCP连接</li><li>向服务器发送请求</li><li>返回内容</li></ol></blockquote></li></ul><h1 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h1><ul><li>闭包<blockquote><p>闭包使用不当可能会导致内存泄露。<br>闭包是指有权访问另一个函数作用域中的变量的函数<br>一个外部函数执行完毕后，由于其内部函数被外部引用，导致其作用域中的变量存活，而不能在函数执行完毕后被销毁，包含这些变量的那个对象就被称为闭包</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文件&quot;&gt;&lt;a href=&quot;#文件&quot; class=&quot;headerlink&quot; title=&quot;文件&quot;&gt;&lt;/a&gt;文件&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;二进制文件读写 pack() unpack()&lt;/li&gt;
&lt;li&gt;系统函数判断图像类型：exif_imagetype()&lt;/li
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PHP细节-01</title>
    <link href="http://blog.uiste.com/2018/20180331-1.html"/>
    <id>http://blog.uiste.com/2018/20180331-1.html</id>
    <published>2018-03-31T03:56:35.000Z</published>
    <updated>2019-04-02T04:19:16.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><ul><li>双引号或者heredoc其中的变量 以及 <code>\</code> 开始的符合8进制16进制和特殊符号</li><li>字符串底层是C语言的结构体，所以可以用<code>[]</code> 或 <code>{}</code> 来访问某个字符</li><li>字符串最大长度可以达到2G内存</li><li>C语言字符串<code>\0</code>代表字符串结束，但PHP结构体是有个长度字段，可以让二进制字符串安全</li><li>用超出字符串长度的下标写入将会拉长字符串并以空格填充</li><li>UTF-8 编码<blockquote><p>16进制 Unicode 编码范围 0800 - FFFF<br>2进制 1110xxxx 10xxxxxx 10xxxxxx<br>为了通用优先选择UTF-8 3个字节,为了节省空间用GBK 2个字节</p></blockquote></li></ul><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><ul><li>key 可以是integer 或者 string (包含合法整形的字符串，浮点数和布尔值都会被转化为整形)</li><li>unset() 后，不会重建索引</li><li><p>遍历中的引用分析</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $key =&gt; &amp;$value) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> $value; <span class="comment">// 3 是 &amp;$arr[2] = 3;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump($arr); <span class="comment">// [1,2,2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环1 $value = &amp;$arr[2] = $arr[0] = 1;</span></span><br><span class="line"><span class="comment">// 循环2 $value = &amp;$arr[2] = $arr[1] = 2;</span></span><br><span class="line"><span class="comment">// 循环3 $value = &amp;$arr[2] = $arr[2] = 2;</span></span><br></pre></td></tr></table></figure></li><li><p>位运算：<code>$a&amp;1 == 0 偶数 反之奇数</code></p></li></ul><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>组成 = 元字符 + 普通字符<br>常见元字符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">^ 匹配字符串的开始</span><br><span class="line">$       匹配字符串的结束</span><br><span class="line">.匹配除换行以外的任意字符</span><br><span class="line">\w 匹配字母或者数字或者下划线</span><br><span class="line">\W 不匹配字母数字下划线</span><br><span class="line">\s 匹配任意的空字符 相当于[\f\r\n\t\v]</span><br><span class="line">\d 匹配任意的数字</span><br><span class="line">\b 匹配单词的开始或者结束</span><br><span class="line">\xxx查找以八进制xxx规定的字符</span><br><span class="line">\xdd查找以十六进制dd对顶的字符</span><br><span class="line">\uxxx 查找以十六进制 xxxx 规定的 Unicode 字符</span><br><span class="line">[abcd]  匹配任意一个字符</span><br><span class="line">[a-d]   匹配任意一个字符</span><br><span class="line">[^abcd] 不匹配任意一个字符</span><br><span class="line">[\u4e00-\u9fa5] 匹配任意单个汉字</span><br></pre></td></tr></table></figure></p><p>常见限定符 （限定的是前面一个单元）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">|或关系</span><br><span class="line">*匹配0到多个，相当于&#123;0,&#125;</span><br><span class="line">?匹配0到1个，相当于&#123;0,1&#125;</span><br><span class="line">+匹配至少1个字符，相当于&#123;1,&#125;</span><br><span class="line">&#123;n&#125;匹配n个字符</span><br><span class="line">&#123;n,&#125;    匹配至少n个字符</span><br><span class="line">&#123;n,m&#125;匹配n到m个字符</span><br></pre></td></tr></table></figure></p><p>环视<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(?=exp) 位置后面能匹配exp</span><br><span class="line">(?!=exp)位置后面不能匹配exp</span><br><span class="line">(?&lt;=exp)位置前面能匹配exp</span><br><span class="line">(?&lt;!exp)位置前面不能匹配exp</span><br></pre></td></tr></table></figure></p><p>贪婪与懒惰</p><blockquote><p>通常的行为是尽可能匹配多的字符（回溯）<br>只要在它后面加一个问号，匹配成功的前提是使用最少的重复</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$string = &apos;aaabaab&apos;;</span><br><span class="line">$pattern1 = &apos;/a.&#123;1,10&#125;b/&apos;;</span><br><span class="line">$pattern2 = &apos;/a.&#123;1,10&#125;?b/&apos;;</span><br><span class="line">preg_match_all($pattern1,$string,$matchs1);</span><br><span class="line">preg_match_all($pattern2,$string,$matchs2);</span><br><span class="line"></span><br><span class="line">var_dump($matchs1);</span><br><span class="line">var_dump($matchs2);</span><br><span class="line"></span><br><span class="line">array(1) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  array(1) &#123;</span><br><span class="line">    [0]=&gt;</span><br><span class="line">    string(7) &quot;aaabaab&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">array(1) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  array(2) &#123;</span><br><span class="line">    [0]=&gt;</span><br><span class="line">    string(4) &quot;aaab&quot;</span><br><span class="line">    [1]=&gt;</span><br><span class="line">    string(3) &quot;aab&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回溯</p><blockquote><p>贪婪模式的回溯是影响性能</p></blockquote><h1 id="习惯"><a href="#习惯" class="headerlink" title="习惯"></a>习惯</h1><ul><li>优先使用单引号</li><li><p>内置函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 邮件过滤：$email = filter_var(&apos;hi@uiste.com&apos;, FILTER_VALIDATE_EMAIL);</span><br><span class="line">2. 获取文件扩展名：pathinfo($filename, PATHINFO_EXTENSION);</span><br></pre></td></tr></table></figure></li><li><p>strtr 与 str_replace 函数前者优先级更高</p></li><li><p>yield 实现协程 生成器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">function createRange($number)&#123;</span><br><span class="line">    for($i=0;$i&lt;$number;$i++)&#123;</span><br><span class="line">        yield time();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$result = createRange(10); // 这里调用上面我们创建的函数</span><br><span class="line">foreach($result as $value)&#123;</span><br><span class="line">    sleep(1);</span><br><span class="line">    echo $value , PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">1554027375</span><br><span class="line">1554027376</span><br><span class="line">1554027377</span><br><span class="line">1554027378</span><br><span class="line">1554027379</span><br><span class="line">1554027380</span><br><span class="line">1554027381</span><br><span class="line">1554027382</span><br><span class="line">1554027383</span><br><span class="line">1554027384</span><br><span class="line">[Finished in 10.2s]</span><br><span class="line"></span><br><span class="line">我们来还原一下代码执行过程。</span><br><span class="line"></span><br><span class="line">首先调用 createRange 函数，传入参数10，但是 for 值执行了一次然后停止了，并且告诉 foreach 第一次循环可以用的值。</span><br><span class="line"> foreach 开始对 $result 循环，进来首先 sleep(1) ，然后开始使用 for 给的一个值执行输出。</span><br><span class="line"> foreach 准备第二次循环，开始第二次循环之前，它向 for 循环又请求了一次。</span><br><span class="line"> for 循环于是又执行了一次，将生成的时间戳告诉 foreach .</span><br><span class="line"> foreach 拿到第二个值，并且输出。由于 foreach 中 sleep(1) ，所以， for 循环延迟了1秒生成当前时间</span><br><span class="line">所以，整个代码执行中，始终只有一个记录值参与循环，内存中也只有一条信息。</span><br><span class="line"></span><br><span class="line">无论开始传入的 $number 有多大，由于并不会立即生成所有结果集，所以内存始终是一条循环的值。</span><br><span class="line"></span><br><span class="line">读取超大文件</span><br><span class="line">PHP开发很多时候都要读取大文件，比如csv文件、text文件，或者一些日志文件。这些文件如果很大，比如5个G。这时，直接一次性把所有的内容读取到内存中计算不太现实。</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">header(&quot;content-type:text/html;charset=utf-8&quot;);</span><br><span class="line">function readTxt()</span><br><span class="line">&#123;</span><br><span class="line">    # code...</span><br><span class="line">    $handle = fopen(&quot;./test.txt&quot;, &apos;rb&apos;);</span><br><span class="line"></span><br><span class="line">    while (feof($handle)===false) &#123;</span><br><span class="line">        # code...</span><br><span class="line">        yield fgets($handle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fclose($handle);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foreach (readTxt() as $key =&gt; $value) &#123;</span><br><span class="line">    # code...</span><br><span class="line">    echo $value , PHP_EOL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>语法支持带来更高效率 用 ** 更快</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo 2**3 , PHP_EOL;</span><br><span class="line">echo pow(2,3) , PHP_EOL;</span><br></pre></td></tr></table></figure></li><li><p>用 … 定义变成参数</p></li><li>&lt;=&gt; 大于为1，等于为0，小于为-1</li><li>if 使用技巧给定初始值，比增加else效率更高</li><li>if 使用技巧 三元运算符替换</li><li>去掉多此一举的写法 直接return 出去，尽量精简代码</li><li>根据二维数组中的某个键值排序：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 根据uv_price排序</span><br><span class="line">array_multisort(array_column($productData, &apos;uv_price&apos;), SORT_DESC, $productData);</span><br></pre></td></tr></table></figure></li></ul><h2 id="php坑人题"><a href="#php坑人题" class="headerlink" title="php坑人题"></a>php坑人题</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="number">3</span>;</span><br><span class="line">$b = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">if</span>($a = <span class="number">5</span> || $b = <span class="number">7</span>)&#123;</span><br><span class="line">$a++;</span><br><span class="line">++$b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $a . <span class="string">'-'</span> . $b;  <span class="comment">//1-7</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$count = <span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCount</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> $count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> $count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> ++$count . PHP_EOL; <span class="comment">//6</span></span><br><span class="line"><span class="keyword">echo</span> getCount() . PHP_EOL; <span class="comment">//0</span></span><br><span class="line"><span class="keyword">echo</span> getCount() . PHP_EOL; <span class="comment">//1</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> count(<span class="string">'1234'</span>) + count(<span class="keyword">null</span>) + count(<span class="keyword">false</span>) . PHP_EOL; <span class="comment">// 1+0+1 = 2</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="number">0.2</span>+<span class="number">0.7</span>;</span><br><span class="line">$b = <span class="number">0.9</span>;</span><br><span class="line"><span class="keyword">echo</span> $a . PHP_EOL; <span class="comment">// 0.9</span></span><br><span class="line"><span class="keyword">echo</span> $b . PHP_EOL; <span class="comment">// 0.9</span></span><br><span class="line">var_dump($a == $b); <span class="comment">// bool(false)</span></span><br><span class="line"><span class="comment">// php在比较浮点数大小时，需要把浮点数转为字符串进行比较。</span></span><br><span class="line"></span><br><span class="line">要使用 BC 这个函数库，要在编译 PHP 程序时加入 --enable-bcmath 的选项。</span><br><span class="line"></span><br><span class="line">bcadd: 将二个高精确度数字相加。</span><br><span class="line">bccomp: 比较二个高精确度数字。</span><br><span class="line">bcdiv: 将二个高精确度数字相除。</span><br><span class="line">bcmod: 取得高精确度数字的余数。</span><br><span class="line">bcmul: 将二个高精确度数字相乘。</span><br><span class="line">bcpow: 求一高精确度数字次方值。</span><br><span class="line">bcscale: 配置程序中所有 BC 函数库的默认小数点位数。</span><br><span class="line">bcsqrt: 求一高精确度数字的平方根。</span><br><span class="line">bcsub: 将二个高精确度数字相减。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;双引号或者heredoc其中的变量 以及 &lt;code&gt;\&lt;/code&gt; 开始的符合8进制16进制和特殊符号&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>brew更换国内镜像源</title>
    <link href="http://blog.uiste.com/2018/20180329-5.html"/>
    <id>http://blog.uiste.com/2018/20180329-5.html</id>
    <published>2018-03-29T11:21:44.000Z</published>
    <updated>2019-04-02T04:21:49.412Z</updated>
    
    <content type="html"><![CDATA[<p>homebrew主要分两部分：git repo（位于GitHub）和二进制bottle（位于binary），这两者在国内访问不太顺畅。其实可以替换成国内的镜像，git repo国内镜像就比较多了，可以自行查找，如：中科大镜像…</p><h2 id="替换homebrew默认源"><a href="#替换homebrew默认源" class="headerlink" title="替换homebrew默认源"></a>替换homebrew默认源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">替换brew.git:</span><br><span class="line">cd &quot;$(brew --repo)&quot;</span><br><span class="line">git remote set-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class="line"></span><br><span class="line">替换homebrew-core.git:</span><br><span class="line">cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;</span><br><span class="line">git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br></pre></td></tr></table></figure><p>如果替换源之后brew update 没反应<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &quot;$(brew --repo)&quot;</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure></p><h2 id="切回官方源"><a href="#切回官方源" class="headerlink" title="切回官方源"></a>切回官方源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">重置brew.git:</span><br><span class="line">cd &quot;$(brew --repo)&quot;</span><br><span class="line">git remote set-url origin https://github.com/Homebrew/brew.git</span><br><span class="line"></span><br><span class="line">重置homebrew-core.git:</span><br><span class="line">cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;</span><br><span class="line">git remote set-url origin https://github.com/Homebrew/homebrew-core.git</span><br></pre></td></tr></table></figure><p>注释掉bash配置文件里的有关Homebrew Bottles即可恢复官方源。 重启bash或让bash重读配置文件。<br>Homebrew Bottles是Homebrew提供的二进制代码包，目前镜像站收录了以下仓库：</p><p>对于bash用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&apos; &gt;&gt; ~/.bash_profile</span><br><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure></p><p>对于zsh用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&apos; &gt;&gt; ~/.zshrc</span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;homebrew主要分两部分：git repo（位于GitHub）和二进制bottle（位于binary），这两者在国内访问不太顺畅。其实可以替换成国内的镜像，git repo国内镜像就比较多了，可以自行查找，如：中科大镜像…&lt;/p&gt;
&lt;h2 id=&quot;替换homebrew默
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>网络协议</title>
    <link href="http://blog.uiste.com/2018/20180329-4.html"/>
    <id>http://blog.uiste.com/2018/20180329-4.html</id>
    <published>2018-03-29T04:32:20.000Z</published>
    <updated>2019-04-02T04:19:18.748Z</updated>
    
    <content type="html"><![CDATA[<p>网络协议为计算机网络中进行数据交换而建立的规则,标准或约定的集合,所有的计算机/手机等网络设备通信都得遵循网络协议.<br>网络协议根据通信的步骤,层级划分为7个层级,从上往下为:</p><ul><li>应用层</li><li>表示层</li><li>会话层</li><li>传输层</li><li>网络层</li><li>数据链路层</li><li>物理层</li></ul><p><img src="https://www.easyswoole.com/Manual/3.x/Cn/_book/noobCourse/NetworkrPotocol/networkPotocol.png" alt="TCP/IP模型与OSI模型对比"></p><blockquote><p>内容来源： <img src="https://www.easyswoole.com" alt="easyswoole"></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;网络协议为计算机网络中进行数据交换而建立的规则,标准或约定的集合,所有的计算机/手机等网络设备通信都得遵循网络协议.&lt;br&gt;网络协议根据通信的步骤,层级划分为7个层级,从上往下为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用层&lt;/li&gt;
&lt;li&gt;表示层&lt;/li&gt;
&lt;li&gt;会话层&lt;/li
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>立个flag</title>
    <link href="http://blog.uiste.com/2018/20180329-3.html"/>
    <id>http://blog.uiste.com/2018/20180329-3.html</id>
    <published>2018-03-29T03:25:31.000Z</published>
    <updated>2019-04-02T04:19:21.587Z</updated>
    
    <content type="html"><![CDATA[<p>好久都没有在这里写笔记了。记录的地方比较零散，有道云、OneNote、web博客(域名迁移备案失效，服务器也关闭了)。有时候突然想要查找一些内容都忘记放在哪里了。也就只能是一个记录过程却少了一些查找的过程。立个flag以后继续记录在这里了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;好久都没有在这里写笔记了。记录的地方比较零散，有道云、OneNote、web博客(域名迁移备案失效，服务器也关闭了)。有时候突然想要查找一些内容都忘记放在哪里了。也就只能是一个记录过程却少了一些查找的过程。立个flag以后继续记录在这里了。&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>nginx 配置</title>
    <link href="http://blog.uiste.com/2018/20180329-2.html"/>
    <id>http://blog.uiste.com/2018/20180329-2.html</id>
    <published>2018-03-29T02:32:49.000Z</published>
    <updated>2019-04-02T04:19:22.884Z</updated>
    
    <content type="html"><![CDATA[<h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">upstream http_server &#123;</span><br><span class="line">server x.x.x.x weight=10; # 权重</span><br><span class="line">server x.x.x.x weight=20; # 权重</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream backend &#123;</span><br><span class="line">    server 127.0.0.1:8080;</span><br><span class="line">    server 127.0.0.1:9090;</span><br><span class="line">    ip_hash; # ip_hash</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>nginx 转发比较消耗CPU</p></blockquote><h1 id="nginx-转发"><a href="#nginx-转发" class="headerlink" title="nginx 转发"></a>nginx 转发</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen 8888;</span><br><span class="line">server name localhost;</span><br><span class="line"></span><br><span class="line">#access_log logs/host.access.log main;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">root /home/...;</span><br><span class="line">index index.html index.htm</span><br><span class="line"></span><br><span class="line">if (!-e $request_filename) &#123; # 找不到请求地址</span><br><span class="line">proxy_pass http://127.0.0.1:8811; # 单机转发 外网IP</span><br><span class="line">#proxy_pass http://http_server; # 负载均衡名称</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="nginx-的-upstream权重配置"><a href="#nginx-的-upstream权重配置" class="headerlink" title="nginx 的 upstream权重配置"></a>nginx 的 upstream权重配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">权重配置：</span><br><span class="line"></span><br><span class="line">weight和请求数量成正比，主要用于上游服务器配置不均衡的情况。下面的配置中，192.168.10.2机器的请求量是192.168.10.1机器请求量的2倍。</span><br><span class="line"></span><br><span class="line">upstream nodes &#123;</span><br><span class="line"></span><br><span class="line">server 192.168.10.1:8668 weight=5;</span><br><span class="line"></span><br><span class="line">server 192.168.10.2:8668 weight=10;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ip_hash配置：</span><br><span class="line"></span><br><span class="line">每一个请求按照请求的ip的hash结果分配。这样每一个请求固定落在一个上游服务器，能够解决ip会话在同一台服务器的问题。</span><br><span class="line"></span><br><span class="line">upstream nodes &#123;</span><br><span class="line"></span><br><span class="line">ip_hash;</span><br><span class="line"></span><br><span class="line">server 192.168.10.1:8668;</span><br><span class="line"></span><br><span class="line">server 192.168.10.2:8668;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fair配置：</span><br><span class="line"></span><br><span class="line">按上游服务器的响应时间来分配请求。响应时间短的优先分配。</span><br><span class="line"></span><br><span class="line">upstream nodes &#123;</span><br><span class="line"></span><br><span class="line">server 192.168.10.1:8668;</span><br><span class="line"></span><br><span class="line">server 192.168.10.2:8668;</span><br><span class="line"></span><br><span class="line">fair;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url_hash配置：</span><br><span class="line"></span><br><span class="line">按照访问的url的hash结果来分配请求，使每一个url定向到同一个上游服务器。注意：在upstream中加入hash语句。server语句中不能写入weight等其他的參数，hash_method是使用的hash算法。</span><br><span class="line"></span><br><span class="line">upstream nodes &#123;</span><br><span class="line"></span><br><span class="line">server 192.168.10.1:8668;</span><br><span class="line"></span><br><span class="line">server 192.168.10.2:8668;</span><br><span class="line"></span><br><span class="line">hash $request_uri;</span><br><span class="line"></span><br><span class="line">hash_method crc32;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">下面再说下在upstream中常用的配置项：</span><br><span class="line"></span><br><span class="line">down：表示当前的server不參与负载均衡。</span><br><span class="line"></span><br><span class="line">weight：默觉得1，weight越大，负载的权重就越大。</span><br><span class="line"></span><br><span class="line">max_fails ：请求失败的次数默觉得1。</span><br><span class="line"></span><br><span class="line">fail_timeout : max_fails次失败后，暂停请求此台服务器的时间。</span><br><span class="line"></span><br><span class="line">backup： 其他全部的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</span><br><span class="line"></span><br><span class="line">upstream nodes &#123;</span><br><span class="line"></span><br><span class="line">ip_hash;</span><br><span class="line"></span><br><span class="line">server 192.168.10.1:8668 down;</span><br><span class="line"></span><br><span class="line">server 192.168.10.2:8668 weight=2;</span><br><span class="line"></span><br><span class="line">server 192.168.10.3:8668;</span><br><span class="line"></span><br><span class="line">server 192.168.10.4:8668 backup;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Linux命令"><a href="#Linux命令" class="headerlink" title="Linux命令"></a>Linux命令</h1><h2 id="机器名"><a href="#机器名" class="headerlink" title="机器名"></a>机器名</h2><p><code>hostname -i</code></p><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p><code>netstat -anp | grep 8888</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;负载均衡&quot;&gt;&lt;a href=&quot;#负载均衡&quot; class=&quot;headerlink&quot; title=&quot;负载均衡&quot;&gt;&lt;/a&gt;负载均衡&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sheel 脚本</title>
    <link href="http://blog.uiste.com/2018/20180329-1.html"/>
    <id>http://blog.uiste.com/2018/20180329-1.html</id>
    <published>2018-03-29T01:53:51.000Z</published>
    <updated>2019-04-02T04:19:23.881Z</updated>
    
    <content type="html"><![CDATA[<h1 id="reload-sh-平滑重启"><a href="#reload-sh-平滑重启" class="headerlink" title="reload.sh  平滑重启"></a>reload.sh  平滑重启</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;loading...&quot;</span><br><span class="line">pid = `pidof live_master`</span><br><span class="line">echo $pid</span><br><span class="line">kill -USR1 $pid</span><br><span class="line">echo &apos;&quot;loading success&apos;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;reload-sh-平滑重启&quot;&gt;&lt;a href=&quot;#reload-sh-平滑重启&quot; class=&quot;headerlink&quot; title=&quot;reload.sh  平滑重启&quot;&gt;&lt;/a&gt;reload.sh  平滑重启&lt;/h1&gt;&lt;figure class=&quot;highligh
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mysql 常见问题</title>
    <link href="http://blog.uiste.com/2018/20180328-1.html"/>
    <id>http://blog.uiste.com/2018/20180328-1.html</id>
    <published>2018-03-28T03:12:26.000Z</published>
    <updated>2019-04-02T04:19:25.053Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mysql8-0-设置简单密码报错ERROR-1819-HY000-Your-password-does-not-satisfy-the-current-policy-requirements"><a href="#mysql8-0-设置简单密码报错ERROR-1819-HY000-Your-password-does-not-satisfy-the-current-policy-requirements" class="headerlink" title="mysql8.0 设置简单密码报错ERROR 1819 (HY000): Your password does not satisfy the current policy requirements"></a>mysql8.0 设置简单密码报错ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE &apos;validate_password%&apos;;</span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">| Variable_name                        | Value  |</span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">| validate_password.check_user_name    | ON     |</span><br><span class="line">| validate_password.dictionary_file    |        |</span><br><span class="line">| validate_password.length             | 8      |</span><br><span class="line">| validate_password.mixed_case_count   | 1      |</span><br><span class="line">| validate_password.number_count       | 1      |</span><br><span class="line">| validate_password.policy             | MEDIUM |</span><br><span class="line">| validate_password.special_char_count | 1      |</span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">7 rows in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; set global validate_password.policy=0;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; set global validate_password.length=4;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; exit;</span><br><span class="line">Bye</span><br><span class="line"></span><br><span class="line">➜  ~ mysql_secure_installation</span><br><span class="line"></span><br><span class="line">Securing the MySQL server deployment.</span><br><span class="line"></span><br><span class="line">Enter password for user root:</span><br><span class="line">Error: Access denied for user &apos;root&apos;@&apos;localhost&apos; (using password: YES)</span><br></pre></td></tr></table></figure><h2 id="Syntax-error-or-access-violation-1055-Expression-1-of-SELECT-list-is-not-in-GROUP-BY-clause-and-contains-nonaggregated-column-‘XXX-Y-ZZZZ’-which-is-not-functionally-dependent-on-columns-in-GROUP-BY-clause-this-is-incompatible-with-sql-mode-only-full-group-by"><a href="#Syntax-error-or-access-violation-1055-Expression-1-of-SELECT-list-is-not-in-GROUP-BY-clause-and-contains-nonaggregated-column-‘XXX-Y-ZZZZ’-which-is-not-functionally-dependent-on-columns-in-GROUP-BY-clause-this-is-incompatible-with-sql-mode-only-full-group-by" class="headerlink" title="Syntax error or access violation: 1055 Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column ‘XXX.Y.ZZZZ’ which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by"></a>Syntax error or access violation: 1055 Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column ‘XXX.Y.ZZZZ’ which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by</h2><blockquote><p>原因：<br>MySQL 5.7.5和up实现了对功能依赖的检测。如果启用了only_full_group_by SQL模式(在默认情况下是这样)，那么MySQL就会拒绝选择列表、条件或顺序列表引用的查询，这些查询将引用组中未命名的非聚合列，而不是在功能上依赖于它们。(在5.7.5之前，MySQL没有检测到功能依赖项，only_full_group_by在默认情况下是不启用的。关于前5.7.5行为的描述，请参阅MySQL 5.6参考手册。)</p></blockquote><p>执行以下个命令，可以查看 sql_mode 的内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">　　mysql&gt; SHOW SESSION VARIABLES;</span><br><span class="line"></span><br><span class="line">　　</span><br><span class="line">　　mysql&gt; SHOW GLOBAL VARIABLES;</span><br><span class="line"></span><br><span class="line">　　mysql&gt; select @@sql_mode;</span><br></pre></td></tr></table></figure></p><p>可见session和global 的sql_mode的值都为： </p><p><code>ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</code></p><p>only_full_group_by说明：<br>only_full_group_by ：使用这个就是使用和oracle一样的group 规则, select的列都要在group中,或者本身是聚合列(SUM,AVG,MAX,MIN) 才行，其实这个配置目前个人感觉和distinct差不多的，所以去掉就好<br>官网摘抄：<br>官网：ONLY_FULL_GROUP_BY<br>Reject queries for which the select list, HAVING condition, or ORDER BY list refer to nonaggregated columns that are neither named in the GROUP BY clause nor are functionally dependent on (uniquely determined by) GROUP BY columns.</p><p>As of MySQL 5.7.5, the default SQL mode includes ONLY_FULL_GROUP_BY. (Before 5.7.5, MySQL does not detect functional dependency and ONLY_FULL_GROUP_BY is not enabled by default. For a description of pre-5.7.5 behavior, see the MySQL 5.6 Reference Manual.)</p><p>A MySQL extension to standard SQL permits references in the HAVING clause to aliased expressions in the select list. Before MySQL 5.7.5, enabling ONLY_FULL_GROUP_BY disables this extension, thus requiring the HAVING clause to be written using unaliased expressions. As of MySQL 5.7.5, this restriction is lifted so that the HAVING clause can refer to aliases regardless of whether ONLY_FULL_GROUP_BY is enabled.</p><p>解决：<br>执行以下两个命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set global sql_mode=&apos;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&apos;;</span><br><span class="line"></span><br><span class="line">mysql&gt; set session sql_mode=&apos;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&apos;;</span><br></pre></td></tr></table></figure></p><p>这两个命令，去掉 sql_mode 的 ONLY_FULL_GROUP_BY</p><h2 id="Mac-OS-X-完全卸载MySQL"><a href="#Mac-OS-X-完全卸载MySQL" class="headerlink" title="Mac OS X 完全卸载MySQL"></a>Mac OS X 完全卸载MySQL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">执行下列命令</span><br><span class="line">servie.mysql stop</span><br><span class="line">brew uninstall mysql</span><br><span class="line">sudo rm /usr/local/mysql</span><br><span class="line">sudo rm -rf /usr/local/mysql*</span><br><span class="line">sudo rm -rf /Library/StartupItems/MySQLCOM</span><br><span class="line">sudo rm -rf /Library/PreferencePanes/My*</span><br><span class="line">rm -rf ~/Library/PreferencePanes/My*</span><br><span class="line">sudo rm -rf /Library/Receipts/mysql*</span><br><span class="line">sudo rm -rf /Library/Receipts/MySQL*</span><br><span class="line">sudo rm -rf /var/db/receipts/com.mysql.*</span><br><span class="line">其实不同的安装方式有些东西的存储位置不一样，删除完检查一下下面这些文件是否删除了，没有的话则删除掉：</span><br><span class="line"></span><br><span class="line">/usr/local/Cellar 里的mysql文件</span><br><span class="line">/usr/local/var 里的mysql文件</span><br><span class="line">/tmp 里的mysql.sock, mysql.sock.lock, my.cnf文件</span><br><span class="line">pid文件和err文件都在/usr/local/var/mysql里确保删除了</span><br><span class="line">brew安装的安装包存储在/usr/local/Library/Cache/Homebrew也可以一并删除</span><br><span class="line">执行brew cleanup</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;mysql8-0-设置简单密码报错ERROR-1819-HY000-Your-password-does-not-satisfy-the-current-policy-requirements&quot;&gt;&lt;a href=&quot;#mysql8-0-设置简单密码报错ERROR-1
      
    
    </summary>
    
    
  </entry>
  
</feed>
