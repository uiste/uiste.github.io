<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>(六) docker 私有仓库搭建</title>
    <url>/2019/20190923-4.html</url>
    <content><![CDATA[<h1 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h1><p><code>docker run -d -v /home/registry:/var/lib/registry -p 5000:5000 --restart=always --privileged=true --name registry registry:lastest</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-v 挂载目录</span><br><span class="line">-p 端口映射</span><br><span class="line">--restart=always 在容器退出时总是重启容器</span><br><span class="line">--name 指定容器的名称</span><br></pre></td></tr></table></figure></p>
<h1 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h1><p><code>docker build -t redis .</code></p>
<h1 id="使用tag命令修改标签"><a href="#使用tag命令修改标签" class="headerlink" title="使用tag命令修改标签"></a>使用tag命令修改标签</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker tag redis-cluster 118.xx.xxx.54:5000/redis</span><br><span class="line">		      镜像名称	 IP地址：端口号 镜像名</span><br></pre></td></tr></table></figure>
<h1 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker push 118.xx.xxx.54:5000/redis</span><br><span class="line"></span><br><span class="line"># 若报错</span><br><span class="line">echo &apos;&#123;&quot;insecure-registries&quot;:[&quot;118.xx.xxx.54:5000&quot;]&#125;&apos; &gt; /etc/docker/daemon.json</span><br><span class="line"># 然后重启docker</span><br></pre></td></tr></table></figure>
<h1 id="拉取私有镜像"><a href="#拉取私有镜像" class="headerlink" title="拉取私有镜像"></a>拉取私有镜像</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull 118.xx.xxx.54:5000/redis</span><br></pre></td></tr></table></figure>
<h1 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl 127.0.0.1:5000/v2/_catalog</span><br></pre></td></tr></table></figure>
<h1 id="使用私有仓库镜像"><a href="#使用私有仓库镜像" class="headerlink" title="使用私有仓库镜像"></a>使用私有仓库镜像</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -itd --name redis 118.xx.xxx.54:5000/redis</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>(五) docker-swarm 集群管理工具</title>
    <url>/2019/20190923-3.html</url>
    <content><![CDATA[<p>swarm deamon 只是一个调度器加路由器，swarm自己不运行容器，它只是接受docker客户端发送过来的请求，调度适合的节点来运行容器。</p>
<p><a href="https://www.cnblogs.com/liuyansheng/p/8178341.html" target="_blank" rel="noopener">DOCKER管理工具-SWARM部署记录</a></p>
<h1 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h1><h2 id="manager初始化"><a href="#manager初始化" class="headerlink" title="manager初始化"></a>manager初始化</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker swarm init --advertise-addr 47.99.236.50</span><br></pre></td></tr></table></figure>
<h2 id="加入节点"><a href="#加入节点" class="headerlink" title="加入节点"></a>加入节点</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 作为worker加入到swarm</span><br><span class="line">docker swarm join --token SWMTKN-1-3xt1c2h1aek21zlh15nq1fg29o2i8yhxjsw8j59f9ngddpvihf-d0tb91hx2krdysuwfepv8dny9 47.99.236.50:2377</span><br><span class="line"></span><br><span class="line"># 作为manager加入到swarm</span><br><span class="line">docker swarm join-token manager</span><br></pre></td></tr></table></figure>
<h2 id="查看节点"><a href="#查看节点" class="headerlink" title="查看节点"></a>查看节点</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker node ls</span><br></pre></td></tr></table></figure>
<h2 id="节点升降级"><a href="#节点升降级" class="headerlink" title="节点升降级"></a>节点升降级</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将节点升级为manager：docker node promote 节点名</span><br><span class="line">将节点降级为worker： docker node demote 节点名</span><br></pre></td></tr></table></figure>
<h2 id="端口开放"><a href="#端口开放" class="headerlink" title="端口开放"></a>端口开放</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2377 集群管理端口</span><br><span class="line">7946 tcp/udp端口 节点间通讯</span><br><span class="line">4789 用于覆盖网络流量</span><br></pre></td></tr></table></figure>
<h2 id="操作记录"><a href="#操作记录" class="headerlink" title="操作记录"></a>操作记录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@manager ~]# docker swarm init --advertise-addr 47.99.236.50</span><br><span class="line">Swarm initialized: current node (038olxese1szrj1f0am0mi0ab) is now a manager.</span><br><span class="line"></span><br><span class="line">To add a worker to this swarm, run the following command:</span><br><span class="line"></span><br><span class="line">    docker swarm join --token SWMTKN-1-3xt1c2h1aek21zlh15nq1fg29o2i8yhxjsw8j59f9ngddpvihf-d0tb91hx2krdysuwfepv8dny9 47.99.236.50:2377</span><br><span class="line"></span><br><span class="line">To add a manager to this swarm, run &apos;docker swarm join-token manager&apos; and follow the instructions.</span><br><span class="line"></span><br><span class="line">[root@manager ~]# docker swarm join-token worker</span><br><span class="line">To add a worker to this swarm, run the following command:</span><br><span class="line"></span><br><span class="line">    docker swarm join --token SWMTKN-1-3xt1c2h1aek21zlh15nq1fg29o2i8yhxjsw8j59f9ngddpvihf-d0tb91hx2krdysuwfepv8dny9 47.99.236.50:2377</span><br><span class="line"></span><br><span class="line">[root@manager ~]# docker node ls</span><br><span class="line">ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION</span><br><span class="line">038olxese1szrj1f0am0mi0ab *   manager             Ready               Active              Leader              19.03.5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@worker1 ~]# docker swarm join --token SWMTKN-1-3xt1c2h1aek21zlh15nq1fg29o2i8yhxjsw8j59f9ngddpvihf-d0tb91hx2krdysuwfepv8dny9 47.99.236.50:2377</span><br><span class="line">This node joined a swarm as a worker.</span><br><span class="line"></span><br><span class="line">[root@manager ~]# docker node ls</span><br><span class="line">ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION</span><br><span class="line">038olxese1szrj1f0am0mi0ab *   manager             Ready               Active              Leader              19.03.5</span><br><span class="line">k34cve7sd9au2zu5a4phwvokv     worker1             Ready               Active</span><br></pre></td></tr></table></figure>
<h1 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h1><h2 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker service create --replicas 5  -p 8080:80 --name nginx  nginx</span><br><span class="line"></span><br><span class="line">--replicas 服务数量</span><br></pre></td></tr></table></figure>
<h2 id="更新服务"><a href="#更新服务" class="headerlink" title="更新服务"></a>更新服务</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker service update --image nginx:alpine nginx</span><br></pre></td></tr></table></figure>
<h2 id="删除服务"><a href="#删除服务" class="headerlink" title="删除服务"></a>删除服务</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker service rm nginx</span><br></pre></td></tr></table></figure>
<h2 id="服务实例"><a href="#服务实例" class="headerlink" title="服务实例"></a>服务实例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker service scale nginx=0</span><br><span class="line">docker service scale nginx=5</span><br></pre></td></tr></table></figure>
<h2 id="查看服务容器状态"><a href="#查看服务容器状态" class="headerlink" title="查看服务容器状态"></a>查看服务容器状态</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker service ps nginx</span><br></pre></td></tr></table></figure>
<h2 id="查看服务的详细信息"><a href="#查看服务的详细信息" class="headerlink" title="查看服务的详细信息"></a>查看服务的详细信息</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker service inspect nginx</span><br></pre></td></tr></table></figure>
<blockquote>
<p>docker swarm 默认就实现了轮询的负载均衡</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 进入swarm节点机器配置</span><br><span class="line">docker config create redis.conf redis.conf</span><br><span class="line">					 配置文件名称  文件地址</span><br></pre></td></tr></table></figure>
<h2 id="网络共享问题"><a href="#网络共享问题" class="headerlink" title="网络共享问题"></a>网络共享问题</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker network create --driver=overlay myOverly</span><br></pre></td></tr></table></figure>
<p>docker-compose.yaml<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">version: <span class="string">"3.6"</span></span><br><span class="line">services:</span><br><span class="line">  redis-master1:</span><br><span class="line">     image: redis:3.2.2</span><br><span class="line">     ports:</span><br><span class="line">       - <span class="string">"6397:6397"</span></span><br><span class="line">       - <span class="string">"16397:16397"</span></span><br><span class="line">     stdin_open: <span class="literal">true</span></span><br><span class="line">     deploy:</span><br><span class="line">        mode: replicated</span><br><span class="line">        replicas: 2</span><br><span class="line">     networks:</span><br><span class="line">        - cluster</span><br><span class="line">     tty: <span class="literal">true</span></span><br><span class="line">     configs:</span><br><span class="line">       - <span class="built_in">source</span>: redis.conf</span><br><span class="line">         target: /root/redis.conf</span><br><span class="line">     privileged: <span class="literal">true</span></span><br><span class="line">     volumes: [<span class="string">"/root/config:/data"</span>]</span><br><span class="line">configs:</span><br><span class="line">  redis.conf:</span><br><span class="line">    external: <span class="literal">true</span></span><br><span class="line">networks:</span><br><span class="line">     cluster:</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 进入swarm节点机器配置</span><br><span class="line">docker stack deploy -c docker-compose.yaml redis-cluster</span><br></pre></td></tr></table></figure>
<h2 id="滚动更新"><a href="#滚动更新" class="headerlink" title="滚动更新"></a>滚动更新</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker service update --update-parallelism 2  --image demo:2.0 --update-delay 10s test</span><br><span class="line"></span><br><span class="line">--update-parallelism  参数用来指定最大同步更新任务数。</span><br><span class="line">--update-delay       两次更新的间隔，单位默认为秒</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以测试更新镜像版本的时候客户端并不会断开连接，服务平滑升级，即服务不停机更新，客户端无感知。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>(四) docker-machine 集群伸缩</title>
    <url>/2019/20190923-2.html</url>
    <content><![CDATA[<p>使用docker-machine ，可以启动、审查、停止、重新启动托管的宿主机、升级docker客户端和守护程序，并配置docker客户端与宿主机通信。</p>
<h1 id="安装docker-machine"><a href="#安装docker-machine" class="headerlink" title="安装docker-machine"></a>安装docker-machine</h1><p>If you are running macOS:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ base=https://github.com/docker/machine/releases/download/v0.16.0 &amp;&amp;</span><br><span class="line">  curl -L $base/docker-machine-$(uname -s)-$(uname -m) &gt;/usr/local/bin/docker-machine &amp;&amp;</span><br><span class="line">  chmod +x /usr/local/bin/docker-machine</span><br></pre></td></tr></table></figure></p>
<p>If you are running Linux:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ base=https://github.com/docker/machine/releases/download/v0.16.0 &amp;&amp;</span><br><span class="line">  curl -L $base/docker-machine-$(uname -s)-$(uname -m) &gt;/tmp/docker-machine &amp;&amp;</span><br><span class="line">  sudo mv /tmp/docker-machine /usr/local/bin/docker-machine &amp;&amp;</span><br><span class="line">  chmod +x /usr/local/bin/docker-machine</span><br></pre></td></tr></table></figure></p>
<p>If you are running Windows with Git BASH:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ base=https://github.com/docker/machine/releases/download/v0.16.0 &amp;&amp;</span><br><span class="line">  mkdir -p &quot;$HOME/bin&quot; &amp;&amp;</span><br><span class="line">  curl -L $base/docker-machine-Windows-x86_64.exe &gt; &quot;$HOME/bin/docker-machine.exe&quot; &amp;&amp;</span><br><span class="line">  chmod +x &quot;$HOME/bin/docker-machine.exe&quot;</span><br></pre></td></tr></table></figure></p>
<p>参考: <a href="https://docs.docker.com/machine/install-machine/" target="_blank" rel="noopener">官方文档</a></p>
<h1 id="下载阿里云docker-machine驱动"><a href="#下载阿里云docker-machine驱动" class="headerlink" title="下载阿里云docker-machine驱动"></a>下载阿里云docker-machine驱动</h1><h2 id="下载docker-machine阿里云驱动"><a href="#下载docker-machine阿里云驱动" class="headerlink" title="下载docker-machine阿里云驱动"></a>下载docker-machine阿里云驱动</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 下载</span><br><span class="line">wget https://docker-machine-drivers.oss-cn-beijing.aliyuncs.com/docker-machine-driver-aliyunecs_linux-amd64.tgz</span><br><span class="line"></span><br><span class="line"># 解压</span><br><span class="line">tar zxvf docker-machine-driver-aliyunecs_linux-amd64.tgz</span><br><span class="line"></span><br><span class="line"># 移动</span><br><span class="line">mv ./bin/docker-machine-driver-aliyunecs.linux-amd64 /usr/local/bin/docker-machine-driver-aliyunecs</span><br><span class="line"></span><br><span class="line"># 权限</span><br><span class="line">chmod +x  /usr/local/bin/docker-machine-driver-aliyunecs</span><br><span class="line"></span><br><span class="line"># 创建</span><br><span class="line">docker-machine create -d aliyunecs --aliyunecs-io-optimized=optimized    --aliyunecs-description=aliyunecs-machine-driver  --aliyunecs-instance-type=ecs.mn4.small   --aliyunecs-access-key-id=&apos;&lt;Your access key ID&gt;&apos; --aliyunecs-access-key-secret=&apos;&lt;Your secret access key&gt;&apos; --aliyunecs-region=cn-hangzhou  --aliyunecs-ssh-password=zaq1@wsx  manager</span><br><span class="line"></span><br><span class="line">--aliyunecs-io-optimized=optimized     //磁盘io优化</span><br><span class="line">--aliyunecs-description=aliyunecs-machine-driver   //描述</span><br><span class="line">--aliyunecs-instance-type=ecs.mn4.small     //实例规格</span><br><span class="line">--aliyunecs-access-key-id=LTxxxcxx      // key</span><br><span class="line">--aliyunecs-access-key-secret=Axxx     //秘钥</span><br><span class="line">--aliyunecs-region=cn-hangzhou     //地区</span><br><span class="line">--aliyunecs-ssh-password=zaq1@wsx  //ssh登录密码</span><br><span class="line">–aliyunecs-image-id=centos_7_04_64_20G_alibase_201701015.vhd  //镜像实例</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果创建失败可以用下面命令删除</span><br><span class="line">docker-machine rm bboysoul --force</span><br></pre></td></tr></table></figure>
<p>参考: <a href="https://yq.aliyun.com/articles/411336?spm=a2c4e.11153940.0.0.72882defNeF9bp" target="_blank" rel="noopener">docker machine介绍和使用文档</a></p>
<p>想要创建一个阿里云虚拟化示例，需要满足几个条件</p>
<ol>
<li>账户余额大于100，因为创建的实例为按量付费</li>
<li>设置accesskey，需要具备操作账户的权限</li>
</ol>
<h2 id="操作记录"><a href="#操作记录" class="headerlink" title="操作记录"></a>操作记录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@izbp1bb2egi7vzn29c1dhvz ~]# base=https://github.com/docker/machine/releases/download/v0.16.0 &amp;&amp;</span><br><span class="line">&gt;   curl -L $base/docker-machine-$(uname -s)-$(uname -m) &gt;/tmp/docker-machine &amp;&amp;</span><br><span class="line">&gt;   sudo mv /tmp/docker-machine /usr/local/bin/docker-machine &amp;&amp;</span><br><span class="line">&gt;   chmod +x /usr/local/bin/docker-machine</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100   617    0   617    0     0    310      0 --:--:--  0:00:01 --:--:--   310</span><br><span class="line">100 26.8M  100 26.8M    0     0  14897      0  0:31:30  0:31:30 --:--:-- 20899</span><br><span class="line">[root@izbp1bb2egi7vzn29c1dhvz ~]# docker-machine -v</span><br><span class="line">docker-machine version 0.16.0, build 702c267f</span><br><span class="line">[root@izbp1bb2egi7vzn29c1dhvz ~]# wget https://docker-machine-drivers.oss-cn-beijing.aliyuncs.com/docker-machine-driver-aliyunecs_linux-amd64.tgz</span><br><span class="line">--2019-09-25 13:17:50--  https://docker-machine-drivers.oss-cn-beijing.aliyuncs.com/docker-machine-driver-aliyunecs_linux-amd64.tgz</span><br><span class="line">正在解析主机 docker-machine-drivers.oss-cn-beijing.aliyuncs.com (docker-machine-drivers.oss-cn-beijing.aliyuncs.com)... 59.110.185.69</span><br><span class="line">正在连接 docker-machine-drivers.oss-cn-beijing.aliyuncs.com (docker-machine-drivers.oss-cn-beijing.aliyuncs.com)|59.110.185.69|:443... 已连接。</span><br><span class="line">已发出 HTTP 请求，正在等待回应... 200 OK</span><br><span class="line">长度：3852839 (3.7M) [application/gzip]</span><br><span class="line">正在保存至: “docker-machine-driver-aliyunecs_linux-amd64.tgz”</span><br><span class="line"></span><br><span class="line">100%[=================================================================================================================================================================================&gt;] 3,852,839   14.3MB/s 用时 0.3s</span><br><span class="line"></span><br><span class="line">2019-09-25 13:17:50 (14.3 MB/s) - 已保存 “docker-machine-driver-aliyunecs_linux-amd64.tgz” [3852839/3852839])</span><br><span class="line"></span><br><span class="line">[root@izbp1bb2egi7vzn29c1dhvz ~]# ls</span><br><span class="line">dms-db-gateway  dms-db-gateway.tar.gz  docker-machine-driver-aliyunecs_linux-amd64.tgz  php-7.0.1  php7.tar.gz  walle-web.zip</span><br><span class="line">[root@izbp1bb2egi7vzn29c1dhvz ~]# tar zxvf docker-machine-driver-aliyunecs_linux-amd64.tgz</span><br><span class="line">bin/docker-machine-driver-aliyunecs.linux-amd64</span><br><span class="line">[root@izbp1bb2egi7vzn29c1dhvz ~]# mv ./bin/docker-machine-driver-aliyunecs.linux-amd64 /usr/local/bin/docker-machine-driver-aliyunecs</span><br><span class="line">[root@izbp1bb2egi7vzn29c1dhvz ~]# chmod +x  /usr/local/bin/docker-machine-driver-aliyunecs</span><br><span class="line">[root@izbp1bb2egi7vzn29c1dhvz ~]#</span><br><span class="line"></span><br><span class="line"># 命令</span><br><span class="line">docker-machine create -d aliyunecs \</span><br><span class="line">--aliyunecs-access-key-id=&apos;&lt;Your access key ID&gt;&apos; \</span><br><span class="line">--aliyunecs-access-key-secret=&apos;&lt;Your secret access key&gt;&apos; \</span><br><span class="line">--aliyunecs-system-disk-size=&apos;40&apos; \</span><br><span class="line">--aliyunecs-image-id=&apos;centos_7_05_64_20G_alibase_20181210.vhd&apos; \</span><br><span class="line">--aliyunecs-io-optimized=&apos;true&apos; \</span><br><span class="line">--aliyunecs-instance-type=&apos;ecs.t5-lc2m1.nano&apos; \</span><br><span class="line">--aliyunecs-internet-max-bandwidth=&apos;1&apos; \</span><br><span class="line">--aliyunecs-region=&apos;cn-hangzhou&apos; \</span><br><span class="line">--aliyunecs-ssh-password=&apos;&lt;Your ssh password&gt;&apos; \</span><br><span class="line">--aliyunecs-zone=&apos;cn-hangzhou-i&apos; \</span><br><span class="line"></span><br><span class="line">[root@izbp1bb2egi7vzn29c1dhvz ~]# docker-machine create -d aliyunecs --aliyunecs-access-key-id=&apos;&lt;Your access key ID&gt;&apos; --aliyunecs-access-key-secret=&apos;&lt;Your secret access key&gt;&apos; --aliyunecs-system-disk-size=&apos;40&apos; --aliyunecs-image-id=&apos;centos_7_05_64_20G_alibase_20181210.vhd&apos; --aliyunecs-io-optimized=&apos;true&apos; --aliyunecs-instance-type=&apos;ecs.t5-lc2m1.nano&apos; --aliyunecs-internet-max-bandwidth=&apos;1&apos; --aliyunecs-region=&apos;cn-hangzhou&apos; --aliyunecs-ssh-password=&apos;&lt;Your ssh password&gt;&apos; --aliyunecs-zone=&apos;cn-hangzhou-i&apos; manager</span><br><span class="line">Running pre-create checks...</span><br><span class="line">Creating machine...</span><br><span class="line">(manager) manager | Creating key pair for instance ...</span><br><span class="line">(manager) manager | Configuring security groups instance ...</span><br><span class="line">(manager) manager | Creating instance with image centos_7_05_64_20G_alibase_20181210.vhd ...</span><br><span class="line">(manager) manager | Create instance i-bp18so0vhjjsk6xyynep successfully</span><br><span class="line">(manager) manager | Allocate publice IP address 47.99.236.50 for instance i-bp18so0vhjjsk6xyynep successfully</span><br><span class="line">(manager) manager | Starting instance i-bp18so0vhjjsk6xyynep ...</span><br><span class="line">(manager) manager | Start instance i-bp18so0vhjjsk6xyynep successfully</span><br><span class="line">(manager) manager | Waiting SSH service 47.99.236.50:22 is ready to connect ...</span><br><span class="line">(manager) manager | Uploading SSH keypair to 47.99.236.50:22 ...</span><br><span class="line">(manager) manager | Created instance i-bp18so0vhjjsk6xyynep successfully with public IP address 47.99.236.50 and private IP address 172.16.142.104</span><br><span class="line">Waiting for machine to be running, this may take a few minutes...</span><br><span class="line">Detecting operating system of created instance...</span><br><span class="line">Waiting for SSH to be available...</span><br><span class="line">Detecting the provisioner...</span><br><span class="line">Provisioning with centos...</span><br><span class="line">Copying certs to the local machine directory...</span><br><span class="line">Copying certs to the remote machine...</span><br><span class="line">Setting Docker configuration on the remote daemon...</span><br><span class="line">Checking connection to Docker...</span><br><span class="line">Docker is up and running!</span><br><span class="line">To see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: docker-machine env manager</span><br></pre></td></tr></table></figure>
<p><img src="https://res.nuoyit.com/lsprod/loan/25ddb8d6991383.png" alt="ECS实例图示"></p>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>杭州镜像创建：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-machine create -d aliyunecs \</span><br><span class="line">--aliyunecs-access-key-id=&apos;&lt;Your access key ID&gt;&apos; \</span><br><span class="line">--aliyunecs-access-key-secret=&apos;&lt;Your secret access key&gt;&apos; \</span><br><span class="line">--aliyunecs-system-disk-size=&apos;40&apos; \</span><br><span class="line">--aliyunecs-image-id=&apos;centos_7_05_64_20G_alibase_20181210.vhd&apos; \</span><br><span class="line">--aliyunecs-io-optimized=&apos;true&apos; \</span><br><span class="line">--aliyunecs-instance-type=&apos;ecs.t5-lc2m1.nano&apos; \</span><br><span class="line">--aliyunecs-internet-max-bandwidth=&apos;1&apos; \</span><br><span class="line">--aliyunecs-region=&apos;cn-hangzhou&apos; \</span><br><span class="line">--aliyunecs-ssh-password=&apos;&lt;Your ssh password&gt;&apos; \</span><br><span class="line">--aliyunecs-zone=&apos;cn-hangzhou-i&apos; \</span><br><span class="line">worker1</span><br><span class="line"></span><br><span class="line">--aliyunecs-zone	ECS_ZONE	-	可用区id，这个我没有找到，后来是用阿里云openapi explorer查出来的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">https://api.aliyun.com/?spm=a2c4g.11186623.2.8.2a6f7f49RdvJPV#/?product=Ecs&amp;api=DescribeZones&amp;params=&#123;%22RegionId%22:%22cn-hangzhou%22&#125;&amp;tab=DEMO&amp;lang=JAVA</span><br><span class="line"></span><br><span class="line">--aliyunecs-image-id	ECS_IMAGE_ID	-	ecs镜像id，我找这个找了很久，因为找的是公共镜像，公共镜像id在控制台，云服务器ECS，镜像，公共镜像里有</span><br></pre></td></tr></table></figure></p>
<h1 id="删除服务器"><a href="#删除服务器" class="headerlink" title="删除服务器"></a>删除服务器</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@izbp1bb2egi7vzn29c1dhvz ~]# docker-machine ls</span><br><span class="line">NAME      ACTIVE   DRIVER      STATE     URL                        SWARM   DOCKER     ERRORS</span><br><span class="line">manager   -        aliyunecs   Running   tcp://139.224.56.70:2376           v1.12.6</span><br><span class="line">worker1   -        aliyunecs   Running   tcp://121.41.65.234:2376           v19.03.5</span><br><span class="line">[root@izbp1bb2egi7vzn29c1dhvz ~]# docker-machine rm manager</span><br><span class="line">About to remove manager</span><br><span class="line">WARNING: This action will delete both local reference and remote instance.</span><br><span class="line">Are you sure? (y/n): y</span><br><span class="line">(manager) manager | Remove instance i-uf6afru7j8ieppzodrls ...</span><br><span class="line">(manager) manager | Deleting instance: i-uf6afru7j8ieppzodrls</span><br><span class="line">Successfully removed manager</span><br></pre></td></tr></table></figure>
<h1 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h1><h2 id="链接服务器"><a href="#链接服务器" class="headerlink" title="链接服务器"></a>链接服务器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@izbp1bb2egi7vzn29c1dhvz ~]# docker-machine env manager</span><br><span class="line">export DOCKER_TLS_VERIFY=&quot;1&quot;</span><br><span class="line">export DOCKER_HOST=&quot;tcp://139.224.56.70:2376&quot;</span><br><span class="line">export DOCKER_CERT_PATH=&quot;/root/.docker/machine/machines/manager&quot;</span><br><span class="line">export DOCKER_MACHINE_NAME=&quot;manager&quot;</span><br><span class="line"># Run this command to configure your shell:</span><br><span class="line"># eval $(docker-machine env manager)</span><br><span class="line"></span><br><span class="line">[root@izbp1bb2egi7vzn29c1dhvz ~]# docker-machine ssh manager</span><br><span class="line">Last login: Mon Nov 25 14:11:18 CST 2019 from 47.96.181.251 on ssh</span><br><span class="line"></span><br><span class="line">Welcome to Alibaba Cloud Elastic Compute Service !</span><br><span class="line"></span><br><span class="line">manager ~ #</span><br></pre></td></tr></table></figure>
<h2 id="查看主机配置信息"><a href="#查看主机配置信息" class="headerlink" title="查看主机配置信息"></a>查看主机配置信息</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-machine config [options]</span><br><span class="line"></span><br><span class="line">docker-machine config worker1</span><br></pre></td></tr></table></figure>
<h2 id="挂载共享目录"><a href="#挂载共享目录" class="headerlink" title="挂载共享目录"></a>挂载共享目录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install fuse-sshfs</span><br><span class="line"></span><br><span class="line">[machine:][path] [mountpoint]</span><br><span class="line"></span><br><span class="line">docker-machine mount worker1:/root/test test</span><br></pre></td></tr></table></figure>
<blockquote>
<p>sshfs可以把远程主机的文件系统映射到本地主机上，透过ssh把远程文件系统挂载到本机上，这样可以不必使用scp工具就可以做到直接复制及删除远程主机的文件了。就像操作本地磁盘一样方便。<br>注意如果挂载的文件不为空，会提示让你设置参数，但是docker-machine mount 是不支持的</p>
</blockquote>
<p>下面这种方式可以，但是会将现有文件的内容清空，谨慎使用<br><code>sshfs root@121.xxx.xxx.187:/root/worker1 worker1 -o nonempty</code></p>
<p>docker-machine操作步骤<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@izbp1bb2egi7vzn29c1dhvz ~]# yum install fuse-sshfs -y</span><br><span class="line"></span><br><span class="line">[root@izbp1bb2egi7vzn29c1dhvz ~]# mkdir data</span><br><span class="line">[root@izbp1bb2egi7vzn29c1dhvz ~]# pwd</span><br><span class="line">/root</span><br><span class="line">[root@izbp1bb2egi7vzn29c1dhvz ~]# docker-machine mount manager:/data ./data</span><br><span class="line">[root@izbp1bb2egi7vzn29c1dhvz ~]# cd data/</span><br><span class="line">[root@izbp1bb2egi7vzn29c1dhvz data]# touch remark.md</span><br><span class="line">[root@izbp1bb2egi7vzn29c1dhvz data]# cat remark.md</span><br><span class="line">挂载成功</span><br></pre></td></tr></table></figure></p>
<p>docker-manager操作步骤<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@izbp1bb2egi7vzn29c1dhvz ~]# docker-machine ssh manager</span><br><span class="line">Last login: Mon Nov 25 16:10:53 2019 from 47.96.181.251</span><br><span class="line"></span><br><span class="line">Welcome to Alibaba Cloud Elastic Compute Service !</span><br><span class="line"></span><br><span class="line">[root@manager ~]# ll</span><br><span class="line">total 0</span><br><span class="line">[root@manager ~]# mkdir /data</span><br><span class="line">[root@manager ~]# vim /data/remark.md</span><br><span class="line">挂载成功</span><br><span class="line"></span><br><span class="line">[root@manager ~]# cat /data/remark.md</span><br><span class="line">挂载成功</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>取消挂载 -u<br><code>docker-machine mount -u manager:/data ./data</code><br>一个目录只能被挂载到一台机器上</p>
</blockquote>
<p><img src="https://res.nuoyit.com/lsprod/loan/15ddb915d50c5c.png" alt="图示"></p>
<h2 id="拷贝文件-SCP"><a href="#拷贝文件-SCP" class="headerlink" title="拷贝文件 SCP"></a>拷贝文件 SCP</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-machine scp -r host1:/tmp/a(源地址) host2:/tmp/b(目标地址)</span><br><span class="line"></span><br><span class="line">-r 递归目录拷贝</span><br><span class="line">-d 大文件增量拷贝</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>(三)redis docker 集群配置</title>
    <url>/2019/20190923-1.html</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><blockquote>
<p>当业务场景需要足够大量的Redis存储时，主从结构+哨兵可以实现高可用故障切换+冗余备份，但是并不能解决数据容量的问题，用哨兵Redis每个势力也是全量存储，每个Redis存储的内容都是完整的数据，良妃内存且存在木桶效应。<br>为了最大化利用内存，可以采用cluster集群，就是分布式存储。即每台Redis存储不同的内容。</p>
</blockquote>
<p>分布式方案：</p>
<ol>
<li>客户端分区方案：优点是分区逻辑可控，缺点是需要自己处理数据路由、高可用、故障转移等问题。在redis2.8之前使用key的hashcode取余分布到不同的节点，一旦节点的增删，都会导致key无法命中。</li>
<li>代理方案：简化客户端分布式逻辑和升级维护遍历。缺点是加重架构部署复杂度和性能损耗，如：twemproxy,codis</li>
<li>官方为我们提供了专有的集群方案：redis cluster</li>
</ol>
<p>redis集群提供了以下两个好处：</p>
<ol>
<li>将数据自动切分到多个节点的能力</li>
<li>当集群中的一部分节点失效或者无法进行通讯时，仍然可以继续处理名利请求的能力，拥有自动故障转移的能力</li>
<li>客户端可以与任何一个节点相连接，然后就可以访问集群中的任何一个节点，对其进行存取和其它操作</li>
</ol>
<h1 id="redis-cluster-vs-replication-sentinal-如何选择"><a href="#redis-cluster-vs-replication-sentinal-如何选择" class="headerlink" title="redis cluster vs replication + sentinal 如何选择"></a>redis cluster vs replication + sentinal 如何选择</h1><ol>
<li>如果数据很少，主要是承载高并发高性能的场景，单机即可</li>
<li>replication：一个master，多个slave，要几个slave跟你要求的读吞吐量有关系，结合sentinal集群，去保证Redis主从架构的高可用性，就可以了</li>
<li>redis cluster：主要是针对海量数据+高并发+高可用的场景</li>
</ol>
<h1 id="分布式是如何进行的"><a href="#分布式是如何进行的" class="headerlink" title="分布式是如何进行的"></a>分布式是如何进行的</h1><p>顺序分区和哈希分区</p>
<p>数据倾斜 + 数据迁移 + 节点伸缩 </p>
<blockquote>
<p>顺序分区：会导致数据倾斜，主要是访问倾斜。每次点击会重点访问某台机器，这就导致最后数据都到这台机器上了。<br>哈希分区：但需要扩容时，专业上称之为”节点伸缩“，这个时候，因为是哈希算法，会导致数据迁移。<br>一致性哈希：加减节点会造成哈希环中部分数据无法命中，需要手动处理或者忽略这部分数据，因此一致性哈希常用于缓存场景。<br>虚拟槽分区：使用CRC16算法，钱庙的使用了哈希空间，使用分散度良好的哈希函数把所有数据映射到一个固定范围的整数集合中，整数定义为槽。redis cluster槽的范围是0~16383，槽是集群内数据管理和迁移的基本单位。采用大范围槽的主要母的是为了方便数据拆分和集群扩展。每个节点会负责一定数量的槽。每当key访问过来，redis cluster会计算哈希值是否在这个区间里。它们彼此都知道对应的槽在哪台机器上，这样就能做到平均分配了。</p>
</blockquote>
<p>集群限制</p>
<blockquote>
<p>key批量操作，mget()</p>
</blockquote>
<h1 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h1><blockquote>
<p>Docker Compose 是 Docker 官方编排（Orchestration）项目之一，负责快速的部署分布式应<br>用。Compose 允许用户通过一个单独的 docker-compose.yml 模板文件<br>（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。<br>Compose 中有两个重要的概念：</p>
<ul>
<li>服务 ( service )：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。</li>
<li>项目 ( project )：由一组关联的应用容器组成的一个完整业务单元，在 dockercompose.yml 文件中定义。</li>
</ul>
</blockquote>
<h1 id="搭建集群"><a href="#搭建集群" class="headerlink" title="搭建集群"></a>搭建集群</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#节点端口</span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line">#开启集群模式</span><br><span class="line">cluster-enabled yes</span><br><span class="line"></span><br><span class="line">#节点超时时间，单位毫秒</span><br><span class="line">cluster-node-timeout 15000</span><br><span class="line"></span><br><span class="line">#集群内部配置文件</span><br><span class="line">cluster-config-file ”nodes-6379.conf“</span><br></pre></td></tr></table></figure>
<h2 id="构建redis-cluster镜像"><a href="#构建redis-cluster镜像" class="headerlink" title="构建redis-cluster镜像"></a>构建redis-cluster镜像</h2><p>文件路径：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@VM_0_6_centos usr]# tree /usr/docker/</span><br><span class="line">/usr/docker/</span><br><span class="line">└── redis</span><br><span class="line">    ├── config</span><br><span class="line">    │   ├── nodes-6391.conf</span><br><span class="line">    │   ├── nodes-6392.conf</span><br><span class="line">    │   ├── nodes-6393.conf</span><br><span class="line">    │   ├── nodes-6394.conf</span><br><span class="line">    │   ├── nodes-6395.conf</span><br><span class="line">    │   ├── nodes-6396.conf</span><br><span class="line">    │   ├── redis.sh</span><br><span class="line">    │   └── redis-trib.rb</span><br><span class="line">    └── Dockerfile</span><br><span class="line"></span><br><span class="line">2 directories, 9 files</span><br></pre></td></tr></table></figure></p>
<p>Dockerfile<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM centos:latest</span><br><span class="line">RUN groupadd -r redis &amp;&amp; useradd  -r -g redis redis</span><br><span class="line">RUN  yum -y install wget \</span><br><span class="line">&amp;&amp; wget http://mirrors.sohu.com/fedora-epel/epel-release-latest-8.noarch.rpm \</span><br><span class="line">&amp;&amp; rpm -ivh epel-release-latest-8.noarch.rpm \</span><br><span class="line">&amp;&amp; yum clean all &amp;&amp; yum makecache &amp;&amp; yum -y update &amp;&amp;  yum -y install epel-release \</span><br><span class="line">&amp;&amp;   yum -y install redis  &amp;&amp; yum -y install wget \</span><br><span class="line">&amp;&amp;   yum -y install net-tools \</span><br><span class="line">&amp;&amp;   yum -y install  ruby &amp;&amp; yum  -y install  rubygems</span><br><span class="line">RUN wget https://nuoyit.oss-cn-hangzhou.aliyuncs.com/package/redis-3.2.1.gem  &amp;&amp;  gem install -l ./redis-3.2.1.gem \</span><br><span class="line">&amp;&amp;  rm -f redis-3.2.1.gem</span><br><span class="line">COPY  ./config/redis-trib.rb  /usr/bin</span><br><span class="line">COPY  ./config/redis.sh       /usr/bin</span><br><span class="line">RUN  mkdir -p /config  &amp;&amp; chmod  775  /usr/bin/redis.sh</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>dockerfile处理了在腾讯云装epel-release源问题，参考文章：<br><a href="http://www.mamicode.com/info-detail-2297252.html" target="_blank" rel="noopener">CentOS安装epel源详解</a></p>
</blockquote>
<p>构建镜像<br><code>docker build -t redis-cluster .</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@VM_0_6_centos redis]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">redis-cluster       latest              cda424fce4bf        2 minutes ago       391MB</span><br></pre></td></tr></table></figure>
<h2 id="准备节点"><a href="#准备节点" class="headerlink" title="准备节点"></a>准备节点</h2><p>docker-compose.yml<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">version: <span class="string">"3.6"</span></span><br><span class="line">services:</span><br><span class="line">  redis-cluster-master1:</span><br><span class="line">     image: redis-cluster</span><br><span class="line">     container_name: redis-cluster-master1</span><br><span class="line">     working_dir: /config</span><br><span class="line">     environment:</span><br><span class="line">       - PORT=6391</span><br><span class="line">     ports:</span><br><span class="line">       - <span class="string">"6391:6391"</span></span><br><span class="line">       - <span class="string">"16391:16391"</span></span><br><span class="line">     stdin_open: <span class="literal">true</span></span><br><span class="line">     networks:</span><br><span class="line">        redis-master:</span><br><span class="line">          ipv4_address: 172.50.0.2</span><br><span class="line">     tty: <span class="literal">true</span></span><br><span class="line">     privileged: <span class="literal">true</span></span><br><span class="line">     volumes: [<span class="string">"/usr/docker/redis/config:/config"</span>]</span><br><span class="line">     entrypoint:</span><br><span class="line">       - /bin/bash</span><br><span class="line">       - redis.sh</span><br><span class="line">  redis-cluster-master2:</span><br><span class="line">       image: redis-cluster</span><br><span class="line">       working_dir: /config</span><br><span class="line">       container_name: redis-cluster-master2</span><br><span class="line">       environment:</span><br><span class="line">              - PORT=6392</span><br><span class="line">       networks:</span><br><span class="line">          redis-master:</span><br><span class="line">             ipv4_address: 172.50.0.3</span><br><span class="line">       ports:</span><br><span class="line">         - <span class="string">"6392:6392"</span></span><br><span class="line">         - <span class="string">"16392:16392"</span></span><br><span class="line">       stdin_open: <span class="literal">true</span></span><br><span class="line">       tty: <span class="literal">true</span></span><br><span class="line">       privileged: <span class="literal">true</span></span><br><span class="line">       volumes: [<span class="string">"/usr/docker/redis/config:/config"</span>]</span><br><span class="line">       entrypoint:</span><br><span class="line">         - /bin/bash</span><br><span class="line">         - redis.sh</span><br><span class="line">  redis-cluster-master3:</span><br><span class="line">       image: redis-cluster</span><br><span class="line">       container_name: redis-cluster-master3</span><br><span class="line">       working_dir: /config</span><br><span class="line">       environment:</span><br><span class="line">              - PORT=6393</span><br><span class="line">       networks:</span><br><span class="line">          redis-master:</span><br><span class="line">            ipv4_address: 172.50.0.4</span><br><span class="line">       ports:</span><br><span class="line">         - <span class="string">"6393:6393"</span></span><br><span class="line">         - <span class="string">"16393:16393"</span></span><br><span class="line">       stdin_open: <span class="literal">true</span></span><br><span class="line">       tty: <span class="literal">true</span></span><br><span class="line">       privileged: <span class="literal">true</span></span><br><span class="line">       volumes: [<span class="string">"/usr/docker/redis/config:/config"</span>]</span><br><span class="line">       entrypoint:</span><br><span class="line">         - /bin/bash</span><br><span class="line">         - redis.sh</span><br><span class="line">  redis-cluster-slave1:</span><br><span class="line">       image: redis-cluster</span><br><span class="line">       container_name: redis-cluster-slave1</span><br><span class="line">       working_dir: /config</span><br><span class="line">       environment:</span><br><span class="line">            - PORT=6394</span><br><span class="line">       networks:</span><br><span class="line">          redis-slave:</span><br><span class="line">             ipv4_address: 172.30.0.2</span><br><span class="line">       ports:</span><br><span class="line">         - <span class="string">"6394:6394"</span></span><br><span class="line">         - <span class="string">"16394:16394"</span></span><br><span class="line">       stdin_open: <span class="literal">true</span></span><br><span class="line">       tty: <span class="literal">true</span></span><br><span class="line">       privileged: <span class="literal">true</span></span><br><span class="line">       volumes: [<span class="string">"/usr/docker/redis/config:/config"</span>]</span><br><span class="line">       entrypoint:</span><br><span class="line">         - /bin/bash</span><br><span class="line">         - redis.sh</span><br><span class="line">  redis-cluster-slave2:</span><br><span class="line">       image: redis-cluster</span><br><span class="line">       working_dir: /config</span><br><span class="line">       container_name: redis-cluster-slave2</span><br><span class="line">       environment:</span><br><span class="line">             - PORT=6395</span><br><span class="line">       ports:</span><br><span class="line">         - <span class="string">"6395:6395"</span></span><br><span class="line">         - <span class="string">"16395:16395"</span></span><br><span class="line">       stdin_open: <span class="literal">true</span></span><br><span class="line">       networks:</span><br><span class="line">          redis-slave:</span><br><span class="line">              ipv4_address: 172.30.0.3</span><br><span class="line">       tty: <span class="literal">true</span></span><br><span class="line">       privileged: <span class="literal">true</span></span><br><span class="line">       volumes: [<span class="string">"/usr/docker/redis/config:/config"</span>]</span><br><span class="line">       entrypoint:</span><br><span class="line">         - /bin/bash</span><br><span class="line">         - redis.sh</span><br><span class="line">  redis-cluster-slave3:</span><br><span class="line">       image: redis-cluster</span><br><span class="line">       container_name: redis-cluster-slave3</span><br><span class="line">       working_dir: /config</span><br><span class="line">       environment:</span><br><span class="line">          - PORT=6396</span><br><span class="line">       ports:</span><br><span class="line">         - <span class="string">"6396:6396"</span></span><br><span class="line">         - <span class="string">"16396:16396"</span></span><br><span class="line">       stdin_open: <span class="literal">true</span></span><br><span class="line">       networks:</span><br><span class="line">          redis-slave:</span><br><span class="line">            ipv4_address: 172.30.0.4</span><br><span class="line">       tty: <span class="literal">true</span></span><br><span class="line">       privileged: <span class="literal">true</span></span><br><span class="line">       volumes: [<span class="string">"/usr/docker/redis/config:/config"</span>]</span><br><span class="line">       entrypoint:</span><br><span class="line">         - /bin/bash</span><br><span class="line">         - redis.sh</span><br><span class="line">networks:</span><br><span class="line">  redis-master:</span><br><span class="line">     driver: bridge</span><br><span class="line">     ipam:</span><br><span class="line">       driver: default</span><br><span class="line">       config:</span><br><span class="line">          -</span><br><span class="line">           subnet: 172.50.0.0/16</span><br><span class="line">  redis-slave:</span><br><span class="line">       driver: bridge</span><br><span class="line">       ipam:</span><br><span class="line">         driver: default</span><br><span class="line">         config:</span><br><span class="line">            -</span><br><span class="line">             subnet: 172.30.0.0/16</span><br><span class="line">  redis-test:</span><br><span class="line">     external:</span><br><span class="line">       name: mynetwork</span><br></pre></td></tr></table></figure></p>
<p>redis.sh<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">redis-server  /config/nodes-<span class="variable">$&#123;PORT&#125;</span>.conf</span><br></pre></td></tr></table></figure></p>
<p>操作步骤<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@VM_0_6_centos redis]# docker-compose -p redis-cluster up -d</span><br><span class="line">WARNING: Some networks were defined but are not used by any service: redis-test</span><br><span class="line">Creating redis-cluster-master1 ... done</span><br><span class="line">Creating redis-cluster-salve2  ... done</span><br><span class="line">Creating redis-cluster-master2 ... done</span><br><span class="line">Creating redis-cluster-slave1  ... done</span><br><span class="line">Creating redis-cluster-slave3  ... done</span><br><span class="line">Creating redis-cluster-master3 ... done</span><br><span class="line"></span><br><span class="line">[root@VM_0_6_centos redis]# docker exec -it redis-cluster-master1 bash</span><br><span class="line">[root@7ba6993e9fcf config]# pwd</span><br><span class="line">/config</span><br><span class="line"># 文件已共享</span><br><span class="line">[root@7ba6993e9fcf config]# ls</span><br><span class="line">nodes-6391.conf  nodes-6392.conf  nodes-6393.conf  nodes-6394.conf  nodes-6395.conf  nodes-6396.conf  redis-trib.rb  redis.sh</span><br><span class="line">[root@7ba6993e9fcf config]#</span><br><span class="line"># 查看节点ID</span><br><span class="line">[root@7ba6993e9fcf config]# cat /var/lib/redis/nodes-6379.conf</span><br><span class="line">df23468b9980f0814c35acdc4fb83968c8263d50 :0@0 myself,master - 0 0 0 connected</span><br><span class="line">vars currentEpoch 0 lastVoteEpoch 0</span><br><span class="line">[root@7ba6993e9fcf config]#</span><br><span class="line"></span><br><span class="line"># 登录客户端，参看集群信息</span><br><span class="line">[root@7ba6993e9fcf config]# echo $PORT</span><br><span class="line">6391</span><br><span class="line">[root@7ba6993e9fcf config]# redis-cli -p 6391</span><br><span class="line">127.0.0.1:6391&gt; cluster info</span><br><span class="line">cluster_state:fail</span><br><span class="line">cluster_slots_assigned:0</span><br><span class="line">cluster_slots_ok:0</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:1</span><br><span class="line">cluster_size:0</span><br><span class="line">cluster_current_epoch:0</span><br><span class="line">cluster_my_epoch:0</span><br><span class="line">cluster_stats_messages_sent:0</span><br><span class="line">cluster_stats_messages_received:0</span><br><span class="line">127.0.0.1:6391&gt; cluster nodes</span><br><span class="line">df23468b9980f0814c35acdc4fb83968c8263d50 :6391@16391 myself,master - 0 0 0 connected</span><br></pre></td></tr></table></figure></p>
<h2 id="节点握手"><a href="#节点握手" class="headerlink" title="节点握手"></a>节点握手</h2><p>节点握手是指一批运行在集群模式下的节点通过Gossip协议彼此通信，到达感知对方的过程。由客户端发起命令：<code>cluster meet {ip} {port}</code></p>
<p><code>cluster meet 127.0.0.1 6380</code></p>
<p><strong> 注意 </strong></p>
<blockquote>
<ol>
<li>每个redis cluster节点会占用两个TCP端口，一个监听客户端的请求，默认是6379，另一个在端口上加上10000，比如16379，来监听数据的请求，节点和节点之前会监听第二个端口，用一套二进制协议来通信。<br>节点之间会通过这套协议来进行失败检测，配置更新，failover认证等等。<br>为了保证节点之间的正常访问，需要注意防火墙的配置。</li>
<li>节点简历握手之后集群还不能正常工作，这时集群处于下线状态，所有的数据读写都被禁止<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6391&gt; set age 18</span><br><span class="line">(error) CLUSTERDOWN Hash slot not served</span><br></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
<blockquote>
<ol start="3">
<li>作为一个完整的集群，需要主从节点，保证当他出现故障时可以自动进行故障转移。集群模式下，redis节点角色分为主节点和从节点。首次启动的节点和被分配槽的节点都是主节点，从节点负责复制主节点槽信息和相关数据</li>
</ol>
</blockquote>
<p>使用 <code>cluster replicate {nodeid}</code> 命令让一个节点称为从节点。其中命令执行必须在对应的从节点上执行，将当前节点设置为node_id指定的节点的从节点。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6391&gt; CLUSTER MEET 118.xx.xxx.54 6392</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6391&gt; CLUSTER MEET 118.xx.xxx.54 6393</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6391&gt; CLUSTER MEET 118.xx.xxx.54 6394</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6391&gt; CLUSTER MEET 118.xx.xxx.54 6395</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6391&gt; CLUSTER MEET 118.xx.xxx.54 6396</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6391&gt; CLUSTER NODES</span><br><span class="line">5689df453773f99399a2d93285c6906c0d7f7154 118.xx.xxx.54:6395@16395 master - 0 1574519726000 5 connected</span><br><span class="line">bbba975c724f6ad8c734bcce627f0ae6304f446f 118.xx.xxx.54:6393@16393 master - 0 1574519728000 2 connected</span><br><span class="line">90990230d7a0181a0a07144d9172004a737072f7 118.xx.xxx.54:6396@16396 master - 0 1574519728000 4 connected</span><br><span class="line">6c8fa041a2c71a668b5ab07618c5bec4d1eadad8 118.xx.xxx.54:6392@16392 master - 0 1574519728576 1 connected</span><br><span class="line">b920e563a56577786094bd940536f291b342495c 118.xx.xxx.54:6394@16394 master - 0 1574519729577 3 connected</span><br><span class="line">df23468b9980f0814c35acdc4fb83968c8263d50 118.xx.xxx.54:6391@16391 myself,master - 0 1574519729000 0 connected</span><br></pre></td></tr></table></figure>
<p>配置主从<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cd4ac43057f5 config]# redis-cli -h 118.xx.xxx.54 -p 6394 CLUSTER REPLICATE df23468b9980f0814c35acdc4fb83968c8263d50</span><br><span class="line">OK</span><br><span class="line">[root@cd4ac43057f5 config]# redis-cli -h 118.xx.xxx.54 -p 6395 CLUSTER REPLICATE 6c8fa041a2c71a668b5ab07618c5bec4d1eadad8</span><br><span class="line">OK</span><br><span class="line">[root@cd4ac43057f5 config]# redis-cli -h 118.xx.xxx.54 -p 6396 CLUSTER REPLICATE bbba975c724f6ad8c734bcce627f0ae6304f446f</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">[root@cd4ac43057f5 config]# redis-cli -h 118.xx.xxx.54 -p 6391</span><br><span class="line">127.0.0.1:6391&gt; CLUSTER NODES</span><br><span class="line">5689df453773f99399a2d93285c6906c0d7f7154 118.xx.xxx.54:6395@16395 slave 6c8fa041a2c71a668b5ab07618c5bec4d1eadad8 0 1574520112000 5 connected</span><br><span class="line">bbba975c724f6ad8c734bcce627f0ae6304f446f 118.xx.xxx.54:6393@16393 master - 0 1574520111000 2 connected</span><br><span class="line">90990230d7a0181a0a07144d9172004a737072f7 118.xx.xxx.54:6396@16396 slave bbba975c724f6ad8c734bcce627f0ae6304f446f 0 1574520112276 4 connected</span><br><span class="line">6c8fa041a2c71a668b5ab07618c5bec4d1eadad8 118.xx.xxx.54:6392@16392 master - 0 1574520113277 1 connected</span><br><span class="line">b920e563a56577786094bd940536f291b342495c 118.xx.xxx.54:6394@16394 slave df23468b9980f0814c35acdc4fb83968c8263d50 0 1574520111273 3 connected</span><br><span class="line">df23468b9980f0814c35acdc4fb83968c8263d50 118.xx.xxx.54:6391@16391 myself,master - 0 1574520110000 0 connected</span><br></pre></td></tr></table></figure></p>
<h2 id="分配槽"><a href="#分配槽" class="headerlink" title="分配槽"></a>分配槽</h2><p>redis集群把所有的数据映射到16384个槽中。每个key会映射为一个固定的槽，只有当节点分配了槽，才能响应和这些槽关联的键命令。通过<code>cluster addslots</code>命令为节点分配槽</p>
<p>利用bash特性批量设置槽（slots）,命令如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-cli -h 118.xx.xxx.54 -p 6391 cluster addslots &#123;0..5461&#125;</span><br><span class="line">redis-cli -h 118.xx.xxx.54 -p 6392 cluster addslots &#123;5462..10922&#125;</span><br><span class="line">redis-cli -h 118.xx.xxx.54 -p 6393 cluster addslots &#123;10923..16383&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>我们依照redis协议手动建立一个集群。它由6个节点组成，3个主节点负责处理漕河相关数据，3个从节点负责故障转移。redis官方提供了redis-trib.rb 工具方便我们快速搭建集群</p>
</blockquote>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@7ba6993e9fcf config]# redis-cli -p 6391</span><br><span class="line">118.xx.xxx.54:6391&gt; set age 18</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">[root@cd4ac43057f5 config]# redis-cli -h 118.xx.xxx.54 -p 6394</span><br><span class="line">118.xx.xxx.54:6394&gt; get age</span><br><span class="line">(error) MOVED 741 118.xx.xxx.54:6391</span><br><span class="line">118.xx.xxx.54:6394&gt; exit</span><br><span class="line">[root@cd4ac43057f5 config]# redis-cli -h 118.xx.xxx.54 -p 6391</span><br><span class="line">118.xx.xxx.54:6391&gt; get age</span><br><span class="line">&quot;18&quot;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>操作集群 -c 集群模式 <code>redis-cli -c -p 6391 get age</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@7ba6993e9fcf config]# redis-cli -c -h 118.xx.xxx.54 -p 6391 get age</span><br><span class="line">&quot;18&quot;</span><br><span class="line">[root@7ba6993e9fcf config]# redis-cli -c -h 118.xx.xxx.54 -p 6392 get age</span><br><span class="line">&quot;18&quot;</span><br><span class="line">[root@7ba6993e9fcf config]# redis-cli -c -h 118.xx.xxx.54 -p 6393 get age</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h1 id="redis-trib-rb-搭建集群"><a href="#redis-trib-rb-搭建集群" class="headerlink" title="redis-trib.rb 搭建集群"></a>redis-trib.rb 搭建集群</h1><p>redis-trib.rb 是采用 Ruby实现的redis集群管理工具。内部通过cluster相关命令帮我们建立集群创建、检查、槽迁移和均衡等常见运维操作，使用之前需要安装Ruby依赖环境。</p>
<p>启动好6个节点之后，使用<code>redis-trib.rb create</code>命令完成节点握手和槽分配过程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-trib.rb create --replicas 1  118.xx.xxx.54:6391 118.xx.xxx.54:6392 118.xx.xxx.54:6393 118.xx.xxx.54:6394 118.xx.xxx.54:6395 118.xx.xxx.54:6396</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>--replicas</code> 参数指定集群中每个主节点配备几个从节点，这里设置为1，redis-trib.rb 会尽可能保证主从节点不分配在同一机器下，因此会重新排序节点列表顺序。节点列表顺序用语确定主从角色，先主节点之后是从节点。创建过程中首先会给出主从节点角色分配的计划，并且会生成报告</p>
</blockquote>
<h1 id="操作记录"><a href="#操作记录" class="headerlink" title="操作记录"></a>操作记录</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@544b4c16b923 config]# redis-trib.rb create --replicas 1 118.xx.xxx.54:6391 118.xx.xxx.54:6392 118.xx.xxx.54:6393 118.xx.xxx.54:6394 118.xx.xxx.54:6395 118.xx.xxx.54:6396</span><br><span class="line">&gt;&gt;&gt; Creating cluster</span><br><span class="line">/usr/local/share/gems/gems/redis-3.2.1/lib/redis/client.rb:443: warning: constant ::Fixnum is deprecated</span><br><span class="line">&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...</span><br><span class="line">Using 3 masters:</span><br><span class="line">118.xx.xxx.54:6391</span><br><span class="line">118.xx.xxx.54:6392</span><br><span class="line">118.xx.xxx.54:6393</span><br><span class="line">Adding replica 118.xx.xxx.54:6394 to 118.xx.xxx.54:6391</span><br><span class="line">Adding replica 118.xx.xxx.54:6395 to 118.xx.xxx.54:6392</span><br><span class="line">Adding replica 118.xx.xxx.54:6396 to 118.xx.xxx.54:6393</span><br><span class="line">M: 561782045ab4a9332859c532ba5f5e8163b527b5 118.xx.xxx.54:6391</span><br><span class="line">   slots:0-5460 (5461 slots) master</span><br><span class="line">M: daf938ff3ed7f571fcb63b2ad2cd952208ede80a 118.xx.xxx.54:6392</span><br><span class="line">   slots:5461-10922 (5462 slots) master</span><br><span class="line">M: 4f2769409d9353896847337a04f09b5254ca00cf 118.xx.xxx.54:6393</span><br><span class="line">   slots:10923-16383 (5461 slots) master</span><br><span class="line">S: 6a5973e8a0dc6c7db1831d0ef7322101be4bf109 118.xx.xxx.54:6394</span><br><span class="line">   replicates 561782045ab4a9332859c532ba5f5e8163b527b5</span><br><span class="line">S: 4059332e853bb8d381ecaff6d802566f549932c2 118.xx.xxx.54:6395</span><br><span class="line">   replicates daf938ff3ed7f571fcb63b2ad2cd952208ede80a</span><br><span class="line">S: d0e0b01e0a9becac7e6dd02cf52f5c28b316af83 118.xx.xxx.54:6396</span><br><span class="line">   replicates 4f2769409d9353896847337a04f09b5254ca00cf</span><br><span class="line">Can I set the above configuration? (type &apos;yes&apos; to accept): yes</span><br><span class="line">&gt;&gt;&gt; Nodes configuration updated</span><br><span class="line">&gt;&gt;&gt; Assign a different config epoch to each node</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span><br><span class="line">Waiting for the cluster to join....</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 118.xx.xxx.54:6391)</span><br><span class="line">M: 561782045ab4a9332859c532ba5f5e8163b527b5 118.xx.xxx.54:6391</span><br><span class="line">   slots:0-5460 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: daf938ff3ed7f571fcb63b2ad2cd952208ede80a 118.xx.xxx.54:6392@16392</span><br><span class="line">   slots:5461-10922 (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: d0e0b01e0a9becac7e6dd02cf52f5c28b316af83 118.xx.xxx.54:6396@16396</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 4f2769409d9353896847337a04f09b5254ca00cf</span><br><span class="line">S: 6a5973e8a0dc6c7db1831d0ef7322101be4bf109 118.xx.xxx.54:6394@16394</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 561782045ab4a9332859c532ba5f5e8163b527b5</span><br><span class="line">M: 4f2769409d9353896847337a04f09b5254ca00cf 118.xx.xxx.54:6393@16393</span><br><span class="line">   slots:10923-16383 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 4059332e853bb8d381ecaff6d802566f549932c2 118.xx.xxx.54:6395@16395</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates daf938ff3ed7f571fcb63b2ad2cd952208ede80a</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br><span class="line"></span><br><span class="line">127.0.0.1:6391&gt; CLUSTER NODES</span><br><span class="line">daf938ff3ed7f571fcb63b2ad2cd952208ede80a 118.xx.xxx.54:6392@16392 master - 0 1574524576000 2 connected 5461-10922</span><br><span class="line">d0e0b01e0a9becac7e6dd02cf52f5c28b316af83 118.xx.xxx.54:6396@16396 slave 4f2769409d9353896847337a04f09b5254ca00cf 0 1574524575566 6 connected</span><br><span class="line">561782045ab4a9332859c532ba5f5e8163b527b5 172.50.0.2:6391@16391 myself,master - 0 1574524575000 1 connected 0-5460</span><br><span class="line">6a5973e8a0dc6c7db1831d0ef7322101be4bf109 118.xx.xxx.54:6394@16394 slave 561782045ab4a9332859c532ba5f5e8163b527b5 0 1574524575000 4 connected</span><br><span class="line">4f2769409d9353896847337a04f09b5254ca00cf 118.xx.xxx.54:6393@16393 master - 0 1574524577570 3 connected 10923-16383</span><br><span class="line">4059332e853bb8d381ecaff6d802566f549932c2 118.xx.xxx.54:6395@16395 slave daf938ff3ed7f571fcb63b2ad2cd952208ede80a 0 1574524577000 5 connected</span><br></pre></td></tr></table></figure>
<h1 id="集群功能限制"><a href="#集群功能限制" class="headerlink" title="集群功能限制"></a>集群功能限制</h1><p>redis集群相对淡季在功能上存在一些限制：</p>
<ol>
<li>key批量操作支持有限。如mset,mget。目前只支持具有相同slot值的key执行批量操作。</li>
<li>key事务操作支持有限。同理只支持多key在同一节点上的事务操作。</li>
<li>不支持多数据库空间。单机下redis可以支持16个数据库，集群模式下只能使用一个数据库空间，即db0。</li>
<li>复制结构只支持一层，从节点只能复制主节点，不支持嵌套树状复制结构</li>
</ol>
<blockquote>
<p>利用redisC扩展支持Mset,Mget操作。 redisCluster<br>Predis包不支持Mset,Mget等批量操作</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>(二)redis docker 哨兵模式</title>
    <url>/2019/20190922-2.html</url>
    <content><![CDATA[<h1 id="Redis主从复制的原理及相关问题"><a href="#Redis主从复制的原理及相关问题" class="headerlink" title="Redis主从复制的原理及相关问题"></a>Redis主从复制的原理及相关问题</h1><ol>
<li>保存主节点信息</li>
<li>主从建立socket连接</li>
<li>发送ping命令</li>
<li>权限验证</li>
<li>同步数据集</li>
<li>命令持续复制</li>
</ol>
<h1 id="全量复制"><a href="#全量复制" class="headerlink" title="全量复制"></a>全量复制</h1><h1 id="部分复制"><a href="#部分复制" class="headerlink" title="部分复制"></a>部分复制</h1><p>redis2.8以后才支持</p>
<h1 id="复制偏移量"><a href="#复制偏移量" class="headerlink" title="复制偏移量"></a>复制偏移量</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">info replication</span><br><span class="line">slave0:ip=172.10.0.3,port=6379,state=online,offset=5545,lag=0</span><br><span class="line">master_repl_offset</span><br></pre></td></tr></table></figure>
<h1 id="积压缓存区"><a href="#积压缓存区" class="headerlink" title="积压缓存区"></a>积压缓存区</h1><h1 id="dockerfile-指令"><a href="#dockerfile-指令" class="headerlink" title="dockerfile 指令"></a>dockerfile 指令</h1><p>COPY<br>ADD<br>CMD<br>ENTRYPOINT<br>ENV<br>ARG<br>VOLUME<br>EXPOSE<br>WORKDIR<br>USER</p>
<h1 id="主从复制的常见问题"><a href="#主从复制的常见问题" class="headerlink" title="主从复制的常见问题"></a>主从复制的常见问题</h1><p>repl-disable-tcp-nodelay<br>yes 时 TCP协议会合并小包统一发送，减少主从节点的包数量并节省带宽，会增加数据同步到slave的时间</p>
<p>slave-priority<br>指定slave的优先级。在不止1个slave的情况下，master宕机时，redis sentinel 会将priority值最小的slave提升为master。需要注意的是，若该配置项为0，则对应的slave永远不会被redis sentinel 自动提升为master</p>
<h1 id="redis-sentinel-哨兵的作用"><a href="#redis-sentinel-哨兵的作用" class="headerlink" title="redis sentinel 哨兵的作用"></a>redis sentinel 哨兵的作用</h1><ol>
<li>监控：定期检查Redis数据节点、其余sentinel节点是否可达</li>
<li>通知：sentinel 节点会将故障转移的结果通知给应用方</li>
<li>主节点故障转移：实现从节点晋升为主节点并维护后续正确的主从关系</li>
<li>sentinel节点本身就是独立的Redis节点，只不过她们有一些特殊，自己不存储数据，只支持部分命令</li>
</ol>
<h1 id="哨兵配置"><a href="#哨兵配置" class="headerlink" title="哨兵配置"></a>哨兵配置</h1><h2 id="新增一个Redis-slave2"><a href="#新增一个Redis-slave2" class="headerlink" title="新增一个Redis-slave2"></a>新增一个Redis-slave2</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@VM_0_6_centos ~]# docker run -itd --name redis-slave2 --net mynetwork -p 6382:6379 --ip 172.10.0.4 redis</span><br><span class="line">d8ceb85aa3bedacad69e0765e5dcac28a4906eeb99c2f22b4e3af2bd3bb29501</span><br><span class="line">[root@VM_0_6_centos ~]# docker exec -it redis-slave2 bash</span><br><span class="line">[root@d8ceb85aa3be /]# vi /etc/redis.conf</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"># JUST COMMENT THE FOLLOWING LINE.</span><br><span class="line"># ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">#bind 127.0.0.1</span><br><span class="line">bind 0.0.0.0</span><br><span class="line"># Protected mode is a layer of security protection, in order to avoid that</span><br><span class="line"># Redis instances left open on the internet are accessed and exploited.</span><br><span class="line">#</span><br><span class="line"># When protected mode is on and if:</span><br><span class="line">#</span><br><span class="line"># 1) The server is not binding explicitly to a set of addresses using the</span><br><span class="line">#    &quot;bind&quot; directive.</span><br><span class="line"># 2) No password is configured.</span><br><span class="line">#</span><br><span class="line"># The server only accepts connections from clients connecting from the</span><br><span class="line"># IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain</span><br><span class="line"># sockets.</span><br><span class="line">#</span><br><span class="line"># By default protected mode is enabled. You should disable it only if</span><br><span class="line"># you are sure you want clients from other hosts to connect to Redis</span><br><span class="line"># even if no authentication is configured, nor a specific set of interfaces</span><br><span class="line"># are explicitly listed using the &quot;bind&quot; directive.</span><br><span class="line">#protected-mode yes</span><br><span class="line">protected-mode no</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># replicaof &lt;masterip&gt; &lt;masterport&gt;</span><br><span class="line">replicaof 172.10.0.2 6379</span><br><span class="line"># If the master is password protected (using the &quot;requirepass&quot; configuration</span><br><span class="line"># directive below) it is possible to tell the replica to authenticate before</span><br><span class="line"># starting the replication synchronization process, otherwise the master will</span><br><span class="line"># refuse the replica request.</span><br><span class="line">#</span><br><span class="line"># masterauth &lt;master-password&gt;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">[root@d8ceb85aa3be /]# redis-server /etc/redis.conf &amp;</span><br><span class="line">[1] 29</span><br><span class="line">[root@d8ceb85aa3be /]# redis-cli</span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"># Replication</span><br><span class="line">role:slave</span><br><span class="line">master_host:172.10.0.2</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:3</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:101921</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:73aa73a6ca2674e214b2081989f8f5cd642b1774</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:101921</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:101880</span><br><span class="line">repl_backlog_histlen:42</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>
<h2 id="配置sentinel集群"><a href="#配置sentinel集群" class="headerlink" title="配置sentinel集群"></a>配置sentinel集群</h2><h3 id="核心配置"><a href="#核心配置" class="headerlink" title="核心配置"></a>核心配置</h3><p><code>sentinel monitor mymaster 127.0.0.1 7000 2</code></p>
<blockquote>
<p>监控的主节点的名字、IP和端口，最后一个2的意思是有几台 sentinel发现问题，就会发生故障转移，例如 配置为2，代表至少有2个sentinel节点认为主节点不可达，那么这个不可达的判断才是客观的。对于设置的越小，那么达到下线的条件越宽松，反之越严格。一般建议将其设置为sentinel节点的一半加1</p>
</blockquote>
<p><code>sentinel  down-after-minllsenconds mymaster 30000</code></p>
<blockquote>
<p>这个是超时的时间（单位是毫秒）。当你去ping一个机器的时候，多长时间后仍ping不通，那么就热为它是有问题的</p>
</blockquote>
<p><code>sentinel parallel-syncs mymaster 1</code></p>
<blockquote>
<p>parallel-syncs就是用来限制在一次故障转移之后，每次向新的主节点发起复制操作的从节点个数，支出sentinel属于并发还是创新，1代表每次只能复制一个，可以减轻master的压力</p>
</blockquote>
<p><code>sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</code></p>
<blockquote>
<p>如果sentinel监控的主节点配置了密码，sentinel auth-pass配置通过添加主节点的密码，房子sentinel节点对主节点无法监控</p>
</blockquote>
<p><code>sentinel failover-timeout mymaster 180000</code></p>
<blockquote>
<p>标识故障转移的时间</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -itd --name redis-sentinel1 --net mynetwork -p 22530:6379 --ip 172.10.0.30 redis</span><br><span class="line">docker run -itd --name redis-sentinel2 --net mynetwork -p 22531:6379 --ip 172.10.0.31 redis</span><br><span class="line">docker run -itd --name redis-sentinel3 --net mynetwork -p 22532:6379 --ip 172.10.0.32 redis</span><br></pre></td></tr></table></figure>
<p>操作记录<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@VM_0_6_centos ~]# docker run -itd --name redis-sentinel1 --net mynetwork -p 22530:6379 --ip 172.10.0.30 redis</span><br><span class="line">706f81a08f15c74581b5f54a351ac809f3d782e7ee96d4f51b4ff745c8520039</span><br><span class="line">[root@VM_0_6_centos ~]# docker exec -it redis-sentinel1 bash</span><br><span class="line">[root@706f81a08f15 /]# vi /etc/redis-sentinel.conf</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"># bind 127.0.0.1 192.168.1.1</span><br><span class="line">#</span><br><span class="line"># protected-mode no</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">protected-mode no</span><br><span class="line"># port &lt;sentinel-port&gt;</span><br><span class="line"># The port that this sentinel instance will run on</span><br><span class="line">port 26379</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># Note: master name should not include special characters or spaces.</span><br><span class="line"># The valid charset is A-z 0-9 and the three characters &quot;.-_&quot;.</span><br><span class="line">#sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class="line">sentinel monitor mymaster 172.10.0.2 6379 2</span><br><span class="line"># sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span><br><span class="line">#</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">[root@706f81a08f15 /]# redis-sentinel /etc/redis-sentinel.conf &amp;</span><br></pre></td></tr></table></figure></p>
<p>配置日志查看<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@706f81a08f15 /]# vi /var/log/redis/sentinel.log</span><br><span class="line">29:X 23 Nov 2019 04:29:30.667 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">29:X 23 Nov 2019 04:29:30.667 # Redis version=5.0.3, bits=64, commit=00000000, modified=0, pid=29, just started</span><br><span class="line">29:X 23 Nov 2019 04:29:30.667 # Configuration loaded</span><br><span class="line">29:X 23 Nov 2019 04:29:30.670 * Running mode=sentinel, port=26379.</span><br><span class="line">29:X 23 Nov 2019 04:29:30.670 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span><br><span class="line">29:X 23 Nov 2019 04:29:30.678 # Sentinel ID is 7475415502d8812fb642905c4837a8e071f7a75a</span><br><span class="line">29:X 23 Nov 2019 04:29:30.678 # +monitor master mymaster 172.10.0.2 6379 quorum 2</span><br><span class="line">29:X 23 Nov 2019 04:29:30.766 * +slave slave 172.10.0.3:6379 172.10.0.3 6379 @ mymaster 172.10.0.2 6379</span><br><span class="line">29:X 23 Nov 2019 04:29:30.772 * +slave slave 172.10.0.4:6379 172.10.0.4 6379 @ mymaster 172.10.0.2 6379</span><br><span class="line">29:X 23 Nov 2019 04:29:37.290 * +sentinel sentinel 9e58d80dbc53015c666e1f3c5dba5146ddf56795 172.10.0.31 26379 @ mymaster 172.10.0.2 6379</span><br><span class="line">29:X 23 Nov 2019 04:29:39.245 * +sentinel sentinel acf0b15e88a1734fdc1af5213817c6ac83aadb78 172.10.0.32 26379 @ mymaster 172.10.0.2 6379</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>备注：其它两台的配置一模一样，参数都不需要改变。哨兵集群只需要配置对主节点的监控即可。重启后0.2新的从节点会和新的0.4主节点建立连接</p>
</blockquote>
<p><img src="https://res.nuoyit.com/lsprod/loan/95dd8baaf6bf45.png" alt="配置查看"></p>
<p>登录查看<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@706f81a08f15 /]# redis-cli -p 26379</span><br><span class="line">127.0.0.1:26379&gt; info</span><br><span class="line"># Server</span><br><span class="line">redis_version:5.0.3</span><br><span class="line">redis_git_sha1:00000000</span><br><span class="line">redis_git_dirty:0</span><br><span class="line">redis_build_id:8c0bf22bfba82c8f</span><br><span class="line">redis_mode:sentinel</span><br><span class="line">os:Linux 3.10.0-862.11.6.el7.x86_64 x86_64</span><br><span class="line">arch_bits:64</span><br><span class="line">multiplexing_api:epoll</span><br><span class="line">atomicvar_api:atomic-builtin</span><br><span class="line">gcc_version:8.2.1</span><br><span class="line">process_id:29</span><br><span class="line">run_id:efcfa986c11fb8a4815bba1db1caee13dcb60bae</span><br><span class="line">tcp_port:26379</span><br><span class="line">uptime_in_seconds:4473</span><br><span class="line">uptime_in_days:0</span><br><span class="line">hz:17</span><br><span class="line">configured_hz:10</span><br><span class="line">lru_clock:14206755</span><br><span class="line">executable:/redis-sentinel</span><br><span class="line">config_file:/etc/redis-sentinel.conf</span><br><span class="line"></span><br><span class="line"># Clients</span><br><span class="line">connected_clients:3</span><br><span class="line">client_recent_max_input_buffer:2</span><br><span class="line">client_recent_max_output_buffer:0</span><br><span class="line">blocked_clients:0</span><br><span class="line"></span><br><span class="line"># CPU</span><br><span class="line">used_cpu_sys:8.485302</span><br><span class="line">used_cpu_user:4.427473</span><br><span class="line">used_cpu_sys_children:0.000000</span><br><span class="line">used_cpu_user_children:0.000000</span><br><span class="line"></span><br><span class="line"># Stats</span><br><span class="line">total_connections_received:3</span><br><span class="line">total_commands_processed:12991</span><br><span class="line">instantaneous_ops_per_sec:2</span><br><span class="line">total_net_input_bytes:716377</span><br><span class="line">total_net_output_bytes:77880</span><br><span class="line">instantaneous_input_kbps:0.16</span><br><span class="line">instantaneous_output_kbps:0.01</span><br><span class="line">rejected_connections:0</span><br><span class="line">sync_full:0</span><br><span class="line">sync_partial_ok:0</span><br><span class="line">sync_partial_err:0</span><br><span class="line">expired_keys:0</span><br><span class="line">expired_stale_perc:0.00</span><br><span class="line">expired_time_cap_reached_count:0</span><br><span class="line">evicted_keys:0</span><br><span class="line">keyspace_hits:0</span><br><span class="line">keyspace_misses:0</span><br><span class="line">pubsub_channels:0</span><br><span class="line">pubsub_patterns:0</span><br><span class="line">latest_fork_usec:0</span><br><span class="line">migrate_cached_sockets:0</span><br><span class="line">slave_expires_tracked_keys:0</span><br><span class="line">active_defrag_hits:0</span><br><span class="line">active_defrag_misses:0</span><br><span class="line">active_defrag_key_hits:0</span><br><span class="line">active_defrag_key_misses:0</span><br><span class="line"></span><br><span class="line"># Sentinel</span><br><span class="line">sentinel_masters:1</span><br><span class="line">sentinel_tilt:0</span><br><span class="line">sentinel_running_scripts:0</span><br><span class="line">sentinel_scripts_queue_length:0</span><br><span class="line">sentinel_simulate_failure_flags:0</span><br><span class="line">master0:name=mymaster,status=ok,address=172.10.0.4:6379,slaves=2,sentinels=3</span><br><span class="line">127.0.0.1:26379&gt; sentinel get-master-addr-by-name mymaster</span><br><span class="line">1) &quot;172.10.0.4&quot;</span><br><span class="line">2) &quot;6379&quot;</span><br></pre></td></tr></table></figure></p>
<h1 id="PHP通过哨兵去任意从库读取数据"><a href="#PHP通过哨兵去任意从库读取数据" class="headerlink" title="PHP通过哨兵去任意从库读取数据"></a>PHP通过哨兵去任意从库读取数据</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by PhpStorm.</span></span><br><span class="line"><span class="comment"> * User: uiste</span></span><br><span class="line"><span class="comment"> * Date: 2019/11/23</span></span><br><span class="line"><span class="comment"> * Time: 下午2:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$sentinelConf = [</span><br><span class="line">	[<span class="string">'ip'</span> =&gt; <span class="string">'172.10.0.30'</span>, <span class="string">'port'</span> =&gt; <span class="number">26379</span>],</span><br><span class="line">	[<span class="string">'ip'</span> =&gt; <span class="string">'172.10.0.31'</span>, <span class="string">'port'</span> =&gt; <span class="number">26379</span>],</span><br><span class="line">	[<span class="string">'ip'</span> =&gt; <span class="string">'172.10.0.32'</span>, <span class="string">'port'</span> =&gt; <span class="number">26379</span>],</span><br><span class="line">];</span><br><span class="line"><span class="comment">//随机访问</span></span><br><span class="line">$sentinelInfo = $sentinelConf[array_rand($sentinelConf)];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$redis = <span class="keyword">new</span> Redis();</span><br><span class="line">$redis-&gt;connect($sentinelInfo[<span class="string">'ip'</span>], $sentinelInfo[<span class="string">'port'</span>]);</span><br><span class="line"></span><br><span class="line">$slavesInfo = $redis-&gt;rawCommand(<span class="string">'SENTINEL'</span>, <span class="string">'slaves'</span>, <span class="string">'mymaster'</span>);</span><br><span class="line">$slaves = [];</span><br><span class="line"><span class="keyword">foreach</span> ($slavesInfo <span class="keyword">as</span> $val) &#123;</span><br><span class="line">	$slaves[] = [<span class="string">'ip'</span> =&gt; $val[<span class="number">3</span>], <span class="string">'port'</span> =&gt; $val[<span class="number">5</span>]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="comment"># 随机从任意从库读取数据</span></span><br><span class="line">		$slave = $slaves[array_rand($slaves)];</span><br><span class="line">		</span><br><span class="line">		$redis = <span class="keyword">new</span> Redis();</span><br><span class="line">		$redis-&gt;connect($slave[<span class="string">'ip'</span>], $slave[<span class="string">'port'</span>]);</span><br><span class="line">		var_dump($slave, $redis-&gt;get(<span class="string">'name'</span>));</span><br><span class="line"></span><br><span class="line">		$count++;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"第&#123;$count&#125;次访问的是：[&#123;$slave['ip']&#125;] : [&#123;$slave['port']&#125;] \r\n"</span>;</span><br><span class="line">		sleep(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">	&#125; <span class="keyword">catch</span> (\RedisException $e) &#123;</span><br><span class="line">		<span class="keyword">echo</span> $e-&gt;getMessage();</span><br><span class="line">		<span class="keyword">die</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>debug info<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@VM_0_6_centos test]# php test.php</span><br><span class="line">array(2) &#123;</span><br><span class="line">  [&quot;ip&quot;]=&gt;</span><br><span class="line">  string(10) &quot;172.10.0.2&quot;</span><br><span class="line">  [&quot;port&quot;]=&gt;</span><br><span class="line">  string(4) &quot;6379&quot;</span><br><span class="line">&#125;</span><br><span class="line">string(5) &quot;uiste&quot;</span><br><span class="line">第1次访问的是：[172.10.0.2] : [6379]</span><br><span class="line">array(2) &#123;</span><br><span class="line">  [&quot;ip&quot;]=&gt;</span><br><span class="line">  string(10) &quot;172.10.0.2&quot;</span><br><span class="line">  [&quot;port&quot;]=&gt;</span><br><span class="line">  string(4) &quot;6379&quot;</span><br><span class="line">&#125;</span><br><span class="line">string(5) &quot;uiste&quot;</span><br><span class="line">第2次访问的是：[172.10.0.2] : [6379]</span><br><span class="line">array(2) &#123;</span><br><span class="line">  [&quot;ip&quot;]=&gt;</span><br><span class="line">  string(10) &quot;172.10.0.3&quot;</span><br><span class="line">  [&quot;port&quot;]=&gt;</span><br><span class="line">  string(4) &quot;6379&quot;</span><br><span class="line">&#125;</span><br><span class="line">string(5) &quot;uiste&quot;</span><br><span class="line">第3次访问的是：[172.10.0.3] : [6379]</span><br><span class="line">array(2) &#123;</span><br><span class="line">  [&quot;ip&quot;]=&gt;</span><br><span class="line">  string(10) &quot;172.10.0.2&quot;</span><br><span class="line">  [&quot;port&quot;]=&gt;</span><br><span class="line">  string(4) &quot;6379&quot;</span><br><span class="line">&#125;</span><br><span class="line">string(5) &quot;uiste&quot;</span><br><span class="line">第4次访问的是：[172.10.0.2] : [6379]</span><br><span class="line"></span><br><span class="line">debug $slavesInfo</span><br><span class="line">array(2) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  array(40) &#123;</span><br><span class="line">    [0]=&gt;</span><br><span class="line">    string(4) &quot;name&quot;</span><br><span class="line">    [1]=&gt;</span><br><span class="line">    string(15) &quot;172.10.0.2:6379&quot;</span><br><span class="line">    [2]=&gt;</span><br><span class="line">    string(2) &quot;ip&quot;</span><br><span class="line">    [3]=&gt;</span><br><span class="line">    string(10) &quot;172.10.0.2&quot;</span><br><span class="line">    [4]=&gt;</span><br><span class="line">    string(4) &quot;port&quot;</span><br><span class="line">    [5]=&gt;</span><br><span class="line">    string(4) &quot;6379&quot;</span><br><span class="line">    [6]=&gt;</span><br><span class="line">    string(5) &quot;runid&quot;</span><br><span class="line">    [7]=&gt;</span><br><span class="line">    string(40) &quot;0e681802737476f1432e1bd21fa85b15d008892a&quot;</span><br><span class="line">    [8]=&gt;</span><br><span class="line">    string(5) &quot;flags&quot;</span><br><span class="line">    [9]=&gt;</span><br><span class="line">    string(5) &quot;slave&quot;</span><br><span class="line">    [10]=&gt;</span><br><span class="line">    string(21) &quot;link-pending-commands&quot;</span><br><span class="line">    [11]=&gt;</span><br><span class="line">    string(1) &quot;0&quot;</span><br><span class="line">    [12]=&gt;</span><br><span class="line">    string(13) &quot;link-refcount&quot;</span><br><span class="line">    [13]=&gt;</span><br><span class="line">    string(1) &quot;1&quot;</span><br><span class="line">    [14]=&gt;</span><br><span class="line">    string(14) &quot;last-ping-sent&quot;</span><br><span class="line">    [15]=&gt;</span><br><span class="line">    string(1) &quot;0&quot;</span><br><span class="line">    [16]=&gt;</span><br><span class="line">    string(18) &quot;last-ok-ping-reply&quot;</span><br><span class="line">    [17]=&gt;</span><br><span class="line">    string(3) &quot;490&quot;</span><br><span class="line">    [18]=&gt;</span><br><span class="line">    string(15) &quot;last-ping-reply&quot;</span><br><span class="line">    [19]=&gt;</span><br><span class="line">    string(3) &quot;490&quot;</span><br><span class="line">    [20]=&gt;</span><br><span class="line">    string(23) &quot;down-after-milliseconds&quot;</span><br><span class="line">    [21]=&gt;</span><br><span class="line">    string(5) &quot;30000&quot;</span><br><span class="line">    [22]=&gt;</span><br><span class="line">    string(12) &quot;info-refresh&quot;</span><br><span class="line">    [23]=&gt;</span><br><span class="line">    string(4) &quot;5825&quot;</span><br><span class="line">    [24]=&gt;</span><br><span class="line">    string(13) &quot;role-reported&quot;</span><br><span class="line">    [25]=&gt;</span><br><span class="line">    string(5) &quot;slave&quot;</span><br><span class="line">    [26]=&gt;</span><br><span class="line">    string(18) &quot;role-reported-time&quot;</span><br><span class="line">    [27]=&gt;</span><br><span class="line">    string(7) &quot;9292293&quot;</span><br><span class="line">    [28]=&gt;</span><br><span class="line">    string(21) &quot;master-link-down-time&quot;</span><br><span class="line">    [29]=&gt;</span><br><span class="line">    string(1) &quot;0&quot;</span><br><span class="line">    [30]=&gt;</span><br><span class="line">    string(18) &quot;master-link-status&quot;</span><br><span class="line">    [31]=&gt;</span><br><span class="line">    string(2) &quot;ok&quot;</span><br><span class="line">    [32]=&gt;</span><br><span class="line">    string(11) &quot;master-host&quot;</span><br><span class="line">    [33]=&gt;</span><br><span class="line">    string(10) &quot;172.10.0.4&quot;</span><br><span class="line">    [34]=&gt;</span><br><span class="line">    string(11) &quot;master-port&quot;</span><br><span class="line">    [35]=&gt;</span><br><span class="line">    string(4) &quot;6379&quot;</span><br><span class="line">    [36]=&gt;</span><br><span class="line">    string(14) &quot;slave-priority&quot;</span><br><span class="line">    [37]=&gt;</span><br><span class="line">    string(3) &quot;100&quot;</span><br><span class="line">    [38]=&gt;</span><br><span class="line">    string(17) &quot;slave-repl-offset&quot;</span><br><span class="line">    [39]=&gt;</span><br><span class="line">    string(7) &quot;2791574&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  [1]=&gt;</span><br><span class="line">  array(40) &#123;</span><br><span class="line">    [0]=&gt;</span><br><span class="line">    string(4) &quot;name&quot;</span><br><span class="line">    [1]=&gt;</span><br><span class="line">    string(15) &quot;172.10.0.3:6379&quot;</span><br><span class="line">    [2]=&gt;</span><br><span class="line">    string(2) &quot;ip&quot;</span><br><span class="line">    [3]=&gt;</span><br><span class="line">    string(10) &quot;172.10.0.3&quot;</span><br><span class="line">    [4]=&gt;</span><br><span class="line">    string(4) &quot;port&quot;</span><br><span class="line">    [5]=&gt;</span><br><span class="line">    string(4) &quot;6379&quot;</span><br><span class="line">    [6]=&gt;</span><br><span class="line">    string(5) &quot;runid&quot;</span><br><span class="line">    [7]=&gt;</span><br><span class="line">    string(40) &quot;74c3a5ad5201ec08b04c34a6c1e8be43e3454f2f&quot;</span><br><span class="line">    [8]=&gt;</span><br><span class="line">    string(5) &quot;flags&quot;</span><br><span class="line">    [9]=&gt;</span><br><span class="line">    string(5) &quot;slave&quot;</span><br><span class="line">    [10]=&gt;</span><br><span class="line">    string(21) &quot;link-pending-commands&quot;</span><br><span class="line">    [11]=&gt;</span><br><span class="line">    string(1) &quot;0&quot;</span><br><span class="line">    [12]=&gt;</span><br><span class="line">    string(13) &quot;link-refcount&quot;</span><br><span class="line">    [13]=&gt;</span><br><span class="line">    string(1) &quot;1&quot;</span><br><span class="line">    [14]=&gt;</span><br><span class="line">    string(14) &quot;last-ping-sent&quot;</span><br><span class="line">    [15]=&gt;</span><br><span class="line">    string(1) &quot;0&quot;</span><br><span class="line">    [16]=&gt;</span><br><span class="line">    string(18) &quot;last-ok-ping-reply&quot;</span><br><span class="line">    [17]=&gt;</span><br><span class="line">    string(3) &quot;490&quot;</span><br><span class="line">    [18]=&gt;</span><br><span class="line">    string(15) &quot;last-ping-reply&quot;</span><br><span class="line">    [19]=&gt;</span><br><span class="line">    string(3) &quot;490&quot;</span><br><span class="line">    [20]=&gt;</span><br><span class="line">    string(23) &quot;down-after-milliseconds&quot;</span><br><span class="line">    [21]=&gt;</span><br><span class="line">    string(5) &quot;30000&quot;</span><br><span class="line">    [22]=&gt;</span><br><span class="line">    string(12) &quot;info-refresh&quot;</span><br><span class="line">    [23]=&gt;</span><br><span class="line">    string(4) &quot;2184&quot;</span><br><span class="line">    [24]=&gt;</span><br><span class="line">    string(13) &quot;role-reported&quot;</span><br><span class="line">    [25]=&gt;</span><br><span class="line">    string(5) &quot;slave&quot;</span><br><span class="line">    [26]=&gt;</span><br><span class="line">    string(18) &quot;role-reported-time&quot;</span><br><span class="line">    [27]=&gt;</span><br><span class="line">    string(8) &quot;13031310&quot;</span><br><span class="line">    [28]=&gt;</span><br><span class="line">    string(21) &quot;master-link-down-time&quot;</span><br><span class="line">    [29]=&gt;</span><br><span class="line">    string(1) &quot;0&quot;</span><br><span class="line">    [30]=&gt;</span><br><span class="line">    string(18) &quot;master-link-status&quot;</span><br><span class="line">    [31]=&gt;</span><br><span class="line">    string(2) &quot;ok&quot;</span><br><span class="line">    [32]=&gt;</span><br><span class="line">    string(11) &quot;master-host&quot;</span><br><span class="line">    [33]=&gt;</span><br><span class="line">    string(10) &quot;172.10.0.4&quot;</span><br><span class="line">    [34]=&gt;</span><br><span class="line">    string(11) &quot;master-port&quot;</span><br><span class="line">    [35]=&gt;</span><br><span class="line">    string(4) &quot;6379&quot;</span><br><span class="line">    [36]=&gt;</span><br><span class="line">    string(14) &quot;slave-priority&quot;</span><br><span class="line">    [37]=&gt;</span><br><span class="line">    string(3) &quot;100&quot;</span><br><span class="line">    [38]=&gt;</span><br><span class="line">    string(17) &quot;slave-repl-offset&quot;</span><br><span class="line">    [39]=&gt;</span><br><span class="line">    string(7) &quot;2792254&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>(一)redis docker 主从配置</title>
    <url>/2019/20190922-1.html</url>
    <content><![CDATA[<h1 id="环境相关"><a href="#环境相关" class="headerlink" title="环境相关"></a>环境相关</h1><h2 id="docker-安装参考"><a href="#docker-安装参考" class="headerlink" title="docker 安装参考"></a>docker 安装参考</h2><p>参考: <a href="https://yeasy.gitbooks.io/docker_practice/install/" target="_blank" rel="noopener">Docker 安装</a></p>
<h2 id="docker-lnmp-集成环境"><a href="#docker-lnmp-集成环境" class="headerlink" title="docker-lnmp 集成环境"></a>docker-lnmp 集成环境</h2><p>参考：<a href="https://github.com/uiste/docker-lnmp" target="_blank" rel="noopener">Docker-lnmp</a></p>
<h1 id="Redis-主从配置"><a href="#Redis-主从配置" class="headerlink" title="Redis 主从配置"></a>Redis 主从配置</h1><h2 id="指定自定义网络"><a href="#指定自定义网络" class="headerlink" title="指定自定义网络"></a>指定自定义网络</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@VM_0_6_centos redis]# pwd</span><br><span class="line">/data/web/redis</span><br><span class="line"></span><br><span class="line">[root@VM_0_6_centos redis]# docker network create --subnet=172.10.0.0/16 mynetwork</span><br><span class="line">1e74de7cbd62306d0f1785e83ef5426cafb021cccd6e1bdfaa316cd7017911d9</span><br></pre></td></tr></table></figure>
<h2 id="创建-Dockerfile"><a href="#创建-Dockerfile" class="headerlink" title="创建 Dockerfile"></a>创建 Dockerfile</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM centos:latest</span><br><span class="line">RUN groupadd -r redis &amp;&amp; useradd  -r -g redis redis</span><br><span class="line">RUN yum -y update &amp;&amp;  yum -y install epel-release &amp;&amp; yum -y install redis &amp;&amp; yum -y install net-tools</span><br><span class="line">EXPOSE 6379</span><br></pre></td></tr></table></figure>
<h2 id="在-Dockerfile-目录-执行下面的代码，注意后面上下文点号"><a href="#在-Dockerfile-目录-执行下面的代码，注意后面上下文点号" class="headerlink" title="在 Dockerfile 目录 执行下面的代码，注意后面上下文点号"></a>在 Dockerfile 目录 执行下面的代码，注意后面上下文点号</h2><p><code>docker build -t redis .</code></p>
<h2 id="使用此docker-镜像-创建容器"><a href="#使用此docker-镜像-创建容器" class="headerlink" title="使用此docker 镜像 创建容器"></a>使用此docker 镜像 创建容器</h2><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -itd --name redis-master --net mynetwork -p 6380:6379 --ip 172.10.0.2 redis</span><br><span class="line">docker run -itd --name redis-slave --net mynetwork -p 6381:6379 --ip 172.10.0.3 redis</span><br><span class="line">docker run -itd --name redis-slave2 --net mynetwork -p 6382:6379 --ip 172.10.0.4 redis</span><br></pre></td></tr></table></figure></p>
<p>参数说明：<br>参考: <a href="https://www.runoob.com/docker/docker-command-manual.html" target="_blank" rel="noopener">菜鸟教程文档</a></p>
<h3 id="查看网络"><a href="#查看网络" class="headerlink" title="查看网络"></a>查看网络</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@VM_0_6_centos redis]# docker network inspect mynetwork</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;mynetwork&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;1e74de7cbd62306d0f1785e83ef5426cafb021cccd6e1bdfaa316cd7017911d9&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2019-09-22T14:01:10.470838603+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;172.10.0.0/16&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;3391a5251e6324274a6f431b0346fabb9010cbcc0fe156c988ffb6bd20148a72&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;redis-master&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;6e6505d09e0b2a58d80a8b3e306f506dd2da8a7c77f345a051d05cce4618a6a4&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:0a:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.10.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;ff01a57b5de5d54a387d5945fe8b7d5d12b2cf3476b6f93ed6dc4a0f82fa0aef&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;redis-slave&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;5a5d3ea726d9b7b9fc7555138e209ad3ec04fa758713c210c1cd8269806f2b05&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:0a:00:03&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.10.0.3/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@VM_0_6_centos redis]# docker exec -it ff01a57b5de5 /bin/bash</span><br><span class="line">[root@ff01a57b5de5 /]#</span><br></pre></td></tr></table></figure>
<h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><h3 id="主从复制说明"><a href="#主从复制说明" class="headerlink" title="主从复制说明"></a>主从复制说明</h3><p>为了解决单一节点 机器故障、容量瓶颈等问题，会把数据复制多个副本部署到其它节点上进行冗余备份。实现Redis的高可用。</p>
<blockquote>
<p>主从复制-&gt;哨兵-&gt;集群</p>
</blockquote>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>redis服务器启动后，直接通过客户端执行命令：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">slaveof &lt;masterip&gt; &lt;masterport&gt; 则该redis实例成为从节点</span><br><span class="line"></span><br><span class="line">slaveof no one 断开连接</span><br></pre></td></tr></table></figure></p>
<p>修改redis保护模式 配置从节点依赖的主节点IP</p>
<p>主节点调整<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@VM_0_6_centos redis]# docker exec -it redis-master /bin/bash</span><br><span class="line">[root@ff01a57b5de5 /]# vi /etc/redis.conf</span><br><span class="line">...</span><br><span class="line"># JUST COMMENT THE FOLLOWING LINE.</span><br><span class="line"># ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">#bind 127.0.0.1</span><br><span class="line">bind 0.0.0.0</span><br><span class="line"># Protected mode is a layer of security protection, in order to avoid that</span><br><span class="line"># Redis instances left open on the internet are accessed and exploited.</span><br><span class="line">#</span><br><span class="line"># When protected mode is on and if:</span><br><span class="line">#</span><br><span class="line"># 1) The server is not binding explicitly to a set of addresses using the</span><br><span class="line">#    &quot;bind&quot; directive.</span><br><span class="line"># 2) No password is configured.</span><br><span class="line">#</span><br><span class="line"># The server only accepts connections from clients connecting from the</span><br><span class="line"># IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain</span><br><span class="line"># sockets.</span><br><span class="line">#</span><br><span class="line"># By default protected mode is enabled. You should disable it only if</span><br><span class="line"># you are sure you want clients from other hosts to connect to Redis</span><br><span class="line"># even if no authentication is configured, nor a specific set of interfaces</span><br><span class="line"># are explicitly listed using the &quot;bind&quot; directive.</span><br><span class="line">#protected-mode yes</span><br><span class="line">protected-mode no</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<p>从节点调整<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@VM_0_6_centos redis]# docker exec -it redis-slave /bin/bash</span><br><span class="line">[root@ff01a57b5de5 /]# vi /etc/redis.conf</span><br><span class="line">...</span><br><span class="line"># JUST COMMENT THE FOLLOWING LINE.</span><br><span class="line"># ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">#bind 127.0.0.1</span><br><span class="line">bind 0.0.0.0</span><br><span class="line"># Protected mode is a layer of security protection, in order to avoid that</span><br><span class="line"># Redis instances left open on the internet are accessed and exploited.</span><br><span class="line">#</span><br><span class="line"># When protected mode is on and if:</span><br><span class="line">#</span><br><span class="line"># 1) The server is not binding explicitly to a set of addresses using the</span><br><span class="line">#    &quot;bind&quot; directive.</span><br><span class="line"># 2) No password is configured.</span><br><span class="line">#</span><br><span class="line"># The server only accepts connections from clients connecting from the</span><br><span class="line"># IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain</span><br><span class="line"># sockets.</span><br><span class="line">#</span><br><span class="line"># By default protected mode is enabled. You should disable it only if</span><br><span class="line"># you are sure you want clients from other hosts to connect to Redis</span><br><span class="line"># even if no authentication is configured, nor a specific set of interfaces</span><br><span class="line"># are explicitly listed using the &quot;bind&quot; directive.</span><br><span class="line">#protected-mode yes</span><br><span class="line">protected-mode no</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># replicaof &lt;masterip&gt; &lt;masterport&gt;</span><br><span class="line">replicaof 172.10.0.2 6379</span><br><span class="line"># If the master is password protected (using the &quot;requirepass&quot; configuration</span><br><span class="line"># directive below) it is possible to tell the replica to authenticate before</span><br><span class="line"># starting the replication synchronization process, otherwise the master will</span><br><span class="line"># refuse the replica request.</span><br><span class="line">#</span><br><span class="line"># masterauth &lt;master-password&gt;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<h3 id="数据测试"><a href="#数据测试" class="headerlink" title="数据测试"></a>数据测试</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@VM_0_6_centos redis]# docker exec -it redis-master /bin/bash</span><br><span class="line">[root@3391a5251e63 /]# vi /etc/redis.conf</span><br><span class="line">[root@3391a5251e63 /]# redis-server /etc/redis.conf &amp;</span><br><span class="line">[1] 28</span><br><span class="line">[root@3391a5251e63 /]# redis-cli</span><br><span class="line">127.0.0.1:6379&gt; set name uiste</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">&quot;uiste&quot;</span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"># Replication</span><br><span class="line">role:master</span><br><span class="line">connected_slaves:1</span><br><span class="line">slave0:ip=172.10.0.3,port=6379,state=online,offset=5545,lag=0</span><br><span class="line">master_replid:73aa73a6ca2674e214b2081989f8f5cd642b1774</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:5545</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:5545</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@VM_0_6_centos ~]# docker exec -it redis-slave /bin/bash</span><br><span class="line">[root@ff01a57b5de5 /]# redis-server /etc/redis.conf &amp;</span><br><span class="line">[1] 73</span><br><span class="line">[root@ff01a57b5de5 /]# redis-cli</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">&quot;uiste&quot;</span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"># Replication</span><br><span class="line">role:slave</span><br><span class="line">master_host:172.10.0.2</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:3</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:5503</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:73aa73a6ca2674e214b2081989f8f5cd642b1774</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:5503</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:5503</span><br></pre></td></tr></table></figure>
<blockquote>
<p>多个从节点的时候，避免主节点同步压力的增加，可以将其它从节点依赖于从节点同步</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>多级缓存架构设计需要解决的问题</title>
    <url>/2019/20190921-1.html</url>
    <content><![CDATA[<h2 id="数据库-缓存双写一致性解决方案"><a href="#数据库-缓存双写一致性解决方案" class="headerlink" title="数据库+缓存双写一致性解决方案"></a>数据库+缓存双写一致性解决方案</h2><blockquote>
<p>面临难题：高并发场景下，如何解决数据库与缓存双写的时候数据不一致的情况？</p>
</blockquote>
<h2 id="缓存维度化拆分解决方案"><a href="#缓存维度化拆分解决方案" class="headerlink" title="缓存维度化拆分解决方案"></a>缓存维度化拆分解决方案</h2><blockquote>
<p>面临难题：如何解决大value缓存的全量更新效率低下问题？</p>
</blockquote>
<h2 id="缓存命中率提升解决方案"><a href="#缓存命中率提升解决方案" class="headerlink" title="缓存命中率提升解决方案"></a>缓存命中率提升解决方案</h2><blockquote>
<p>面临难题：如何将缓存命中率</p>
</blockquote>
<h2 id="缓存并发重建冲突解决方案"><a href="#缓存并发重建冲突解决方案" class="headerlink" title="缓存并发重建冲突解决方案"></a>缓存并发重建冲突解决方案</h2><blockquote>
<p>面临难题：如何解决高并发场景下，缓存重建时的分布式并发重建的冲突问题？</p>
</blockquote>
<h2 id="缓存预热解决方案"><a href="#缓存预热解决方案" class="headerlink" title="缓存预热解决方案"></a>缓存预热解决方案</h2><blockquote>
<p>面临难题：如何解决高并发场景下，缓存冷启动导致MySQL负载过高，甚至瞬间被打死的问题？</p>
</blockquote>
<h2 id="缓存雪崩解决方案"><a href="#缓存雪崩解决方案" class="headerlink" title="缓存雪崩解决方案"></a>缓存雪崩解决方案</h2><blockquote>
<p>面临难题：如何解决恐怖的缓存雪崩问题？避免给公司带来巨大的经济损失？</p>
</blockquote>
<h2 id="缓存穿透解决方案"><a href="#缓存穿透解决方案" class="headerlink" title="缓存穿透解决方案"></a>缓存穿透解决方案</h2><blockquote>
<p>面临难题：如何解决高并发场景下的缓存穿透问题？避免给MySQL带来过大的压力？</p>
</blockquote>
<h2 id="缓存失效解决方案"><a href="#缓存失效解决方案" class="headerlink" title="缓存失效解决方案"></a>缓存失效解决方案</h2><blockquote>
<p>面临难题：如何解决高并发场景下的缓存失效问题？避免给redis集群带来过大的压力？</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>git commit 提交的时候报错</title>
    <url>/2019/20190830-1.html</url>
    <content><![CDATA[<p>git commit 提交的时候报错husky &gt; pre-commit</p>
<p>这个问题是因为当你在终端输入git commit -m “XXX”,提交代码的时候,pre-commit(客户端)钩子，它会在Git键入提交信息前运行做代码风格检查。如果代码不符合相应规则，则报错，而它的检测规则就是根据.git/hooks/pre-commit文件里面的相关定义。查询了网上的解决办法，总结为以下三种解决方案，个人喜欢第三种：</p>
<blockquote>
<p>卸载husky。只要把项目的package.json文件中devDependencies节点下的husky库删掉，然后重新npm i 一次即可。或者直接在项目根目录下执行npm uninstall husky –save也可以，再次提交，自动化测试功能就屏蔽掉</p>
</blockquote>
<blockquote>
<p>进入项目的.git文件夹(文件夹默认隐藏,可先设置显示或者命令ls查找),再进入hooks文件夹,删除pre-commit文件,重新git commit -m ‘xxx’ git push即可。</p>
</blockquote>
<blockquote>
<p>将git commit -m “XXX” 改为 git commit –no-verify -m “XXX”</p>
</blockquote>
<p>注册页<br><a href="https://res.mimeicy.cn/lsprod/loan/35d217e7b39284.png" target="_blank" rel="noopener">https://res.mimeicy.cn/lsprod/loan/35d217e7b39284.png</a></p>
<p>IOS<br><a href="https://res.mimeicy.cn/lsprod/loan/75d217e4503fb4.png" target="_blank" rel="noopener">https://res.mimeicy.cn/lsprod/loan/75d217e4503fb4.png</a></p>
<p>安卓<br><a href="https://res.mimeicy.cn/lsprod/loan/85d217e6a2a086.png" target="_blank" rel="noopener">https://res.mimeicy.cn/lsprod/loan/85d217e6a2a086.png</a></p>
]]></content>
  </entry>
  <entry>
    <title>shell 脚本</title>
    <url>/2019/20190822-2.html</url>
    <content><![CDATA[<h1 id="续"><a href="#续" class="headerlink" title="续"></a>续</h1><ol>
<li>基本监控系统脚本（CPU，内存，IO等）</li>
<li>后台服务监控、启动、停止脚本、数据备份脚本</li>
<li>利用grep、sed和awk的复杂用法处理文本</li>
<li>功能函数编写、主流程设计</li>
<li>具备复杂功能的大型脚本工具编写</li>
</ol>
<h1 id="变量替换"><a href="#变量替换" class="headerlink" title="变量替换"></a>变量替换</h1><table>
<thead>
<tr>
<th style="text-align:left">语法</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">${变量名#匹配规则}</td>
<td style="text-align:left">从变量开头进行规则匹配，将符合最短的数据删除</td>
</tr>
<tr>
<td style="text-align:left">${变量名##匹配规则}</td>
<td style="text-align:left">从变量开头进行规则匹配，将符合最长的数据删除</td>
</tr>
<tr>
<td style="text-align:left">${变量名%匹配规则}</td>
<td style="text-align:left">从变量尾部进行规则匹配，将符合最短的数据删除</td>
</tr>
<tr>
<td style="text-align:left">${变量名%%匹配规则}</td>
<td style="text-align:left">从变量尾部进行规则匹配，将符合最长的数据删除</td>
</tr>
<tr>
<td style="text-align:left">${变量名/匹配规则}</td>
<td style="text-align:left">变量内容符合旧字符串，则第一个旧字符串会被新字符串取代</td>
</tr>
<tr>
<td style="text-align:left">${变量名//匹配规则}</td>
<td style="text-align:left">变量内容符合旧字符串，则全部旧字符串会被新字符串取代</td>
</tr>
</tbody>
</table>
<h1 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h1><h2 id="计算字符串长度"><a href="#计算字符串长度" class="headerlink" title="计算字符串长度"></a>计算字符串长度</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法一：$&#123;#string&#125;</span><br><span class="line">方法二：expr length $string</span><br></pre></td></tr></table></figure>
<h2 id="获取字符索引位置"><a href="#获取字符索引位置" class="headerlink" title="获取字符索引位置"></a>获取字符索引位置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法：expr index &quot;$string&quot; substr</span><br></pre></td></tr></table></figure>
<h2 id="获取子串长度"><a href="#获取子串长度" class="headerlink" title="获取子串长度"></a>获取子串长度</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法：expr match &quot;$string&quot; substr</span><br></pre></td></tr></table></figure>
<h2 id="抽取字符串中的子串"><a href="#抽取字符串中的子串" class="headerlink" title="抽取字符串中的子串"></a>抽取字符串中的子串</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法一：</span><br><span class="line"></span><br><span class="line">1. $&#123;string:position&#125;</span><br><span class="line">2. $&#123;string:position:length&#125;</span><br><span class="line">3. $&#123;string: -postion&#125; 或者 $&#123;string:(position)&#125;</span><br><span class="line"></span><br><span class="line">方法二：</span><br><span class="line">`expr substr $string $position $length`</span><br><span class="line"></span><br><span class="line">&gt;使用expr，索引计数从1开始计算；使用`$&#123;string:positon:length&#125;`，索引计数从0开始</span><br></pre></td></tr></table></figure>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">string=<span class="string">"Bigdata process framework is Hadoop,Hadoop is an open source project"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> print_tips</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"*********************************"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"(1) 打印string长度"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"(2) 删除字符串中所有的Hadoop"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"(3) 替换第一个Hadoop为Mapreduce"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"(4) 替换全部的Hadoop为Mapreduce"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"*********************************"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> len_of_string</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;#string&#125;</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> del_hadoop</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;string//Hadoop/&#125;</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> rep_hadoop_mapreduce_first</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;string/Hadoop/Mapreduce&#125;</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> rep_hadoop_mapreduce_all</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;string//Hadoop/Mapreduce&#125;</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"【string=<span class="variable">$string</span>]"</span></span><br><span class="line">print_tips</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"please input your choice(1|2|3|4|q|Q): "</span> choice</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$choice</span> <span class="keyword">in</span> </span><br><span class="line">	1)</span><br><span class="line">		len_of_string</span><br><span class="line">		;;</span><br><span class="line">	2)</span><br><span class="line">		del_hadoop</span><br><span class="line">		;;</span><br><span class="line">	3)</span><br><span class="line">		rep_hadoop_mapreduce_first</span><br><span class="line">		;;</span><br><span class="line">	4)</span><br><span class="line">		rep_hadoop_mapreduce_all</span><br><span class="line">		;;</span><br><span class="line">	q|Q)</span><br><span class="line">		<span class="built_in">exit</span></span><br><span class="line">		;;</span><br><span class="line">	*)</span><br><span class="line">		<span class="built_in">echo</span> <span class="string">"Error, Input only in (1|2|3|4|q|Q)"</span></span><br><span class="line">		;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<h1 id="命令替换"><a href="#命令替换" class="headerlink" title="命令替换"></a>命令替换</h1><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>方法一：<code>command</code><br>方法二：<code>$(command)</code></p>
<ul>
<li><p>例子1：<br>获取系统的所有用户并输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">index=1</span><br><span class="line"><span class="keyword">for</span> user <span class="keyword">in</span> `cat /etc/passwd | cut -d <span class="string">":"</span> -f 1`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"This is <span class="variable">$index</span> user : <span class="variable">$user</span>"</span></span><br><span class="line">index=$((<span class="variable">$index</span>+1))</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>例子2：<br>根据系统时间计算今年或明年</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;This is $(date +%Y) year&quot;</span><br><span class="line">echo &quot;This is $(($(date +%Y) + 1)) year &quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>例子3：<br>根据系统时间获取今年还剩下多少星期，已经过了多少星期</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;This year have passed $(date +%j) days&quot;</span><br><span class="line">echo &quot;This year have passed $(($(date +%j)/7)) weeks&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>例子4：<br>判定nginx进程是否存在，若不存在则自动拉起该进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">nginx_process_num=$(ps -ef | grep nginx | grep -v grep | wc -l)</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$nginx_process_num</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line">	<span class="comment">#systemctl start nginx</span></span><br><span class="line">	brew services start nginx</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>`` 和 $() 两者是等价的，但推荐使用 $() ，易于掌握；缺点是极少数Unix可能不支持<br>$(()) 主要用来进行整数运算，包括加减乘除，引用变量前面可以加$，也可以不加$</p>
</blockquote>
<h1 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h1><h2 id="声明变量类型为只读类型"><a href="#声明变量类型为只读类型" class="headerlink" title="声明变量类型为只读类型"></a>声明变量类型为只读类型</h2><p><code>declare -r var=&quot;hello&quot;</code></p>
<h2 id="声明变量类型为整形"><a href="#声明变量类型为整形" class="headerlink" title="声明变量类型为整形"></a>声明变量类型为整形</h2><p><code>declare -i</code></p>
<h2 id="在脚本中显示定义的函数和内容"><a href="#在脚本中显示定义的函数和内容" class="headerlink" title="在脚本中显示定义的函数和内容"></a>在脚本中显示定义的函数和内容</h2><p><code>declare -f</code></p>
<h2 id="在脚本中显示定义的函数"><a href="#在脚本中显示定义的函数" class="headerlink" title="在脚本中显示定义的函数"></a>在脚本中显示定义的函数</h2><p><code>declare -F</code></p>
<h2 id="声明数组"><a href="#声明数组" class="headerlink" title="声明数组"></a>声明数组</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">declare</span> -a array</span><br><span class="line">array=(<span class="string">"jones"</span> <span class="string">"mike"</span> <span class="string">"kobe"</span> <span class="string">'jordan'</span>)</span><br><span class="line"></span><br><span class="line">输出数组内容：</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[@]&#125;</span> 	输出全部内容</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[1]&#125;</span> 	输出下标索引为1的内容</span><br><span class="line"></span><br><span class="line">获取数组长度</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#array[@]&#125;</span> 	输出数组内元素的个数</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#array[2]&#125;</span> 	输出数组下标索引为2的元素的长度</span><br><span class="line"></span><br><span class="line">给数组某个下标赋值</span><br><span class="line">array[0] = <span class="string">'lily'</span></span><br><span class="line"></span><br><span class="line">删除元素</span><br><span class="line"><span class="built_in">unset</span> array[2] 清空元素</span><br></pre></td></tr></table></figure>
<h1 id="数学运算之expr"><a href="#数学运算之expr" class="headerlink" title="数学运算之expr"></a>数学运算之expr</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|</span><br><span class="line">&amp;</span><br><span class="line">&gt;</span><br><span class="line">&gt;=</span><br><span class="line">&lt;</span><br><span class="line">&lt;=</span><br><span class="line">=</span><br><span class="line">!=</span><br><span class="line">+</span><br><span class="line">-</span><br><span class="line">*</span><br><span class="line">/</span><br><span class="line">%</span><br></pre></td></tr></table></figure>
<h1 id="Nginx-监控脚本"><a href="#Nginx-监控脚本" class="headerlink" title="Nginx 监控脚本"></a>Nginx 监控脚本</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">this_pid=$$</span><br><span class="line">status=`ps -ef | grep nginx | grep -v nginx | grep -v <span class="variable">$this_pid</span> &amp;&gt; /dev/null`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$status</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Nginx is running well"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">systemctl start nginx</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Nginx is down, Start it ..."</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>（一）nginx 原理与模块</title>
    <url>/2019/20190801-1.html</url>
    <content><![CDATA[<p><a href="https://wizardforcel.gitbooks.io/nginx-doc/content/Text/1.3_install.html" target="_blank" rel="noopener">官方文档参考1</a><br><a href="https://tengine.taobao.org/nginx_docs/cn/docs/" target="_blank" rel="noopener">Tengine文档参考2</a></p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>正向代理</p>
<blockquote>
<p>代购、翻墙工具。特点客户端非常明确要访问的服务器地址，服务器只清楚请求来自哪个代理服务器，而不请求具体的客户端。</p>
</blockquote>
<p>方向代理</p>
<blockquote>
<p>负载均衡、分布式部署。特点按照一定的规则分发给后盾业务处理服务器。来源是客户端请求去哪里由代理服务器根据规则决定。</p>
</blockquote>
<h2 id="NGINX特性："><a href="#NGINX特性：" class="headerlink" title="NGINX特性："></a>NGINX特性：</h2><ol>
<li>更快</li>
<li>高扩展性（HTTP核心模块、events模块、log模块）</li>
<li>高可靠性（进程相对独立，master在起个worker进程出错时可以快速拉起新的worker子进行提供服务）</li>
<li>低内存消耗（1w个非活跃的HTTP keep-alive 连接 在NGINX中消耗2.5MB的内存）</li>
<li>单机支持10万以上的并发连接</li>
<li>热部署（master与worker进程的分离设计）</li>
<li>最自由的bsd许可协议</li>
</ol>
<h2 id="web请求处理流程"><a href="#web请求处理流程" class="headerlink" title="web请求处理流程"></a>web请求处理流程</h2><p><img src="https://res.nuoyit.com/lsprod/loan/65ddbf72517907.png" alt="web请求处理流程"></p>
<h2 id="nginx高效的原因"><a href="#nginx高效的原因" class="headerlink" title="nginx高效的原因"></a>nginx高效的原因</h2><ol>
<li>多进程方式</li>
</ol>
<h2 id="TCP-和-UDP"><a href="#TCP-和-UDP" class="headerlink" title="TCP 和 UDP"></a>TCP 和 UDP</h2><blockquote>
<p>UDP和TCP最大的区别，UDP不可靠，只管发送不管是否接受到</p>
</blockquote>
<h2 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h2><p>pcntl扩展是PHP在Linux环境下进程控制的重要扩展，WorkerMan用到了其进程创建、信号控制、定时器、进程状态监控等特性。此扩展win平台不支持。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for ($i=0;$i&lt;3;$i++)&#123;</span><br><span class="line">    $pid=pcntl_fork();  //创建子进程</span><br><span class="line">    //父进程和子进程都会执行下面代码</span><br><span class="line">    if ($pid == -1) &#123;</span><br><span class="line">        //错误处理：创建子进程失败时返回-1.</span><br><span class="line">        die(&apos;could not fork&apos;);</span><br><span class="line">    &#125; else if ($pid) &#123;</span><br><span class="line">        //父进程会得到子进程号，所以这里是父进程执行的逻辑</span><br><span class="line">        var_dump(&apos;父进程&apos;,$pid);</span><br><span class="line">        pcntl_wait($status); //等待子进程中断，防止子进程成为僵尸进程。</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //子进程得到的$pid为0, 所以这里是子进程执行的逻辑。</span><br><span class="line">        sleep(5);</span><br><span class="line">        var_dump(&apos;子进程&apos;,$pid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>安装pcntl模块<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://cn2.php.net/distributions/php-7.1.14.tar.xz</span><br><span class="line">tar xf php-7.1.14.tar.xz</span><br><span class="line">cd php-7.1.14</span><br><span class="line">cd ext/pcntl</span><br><span class="line">phpize</span><br><span class="line">./configure --with-php-config=/usr/bin/php-config</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">echo &quot;extension=pcntl.so&quot; &gt;&gt; /etc/php.ini</span><br></pre></td></tr></table></figure></p>
<h2 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a>IO多路复用</h2><p>就是通过一种机制，一个进程可以监视多个描述符（socket），一旦某个描述符就绪，能够通知程序执行相应的读写操作。<br>epoll是在2.6内核中提出的。是之前select和poll的增强版。select、poll问题就是需要循环检测连接是否有事件。没有描述符限制，无需轮询。epoll使用一个文件描述符管理多个描述符，当连接有I/O流时间产生的时候，epoll就会告诉警察连接有I/O流事件产生，然后警察就去处理这个进程。<br>NGINX就是基于epoll的异步非阻塞的服务器程序。自然，nginx能够轻松处理百万级的并发连接。</p>
<p>安装libevent依赖:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">官网：http://www.monkey.org/~provos/libevent/</span><br><span class="line">下载：http://www.monkey.org/~provos/libevent-2.0.10-stable.tar.gz</span><br><span class="line">tar zxvf libevent-2.0.10-stable.tar.gz</span><br><span class="line">cd libevent-2.0.10-stable</span><br><span class="line">    ./configure  –prefix=/usr   //安装路径设置</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">测试libevent是否安装成功：</span><br><span class="line">    ls -al /usr/lib | grep libevent</span><br></pre></td></tr></table></figure></p>
<p>安装event扩展:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    cd /usr/local/src</span><br><span class="line">   wget http://pecl.php.net/get/event-2.3.0.tgz</span><br><span class="line"></span><br><span class="line">    tar -zxvf event-2.3.0.tgz &amp;&amp; cd event-2.3.0</span><br><span class="line"></span><br><span class="line">    /usr/local/php/bin/phpize</span><br><span class="line"></span><br><span class="line">    ./configure  --with-event-libevent-dir=/usr/local/libevent-2.1.8-stable/    </span><br><span class="line"></span><br><span class="line">注意 --with-event-libevent-dir   libevent的安装目录</span><br><span class="line">    make &amp;&amp; make install	</span><br><span class="line">在/usr/local/php/etc/ 目录下，复制php.ini 为php-cli.ini 添加下面配置	</span><br><span class="line">extension=event.so</span><br></pre></td></tr></table></figure></p>
<h2 id="进程工作内容"><a href="#进程工作内容" class="headerlink" title="进程工作内容"></a>进程工作内容</h2><h3 id="master进程"><a href="#master进程" class="headerlink" title="master进程"></a>master进程</h3><ol>
<li><p>Nginx启动后，会产生一个主进程，主进程执行一系列的工作后会产生一个或者多个工作进程</p>
</li>
<li><p>在客户端请求动态站点的过程中，Nginx服务器还涉及和后端服务器的通信。Nginx将接收到的Web请求通过代理转发到后端服务器，由后端服务器进行数据处理和组织；</p>
</li>
<li><p>Nginx为了提高对请求的响应效率，降低网络压力，采用了缓存机制，将历史应答数据缓存到本地。保障对缓存文件的快速访问</p>
</li>
</ol>
<p>master进程主要用来管理worker进程，具体包括以下主要功能：</p>
<p>（1）接收来自外界的信号。<br>（2）处理配置文件读取。<br>（3）创建，绑定和关闭套接字<br>（4）启动，终止和维护配置的工作(worker)进程数<br>（5）当woker进程退出后（异常情况下），会自动重新启动新的woker进程。</p>
<h3 id="worker进程"><a href="#worker进程" class="headerlink" title="worker进程"></a>worker进程</h3><p>worker进程的主要任务是完成具体的任务逻辑。其主要关注点是与客户端或后端真实服务器（此时nginx作为中间代理）之间的数据可读/可写等I/O交互事件。<br>（1）接收客户端请求；<br>（2）将请求一次送入各个功能模块进行过滤处理；<br>（3）与后端服务器通信，接收后端服务器处理结果；<br>（4）数据缓存<br>（5）响应客户端请求</p>
<h2 id="nginx-编译安装"><a href="#nginx-编译安装" class="headerlink" title="nginx 编译安装"></a>nginx 编译安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install   pcre pcre-devel zlib zlib-devel openssl  openssl-devel</span><br><span class="line"></span><br><span class="line">wget  http://nginx.org/download/nginx-1.14.1.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf nginx-1.14.1.tar.gz</span><br><span class="line"></span><br><span class="line">cd nginx-1.14.1</span><br><span class="line"></span><br><span class="line">./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_gzip_static_module --with-http_realip_module --with-http_sub_module --with-http_ssl_module --with-http_realip_module --with-http_sub_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_auth_request_module --with-http_random_index_module --with-http_slice_module --with-http_stub_status_module </span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test -d &apos;/usr/local/nginx&apos; || mkdir -p &apos;/usr/local/nginx&apos;</span><br><span class="line">test -d &apos;/usr/local/nginx/sbin&apos; \</span><br><span class="line">	|| mkdir -p &apos;/usr/local/nginx/sbin&apos;</span><br><span class="line">test ! -f &apos;/usr/local/nginx/sbin/nginx&apos; \</span><br><span class="line">	|| mv &apos;/usr/local/nginx/sbin/nginx&apos; \</span><br><span class="line">		&apos;/usr/local/nginx/sbin/nginx.old&apos;</span><br><span class="line">cp objs/nginx &apos;/usr/local/nginx/sbin/nginx&apos;</span><br><span class="line">test -d &apos;/usr/local/nginx/conf&apos; \</span><br><span class="line">	|| mkdir -p &apos;/usr/local/nginx/conf&apos;</span><br><span class="line">cp conf/koi-win &apos;/usr/local/nginx/conf&apos;</span><br><span class="line">cp conf/koi-utf &apos;/usr/local/nginx/conf&apos;</span><br><span class="line">cp conf/win-utf &apos;/usr/local/nginx/conf&apos;</span><br><span class="line">test -f &apos;/usr/local/nginx/conf/mime.types&apos; \</span><br><span class="line">	|| cp conf/mime.types &apos;/usr/local/nginx/conf&apos;</span><br><span class="line">cp conf/mime.types &apos;/usr/local/nginx/conf/mime.types.default&apos;</span><br><span class="line">test -f &apos;/usr/local/nginx/conf/fastcgi_params&apos; \</span><br><span class="line">	|| cp conf/fastcgi_params &apos;/usr/local/nginx/conf&apos;</span><br><span class="line">cp conf/fastcgi_params \</span><br><span class="line">	&apos;/usr/local/nginx/conf/fastcgi_params.default&apos;</span><br><span class="line">test -f &apos;/usr/local/nginx/conf/fastcgi.conf&apos; \</span><br><span class="line">	|| cp conf/fastcgi.conf &apos;/usr/local/nginx/conf&apos;</span><br><span class="line">cp conf/fastcgi.conf &apos;/usr/local/nginx/conf/fastcgi.conf.default&apos;</span><br><span class="line">test -f &apos;/usr/local/nginx/conf/uwsgi_params&apos; \</span><br><span class="line">	|| cp conf/uwsgi_params &apos;/usr/local/nginx/conf&apos;</span><br><span class="line">cp conf/uwsgi_params \</span><br><span class="line">	&apos;/usr/local/nginx/conf/uwsgi_params.default&apos;</span><br><span class="line">test -f &apos;/usr/local/nginx/conf/scgi_params&apos; \</span><br><span class="line">	|| cp conf/scgi_params &apos;/usr/local/nginx/conf&apos;</span><br><span class="line">cp conf/scgi_params \</span><br><span class="line">	&apos;/usr/local/nginx/conf/scgi_params.default&apos;</span><br><span class="line">test -f &apos;/usr/local/nginx/conf/nginx.conf&apos; \</span><br><span class="line">	|| cp conf/nginx.conf &apos;/usr/local/nginx/conf/nginx.conf&apos;</span><br><span class="line">cp conf/nginx.conf &apos;/usr/local/nginx/conf/nginx.conf.default&apos;</span><br><span class="line">test -d &apos;/usr/local/nginx/logs&apos; \</span><br><span class="line">	|| mkdir -p &apos;/usr/local/nginx/logs&apos;</span><br><span class="line">test -d &apos;/usr/local/nginx/logs&apos; \</span><br><span class="line">	|| mkdir -p &apos;/usr/local/nginx/logs&apos;</span><br><span class="line">test -d &apos;/usr/local/nginx/html&apos; \</span><br><span class="line">	|| cp -R html &apos;/usr/local/nginx&apos;</span><br><span class="line">test -d &apos;/usr/local/nginx/logs&apos; \</span><br><span class="line">	|| mkdir -p &apos;/usr/local/nginx/logs&apos;</span><br><span class="line">make[1]: Leaving directory `/root/nginx-1.14.1&apos;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -s /usr/local/nginx/sbin/nginx /usr/bin/nginx</span><br><span class="line">启动：</span><br><span class="line">nginx -c /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>
<p><img src="https://res.nuoyit.com/lsprod/loan/65ddcd2a44756f.png" alt="nginx-config"></p>
<h2 id="nginx常用命令"><a href="#nginx常用命令" class="headerlink" title="nginx常用命令"></a>nginx常用命令</h2><p>1、查看Nginx的版本号：nginx  -V<br>2、停止 nginx -s stop<br>3、退出 nginx -s quit<br>4、重启加载配置 nginx -s reload<br>5、配置文件启动 nginx  -c &lt;/path/to/config&gt; 为 Nginx 指定一个配置文件，来代替缺省的<br>6、nginx  -t 不运行，而仅仅测试配置文件。nginx 将检查配置文件的语法的正确性，并尝试打开配置文件中所引用到的文件。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>配置块: location<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法： location[=|~|~*|^~|@]/uri/&#123;...&#125;</span><br><span class="line">配置块： server</span><br><span class="line">location会尝试根据用户请求中的URI来匹配上面的/uri表达式，如果可以匹配，就选择</span><br><span class="line">location&#123;&#125;块中的配置来处理用户请求。当然，匹配方式是多样的，下面介绍location的匹配</span><br><span class="line">规则。</span><br><span class="line"></span><br><span class="line">location表达式类型</span><br><span class="line">~ 表示执行一个正则匹配，区分大小写；</span><br><span class="line">~* 表示执行一个正则匹配，不区分大小写；</span><br><span class="line">^~ 表示普通字符匹配。使用前缀匹配。如果匹配成功，则不再匹配其他location；</span><br><span class="line">= 进行普通字符精确匹配。也就是完全匹配；</span><br><span class="line">@ 它定义一个命名的 location，使用在内部定向时，例如 error_page, try_files</span><br><span class="line"></span><br><span class="line">优先级：</span><br><span class="line">等号类型（=）的优先级最高。一旦匹配成功，则不再查找其他匹配项</span><br><span class="line">前缀普通匹配(^~)优先级次之。不支持正则表达式。使用前缀匹配，如果有多个location匹配的话，则使用表达式最长的那个</span><br><span class="line">正则表达式类型（~ ~*）的优先级次之。一旦匹配成功，则不再查找其他匹配项</span><br><span class="line">常规字符串匹配，如果有多个location匹配的话，则使用表达式最长的那个</span><br><span class="line"></span><br><span class="line">(location =) &gt; (location 完整路径) &gt; (location ^~ 路径) &gt; (location ~,~* 正则顺序) &gt; (location 部分起始路径)</span><br></pre></td></tr></table></figure></p>
<p>访问控制模块<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用来对特定IP的进行访问控制</span><br><span class="line">默认是允许所有ip访问，若部分允许需定义deny all</span><br><span class="line">allow</span><br><span class="line">语法:   allow address | CIDR | unix: | all;</span><br><span class="line">默认值:     —</span><br><span class="line">区块: http, server, location, limit_except</span><br><span class="line">允许某个ip或者一个ip段访问</span><br><span class="line"></span><br><span class="line">deny</span><br><span class="line">语法:     deny address | CIDR | unix: | all;</span><br><span class="line">默认值:     —</span><br><span class="line">区块:     http, server, location, limit_except</span><br><span class="line"></span><br><span class="line">allow、deny实例</span><br><span class="line">location / &#123;</span><br><span class="line">deny  192.168.1.1;</span><br><span class="line">allow 192.168.1.0/24;</span><br><span class="line">allow 47.98.147.49;</span><br><span class="line">deny  all;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> 		  </span><br><span class="line"> 	</span><br><span class="line">比如可以限制某些目录下的某些文件的访问，具体可以自己组合</span><br><span class="line"></span><br><span class="line">禁止访问所有目录下的sql|log|txt|jar|sh|py后缀的文件，</span><br><span class="line"></span><br><span class="line">location ~.*\.(sql|log|txt|jar|war|sh|py|php) &#123;</span><br><span class="line">     deny all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="if模块"><a href="#if模块" class="headerlink" title="if模块"></a>if模块</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if指令</span><br><span class="line">语法：if(condition)&#123;…&#125;</span><br><span class="line">区块：server，location</span><br><span class="line">该指令用于检查一个条件是否符合，如果条件符合，则执行大括号内的语句。if指令不支持嵌套，不支持多个条件&amp;&amp;和||处理。</span><br><span class="line">其中，condition中可以包含的判断标识如下</span><br><span class="line">~为区分大小写匹配</span><br><span class="line">~*为不区分大小写匹配</span><br><span class="line">-f和!-f用来判断是否存在文件</span><br><span class="line">-d和!-d用来判断是否存在目录</span><br><span class="line">-e和!-e用来判断是否存在文件或目录</span><br><span class="line">-x和!-x用来判断文件是否可执行</span><br></pre></td></tr></table></figure>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><blockquote>
<p>IO多路复用epoll<br>模块化轻量化<br>CPU亲和（CPU核心worker进程绑定分配）<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 几个物理CPU</span><br><span class="line">cat /proc/cpuinfo|grep &quot;physical id&quot; | sort | uniq | wc | -l</span><br><span class="line"></span><br><span class="line"># 几个核心</span><br><span class="line">cat /proc/cpuinfo|grep &quot;cpu cores&quot; | uniq</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="中间件架构"><a href="#中间件架构" class="headerlink" title="中间件架构"></a>中间件架构</h2><ol>
<li>静态资源web服务</li>
<li>代理服务</li>
<li>负载均衡调度器</li>
<li>动态缓存<blockquote>
<p>proxy_cache</p>
</blockquote>
</li>
</ol>
<h2 id="动态负载均衡"><a href="#动态负载均衡" class="headerlink" title="动态负载均衡"></a>动态负载均衡</h2><p>nginx-upsync-module提供了动态的负载均衡，动态更新上游的服务器不需要reload nginx，它的功能是拉取 consul 的后端 server 的列表，并更新 Nginx 的路由信息。此模块不依赖于任何第三方模块。 consul 作为 Nginx 的 db，利用 consul 的 KV 服务，每个 Nginx work 进程独立的去拉取各个 upstream 的配置，并更新各自的路由。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget  https://github.com/weibocom/nginx-upsync-module/archive/v2.1.0.tar.gz</span><br><span class="line"></span><br><span class="line">--add-module=/root/nginx-upsync-module-2.1.0</span><br><span class="line"></span><br><span class="line">      示例：</span><br><span class="line">upstream swoole_test &#123;</span><br><span class="line">        upsync  127.0.0.1:8700/v1/kv/upstreams/swoole_test upsync_timeout=6m upsync_interval=500ms  upsync_type=consul  strong_dependency=off;</span><br><span class="line">        upsync_dump_path /usr/local/nginx/conf/servers_test.conf;</span><br><span class="line">        include /usr/local/nginx/conf/servers_test.conf;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>upsync模块会去consul拉取最新的upstream信息并存到本地的文件中<br>upsync_timeout 配置从consul拉取上游服务器的超时时间<br>upsync_interval 配置从consul拉取上游服务器的间隔时间<br>upsync_type 指定使用配置服务器的类型，当前是consul<br>strong_dependency 启动时是否强制依赖配置服务器，如果配置为on,则拉取失败，nginx同样会启用失败</p>
<p>upsync_dump_path 指定从consul拉取的上游服务器后持久化到的位置，这样即使<br>Consul服务器出问题了，本地同样会有备份</p>
<p>添加的时候要注意名称模块的匹配：</p>
<p>2、安装consul<br> 对于consul的介绍可以移步到另外的文档，暂时先了解就行，我们可以先通过docker的方式pull一个consul<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> curl -X PUT -d &apos;&#123;&quot;weight&quot;:1, &quot;max_fails&quot;:2, &quot;fail_timeout&quot;:10&#125;&apos; http://$consul_ip:$port/v1/kv/$dir1/$upstream_name/$backend_ip:$backend_port</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">curl -X PUT -d &apos;&#123;&quot;weight&quot;:1,&quot;max_fails&quot;:2,&quot;fail_timeout&quot;:10&#125;&apos; http://127.0.0.1:8700/v1/kv/upstreams/swoole_test/127.0.0.1:9501</span><br></pre></td></tr></table></figure></p>
<p>查看所有已经存储的k/v<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl  http://127.0.0.1:8700/v1/kv/?recurse</span><br></pre></td></tr></table></figure></p>
<p>删除<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl  -X  DELETE  http://127.0.0.1:8700/v1/kv/upstreams/swoole_test/127.0.0.1:9501</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>放松等待</title>
    <url>/2019/20190630-1.html</url>
    <content><![CDATA[<p>纽约时间比加州时间早三个小时，</p>
<p>New York is 3 hours ahead of California,</p>
<p>但加州时间并没有变慢。</p>
<p>but it does not make California slow.</p>
<p>有人22岁就毕业了，</p>
<p>Someone graduated at the age of 22,</p>
<p>但等了五年才找到好的工作！</p>
<p>but waited 5 years before securing a good job!</p>
<p>有人25岁就当上CEO，</p>
<p>Someone became a CEO at 25,</p>
<p>却在50岁去世。</p>
<p>and died at 50.</p>
<p>也有人迟到50岁才当上CEO，</p>
<p>While another became a CEO at 50,</p>
<p>然后活到90岁。</p>
<p>and lived to 90 years.</p>
<p>有人依然单身，</p>
<p>Someone is still single,</p>
<p>同时也有人已婚。</p>
<p>while someone else got married.</p>
<p>奥巴马55岁就退休，</p>
<p>Obama retires at 55,</p>
<p>川普70岁才开始当总统。</p>
<p>but Trump starts at 70.</p>
<p>世上每个人本来就有自己的发展时区。</p>
<p>Absolutely everyone in this world works based on their Time Zone.</p>
<p>身边有些人看似走在你前面，</p>
<p>People around you might seem to go ahead of you,</p>
<p>也有人看似走在你后面。</p>
<p>some might seem to be behind you.</p>
<p>但其实每个人在自己的时区有自己的步程。</p>
<p>But everyone is running their own RACE, in their own TIME.</p>
<p>不用嫉妒或嘲笑他们。</p>
<p>Don’t envy them or mock them.</p>
<p>他们都在自己的时区里，你也是！</p>
<p>They are in their TIME ZONE, and you are in yours!</p>
<p>生命就是等待正确的行动时机。</p>
<p>Life is about waiting for the right moment to act.</p>
<p>所以，放轻松。</p>
<p>So, RELAX.</p>
<p>你没有落后。</p>
<p>You’re not LATE.</p>
<p>你没有领先。</p>
<p>You’re not EARLY.</p>
<p>在命运为你安排的属于自己的时区里，一切都准时。</p>
<p>You are very much ON TIME, and in your TIME ZONE Destiny set up for you.</p>
]]></content>
  </entry>
  <entry>
    <title>Mac 配置ssh 免密登录</title>
    <url>/2018/20181102-3.html</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 配置ssh</span><br><span class="line">~ vim ~/.ssh/config</span><br><span class="line"></span><br><span class="line">Host *</span><br><span class="line">    ServerAliveInterval 10</span><br><span class="line"></span><br><span class="line">Host Mweb1</span><br><span class="line">    HostName        服务器IP地址</span><br><span class="line">    Port            端口</span><br><span class="line">    User            用户名</span><br><span class="line">    IdentityFile    私钥地址</span><br><span class="line"></span><br><span class="line">Host Mweb2</span><br><span class="line">    HostName        服务器IP地址</span><br><span class="line">    Port            22</span><br><span class="line">    User            uiste</span><br><span class="line">    IdentityFile    ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"># 登录方式</span><br><span class="line">➜  ~ ssh Mweb1</span><br><span class="line">Last login: Fri Nov  2 08:15:51 2018 from 180.173.83.33</span><br><span class="line">[root@VM_0_6_centos ~]#</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Mac配置远程服务器隧道代理</title>
    <url>/2018/20181102-2.html</url>
    <content><![CDATA[<blockquote>
<p>因为安全原因远程服务器的数据库不允许本地直接访问，又没有开启访问IP白名单时，可以通过隧道代理访问。Windows系统通过xsheel可以设置隧道代理。Mac只需要运行如下命令</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -p 22  -i ~/.ssh/id_rsa -fNL 代理端口:代理IP:转发原端口 用户名@远程服务器IP</span><br><span class="line"></span><br><span class="line">ssh -p 22  -i ~/.ssh/id_rsa -fNL 3308:127.0.0.1:3306 root@118.xx.xxx.xx</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -p &#123;ssh_port&#125; -i &#123;rsa_file&#125; -fNL &#123;local_port&#125;:&#123;mysql_ip&#125;:&#123;mysql_port&#125; </span><br><span class="line">&#123;ssh_user&#125;@&#123;ssh_ip&#125;</span><br><span class="line">ssh -p 22  -i ./id_rsa_jump -fNL 33060:mysql_ip:3306 jump@jump_ip   # 实例</span><br></pre></td></tr></table></figure>
<blockquote>
<p>-p {ssh_port}: 指定跳板机器的ssh服务的端口<br>-i {rsa_file}:指定连接跳板机的ssh公钥，由跳板机的ssh服务端生成，如果不指定公钥或者公钥验证失败则会弹出密码进行登录。<br>-f:需进行ssh认证<br>-N:只进行端口转发，不执行命令<br>-L:指定连接服务的格式 [bind_address:]port:host:hostport<br>{local_port}：本地监听的端口<br>{mysql_ip}：转发到的mysql的ip或域名<br>{mysql_port}：转发到的mysql的端口<br>{ssh_port}：跳板机的<br>{ssh_user}：跳板机的ssh用户名(如果为rsa登录，则ras对应的用户名和ssh_user一致)<br>{ssh_ip}：跳板机的ip或域名<br>检查是否启动成功<br>netstat  -aon|findstr  “33060”  #存在对应的监听则启动成功 如果要关闭则kill<br>连接mysql<br>ip:127.0.0.1<br>port:33060</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>truffle geth 启动Ethereum测试节点</title>
    <url>/2018/20181102-1.html</url>
    <content><![CDATA[<h1 id="truffle-框架使用"><a href="#truffle-框架使用" class="headerlink" title="truffle 框架使用"></a>truffle 框架使用</h1><p><strong> uiste@uiste:~$     testrpc </strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uiste@uiste:~/www/blockchain/test_truffle_2$     truffle unbox webpack</span><br><span class="line">uiste@uiste:~/www/blockchain/test_truffle_2$     truffle develop</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Last login: Mon Apr  2 20:07:27 on ttys008</span><br><span class="line">uiste@uiste:~$     cd www/blockchain/test_truffle_2/</span><br><span class="line">uiste@uiste:~/www/blockchain/test_truffle_2$     npm run dev</span><br></pre></td></tr></table></figure></p>
<h1 id="geth-方式"><a href="#geth-方式" class="headerlink" title="geth 方式"></a>geth 方式</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">`geth --datadir &quot;./Mychains/dev&quot; --identity &quot;mydev&quot; --rpccorsdomain &quot;*&quot; --networkid 99 console`</span><br><span class="line"></span><br><span class="line">uiste@uiste:~$     cd www/blockchain/test-geth</span><br><span class="line">uiste@uiste:~/www/blockchain/test-geth$     geth --datadir &quot;./Mychains/dev&quot; --identity &quot;mydev&quot; --rpc --rpcapi &quot;db,eth,net,web3,personal,web3&quot; --nodiscover --rpccorsdomain &quot;*&quot; --networkid 100 console</span><br><span class="line"></span><br><span class="line">uiste@uiste:/Applications$      /Applications/Mist.app/Contents/MacOS/Mist --rpc &quot;/Users/uiste/www/blockchain/test-geth/Mychains/dev/geth.ipc&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">geth --datadir &quot;./chain&quot; --identity &quot;mydev&quot; --rpc --rpcapi &quot;db,eth,net,web3,personal,web3&quot; --nodiscover --rpccorsdomain &quot;*&quot; --networkid 100 console 2&gt;&gt;eth_output.log</span><br><span class="line"></span><br><span class="line">geth --dev --rpc --rpccorsdomain &quot;*&quot; --rpcaddr &quot;0.0.0.0&quot; --rpcport &quot;8545&quot; --mine --rpcapi &quot;eth,txpool,web3&quot;</span><br><span class="line"></span><br><span class="line">geth --testnet --rpc --rpccorsdomain &quot;*&quot; --rpcaddr &quot;0.0.0.0&quot; --rpcport &quot;8545&quot;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>(2) swoole 特性、原理</title>
    <url>/2018/20180603-2.html</url>
    <content><![CDATA[<h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><p>Swoole 使用纯 C 语言编写，提供了 PHP 语言的异步多线程服务器</p>
<ol>
<li>事件驱动的异步编程模式</li>
<li>异步TCP/UDP/HTTP/WebSocket/HTTP2协议的服务器端/客户端</li>
<li>支持IPv4/IPv6/UnixSocket/TCP/UDP</li>
<li>支持SSL/TLS隧道加密</li>
<li>支持并发百万TCP长连接</li>
<li>支持毫秒定时器</li>
<li>支持异步/同步/协程</li>
<li>支持CPU亲和性设置/守护进程</li>
</ol>
<blockquote>
<p>swoole_server是事件驱动的。我们在使用的过程中不需要关注底层是怎么实现的，底层是C写的php只是做了个传递的作用，所以只需要对底层相应的动作注册相应的回调，在回调函数中处理业务逻辑即可</p>
</blockquote>
<blockquote>
<p>参数$serv是我们一开始创建的swoole_server对象，<br>参数$fd是唯一标识，用于区分不同的客户端，同时该参数是1-1600万之间可以复用的整数。简单解释下复用：假设现在客户端1、2、3处于连接中，客户端4要连接的话$fd就是4，但是不巧的是客户端3连接不稳定，断掉了，客户端4连接到server的话，$fd就是3。</p>
</blockquote>
<blockquote>
<p>常用socket函数来创建TCP连接，用CURL库来创建Http连接。同样的，为了简化操作，Swoole也提供了同样的Client类用于实现客户端的功能，并且增加了异步非阻塞的模式，让用户在客户端也能使用事件循环</p>
</blockquote>
<h1 id="通讯协议"><a href="#通讯协议" class="headerlink" title="通讯协议"></a>通讯协议</h1><table>
<thead>
<tr>
<th>特点</th>
<th style="text-align:center">TCP</th>
<th style="text-align:center">UDP</th>
</tr>
</thead>
<tbody>
<tr>
<td>连接性</td>
<td style="text-align:center">面向连接</td>
<td style="text-align:center">面向非连接</td>
</tr>
<tr>
<td>可靠性</td>
<td style="text-align:center">可靠</td>
<td style="text-align:center">不可靠</td>
</tr>
<tr>
<td>传输效率</td>
<td style="text-align:center">慢</td>
<td style="text-align:center">快</td>
</tr>
</tbody>
</table>
<blockquote>
<p>1、TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接<br>2、TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付<br>3、tcp通过校验和，重传控制，序号标识，滑动窗口、确认应答实现可靠传输。如丢包时的重发控制，还可以对次序乱掉的分包进行顺序控制。<br>3、UDP具有较好的实时性，工作效率比TCP高，适用于对高速传输和实时性有较高的通信或广播通信。<br>4、TCP对系统资源要求较多，UDP对系统资源要求较少。</p>
</blockquote>
<h1 id="创建server的步骤"><a href="#创建server的步骤" class="headerlink" title="创建server的步骤:"></a>创建server的步骤:</h1><p>1、实例化Server对象<br>2、设置运行时参数<br>3、注册事件回调函数<br>4、启动服务器</p>
<h1 id="心跳"><a href="#心跳" class="headerlink" title="心跳"></a>心跳</h1><p>1、客户端定时给服务端发送点数据，防止连接由于长时间没有通讯而被某些节点的防火墙关闭导致连接断开的情况。</p>
<p>2、服务端可以通过心跳来判断客户端是否在线，如果客户端在规定时间内没有发来任何数据，就认为客户端下线。这样可以检测到客户端由于极端情况(断电、断网等)下线的事件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">heartbeat_check_interval： 服务器定时检测在线列表的时间</span><br><span class="line">heartbeat_idle_time：       连接最大的空闲时间 （如果最后一个心跳包的时间与当前时间之差超过这个值，则认为该连接失效）</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$server-&gt;set([</span><br><span class="line">    <span class="string">'worker_num'</span>=&gt;<span class="number">1</span>, <span class="comment">//设置进程</span></span><br><span class="line">    <span class="string">'heartbeat_idle_time'</span>=&gt;<span class="number">10</span>,<span class="comment">//连接最大的空闲时间</span></span><br><span class="line">    <span class="string">'heartbeat_check_interval'</span>=&gt;<span class="number">3</span> <span class="comment">//服务器定时检查</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>建议 heartbeat_idle_time 为 heartbeat_check_interval 的两倍多一点。<br>这个两倍是为了进行容错，允许丢一个包而多一点是考虑到网络的延时。</p>
</blockquote>
<h1 id="粘包"><a href="#粘包" class="headerlink" title="粘包"></a>粘包</h1><p>TCP 粘包是指发送方发送的若干包数据 到 接收方接收时粘成一包，从接收缓冲区看，后一包数据的头紧接着前一包数据的尾。</p>
<p>发送方：发送方需要等缓冲区满才发送出去，造成粘包<br>接收方：接收方不及时接收缓冲区的包，造成多个包接收</p>
<p>通过约定结束符，来确定包数据是否发送完毕<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">open_eof_check=true 开启</span><br><span class="line">package_eof = &apos;\r\n&apos; 来设置一个完整数据结尾字符</span><br><span class="line">open_eof_split =&gt; true 设置自动拆分</span><br></pre></td></tr></table></figure></p>
<h1 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h1><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>1、进程之间不共享任何状态<br>2、进程的调度由操作系统完成<br>3、每个进程都有自己独立的内存空间<br>4、进程间通讯主要是通过信号传递的方式来实现的，实现方式有多种，信号量、管道、事件等，任何一种方式的通讯效率都需要过内核，导致通讯效率比较低<br>5、由于是独立的内存空间，上下文切换的时候需要保存先调用栈的信息、cpu各寄存器的信息、虚拟内存、以及打开的相关句柄等信息，所以导致上下文进程间切换开销很大，通讯麻烦。</p>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>1、线程之间共享变量，解决了通讯麻烦的问题对于变量的访问需要锁<br>2、一个进程可以拥有多个线程，但是其中每个线程会共享父进程像操作系统申请资源，这个包括虚拟内存、文件等，由于是共享资源，所以创建线程所需要的系统资源占用比进程小很多，相应的可创建的线程数量也变得相对多很多。<br>3、另外在调度方面也是由于内存是共享的，所以上下文切换的时候需要保存的东西就像对少一些，这样一来上下文的切换也变得高效。</p>
]]></content>
  </entry>
  <entry>
    <title>(1) swoole 环境搭建</title>
    <url>/2018/20180603-1.html</url>
    <content><![CDATA[<h1 id="PHP-环境搭建"><a href="#PHP-环境搭建" class="headerlink" title="PHP 环境搭建"></a>PHP 环境搭建</h1><h2 id="PHP环境编译安装"><a href="#PHP环境编译安装" class="headerlink" title="PHP环境编译安装"></a>PHP环境编译安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y  install  gcc  gcc-c++ libxml2-devel m4 autoconf pcre-devel make cmake bison openssl openssl-devel</span><br><span class="line"></span><br><span class="line">wget  http://mirrors.sohu.com/php/php-7.2.15.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf php-7.2.15.tar.gz  &amp;&amp; cd php-7.2.15</span><br><span class="line"></span><br><span class="line">./configure --prefix=/usr/local/php \</span><br><span class="line">--prefix=/usr/local/php \</span><br><span class="line">--with-config-file-path=/usr/local/php/etc  \</span><br><span class="line">--with-libxml-dir=/usr  \</span><br><span class="line">--with-iconv-dir \</span><br><span class="line">--with-mhash \</span><br><span class="line">--with-openssl \</span><br><span class="line">--with-mysqli=shared,mysqlnd \</span><br><span class="line">--with-pdo-mysql=shared,mysqlnd   \</span><br><span class="line">--with-zlib \</span><br><span class="line">--enable-zip \</span><br><span class="line">--enable-inline-optimization \</span><br><span class="line">--disable-debug \</span><br><span class="line">--disable-rpath \</span><br><span class="line">--enable-shared \</span><br><span class="line">--enable-xml \</span><br><span class="line">--enable-bcmath  \</span><br><span class="line">--enable-shmop \</span><br><span class="line">--enable-sysvsem \</span><br><span class="line">--enable-mbstring \</span><br><span class="line">--enable-mbregex  \</span><br><span class="line">--enable-mbregex-backtrack \</span><br><span class="line">--enable-pcntl \</span><br><span class="line">--enable-sockets \</span><br><span class="line">--without-pear \</span><br><span class="line">--with-gettext \</span><br><span class="line">--enable-session</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h2 id="添加-PHP-命令到环境变量"><a href="#添加-PHP-命令到环境变量" class="headerlink" title="添加 PHP 命令到环境变量"></a>添加 PHP 命令到环境变量</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vim /etc/profile</span><br><span class="line"></span><br><span class="line">在末尾加入</span><br><span class="line"></span><br><span class="line">PATH=$PATH:/usr/local/php/bin</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">要使改动立即生效执行</span><br><span class="line"># source /etc/profile</span><br><span class="line"></span><br><span class="line">查看环境变量</span><br><span class="line"># echo $PATH</span><br><span class="line"># php -v</span><br></pre></td></tr></table></figure>
<h2 id="复制配置文件"><a href="#复制配置文件" class="headerlink" title="复制配置文件"></a>复制配置文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@uiste php-7.2.15]# php -i | grep Configuration</span><br><span class="line">Configuration File (php.ini) Path =&gt; /usr/local/php/etc</span><br><span class="line">Loaded Configuration File =&gt; (none)</span><br><span class="line">Configuration</span><br><span class="line">[root@uiste php-7.2.15]# mkdir -p /usr/local/php/etc/</span><br><span class="line">[root@uiste php-7.2.15]# cp php.ini-development  /usr/local/php/etc/php.ini</span><br></pre></td></tr></table></figure>
<h1 id="swoole安装"><a href="#swoole安装" class="headerlink" title="swoole安装"></a>swoole安装</h1><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><ul>
<li><a href="https://github.com/swoole/swoole-src/releases" target="_blank" rel="noopener">https://github.com/swoole/swoole-src/releases</a></li>
<li><a href="http://pecl.php.net/package/swoole" target="_blank" rel="noopener">http://pecl.php.net/package/swoole</a></li>
<li><a href="http://git.oschina.net/swoole/swoole" target="_blank" rel="noopener">http://git.oschina.net/swoole/swoole</a></li>
</ul>
<h2 id="swoole编译安装"><a href="#swoole编译安装" class="headerlink" title="swoole编译安装"></a>swoole编译安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http://pecl.php.net/get/swoole-4.2.13.tgz</span><br><span class="line"></span><br><span class="line">tar -zxvf swoole-4.2.13.tgz &amp;&amp; cd swoole-4.2.13</span><br><span class="line"></span><br><span class="line">phpize</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h2 id="配置php-ini"><a href="#配置php-ini" class="headerlink" title="配置php.ini"></a>配置php.ini</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@uiste swoole-4.2.13]# vim /usr/local/php/etc/php.ini</span><br><span class="line"></span><br><span class="line">	extension=swoole.so</span><br><span class="line"></span><br><span class="line">[root@uiste swoole-4.2.13]# php -m | grep swoole</span><br><span class="line">swoole</span><br></pre></td></tr></table></figure>
<blockquote>
<p>通过php -m或phpinfo()来查看是否成功加载了swoole.so，如果没有可能是php.ini的路径不对，可以使用php –ini来定位到php.ini的绝对路径</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>【5】区块链-以太坊truffle 框架</title>
    <url>/2018/20180511-5.html</url>
    <content><![CDATA[<h2 id="TestRPC安装"><a href="#TestRPC安装" class="headerlink" title="TestRPC安装"></a>TestRPC安装</h2><p>安装Ethereum客户端来支持JSON RPC API调用开发环境，推荐使用EthereumJS。<br>安装命令：</p>
<p><code>sudo npm install -g ethereumjs-testrpc</code></p>
<p>这里的安装如果无法下载，请参考上一篇博客中安装truffle中使用淘宝镜像的方法。此步安装遇到很多问题，也尝试了各种方法，比如gcc依赖的安装升级，Python的安装，npm的升级，git的配置，还有node版本是否影响。虽然最终把问题给解决了，但修改的地方太多具体什么原因导致安装过程中出现那么多问题，还有待大家去尝试分析。</p>
<p>在执行以上命令之后，只是把ethereumjs-testrpc安装在nodejs的以下路径：</p>
<p><code>/home/zhuzs/app/nodejs/node-v6.9.1/lib/node_modules/ethereumjs-testrpc</code></p>
<p>还行进行软连接的配置：</p>
<p><code>ln -s /home/zhuzs/app/nodejs/node-v6.9.1/lib/node_modules/ethereumjs-testrpc/bin/testrpc /usr/local/bin/testrpc</code></p>
<h2 id="truffle-安装"><a href="#truffle-安装" class="headerlink" title="truffle 安装"></a>truffle 安装</h2><p><code>npm install -g truffle</code></p>
<h2 id="truffle-使用"><a href="#truffle-使用" class="headerlink" title="truffle 使用"></a>truffle 使用</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">truffle init 初始化</span><br><span class="line">truffle  compile 编译</span><br><span class="line">truffle migrate 部署</span><br><span class="line">truffle serve 启动服务</span><br></pre></td></tr></table></figure>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ol>
<li><p>启动TestRPC<br><img src="//img.mukewang.com/5ac48d1e0001805713800986.png" alt="图片描述"></p>
</li>
<li><p>初始化项目<br><img src="//img.mukewang.com/5ac48d470001c60b12040374.png" alt="图片描述"></p>
</li>
<li><p>修改配置文件,编写简单的智能合约<br><img src="//img.mukewang.com/5ac48d52000118d719160480.png" alt="图片描述"></p>
</li>
</ol>
<blockquote>
<p>mac 默认读取的truffle.js<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  // See &lt;http://truffleframework.com/docs/advanced/configuration&gt;</span><br><span class="line">  // to customize your Truffle configuration!</span><br><span class="line">  networks: &#123;</span><br><span class="line">    development: &#123;</span><br><span class="line">      host: &quot;127.0.0.1&quot;,</span><br><span class="line">      port: 8545,</span><br><span class="line">      network_id: &quot;*&quot; // Match any network id</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p><img src="//img.mukewang.com/5ac48d630001615723740600.png" alt="图片描述"><br>SimpleStorage.sol<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.4.0;  </span><br><span class="line">contract SimpleStorage &#123;  </span><br><span class="line">  </span><br><span class="line">   uint storedData;  </span><br><span class="line">  </span><br><span class="line">   function set(uint x) public &#123;   </span><br><span class="line">    storedData = x;  </span><br><span class="line">   &#125;  </span><br><span class="line">  </span><br><span class="line">   function get() constant public returns (uint) &#123;   </span><br><span class="line">      return storedData;  </span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>2_deploy_contracts.js<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const SimpleStorage = artifacts.require(&quot;./SimpleStorage.sol&quot;)</span><br><span class="line"></span><br><span class="line">module.exports = function(deployer) &#123;</span><br><span class="line">    deployer.deploy(SimpleStorage);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<ol start="4">
<li>编译(保证编译不报错)<br><img src="//img.mukewang.com/5ac48d780001e92110340482.png" alt="图片描述"><br>truffle migrate –reset  使用这个命令便可解决以上问题</li>
<li>部署<br><img src="//img.mukewang.com/5ac48d81000127fc20080396.png" alt="图片描述"><blockquote>
<p>报错问题无法解决</p>
</blockquote>
</li>
</ol>
<h2 id="换一种方案实现"><a href="#换一种方案实现" class="headerlink" title="换一种方案实现"></a>换一种方案实现</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir test   //重新建一个项目目录test</span><br><span class="line">truffle unbox webpack</span><br><span class="line">truffle develop   // 启动一个控制台</span><br><span class="line">&gt; compile       //编译</span><br><span class="line">&gt;migrate        //迁移合约    当然这两部也可以不在控制台下完成   可以用 truffle compile  和 truffle migrate 完成。</span><br><span class="line">npm run dev  //运行webpack服务器进行前端热重新加载（在开发控制台之外）。</span><br></pre></td></tr></table></figure>
<p><img src="//img.mukewang.com/5ac48da80001814512440476.png" alt="图片描述"><br><img src="//img.mukewang.com/5ac48db100013cb813840938.png" alt="图片描述"><br><img src="//img.mukewang.com/5ac48db80001e13e11660652.png" alt="图片描述"><br><img src="//img.mukewang.com/5ac48dc00001639914141032.png" alt="图片描述"><br><img src="//img.mukewang.com/5ac48dc800019ef024601256.png" alt="图片描述"></p>
]]></content>
  </entry>
  <entry>
    <title>【4】区块链-以太坊web3.js</title>
    <url>/2018/20180511-4.html</url>
    <content><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><code>uiste@uiste:~/www/blockchain/test_web3js$     git clone https://github.com/ethereum/web3.js.git</code></p>
<p><img src="//img.mukewang.com/5ac48b790001e22212920416.png" alt="图片描述"></p>
<h2 id="运行node-app-js"><a href="#运行node-app-js" class="headerlink" title="运行node-app.js"></a>运行node-app.js</h2><p><img src="//img.mukewang.com/5ac48b970001028312480162.png" alt="图片描述"><br>获取主账号地址，与账户余额<br><img src="//img.mukewang.com/5ac48ba50001f44a19700496.png" alt="图片描述"></p>
<h2 id="下载轻钱包"><a href="#下载轻钱包" class="headerlink" title="下载轻钱包"></a>下载轻钱包</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/ConsenSys/eth-lightwallet.git</span><br><span class="line">cd eth-lightwallet</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p><img src="//img.mukewang.com/5ac48bb5000185f814721386.png" alt="图片描述"></p>
]]></content>
  </entry>
  <entry>
    <title>【3】区块链-以太坊代币合约</title>
    <url>/2018/20180511-3.html</url>
    <content><![CDATA[<h2 id="编写智能合约"><a href="#编写智能合约" class="headerlink" title="编写智能合约"></a>编写智能合约</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.4.0;</span><br><span class="line"></span><br><span class="line">//创建一个基础合约，有些操作只能是当前合约的创建者才能操作</span><br><span class="line">contract owned&#123;</span><br><span class="line">    //声明一个用来接收合约创建者的状态变量</span><br><span class="line">    address public owner;</span><br><span class="line">    //构造函数，把当前交易的发送者（也就是合约的创建者）赋予owner变量</span><br><span class="line">    function owned() public &#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //声明一个修改器，用于有些方法只有合约的创建者才能操作</span><br><span class="line">    modifier onlyOwner&#123;</span><br><span class="line">        if(msg.sender != owner)&#123;</span><br><span class="line">            revert();</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            _;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //把该合约的拥有者转给其他人</span><br><span class="line">    function transferOwner(address newOwner) public onlyOwner&#123;</span><br><span class="line">        owner = newOwner;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract tokenCpc1 is owned &#123;</span><br><span class="line">    string public name ;//代币名字</span><br><span class="line">    string public symbol; //代币符号</span><br><span class="line">    uint8 public decimals = 0; //代币小数位</span><br><span class="line">    uint public totalSupply; //代币总量</span><br><span class="line">    </span><br><span class="line">    uint public sellPrice = 1 ether ; //设置代币的卖的价格等于一个以太币</span><br><span class="line">    uint public buyPrice = 1 ether ;//设置代币的买的价格等于一个以太币</span><br><span class="line">    </span><br><span class="line">    //用一个映射类型的变量，来记录所有账户的代币的余额</span><br><span class="line">    mapping(address =&gt; uint) public balanceOf;</span><br><span class="line">    //用一个映射类型的变量，来记录被冻结的账户</span><br><span class="line">    mapping(address=&gt;bool) public frozenAccount;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    event e(string _str);</span><br><span class="line">    //构造函数，初始化代币的变量和初始代币总量</span><br><span class="line">    function tokenCpc1(uint initialSupply,string _name , string _symbol, uint8 _decimals,address centralMinter) public payable&#123;</span><br><span class="line">        //手动指定代币的拥有者，如果不填，则默认为合约的部署者</span><br><span class="line">        if(centralMinter !=0)&#123;</span><br><span class="line">            owner = centralMinter;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        balanceOf[owner] = initialSupply;</span><br><span class="line">        name = _name;</span><br><span class="line">        symbol = _symbol;</span><br><span class="line">        decimals = _decimals;</span><br><span class="line">        totalSupply = initialSupply;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //发行代币，向指定的目标账户添加代币</span><br><span class="line">    function mintToken(address target,uint mintedAmount) public onlyOwner&#123;</span><br><span class="line">        //判断目标账户是否存在</span><br><span class="line">        if(target != 0)&#123;</span><br><span class="line">            //设置目标账户相应的代币余额</span><br><span class="line">            balanceOf[target] = mintedAmount;</span><br><span class="line">            //增加总量</span><br><span class="line">            totalSupply +=mintedAmount;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            revert();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //实现账户的冻结和解冻</span><br><span class="line">    function freezeAccount(address target,bool _bool) public onlyOwner&#123;</span><br><span class="line">        if(target != 0)&#123;</span><br><span class="line">            frozenAccount[target] = _bool;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //实现账户间，代币的转移</span><br><span class="line">    function transfer(address _to, uint _value) public &#123;</span><br><span class="line">        //检测交易的发起者的账户是不是被冻结了</span><br><span class="line">        if(frozenAccount[msg.sender])&#123;</span><br><span class="line">            revert();</span><br><span class="line">        &#125;</span><br><span class="line">        //检测交易发起者的账户的代币余额是否足够</span><br><span class="line">        if(balanceOf[msg.sender] &lt; _value)&#123;</span><br><span class="line">                revert();</span><br><span class="line">        &#125;</span><br><span class="line">        //检测溢出</span><br><span class="line">        if((balanceOf[_to] + _value) &lt;balanceOf[_to] )&#123;</span><br><span class="line">                    revert();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //实现代币转移</span><br><span class="line">        balanceOf[msg.sender] -=_value;</span><br><span class="line">        balanceOf[_to] +=_value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //设置代币的买卖价格</span><br><span class="line">    function setPrice(uint newSellPrice,uint newBuyPrice) public onlyOwner&#123;</span><br><span class="line">        sellPrice = newSellPrice;</span><br><span class="line">        buyPrice = newBuyPrice;</span><br><span class="line">    &#125;</span><br><span class="line">    //实现代币的卖操作</span><br><span class="line">    function sell(uint amount) public returns(uint revenue)&#123;</span><br><span class="line">        //检测交易的发起者的账户是不是被冻结了</span><br><span class="line">        if(frozenAccount[msg.sender])&#123;</span><br><span class="line">            revert();</span><br><span class="line">        &#125;</span><br><span class="line">        //检测交易发起者的账户的代币余额是否足够</span><br><span class="line">        if(balanceOf[msg.sender] &lt; amount)&#123;</span><br><span class="line">            revert();</span><br><span class="line">        &#125;</span><br><span class="line">        //把相应数量的代币给合约的拥有者</span><br><span class="line">        balanceOf[owner] +=amount ;</span><br><span class="line">        //卖家的账户减去相应的余额</span><br><span class="line">        balanceOf[msg.sender] -=amount;</span><br><span class="line">        //计算对应的以太币的价值</span><br><span class="line">        revenue = amount * sellPrice;</span><br><span class="line">        //向卖家的账户发送对应数量的以太币</span><br><span class="line">        if(msg.sender.send(revenue))&#123;</span><br><span class="line">            return revenue;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            //如果以太币发送失败，则终止程序，并且恢复状态变量</span><br><span class="line">            revert();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //实现买操作</span><br><span class="line">    function buy() public payable returns(uint amount) &#123;</span><br><span class="line">        //检测买家是不是大于0 </span><br><span class="line">        if(buyPrice &lt;= 0)&#123;</span><br><span class="line">            //如果不是，则终止</span><br><span class="line">            revert();</span><br><span class="line">        &#125;</span><br><span class="line">        //根据用户发送的以太币的数量和代币的买价，计算出代币的数量</span><br><span class="line">        amount = msg.value / buyPrice;</span><br><span class="line">        //检测合约的拥有者是否有足够多的代币</span><br><span class="line">        if(balanceOf[owner] &lt; amount)&#123;</span><br><span class="line">            revert();</span><br><span class="line">        &#125;</span><br><span class="line">        //向合约的拥有者转移以太币</span><br><span class="line">        if(!owner.send(msg.value))&#123;</span><br><span class="line">            //如果失败，则终止</span><br><span class="line">            revert();</span><br><span class="line">        &#125;</span><br><span class="line">        //从拥有者的账户上减去相应的代币</span><br><span class="line">        balanceOf[owner] -=amount ;</span><br><span class="line">        //买家的账户增加相应的余额</span><br><span class="line">        balanceOf[msg.sender] +=amount;</span><br><span class="line">        </span><br><span class="line">        return amount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="部署合约"><a href="#部署合约" class="headerlink" title="部署合约"></a>部署合约</h2><p><img src="//img.mukewang.com/5ac48a8600015feb21181220.png" alt="图片描述"><br><img src="//img.mukewang.com/5ac48a9400018a6b22201294.png" alt="图片描述"></p>
<h2 id="开启挖矿"><a href="#开启挖矿" class="headerlink" title="开启挖矿"></a>开启挖矿</h2><p><img src="//img.mukewang.com/5ac48aa400018ec415500486.png" alt="图片描述"></p>
<h2 id="添加代币"><a href="#添加代币" class="headerlink" title="添加代币"></a>添加代币</h2><p><img src="//img.mukewang.com/5ac48ab50001c01c23061122.png" alt="图片描述"><br><img src="//img.mukewang.com/5ac48ac80001da2c22581274.png" alt="图片描述"></p>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p><img src="//img.mukewang.com/5ac48ad60001bbf322461104.png" alt="图片描述"><br><img src="//img.mukewang.com/5ac48adf00012d0422780956.png" alt="图片描述"></p>
]]></content>
  </entry>
  <entry>
    <title>【2】区块链-以太坊智能合约</title>
    <url>/2018/20180511-2.html</url>
    <content><![CDATA[<h1 id="以太坊智能合约实战"><a href="#以太坊智能合约实战" class="headerlink" title="以太坊智能合约实战"></a>以太坊智能合约实战</h1><h2 id="启动Remix-IDE工具"><a href="#启动Remix-IDE工具" class="headerlink" title="启动Remix IDE工具"></a>启动Remix IDE工具</h2><p><img src="//img.mukewang.com/5ac488130001914c25261476.png" alt="图片描述"></p>
<h2 id="设置IDE本地文件共享"><a href="#设置IDE本地文件共享" class="headerlink" title="设置IDE本地文件共享"></a>设置IDE本地文件共享</h2><p><img src="//img.mukewang.com/5ac4883300013f9920320678.png" alt="图片描述"><br><img src="//img.mukewang.com/5ac4883b00015ee317440998.png" alt="图片描述"><br><img src="//img.mukewang.com/5ac48847000183f712380512.png" alt="图片描述"></p>
<blockquote>
<p>参考连接</p>
<ol>
<li><a href="https://remix.readthedocs.io/en/latest/tutorial_remixd_filesystem.html" target="_blank" rel="noopener">https://remix.readthedocs.io/en/latest/tutorial_remixd_filesystem.html</a></li>
<li><a href="https://github.com/ethereum/remixd" target="_blank" rel="noopener">https://github.com/ethereum/remixd</a></li>
</ol>
</blockquote>
<h2 id="以太坊智能合约demo"><a href="#以太坊智能合约demo" class="headerlink" title="以太坊智能合约demo"></a>以太坊智能合约demo</h2><h3 id="新建账户的两种方案"><a href="#新建账户的两种方案" class="headerlink" title="新建账户的两种方案"></a>新建账户的两种方案</h3><p><img src="//img.mukewang.com/5ac488790001560a19400618.png" alt="图片描述"></p>
<h3 id="新建合约"><a href="#新建合约" class="headerlink" title="新建合约"></a>新建合约</h3><p><img src="//img.mukewang.com/5ac488870001c5ea20100656.png" alt="图片描述"></p>
<h3 id="编写合约代码"><a href="#编写合约代码" class="headerlink" title="编写合约代码"></a>编写合约代码</h3><p><img src="//img.mukewang.com/5ac488a500016b1020721012.png" alt="图片描述"></p>
<h3 id="合约部署"><a href="#合约部署" class="headerlink" title="合约部署"></a>合约部署</h3><p><img src="//img.mukewang.com/5ac488b3000105f620400848.png" alt="图片描述"></p>
<p><img src="//img.mukewang.com/5ac488c3000133bc16941388.png" alt="图片描述"></p>
<h3 id="开启挖矿"><a href="#开启挖矿" class="headerlink" title="开启挖矿"></a>开启挖矿</h3><p><img src="//img.mukewang.com/5ac488cc0001dc3c15440492.png" alt="图片描述"></p>
<h3 id="合约打包成功"><a href="#合约打包成功" class="headerlink" title="合约打包成功"></a>合约打包成功</h3><p><img src="//img.mukewang.com/5ac488d8000140b019701052.png" alt="图片描述"><br><img src="//img.mukewang.com/5ac488f200011c8520500486.png" alt="图片描述"></p>
<h3 id="查看部署好的合约"><a href="#查看部署好的合约" class="headerlink" title="查看部署好的合约"></a>查看部署好的合约</h3><p><img src="//img.mukewang.com/5ac489010001b91422461240.png" alt="图片描述"></p>
<h3 id="执行合约"><a href="#执行合约" class="headerlink" title="执行合约"></a>执行合约</h3><ol>
<li><p>给主账户设置100000块钱<br><img src="//img.mukewang.com/5ac489170001f40622521270.png" alt="图片描述"><br><img src="//img.mukewang.com/5ac4891f0001489e11321364.png" alt="图片描述"></p>
</li>
<li><p>查看合约执行状态<br><img src="//img.mukewang.com/5ac4892800014e1c20480618.png" alt="图片描述"><br><img src="//img.mukewang.com/5ac489370001278513640844.png" alt="图片描述"></p>
</li>
</ol>
<p><strong> 这里本来是100000多执行了一次1000000导致有1100000 </strong></p>
<ol start="3">
<li>合约执行<br><img src="//img.mukewang.com/5ac4895700016b1121161130.png" alt="图片描述"></li>
</ol>
<h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><h3 id="solidity-文档"><a href="#solidity-文档" class="headerlink" title="solidity 文档"></a>solidity 文档</h3><p><a href="http://solidity-cn.readthedocs.io/zh/develop/introduction-to-smart-contracts.html" target="_blank" rel="noopener">http://solidity-cn.readthedocs.io/zh/develop/introduction-to-smart-contracts.html</a></p>
<p><a href="http://www.tryblockchain.org/" target="_blank" rel="noopener">http://www.tryblockchain.org/</a></p>
<h3 id="Web3-js-文档"><a href="#Web3-js-文档" class="headerlink" title="Web3 js 文档"></a>Web3 js 文档</h3><p><a href="http://web3.tryblockchain.org/" target="_blank" rel="noopener">http://web3.tryblockchain.org/</a></p>
<h3 id="Truffle-文档"><a href="#Truffle-文档" class="headerlink" title="Truffle 文档"></a>Truffle 文档</h3><p><a href="http://truffle.tryblockchain.org/" target="_blank" rel="noopener">http://truffle.tryblockchain.org/</a></p>
]]></content>
  </entry>
  <entry>
    <title>【1】区块链-以太坊搭建私有网络</title>
    <url>/2018/20180511-1.html</url>
    <content><![CDATA[<h1 id="以太坊搭建私有网络实战"><a href="#以太坊搭建私有网络实战" class="headerlink" title="以太坊搭建私有网络实战"></a>以太坊搭建私有网络实战</h1><h2 id="基本环境安装"><a href="#基本环境安装" class="headerlink" title="基本环境安装"></a>基本环境安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 安装nodejs</span><br><span class="line">2. brew tap ethereum/ethereum</span><br><span class="line">3. brew install ethereum</span><br><span class="line">4. Ethereum Wallet and Mist Beta 0.10.0</span><br><span class="line">https://github.com/ethereum/mist/releases/</span><br></pre></td></tr></table></figure>
<h2 id="配置创世区块文件"><a href="#配置创世区块文件" class="headerlink" title="配置创世区块文件"></a>配置创世区块文件</h2><ol>
<li>文件名：CustomGenesis.json<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;nonce&quot;: &quot;0x0000000000000042&quot;,     </span><br><span class="line">    &quot;timestamp&quot;: &quot;0x00&quot;,</span><br><span class="line">    &quot;parentHash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,</span><br><span class="line">    &quot;extraData&quot;: &quot;0x00&quot;,     </span><br><span class="line">    &quot;gasLimit&quot;: &quot;0x8000000&quot;,     </span><br><span class="line">    &quot;difficulty&quot;: &quot;0x400&quot;,</span><br><span class="line">    &quot;mixhash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,</span><br><span class="line">    &quot;coinbase&quot;: &quot;0x3333333333333333333333333333333333333333&quot;,     </span><br><span class="line">    &quot;alloc&quot;: &#123;</span><br><span class="line">     &#125;,</span><br><span class="line">     &quot;config&quot;: &#123;</span><br><span class="line">        &quot;chainId&quot;: 15,</span><br><span class="line">        &quot;homesteadBlock&quot;: 0,</span><br><span class="line">        &quot;eip155Block&quot;: 0,</span><br><span class="line">        &quot;eip158Block&quot;: 0</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="//img.mukewang.com/5ac4846e000136c013360350.png" alt="图片描述"></p>
<h2 id="初始化创世区块"><a href="#初始化创世区块" class="headerlink" title="初始化创世区块"></a>初始化创世区块</h2><p><code>geth --identity &quot;mydev&quot; --rpc --rpccorsdomain &quot;*&quot; --datadir &quot;./Mychains/dev&quot; --rpcapi &quot;db,eth,net,web3&quot; init &quot;./CustomGenesis.json&quot;</code></p>
<p><img src="//img.mukewang.com/5ac4848a000100b316940468.png" alt="图片描述"></p>
<h2 id="开启私有网络"><a href="#开启私有网络" class="headerlink" title="开启私有网络"></a>开启私有网络</h2><ol>
<li>只开启rpc<br><code>geth --datadir &quot;./Mychains/dev&quot; --identity &quot;mydev&quot; --rpccorsdomain &quot;*&quot; --networkid 99 console</code><br><img src="//img.mukewang.com/5ac484b00001926c22840746.png" alt="图片描述"></li>
<li>开启rpc和http<br><code>geth --datadir &quot;./Mychains/dev&quot; --identity &quot;mydev&quot; --rpc --rpcapi &quot;db,eth,net,web3,personal,web3&quot; --nodiscover --rpccorsdomain &quot;*&quot; --networkid 100 console</code><br><img src="//img.mukewang.com/5ac484bb0001f09a15440802.png" alt="图片描述"></li>
</ol>
<h1 id="创建账户"><a href="#创建账户" class="headerlink" title="创建账户"></a>创建账户</h1><p><img src="//img.mukewang.com/5ac484d10001e0a816580202.png" alt="图片描述"></p>
<h2 id="IPC连接连接，并开启挖矿（新开一个客户端）"><a href="#IPC连接连接，并开启挖矿（新开一个客户端）" class="headerlink" title="IPC连接连接，并开启挖矿（新开一个客户端）"></a>IPC连接连接，并开启挖矿（新开一个客户端）</h2><p><code>geth attach /Users/uiste/www/blockchain/test-geth/Mychains/dev/geth.ipc</code></p>
<p><img src="//img.mukewang.com/5ac4851500013f7016480820.png" alt="图片描述"></p>
<blockquote>
<p>如果是Web应用的时候，就使用<a href="http://127.0.0.8545" target="_blank" rel="noopener">http://127.0.0.8545</a> 地址就是连接</p>
</blockquote>
<h2 id="开启mist浏览器"><a href="#开启mist浏览器" class="headerlink" title="开启mist浏览器"></a>开启mist浏览器</h2><p>Mac遇到启动mist失败</p>
<p><img src="//img.mukewang.com/5ac4852f000122ee09300898.png" alt="图片描述"><br>解决方案：</p>
<ol>
<li><p>通过命令行方式启动让Ethereum Wallet，添加参数让他和刚起的私有链同用一个ipc。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uiste@uiste:~/www/blockchain/test-geth/Mychains/dev$     cd /Applications/</span><br><span class="line">uiste@uiste:/Applications$     ./Ethereum\ Wallet.app/Contents/MacOS/Ethereum\ Wallet --rpc &quot;/Users/uiste/www/blockchain/test-geth/Mychains/dev/geth.ipc&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过命令行方式启动Mist，添加参数让他和刚起的私有链同用一个ipc。<br><img src="//img.mukewang.com/5ac4855b0001651f14140316.png" alt="图片描述"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uiste@uiste:/Applications$      Mist.app/Contents/MacOS/Mist --rpc &quot;/Users/uiste/www/blockchain/test-geth/Mychains/dev/geth.ipc&quot;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>启动Mist后的界面如下：</p>
<p><img src="//img.mukewang.com/5ac4856400013fe024441426.png" alt="图片描述"><br>停止挖矿，命令行查看账户余额<br><img src="//img.mukewang.com/5ac4857f0001cda615500390.png" alt="图片描述"></p>
]]></content>
  </entry>
  <entry>
    <title>大型网站架构设计</title>
    <url>/2018/20180405-1.html</url>
    <content><![CDATA[<h1 id="大型网站的特点"><a href="#大型网站的特点" class="headerlink" title="大型网站的特点"></a>大型网站的特点</h1><ul>
<li>海量数据： 淘宝有几十亿商品</li>
<li>高并发：    日均PV几十亿</li>
<li>高可用：    系统<code>7*24</code>不间断</li>
<li>功能多、需求多、更新快</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Mysql存储过程</title>
    <url>/2018/20180404-1.html</url>
    <content><![CDATA[<h1 id="存储过程自动分表"><a href="#存储过程自动分表" class="headerlink" title="存储过程自动分表"></a>存储过程自动分表</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 参照表</span><br><span class="line">CREATE TABLE `pc_pay_result_20170420` (</span><br><span class="line">  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `order_id` varchar(32) NOT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;支付结果&apos;;</span><br><span class="line"></span><br><span class="line"># 存储过程</span><br><span class="line">DROP PROCEDURE IF EXISTS `proc_month_daily_create_tables`;</span><br><span class="line">DELIMITER $$</span><br><span class="line">CREATE PROCEDURE `proc_month_daily_create_tables`() </span><br><span class="line">begin  </span><br><span class="line">set @current_20_tablesql=(select concat(&apos;es.pc_pay_result_&apos;,date_format(curdate(),&apos;%Y%m&apos;),&apos;20&apos;));</span><br><span class="line">set @create_tablesql_00=(select concat(&apos;CREATE TABLE IF NOT EXISTS es.pc_pay_result_&apos;,date_format(date_add(curdate(),interval 1 month),&apos;%Y%m&apos;),&apos;00 like &apos;,&apos;es.pc_pay_result_&apos;,date_format(curdate(),&apos;%Y%m&apos;),&apos;20;&apos;));</span><br><span class="line">set @create_tablesql_10=(select concat(&apos;CREATE TABLE IF NOT EXISTS es.pc_pay_result_&apos;,date_format(date_add(curdate(),interval 1 month),&apos;%Y%m&apos;),&apos;10 like &apos;,&apos;es.pc_pay_result_&apos;,date_format(curdate(),&apos;%Y%m&apos;),&apos;20;&apos;));</span><br><span class="line">set @create_tablesql_20=(select concat(&apos;CREATE TABLE IF NOT EXISTS es.pc_pay_result_&apos;,date_format(date_add(curdate(),interval 1 month),&apos;%Y%m&apos;),&apos;20 like &apos;,&apos;es.pc_pay_result_&apos;,date_format(curdate(),&apos;%Y%m&apos;),&apos;20;&apos;));</span><br><span class="line"></span><br><span class="line">PREPARE create_tablesql_00 FROM @create_tablesql_00;     </span><br><span class="line">EXECUTE create_tablesql_00;  </span><br><span class="line">PREPARE create_tablesql_10 FROM @create_tablesql_10;     </span><br><span class="line">EXECUTE create_tablesql_10;  </span><br><span class="line">PREPARE create_tablesql_20 FROM @create_tablesql_20;     </span><br><span class="line">EXECUTE create_tablesql_20;  </span><br><span class="line"></span><br><span class="line">END </span><br><span class="line">$$</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"># 自动创建事件</span><br><span class="line">CREATE DEFINER=`root`@`localhost` EVENT `存储过程建表事件` ON SCHEDULE EVERY &apos;0:1&apos; MINUTE_SECOND STARTS &apos;2019-04-07 15:38:29&apos; ON COMPLETION NOT PRESERVE ENABLE COMMENT &apos;存储过程建表&apos; DO begin</span><br><span class="line">/**event body**/</span><br><span class="line">CALL proc_month_daily_create_tables();</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">CREATE DEFINER=`root`@`localhost` EVENT `存储过程建表事件` ON SCHEDULE EVERY &apos;0 1&apos; DAY_HOUR STARTS &apos;2019-04-08 15:38:29&apos; ON COMPLETION NOT PRESERVE ENABLE COMMENT &apos;存储过程建表&apos; DO begin</span><br><span class="line">/**event body**/</span><br><span class="line">CALL proc_month_daily_create_tables();</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p><img src="http://resoure.uiste.com/phcntech_dev190407154844_mysql.png" alt="存储过程事件"></p>
<h1 id="创建自定义函数"><a href="#创建自定义函数" class="headerlink" title="创建自定义函数"></a>创建自定义函数</h1><p><img src="http://resoure.uiste.com/phcntech_dev190407162402_funcion.png" alt="funciton"></p>
]]></content>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/2018/20180403-1.html</url>
    <content><![CDATA[<p>精神指南：找到容易变化的地方，独立出来</p>
<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><p>用不同的类 + 相同的方法 实现不同的策略行为</p>
<h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><p>被观察者绑定多个观察者的类 指定事件完成时，循环触发不同观察者的相同方法<br>PHP SPL 中 SplObserveer SplSubject SplObjectStorage</p>
<h1 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h1><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><h1 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h1><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1>]]></content>
  </entry>
  <entry>
    <title>Mysql高级-存储引擎、驱动、索引、优化</title>
    <url>/2018/20180402-3.html</url>
    <content><![CDATA[<p>MySQL5.1版本前默认存储引擎是myisam<br>MySQL5.5版本开始默认存储引擎是innodb</p>
<h1 id="字段类型"><a href="#字段类型" class="headerlink" title="字段类型"></a>字段类型</h1><h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><ul>
<li>myisam 和 memory 存储引擎采用的是表级锁</li>
<li>BDB存储引擎采用的是页面锁，但也支持表级锁</li>
<li><p>innodb 存储引擎既支持行锁也支持表锁，默认采用行锁</p>
</li>
<li><p>表级锁：开销小，加锁快，不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低</p>
</li>
<li>行级锁：开销大，加锁慢，会出现死锁，锁定粒度小，发生锁冲突的概率最低，并发度也最高</li>
<li>页面锁：介于上述二者之间</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">myisam 表锁争用情况</span><br><span class="line">&gt; show status like &apos;table_lock%&apos;;</span><br><span class="line">table_lock_waited  值高有着叫严重的表锁争用情况</span><br><span class="line">table_lock_immediate</span><br><span class="line"></span><br><span class="line">table_lock_immediate/table_lock_waited &gt; 5000 争用情况正常</span><br></pre></td></tr></table></figure>
<h2 id="myisam-锁机制"><a href="#myisam-锁机制" class="headerlink" title="myisam 锁机制"></a>myisam 锁机制</h2><p>表共享读锁（不会阻塞其它进程对同一表的读请求，但会阻塞同一表的写请求）<br>表独占写锁（会阻塞其它进程对同一表的读写操作）</p>
<blockquote>
<p>并发插入<br>concurrent_instert<br>0:不允许并发插入<br>1:有空洞不允许并发插入，无空洞允许<br>2:都允许</p>
</blockquote>
<h2 id="innodb"><a href="#innodb" class="headerlink" title="innodb"></a>innodb</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; show status like &apos;innodb_row_lock%&apos;;</span><br><span class="line">innodb_row_lock_current_waits:</span><br><span class="line">innodb_row_lock_time</span><br><span class="line">innodb_row_lock_time_avg</span><br><span class="line">innodb_row_lock_time_max</span><br><span class="line">innodb_row_lock_waits</span><br></pre></td></tr></table></figure>
<ul>
<li>行锁不影响读操作，只影响写操作。同时如果更新语句条件没有加索引，会锁定整个表，但还是不影响读操作</li>
</ul>
<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="innodb-事务隔离级别"><a href="#innodb-事务隔离级别" class="headerlink" title="innodb 事务隔离级别"></a>innodb 事务隔离级别</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* read uncommitted 	非提交读（会带来涨读）</span><br><span class="line">* read committed 	提交读 </span><br><span class="line">* repeatable read 	可重复读 （会出现幻读）</span><br><span class="line">* serializable 		序列化 （会加锁，让数据不可变）</span><br><span class="line"></span><br><span class="line">查看隔离级别</span><br><span class="line">select @@tx_isolation			查看当前会话隔离级别</span><br><span class="line">select @@global.tx_isolation 	查看系统隔离级别</span><br><span class="line"></span><br><span class="line">设置隔离级别</span><br><span class="line">set session transaction isolation level xxx 设置档期会话隔离级别</span><br><span class="line">set global transaction isolation level xxx  设置系统全局隔离级别</span><br></pre></td></tr></table></figure>
<h1 id="驱动"><a href="#驱动" class="headerlink" title="驱动"></a>驱动</h1><h2 id="php5-3之前定的渠道是libmysql-dll或so-之后是mysqlnd"><a href="#php5-3之前定的渠道是libmysql-dll或so-之后是mysqlnd" class="headerlink" title="php5.3之前定的渠道是libmysql.dll或so 之后是mysqlnd"></a>php5.3之前定的渠道是libmysql.dll或so 之后是mysqlnd</h2><h2 id="驱动API"><a href="#驱动API" class="headerlink" title="驱动API"></a>驱动API</h2><ul>
<li>msyql （mysql_real_escape_string($name)）转移特深字符，用于msyql_queue() 安全查询</li>
<li>mysqli 新增：面向对象接口、绑定语句支持（prepare、bind_param）、多语句支持、事务支持等</li>
<li>pdo_mysql 特点：多数据库统一支持</li>
</ul>
<h1 id="索引和全文检索技术"><a href="#索引和全文检索技术" class="headerlink" title="索引和全文检索技术"></a>索引和全文检索技术</h1><ol>
<li><p>普通索引</p>
<blockquote>
<p>如果没有唯一性要求，可以选择普通索引</p>
</blockquote>
</li>
<li><p>唯一索引</p>
<blockquote>
<p>如果列上有唯一性要求，可以选择唯一索引</p>
</blockquote>
</li>
<li><p>全文索引</p>
<blockquote>
<p>如果需要模糊搜索，可以选择全文索引</p>
</blockquote>
</li>
<li><p>组合索引</p>
<blockquote>
<p>如果有多个条件一起查询，可以选择组合索引<br>注意最左原则</p>
</blockquote>
</li>
</ol>
<ul>
<li>索引的实现方式<blockquote>
<p>B+ 树 、聚簇索引 、 非聚簇索引 对中文支持不友好</p>
</blockquote>
</li>
</ul>
<h1 id="sql优化"><a href="#sql优化" class="headerlink" title="sql优化"></a>sql优化</h1><h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. from 子句对其后面的多个表进行笛卡尔积，产生的虚拟表VT1</span><br><span class="line">2. on 对VT1 数据过滤 得到 VT2</span><br><span class="line">3. 将未符合调价的保留表中数据添加到 VT2 中 得到 VT3</span><br><span class="line">4. where 子句对 VT3 过滤 得到 VT4</span><br><span class="line">5. group 对 VT4 得到 VT5</span><br><span class="line">6. cube|roolup 子句进行操作得到 VT6</span><br><span class="line">7. having 对VT6数据进行Having 得到VT7</span><br><span class="line">8. select 从 VT7 中选择要获取的字段 得到 VT8</span><br><span class="line">9. distinct 去重 得到 VT9</span><br><span class="line">10. order by 对VT9 结果进行排序后，形成 VT10</span><br><span class="line">11. limit 从 VT10 中取出指定的数据，形成 VT11 返回给用户</span><br></pre></td></tr></table></figure>
<h2 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN 输出格式</span><br><span class="line">EXPLAIN 命令的输出内容大致如下:</span><br><span class="line"></span><br><span class="line">mysql&gt; explain select * from user_info where id = 2\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: user_info</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: const</span><br><span class="line">possible_keys: PRIMARY</span><br><span class="line">          key: PRIMARY</span><br><span class="line">      key_len: 8</span><br><span class="line">          ref: const</span><br><span class="line">         rows: 1</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: NULL</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line">各列的含义如下:</span><br><span class="line"></span><br><span class="line">id: SELECT 查询的标识符. 每个 SELECT 都会自动分配一个唯一的标识符.</span><br><span class="line"></span><br><span class="line">select_type: SELECT 查询的类型.</span><br><span class="line"></span><br><span class="line">table: 查询的是哪个表</span><br><span class="line"></span><br><span class="line">partitions: 匹配的分区</span><br><span class="line"></span><br><span class="line">type: join 类型</span><br><span class="line"></span><br><span class="line">possible_keys: 此次查询中可能选用的索引</span><br><span class="line"></span><br><span class="line">key: 此次查询中确切使用到的索引.</span><br><span class="line"></span><br><span class="line">ref: 哪个字段或常数与 key 一起被使用</span><br><span class="line"></span><br><span class="line">rows: 显示此查询一共扫描了多少行. 这个是一个估计值.</span><br><span class="line"></span><br><span class="line">filtered: 表示此查询条件所过滤的数据的百分比</span><br><span class="line"></span><br><span class="line">extra: 额外的信息</span><br></pre></td></tr></table></figure>
<h2 id="分表"><a href="#分表" class="headerlink" title="分表"></a>分表</h2><h2 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h2>]]></content>
  </entry>
  <entry>
    <title>Mysql高级-体系结构</title>
    <url>/2018/20180402-2.html</url>
    <content><![CDATA[<p>Mysql是由SQL接口，解析器，优化器，缓存，存储引擎组成的。</p>
<p><img src="http://resoure.uiste.com/phcntech_dev190402124853_mysql体系结构.png" alt="MySQL体系结构"></p>
<p>Connectors</p>
<p>指的是不同语言中与SQL的交互</p>
<p>Management Serveices &amp; Utilities</p>
<p>系统管理和控制工具</p>
<p>Connection Pool</p>
<p>连接池</p>
<p>管理缓冲用户连接，线程处理等需要缓存的需求。</p>
<p>SQL Interface: SQL接口</p>
<p>接受用户的SQL命令，并且返回用户需要查询的结果。比如select from就是调用SQL Interface。</p>
<p>Parser: 解析器。</p>
<p>SQL命令传递到解析器的时候会被解析器验证和解析。解析器是由Lex和YACC实现的，是一个很长的脚本。</p>
<p>主要功能：</p>
<p>a . 将SQL语句分解成数据结构，并将这个结构传递到后续步骤，以后SQL语句的传递和处理就是基于这个结构的 。</p>
<p>b. 如果在分解构成中遇到错误，那么就说明这个sql语句是不合理的。</p>
<p>Optimizer: 查询优化器</p>
<p>SQL语句在查询之前会使用查询优化器对查询进行优化。他使用的是“选取-投影-联接”策略进行查询。</p>
<p>用一个例子就可以理解： select uid,name from user where gender = 1;这个select 查询先根据where语句进行选取，而不是先将表全部查询出来以后再进行gender过滤。<br>这个select查询先根据uid和name进行属性投影，而不是将属性全部取出以后再进行过滤。<br>将这两个查询条件联接起来生成最终查询结果。</p>
<p>Cache和Buffer： 查询缓存</p>
<p>如果查询缓存有命中的查询结果，查询语句就可以直接去查询缓存中取数据。</p>
<p>这个缓存机制是由一系列小缓存组成的。比如表缓存，记录缓存，key缓存，权限缓存等。</p>
<p>Engine ：存储引擎</p>
<p>存储引擎是MySql中具体的与文件打交道的子系统。也是Mysql最具有特色的一个地方。</p>
<p>Mysql的存储引擎是插件式的。它根据MySql AB公司提供的文件访问层的一个抽象接口来定制一种文件访问机制（这种访问机制就叫存储引擎）。</p>
<p>现在有很多种存储引擎，各个存储引擎的优势各不一样，最常用的MyISAM,InnoDB,BDB。</p>
<p>默认下MySql5.6是使用MyISAM引擎，它查询速度快，有较好的索引优化和数据压缩技术。但是它不支持事务。</p>
<p>InnoDB支持事务，并且提供行级的锁定，应用也相当广泛。</p>
<p>Mysql也支持自己定制存储引擎，甚至一个库中不同的表使用不同的存储引擎，这些都是允许的。</p>
<p>物理文件<br>物理文件包括：redolog、undolog、binlog（复制时还有relaylog）、errorlog、querylog、slowlog、data、index</p>
]]></content>
  </entry>
  <entry>
    <title>NoSql</title>
    <url>/2018/20180402-1.html</url>
    <content><![CDATA[<h1 id="memcache"><a href="#memcache" class="headerlink" title="memcache"></a>memcache</h1><ul>
<li><p>Page为内存分配的最小单位。</p>
<blockquote>
<p>Memcached 的内存分配以page为单位，默认情况下一个page是1M，可以通过-I参数在启动时指定。如果需要申请内存 时，memcached会划分出一个新的page并分配给需要的slab区域。page一旦被分配在重启前不会被回收或者重新分配</p>
</blockquote>
</li>
<li><p>Slabs划分数据空间。</p>
<blockquote>
<p>Memcached 并不是将所有大小的数据都放在一起的，而是预先将数据空间划分为一系列slabs，每个slab只负责一定范围内的数据存储。每个slab只存储大于其上一个slab的size并小于或者等于自己最大size的数据。例如：slab 3只存储大小介于137 到 224 bytes的数据。如果一个数据大小为230byte将被分配到slab 4中。每个slab负责的空间其实是不等的，memcached默认情况下下一个slab的最大值为前一个的1.25倍，这个可以通过修 改-f参数来修改增长比例。</p>
</blockquote>
</li>
<li><p>Chunk才是存放缓存数据的单位。</p>
<blockquote>
<p>Chunk 是一系列固定的内存空间，这个大小就是管理它的slab的最大存放大小。例如：slab 1的所有chunk都是104byte，而slab 4的所有chunk都是280byte。chunk是memcached实际存放缓存数据的地方，因为chunk的大小固定为slab能够存放的最大值， 所以所有分配给当前slab的数据都可以被chunk存下。如果时间的数据大小小于chunk的大小，空余的空间将会被闲置，这个是为了防止内存碎片而设 计的。例如，chunk size是224byte，而存储的数据只有200byte，剩下的24byte将被闲置。 </p>
</blockquote>
</li>
<li><p>Slab的内存分配。</p>
<blockquote>
<p>Memcached在启动时通过-m指定最大使用内存，但是这个不会一启动就占用，是随着需要逐步分配给各slab的。<br>如果一个新的缓存数据要被存放，memcached首先选择一个合适的slab，然后查看该slab是否还有空闲的chunk，如果有则直接存放进去；如 果没有则要进行申请。slab申请内存时以page为单位，所以在放入第一个数据，无论大小为多少，都会有1M大小的page被分配给该slab。申请到 page后，slab会将这个page的内存按chunk的大小进行切分，这样就变成了一个chunk的数组，在从这个chunk数组中选择一个用于存储 数据。如下图，slab 1和slab 2都分配了一个page，并按各自的大小切分成chunk数组。 </p>
</blockquote>
</li>
<li><p>Memcached内存分配策略</p>
<blockquote>
<p>按slab需求分配page，各slab按需使用chunk存储。<br>Memcached分配出去的page不会被回收或者重新分配Memcached申请的内存不会被释放slab空闲的chunk不会借给任何其他slab使用，如果所有page都已经存满了。并且memcache已不能再分配新的内存空间。将根据LRU算法（最近最少使用）,清除某个item并将新项存储在该位置</p>
</blockquote>
</li>
<li><p>分布式解决方案</p>
</li>
</ul>
<ol>
<li><p>取模算法方式</p>
<blockquote>
<p>将key转换为32位的数字，并与memcached服务器的总数进行相除取得余数。而这个余数就是memcached服务器的节点node。有了这个node我们就可以确定memcached服务器，就可以发送命令给memcached执行了。 缺点是不方便扩展和机器宕机后不能自动调整集群<br><code>$node sprintf(&#39;%u&#39;, crc32($key)) % $total</code></p>
</blockquote>
</li>
<li><p>一致哈希算法方式</p>
<blockquote>
<p>通过虚拟节点的方式实现，可以使不可控的存储节点能够尽可能的均匀分布在圆环上，从而达到数据均匀缓存在各个主机里。其次增加与删除虚拟节点对于之前缓存的整体数据影响非常小。</p>
</blockquote>
</li>
</ol>
<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><p>高性能key-value 存储系统，它通常被称为数据结构服务器。因为值可以是：字符串、哈希、列表、集合、有序集合</p>
<ul>
<li><p>特点：单线程、快（每秒10万次SET操作）、拥有很多原子操作方法，保证数据一致性、将具有临时性和数据持久化</p>
</li>
<li><p>二进制安全、一个字符串类型的值最多能保存512M内容。</p>
</li>
<li><p>集合（set）</p>
<blockquote>
<p>集合是一个无需字符串集合。元素不能重复。一个集合最多可以包含2^32-1个元素。方便计算不同集合的交集、并集、差集。常用应用：关注列表、粉丝列表、共同关注或者粉丝等</p>
</blockquote>
</li>
<li><p>有序集合（zSet）</p>
<blockquote>
<p>每个有序集合成员都关联着一个评分，这个评分的用语把有序集合中的成员按最低分到最高分排列。（应用于各种有排序条件的列表：访问足迹最近访问的时间戳作为排序分）</p>
</blockquote>
</li>
<li><p>watch</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">"content-type:text/html;charset=utf-8"</span>);  </span><br><span class="line">$redis = <span class="keyword">new</span> redis();  </span><br><span class="line">$result = $redis-&gt;connect(<span class="string">'127.0.0.1'</span>, <span class="number">6379</span>);</span><br><span class="line">$watchkey = $redis-&gt;get(<span class="string">"watchkey"</span>);  </span><br><span class="line">$rob_total = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>($watchkey&lt;$rob_total)&#123;  </span><br><span class="line">    $redis-&gt;watch(<span class="string">"watchkey"</span>);  <span class="comment">// 监视某个key</span></span><br><span class="line">    $redis-&gt;multi();   <span class="comment">// 开启事物</span></span><br><span class="line">    $redis-&gt;hSet(<span class="string">"watchlist"</span>,<span class="string">"user_id_"</span>.mt_rand(<span class="number">1</span>, <span class="number">9999</span>),time());   <span class="comment">// 业务操作</span></span><br><span class="line">    $redis-&gt;incr(<span class="string">"watchkey"</span>);</span><br><span class="line">    $rob_result = $redis-&gt;exec(); <span class="comment">// 如果执行操作期间，被监视的KEY被其它客户端修改了，则exec失败  </span></span><br><span class="line">    <span class="keyword">if</span>($rob_result)&#123;  </span><br><span class="line">        $watchlist = $redis-&gt;hGetAll(<span class="string">"watchlist"</span>);  </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"抢购成功！&lt;br/&gt;"</span>;  </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"剩余数量："</span>.($rob_total-$watchkey<span class="number">-1</span>).<span class="string">"&lt;br/&gt;"</span>;  </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"用户列表：&lt;pre&gt;"</span>;  </span><br><span class="line">        var_dump($watchlist);  </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"手气不好，再抢购！"</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"已被抢购完!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>数据持久化：RDB 和 AOF</p>
<blockquote>
<p>RDB：就是快照存储，是默认的持久化方式，按照一定的策略周期性的将数据保存到磁盘。对应产生的数据文件为dump.rdb,通过配置文件中的save参数来定义快照的周期.通过修改配置文件的dbfilename 来修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">save 900 	1</span><br><span class="line">save 300 	10</span><br><span class="line">save 60 	10000</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<blockquote>
<p>AOF:修改配置appendonly yes 来开启，开启后写命令会依次记录到此文件。AOF 大！即使通过bgrewriteaof 命令移除冗余记录也大。恢复慢<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># appendfsync 	always		每次命令都写，最安全，性能最差</span><br><span class="line">appendfsync		everysec	每秒同步一次（默认）</span><br><span class="line"># appendfsync	no 			不主动同步，由操作系统负责鞋服，约30秒一次</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h1 id="mongoDB"><a href="#mongoDB" class="headerlink" title="mongoDB"></a>mongoDB</h1><p>介于关系数据库和非关系型数据之间的文档数据库，支持的数据结构非常松散，类似json的bson格式，因此可以存储比较复杂的数据类型。支持对数据字段奖励索引</p>
<ul>
<li>模式自由，通过数据分片实现高伸缩性</li>
<li>处理地理信息</li>
<li>高可用，内置故障迁移</li>
<li>高性能低延时实时数据（查询QPS接近MySQL的两倍左右， 插入QPS接近MySQL的五倍左右）</li>
<li>局部索引，TTL索引，固定集合</li>
<li>不适合高度事务性系统，不适合需要复杂SQL处理的查询</li>
<li>与关系型数据库结构对比：文档≈行，集合≈表，数据库≈数据库</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Linux shell</title>
    <url>/2018/20180401-2.html</url>
    <content><![CDATA[<h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><ul>
<li><p>普通用户只能追加无法删除<br><code>chattr +a /var/log/access.log</code></p>
</li>
<li><p>r w x 4 2 1</p>
</li>
</ul>
<h2 id="磁盘文件统计"><a href="#磁盘文件统计" class="headerlink" title="磁盘文件统计"></a>磁盘文件统计</h2><ul>
<li>df 查看磁盘占用</li>
<li>du 统计文件占用</li>
<li>fdisk 分区管理</li>
<li>mount 磁盘挂载</li>
<li>umount 磁盘卸载</li>
<li>mkfs.ext4 磁盘格式化</li>
</ul>
<h2 id="查找find"><a href="#查找find" class="headerlink" title="查找find"></a>查找find</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . -mmin -60 		修改时间为最近60分钟内的</span><br><span class="line">find . -mmin +5  		修改时间为5分钟之前的</span><br><span class="line">find /tmp -atime -1 	查找/tmp目录最近1天(24小时)内被访问过的文件</span><br><span class="line">find . -type f 			查找本目录下的所有文件</span><br><span class="line">find . -type d 			查找本目录下的所有目录</span><br><span class="line">find . -user root 		查找本目录下所有root用户的文件</span><br><span class="line">find . -perm 600 		查找本目录下所有权限为600的文件</span><br><span class="line">find . \( -name &quot;_*&quot; -or -user root \) -type f 查找本目录下（以_开头或root用户的） 文件</span><br><span class="line"></span><br><span class="line">逻辑运算符</span><br><span class="line">-not</span><br><span class="line">-or</span><br><span class="line">-and</span><br></pre></td></tr></table></figure>
<blockquote>
<p>分析文章访问日志文件，找出访问量最大的前10个IP地址，降序排序</p>
<ol>
<li>找出IP，每行一个 -f 表示需要取得哪个字段<br><code>cut -d &quot; &quot; -f1 /var/log/access.log</code></li>
<li>去重并计数<br><code>uniq -c</code></li>
<li>排序<br><code>sort -n -r</code></li>
<li>取前10行<br><code>head -10</code></li>
</ol>
</blockquote>
<p><code>$ cut -d &quot; &quot; -f1 /var/log/access.log | sort | uniq -c | sort -n -r | head -10</code></p>
<p>linux 中有三个系统文件描述符：0.标准输入，1.标准输出，2.标准错误输出</p>
<h2 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h2><ul>
<li><p>ps 命令，显示当前进程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -ef 显示带启动命令行的进程信息</span><br><span class="line">ps -u root 显示某用户的进程</span><br><span class="line">ps -A 显示全部进程</span><br><span class="line">ps -ejH 显示进程树</span><br></pre></td></tr></table></figure>
</li>
<li><p>kill 命令：终止进程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kill -s PID</span><br><span class="line">-s 指定信号</span><br><span class="line">-l 所有信号标识列表</span><br><span class="line">kill -9 PID  强制结束</span><br><span class="line">killall 进程名称</span><br></pre></td></tr></table></figure>
</li>
<li><p>fg 命令 将后台任务调到前台</p>
<blockquote>
<p>命令后加 <code>&amp;</code> 或者 <code>ctrl + z</code> 可将任务转到后台执行<br>后台执行中的任务，可以通过 <code>fg &amp;任务序号</code> 调到前台执行<br>jobs -l 查看后台任务<br><code>fg %1 恢复后台进程中的1工作号到前台执行，不写1表示恢复最后一个工作号（+）到前台执行，也可以不写%，fg 1</code></p>
</blockquote>
</li>
</ul>
<ul>
<li>开放端口：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -I INPUT 4 -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT</span><br><span class="line">service iptables save #保存iptables规则</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><ul>
<li><p>变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">区分大小写</span><br><span class="line">等号两边无空格</span><br><span class="line">所有变量都是字符串</span><br></pre></td></tr></table></figure>
</li>
<li><p>流程控制</p>
</li>
<li>命令列表</li>
<li>函数</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>PHP细节-03</title>
    <url>/2018/20180401-1.html</url>
    <content><![CDATA[<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><blockquote>
<p>时间复杂度的算法具体步骤是：<br>⑴ 找出算法中的基本语句；<br>算法中执行次数最多的那条语句就是基本语句，通常是最内层循环的循环体。<br>⑵ 计算基本语句的执行次数的数量级；<br>只需计算基本语句执行次数的数量级，这就意味着只要保证基本语句执行次数的函数中的最高次幂正确即可，可以忽略所有低次幂和最高次幂的系数。这样能够简化算法分析，并且使注意力集中在最重要的一点上：增长率。<br>⑶ 用大Ο记号表示算法的时间性能。<br>将基本语句执行次数的数量级放入大Ο记号中。<br>如果算法中包含嵌套的循环，则基本语句通常是最内层的循环体，如果算法中包含并列的循环，则将并列循环的时间复杂度相加。例如：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for (i=1; i&lt;=n; i++)  </span><br><span class="line">       x++;  </span><br><span class="line">for (i=1; i&lt;=n; i++)  </span><br><span class="line">    　for (j=1; j&lt;=n; j++)  </span><br><span class="line">          x++;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<blockquote>
<p>第一个for循环的时间复杂度为Ο(n)，第二个for循环的时间复杂度为Ο(n2)，则整个算法的时间复杂度为Ο(n+n2)=Ο(n2)。<br>Ο(1)表示基本语句的执行次数是一个常数，一般来说，只要算法中不存在循环语句，其时间复杂度就是Ο(1)。其中Ο(log2n)、Ο(n)、 Ο(nlog2n)、Ο(n2)和Ο(n3)称为多项式时间，而Ο(2n)和Ο(n!)称为指数时间。计算机科学家普遍认为前者（即多项式时间复杂度的算法）是有效算法，把这类问题称为P（Polynomial,多项式）类问题，而把后者（即指数时间复杂度的算法）称为NP（Non-Deterministic Polynomial, 非确定多项式）问题。</p>
</blockquote>
<h1 id="try-catch-finally"><a href="#try-catch-finally" class="headerlink" title="try catch finally"></a>try catch finally</h1><p>try内部正常执行try的内部逻辑，异常则执行catch的内部逻辑结构，但是不管执行的哪个都会执行完try catch的内部逻辑（非return）后执行finally的内部逻辑。</p>
<p>如果try catch都有return，按照正常执行，然后执行finally的逻辑，再返回对应的try 或者catch里执行return。</p>
<p>如果try catch finally都有return，执行完finally的逻辑后，会调用finally的return。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class test</span><br><span class="line">&#123;</span><br><span class="line">    public function testTry()</span><br><span class="line">    &#123;</span><br><span class="line">        $i = 0;</span><br><span class="line">        try &#123;</span><br><span class="line">            $i = $i + 1;</span><br><span class="line">            return $i;</span><br><span class="line">        &#125; catch (Exception $e) &#123;</span><br><span class="line">            echo &quot;wc&quot;;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            $i = $i + 2;</span><br><span class="line">            // print_r($i);</span><br><span class="line">            return &quot;1111&quot;;//当finally有return的时候 返回这个，当注销后，返回try 或者是 catch的内容。</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$b = new test();</span><br><span class="line">echo $b-&gt;testTry();</span><br><span class="line"></span><br><span class="line"># 1111[Finished in 0.4s]</span><br></pre></td></tr></table></figure>
<h1 id="set-error-handle"><a href="#set-error-handle" class="headerlink" title="set_error_handle"></a>set_error_handle</h1><p>捕获 notice waring 等错误，放置回调函数处理</p>
<blockquote>
<p>E_ERROR,E_PARSE 等拦截不了的。使用 register_shutdown_function()回调函数处理任意类型错误。</p>
</blockquote>
<h1 id="trait-是一个新的特性"><a href="#trait-是一个新的特性" class="headerlink" title="trait 是一个新的特性"></a>trait 是一个新的特性</h1><p>Trait 为了减少单继承语言的限制，使开发人员能够自由地在不同层次结构内独立的类中复用 method。Trait 和 Class 组合的语义定义了一种减少复杂性的方式，避免传统多继承和 Mixin 类相关典型问题<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace AlibabaCloud\Client\Regions;</span><br><span class="line"></span><br><span class="line">use AlibabaCloud\Client\Traits\EndpointTrait;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Class EndpointProvider</span><br><span class="line"> *</span><br><span class="line"> * @package    AlibabaCloud\Client\Regions</span><br><span class="line"> *</span><br><span class="line"> * @deprecated deprecated since version 2.0, Use AlibabaCloud instead.</span><br><span class="line"> */</span><br><span class="line">class EndpointProvider</span><br><span class="line">&#123;</span><br><span class="line">    use EndpointTrait;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="预定义接口"><a href="#预定义接口" class="headerlink" title="预定义接口"></a>预定义接口</h1><h2 id="Iterator-迭代器"><a href="#Iterator-迭代器" class="headerlink" title="Iterator 迭代器"></a>Iterator 迭代器</h2><h2 id="Aggregate-集合体"><a href="#Aggregate-集合体" class="headerlink" title="Aggregate 集合体"></a>Aggregate 集合体</h2><h2 id="Yield-生成器"><a href="#Yield-生成器" class="headerlink" title="Yield    生成器"></a>Yield    生成器</h2><h2 id="IteratorAggregate"><a href="#IteratorAggregate" class="headerlink" title="IteratorAggregate"></a>IteratorAggregate</h2><h1 id="魔术常量"><a href="#魔术常量" class="headerlink" title="魔术常量"></a>魔术常量</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(1). __FILE__                当前文件路径</span><br><span class="line">(2). __DIR__                  当前文件目录</span><br><span class="line">(3). __LINE__                 在文件文件的那一行 </span><br><span class="line">(4). __FUNCTION__       在当前文件的那个函数中       返回 函数名</span><br><span class="line">(5). __CLASS__             在当前文件中的那个类中       返回 类名</span><br><span class="line">(6). __METHOD__          在当前文件的类中的那个方法中 返回 类名::方法名</span><br></pre></td></tr></table></figure>
<h1 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">__construct()，类的构造函数</span><br><span class="line">__destruct()，类的析构函数</span><br><span class="line">__call()，在对象中调用一个不可访问方法时调用</span><br><span class="line">__callStatic()，用静态方式中调用一个不可访问方法时调用</span><br><span class="line">__get()，获得一个类的成员变量时调用</span><br><span class="line">__set()，设置一个类的成员变量时调用</span><br><span class="line">__isset()，当对不可访问属性调用isset()或empty()时调用</span><br><span class="line">__unset()，当对不可访问属性调用unset()时被调用。</span><br><span class="line">__sleep()，执行serialize()时，先会调用这个函数</span><br><span class="line">__wakeup()，执行unserialize()时，先会调用这个函数</span><br><span class="line">__toString()，类被当成字符串时的回应方法</span><br><span class="line">__invoke()，调用函数的方式调用一个对象时的回应方法</span><br><span class="line">__set_state()，调用var_export()导出类时，此静态方法会被调用。</span><br><span class="line">__clone()，当对象复制完成时调用</span><br><span class="line">__autoload()，尝试加载未定义的类</span><br><span class="line">__debugInfo()，打印所需调试信息</span><br></pre></td></tr></table></figure>
<p>范例<br>下面让我们以实例的形式向大家讲解下这几个魔术方法时如何使用的。</p>
<p>一、 <code>__construct()</code>，类的构造函数</p>
<p>php中构造方法是对象创建完成后第一个被对象自动调用的方法。在每个类中都有一个构造方法，如果没有显示地声明它，那么类中都会默认存在一个没有参数且内容为空的构造方法。</p>
<p>1、 构造方法的作用</p>
<p>通常构造方法被用来执行一些有用的初始化任务，如对成员属性在创建对象时赋予初始值。</p>
<p>2、 构造方法的在类中的声明格式<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function __constrct([参数列表])&#123;</span><br><span class="line"> </span><br><span class="line">  方法体 //通常用来对成员属性进行初始化赋值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>3、 在类中声明构造方法需要注意的事项</p>
<p>1、在同一个类中只能声明一个构造方法，原因是，PHP不支持构造函数重载。</p>
<p>2、构造方法名称是以两个下画线开始的<code>__construct()</code><br>下面是它的例子：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">  class Person</span><br><span class="line">  &#123;                                   </span><br><span class="line">      public $name;    </span><br><span class="line">      public $age;    </span><br><span class="line">      public $sex;    </span><br><span class="line">                                  </span><br><span class="line">    /**</span><br><span class="line">     * 显示声明一个构造方法且带参数</span><br><span class="line">     */                                           </span><br><span class="line">    public function __construct($name=&quot;&quot;, $sex=&quot;男&quot;, $age=22)</span><br><span class="line">    &#123;   </span><br><span class="line">      $this-&gt;name = $name;</span><br><span class="line">      $this-&gt;sex = $sex;</span><br><span class="line">      $this-&gt;age = $age;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    /**</span><br><span class="line">     * say 方法</span><br><span class="line">     */</span><br><span class="line">    public function say()</span><br><span class="line">    &#123; </span><br><span class="line">      echo &quot;我叫：&quot; . $this-&gt;name . &quot;，性别：&quot; . $this-&gt;sex . &quot;，年龄：&quot; . $this-&gt;age;</span><br><span class="line">    &#125;  </span><br><span class="line">                                               </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p>创建对象$Person1且不带任参数<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$Person1 = new Person();</span><br><span class="line">echo $Person1-&gt;say(); //输出:我叫：，性别：男，年龄：27</span><br></pre></td></tr></table></figure></p>
<p>创建对象$Person2且带参数“小明”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$Person2 = new Person(&quot;小明&quot;);</span><br><span class="line">echo $Person2-&gt;say(); //输出：我叫：张三，性别：男，年龄：27</span><br></pre></td></tr></table></figure>
<p>创建对象$Person3且带三个参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$Person3 = new Person(&quot;李四&quot;,&quot;男&quot;,25);</span><br><span class="line">echo $Person3-&gt;say(); //输出：我叫：李四，性别：男，年龄：25</span><br></pre></td></tr></table></figure>
<p>二、<code>__destruct()</code>，类的析构函数<br>通过上面的讲解，现在我们已经知道了什么叫构造方法。那么与构造方法对应的就是析构方法。</p>
<p>析构方法允许在销毁一个类之前执行的一些操作或完成一些功能，比如说关闭文件、释放结果集等。</p>
<p>析构方法是PHP5才引进的新内容。</p>
<p>析造方法的声明格式与构造方法 <code>__construct()</code> 比较类似，也是以两个下划线开始的方法 <code>__destruct()</code> ，这种析构方法名称也是固定的。</p>
<p>1、 析构方法的声明格式<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function __destruct()</span><br><span class="line">&#123;</span><br><span class="line"> //方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>注意：析构函数不能带有任何参数。</p>
<p>2、 析构方法的作用</p>
<p>一般来说，析构方法在PHP中并不是很常用，它属类中可选择的一部分，通常用来完成一些在对象销毁前的清理任务。<br>举例演示，如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person&#123;   </span><br><span class="line">                             </span><br><span class="line">  public $name;     </span><br><span class="line">  public $age;     </span><br><span class="line">  public $sex;     </span><br><span class="line">                                   </span><br><span class="line">  public function __construct($name=&quot;&quot;, $sex=&quot;男&quot;, $age=22)</span><br><span class="line">  &#123;  </span><br><span class="line">    $this-&gt;name = $name;</span><br><span class="line">    $this-&gt;sex = $sex;</span><br><span class="line">    $this-&gt;age = $age;</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">  /**</span><br><span class="line">   * say 说话方法</span><br><span class="line">   */</span><br><span class="line">  public function say()</span><br><span class="line">  &#123; </span><br><span class="line">    echo &quot;我叫：&quot;.$this-&gt;name.&quot;，性别：&quot;.$this-&gt;sex.&quot;，年龄：&quot;.$this-&gt;age;</span><br><span class="line">  &#125;  </span><br><span class="line">   </span><br><span class="line">  /**</span><br><span class="line">   * 声明一个析构方法</span><br><span class="line">   */</span><br><span class="line">  public function __destruct()</span><br><span class="line">  &#123;</span><br><span class="line">      echo &quot;我觉得我还可以再抢救一下，我的名字叫&quot;.$this-&gt;name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">$Person = new Person(&quot;小明&quot;);</span><br><span class="line">unset($Person); //销毁上面创建的对象$Person</span><br></pre></td></tr></table></figure></p>
<p>上面的程序运行时输出：</p>
<p>我觉得我还可以再抢救一下，我的名字叫小明<br>三、 <code>__call()</code>，在对象中调用一个不可访问方法时调用。<br>该方法有两个参数，第一个参数 $function_name 会自动接收不存在的方法名，第二个 $arguments 则以数组的方式接收不存在方法的多个参数。</p>
<p>1、 <code>__call()</code> 方法的格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function __call(string $function_name, array $arguments)</span><br><span class="line">&#123;</span><br><span class="line">  // 方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、 <code>__call()</code> 方法的作用：</p>
<p>为了避免当调用的方法不存在时产生错误，而意外的导致程序中止，可以使用 <code>__call()</code> 方法来避免。</p>
<p>该方法在调用的方法不存在时会自动调用，程序仍会继续执行下去。<br>请参考如下代码：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person</span><br><span class="line">&#123;               </span><br><span class="line">  function say()</span><br><span class="line">  &#123; </span><br><span class="line">                </span><br><span class="line">      echo &quot;Hello, world!&lt;br&gt;&quot;; </span><br><span class="line">  &#125;   </span><br><span class="line">     </span><br><span class="line">  /**</span><br><span class="line">   * 声明此方法用来处理调用对象中不存在的方法</span><br><span class="line">   */</span><br><span class="line">  function __call($funName, $arguments)</span><br><span class="line">  &#123; </span><br><span class="line">     echo &quot;你所调用的函数：&quot; . $funName . &quot;(参数：&quot; ; // 输出调用不存在的方法名</span><br><span class="line">     print_r($arguments); // 输出调用不存在的方法时的参数列表</span><br><span class="line">     echo &quot;)不存在！&lt;br&gt;\n&quot;; // 结束换行           </span><br><span class="line">  &#125;                     </span><br><span class="line">&#125;</span><br><span class="line">$Person = new Person();      </span><br><span class="line">$Person-&gt;run(&quot;teacher&quot;); // 调用对象中不存在的方法，则自动调用了对象中的__call()方法</span><br><span class="line">$Person-&gt;eat(&quot;小明&quot;, &quot;苹果&quot;);       </span><br><span class="line">$Person-&gt;say();</span><br><span class="line">运行结果：</span><br><span class="line"></span><br><span class="line">你所调用的函数：run(参数：Array ( [0] =&gt; teacher ) )不存在！</span><br><span class="line"></span><br><span class="line">你所调用的函数：eat(参数：Array ( [0] =&gt; 小明 [1] =&gt; 苹果 ) )不存在！</span><br><span class="line"></span><br><span class="line">Hello, world!</span><br></pre></td></tr></table></figure></p>
<p>四、 <code>__callStatic()</code>，用静态方式中调用一个不可访问方法时调用<br>此方法与上面所说的 <code>__call()</code> 功能除了 <code>__callStatic()</code> 是未静态方法准备的之外，其它都是一样的。</p>
<p>请看下面代码：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">  function say()</span><br><span class="line">  &#123;</span><br><span class="line"> </span><br><span class="line">    echo &quot;Hello, world!&lt;br&gt;&quot;;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  /**</span><br><span class="line">   * 声明此方法用来处理调用对象中不存在的方法</span><br><span class="line">   */</span><br><span class="line">  public static function __callStatic($funName, $arguments)</span><br><span class="line">  &#123;</span><br><span class="line">    echo &quot;你所调用的静态方法：&quot; . $funName . &quot;(参数：&quot; ; // 输出调用不存在的方法名</span><br><span class="line">    print_r($arguments); // 输出调用不存在的方法时的参数列表</span><br><span class="line">    echo &quot;)不存在！&lt;br&gt;\n&quot;; // 结束换行</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">$Person = new Person();</span><br><span class="line">$Person::run(&quot;teacher&quot;); // 调用对象中不存在的方法，则自动调用了对象中的__call()方法</span><br><span class="line">$Person::eat(&quot;小明&quot;, &quot;苹果&quot;);</span><br><span class="line">$Person-&gt;say();</span><br><span class="line">运行结果如下：</span><br><span class="line"></span><br><span class="line">你所调用的静态方法：run(参数：Array ( [0] =&gt; teacher ) )不存在！</span><br><span class="line">你所调用的静态方法：eat(参数：Array ( [0] =&gt; 小明 [1] =&gt; 苹果 ) )不存在！</span><br><span class="line">Hello, world!</span><br></pre></td></tr></table></figure></p>
<p>五、 <code>__get()</code>，获得一个类的成员变量时调用<br>在 php 面向对象编程中，类的成员属性被设定为 private 后，如果我们试图在外面调用它则会出现“不能访问某个私有属性”的错误。那么为了解决这个问题，我们可以使用魔术方法 <code>__get()</code>。</p>
<p>魔术方法<code>__get()</code>的作用<br>在程序运行过程中，通过它可以在对象的外部获取私有成员属性的值。<br>我们通过下面的 <code>__get()</code> 的实例来更进一步的连接它吧：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">  private $name;</span><br><span class="line">  private $age;</span><br><span class="line"> </span><br><span class="line">  function __construct($name=&quot;&quot;, $age=1)</span><br><span class="line">  &#123;</span><br><span class="line">    $this-&gt;name = $name;</span><br><span class="line">    $this-&gt;age = $age;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  /**</span><br><span class="line">   * 在类中添加__get()方法，在直接获取属性值时自动调用一次，以属性名作为参数传入并处理</span><br><span class="line">   * @param $propertyName</span><br><span class="line">   *</span><br><span class="line">   * @return int</span><br><span class="line">   */</span><br><span class="line">  public function __get($propertyName)</span><br><span class="line">  &#123;  </span><br><span class="line">    if ($propertyName == &quot;age&quot;) &#123;</span><br><span class="line">      if ($this-&gt;age &gt; 30) &#123;</span><br><span class="line">        return $this-&gt;age - 10;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        return $this-&gt;$propertyName;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      return $this-&gt;$propertyName;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">$Person = new Person(&quot;小明&quot;, 60);  // 通过Person类实例化的对象，并通过构造方法为属性赋初值</span><br><span class="line">echo &quot;姓名：&quot; . $Person-&gt;name . &quot;&lt;br&gt;&quot;;  // 直接访问私有属性name，自动调用了__get()方法可以间接获取</span><br><span class="line">echo &quot;年龄：&quot; . $Person-&gt;age . &quot;&lt;br&gt;&quot;;  // 自动调用了__get()方法，根据对象本身的情况会返回不同的值</span><br><span class="line">运行结果：</span><br><span class="line"></span><br><span class="line">姓名：小明</span><br><span class="line">年龄：50</span><br></pre></td></tr></table></figure></p>
<p>六、 <code>__set()</code>，设置一个类的成员变量时调用<br><code>__set()</code> 的作用：<br><code>__set( $property, $value )</code> 方法用来设置私有属性， 给一个未定义的属性赋值时，此方法会被触发，传递的参数是被设置的属性名和值。</p>
<p>请看下面的演示代码：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">  private $name;</span><br><span class="line">  private $age;</span><br><span class="line"> </span><br><span class="line">  public function __construct($name=&quot;&quot;, $age=25)</span><br><span class="line">  &#123;</span><br><span class="line">    $this-&gt;name = $name;</span><br><span class="line">    $this-&gt;age = $age;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  /**</span><br><span class="line">   * 声明魔术方法需要两个参数，真接为私有属性赋值时自动调用，并可以屏蔽一些非法赋值</span><br><span class="line">   * @param $property</span><br><span class="line">   * @param $value</span><br><span class="line">   */</span><br><span class="line">  public function __set($property, $value) &#123;</span><br><span class="line">    if ($property==&quot;age&quot;)</span><br><span class="line">    &#123;</span><br><span class="line">      if ($value &gt; 150 || $value &lt; 0) &#123;</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $this-&gt;$property = $value;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  /**</span><br><span class="line">   * 在类中声明说话的方法，将所有的私有属性说出</span><br><span class="line">   */</span><br><span class="line">  public function say()&#123;</span><br><span class="line">    echo &quot;我叫&quot;.$this-&gt;name.&quot;，今年&quot;.$this-&gt;age.&quot;岁了&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$Person=new Person(&quot;小明&quot;, 25); //注意，初始值将被下面所改变</span><br><span class="line">//自动调用了__set()函数，将属性名name传给第一个参数，将属性值”李四”传给第二个参数</span><br><span class="line">$Person-&gt;name = &quot;小红&quot;;   //赋值成功。如果没有__set()，则出错。</span><br><span class="line">//自动调用了__set()函数，将属性名age传给第一个参数，将属性值26传给第二个参数</span><br><span class="line">$Person-&gt;age = 16; //赋值成功</span><br><span class="line">$Person-&gt;age = 160; //160是一个非法值，赋值失效</span><br><span class="line">$Person-&gt;say(); //输出：我叫小红，今年16岁了</span><br><span class="line">运行结果：</span><br><span class="line"></span><br><span class="line">我叫小红，今年16岁了</span><br></pre></td></tr></table></figure></p>
<p>七、 <code>__isset()</code>，当对不可访问属性调用isset()或empty()时调用<br>在看这个方法之前我们看一下isset()函数的应用，isset()是测定变量是否设定用的函数，传入一个变量作为参数，如果传入的变量存在则传回true，否则传回false。</p>
<p>那么如果在一个对象外面使用isset()这个函数去测定对象里面的成员是否被设定可不可以用它呢？</p>
<p>分两种情况，如果对象里面成员是公有的，我们就可以使用这个函数来测定成员属性，如果是私有的成员属性，这个函数就不起作用了，原因就是因为私有的被封装了，在外部不可见。那么我们就不可以在对象的外部使用isset()函数来测定私有成员属性是否被设定了呢？当然是可以的，但不是一成不变。你只要在类里面加上一个<strong>isset()方法就可以了，当在类外部使用isset()函数来测定对象里面的私有成员是否被设定时，就会自动调用类里面的</strong>isset()方法了帮我们完成这样的操作。</p>
<p><code>__isset()</code>的作用：当对不可访问属性调用 isset() 或 empty() 时，<code>__isset()</code> 会被调用。<br>请看下面代码演示：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">  public $sex;</span><br><span class="line">  private $name;</span><br><span class="line">  private $age;</span><br><span class="line"> </span><br><span class="line">  public function __construct($name=&quot;&quot;, $age=25, $sex=&apos;男&apos;)</span><br><span class="line">  &#123;</span><br><span class="line">    $this-&gt;name = $name;</span><br><span class="line">    $this-&gt;age = $age;</span><br><span class="line">    $this-&gt;sex = $sex;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  /**</span><br><span class="line">   * @param $content</span><br><span class="line">   *</span><br><span class="line">   * @return bool</span><br><span class="line">   */</span><br><span class="line">  public function __isset($content) &#123;</span><br><span class="line">    echo &quot;当在类外部使用isset()函数测定私有成员&#123;$content&#125;时，自动调用&lt;br&gt;&quot;;</span><br><span class="line">    echo isset($this-&gt;$content);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$person = new Person(&quot;小明&quot;, 25); // 初始赋值</span><br><span class="line">echo isset($person-&gt;sex),&quot;&lt;br&gt;&quot;;</span><br><span class="line">echo isset($person-&gt;name),&quot;&lt;br&gt;&quot;;</span><br><span class="line">echo isset($person-&gt;age),&quot;&lt;br&gt;&quot;;</span><br><span class="line">运行结果如下：</span><br><span class="line"></span><br><span class="line">1 // public 可以 isset()</span><br><span class="line">当在类外部使用isset()函数测定私有成员name时，自动调用 // __isset() 内 第一个echo</span><br><span class="line">1 // __isset() 内第二个echo</span><br><span class="line">当在类外部使用isset()函数测定私有成员age时，自动调用 // __isset() 内 第一个echo</span><br><span class="line">1 // __isset() 内第二个echo</span><br></pre></td></tr></table></figure></p>
<p>八、 <code>__unset()</code>，当对不可访问属性调用unset()时被调用。<br>看这个方法之前呢，我们也先来看一下 unset() 函数，unset()这个函数的作用是删除指定的变量且传回true，参数为要删除的变量。</p>
<p>那么如果在一个对象外部去删除对象内部的成员属性用unset()函数可以吗？</p>
<p>这里自然也是分两种情况：</p>
<p>1、 如果一个对象里面的成员属性是公有的，就可以使用这个函数在对象外面删除对象的公有属性。</p>
<p>2、 如果对象的成员属性是私有的，我使用这个函数就没有权限去删除。</p>
<p>虽然有以上两种情况，但我想说的是同样如果你在一个对象里面加上<code>__unset()</code>这个方法，就可以在对象的外部去删除对象的私有成员属性了。在对象里面加上了<strong>unset()这个方法之后，在对象外部使用“unset()”函数删除对象内部的私有成员属性时，对象会自动调用`</strong>unset()`函数来帮我们删除对象内部的私有成员属性。</p>
<p>请看如下代码：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">  public $sex;</span><br><span class="line">  private $name;</span><br><span class="line">  private $age;</span><br><span class="line"> </span><br><span class="line">  public function __construct($name=&quot;&quot;, $age=25, $sex=&apos;男&apos;)</span><br><span class="line">  &#123;</span><br><span class="line">    $this-&gt;name = $name;</span><br><span class="line">    $this-&gt;age = $age;</span><br><span class="line">    $this-&gt;sex = $sex;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  /**</span><br><span class="line">   * @param $content</span><br><span class="line">   *</span><br><span class="line">   * @return bool</span><br><span class="line">   */</span><br><span class="line">  public function __unset($content) &#123;</span><br><span class="line">    echo &quot;当在类外部使用unset()函数来删除私有成员时自动调用的&lt;br&gt;&quot;;</span><br><span class="line">    echo isset($this-&gt;$content);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$person = new Person(&quot;小明&quot;, 25); // 初始赋值</span><br><span class="line">unset($person-&gt;sex);</span><br><span class="line">unset($person-&gt;name);</span><br><span class="line">unset($person-&gt;age);</span><br><span class="line">运行结果：</span><br><span class="line"></span><br><span class="line">当在类外部使用unset()函数来删除私有成员时自动调用的</span><br><span class="line">1当在类外部使用unset()函数来删除私有成员时自动调用的</span><br></pre></td></tr></table></figure></p>
<p>九、 <code>__sleep()</code>，执行serialize()时，先会调用这个函数<br>serialize() 函数会检查类中是否存在一个魔术方法 <code>__sleep()</code>。如果存在，则该方法会优先被调用，然后才执行序列化操作。</p>
<p>此功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组。</p>
<p>如果该方法未返回任何内容，则 NULL 被序列化，并产生一个 E_NOTICE 级别的错误。</p>
<p>注意：</p>
<p><code>__sleep()</code> 不能返回父类的私有成员的名字。这样做会产生一个 E_NOTICE 级别的错误。可以用 Serializable 接口来替代。<br>作用：</p>
<p><code>__sleep()</code> 方法常用于提交未提交的数据，或类似的清理操作。同时，如果有一些很大的对象，但不需要全部保存，这个功能就很好用。<br>具体请参考如下代码：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">  public $sex;</span><br><span class="line">  public $name;</span><br><span class="line">  public $age;</span><br><span class="line"> </span><br><span class="line">  public function __construct($name=&quot;&quot;, $age=25, $sex=&apos;男&apos;)</span><br><span class="line">  &#123;</span><br><span class="line">    $this-&gt;name = $name;</span><br><span class="line">    $this-&gt;age = $age;</span><br><span class="line">    $this-&gt;sex = $sex;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  /**</span><br><span class="line">   * @return array</span><br><span class="line">   */</span><br><span class="line">  public function __sleep() &#123;</span><br><span class="line">    echo &quot;当在类外部使用serialize()时会调用这里的__sleep()方法&lt;br&gt;&quot;;</span><br><span class="line">    $this-&gt;name = base64_encode($this-&gt;name);</span><br><span class="line">    return array(&apos;name&apos;, &apos;age&apos;); // 这里必须返回一个数值，里边的元素表示返回的属性名称</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$person = new Person(&apos;小明&apos;); // 初始赋值</span><br><span class="line">echo serialize($person);</span><br><span class="line">echo &apos;&lt;br/&gt;&apos;;</span><br><span class="line">代码运行结果：</span><br><span class="line"></span><br><span class="line">当在类外部使用serialize()时会调用这里的__sleep()方法</span><br><span class="line">O:6:&quot;Person&quot;:2:&#123;s:4:&quot;name&quot;;s:8:&quot;5bCP5piO&quot;;s:3:&quot;age&quot;;i:25;&#125;</span><br></pre></td></tr></table></figure></p>
<p>十、 <code>__wakeup()</code>，执行unserialize()时，先会调用这个函数<br>如果说 <code>__sleep()</code> 是白的，那么 <code>__wakeup()</code> 就是黑的了。</p>
<p>那么为什么呢？</p>
<p>因为：</p>
<p>与之相反，<code>unserialize()</code> 会检查是否存在一个 <code>__wakeup()</code> 方法。如果存在，则会先调用 <code>__wakeup</code> 方法，预先准备对象需要的资源。<br>作用：<br><code>__wakeup()</code> 经常用在反序列化操作中，例如重新建立数据库连接，或执行其它初始化操作。<br>还是看代码：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">  public $sex;</span><br><span class="line">  public $name;</span><br><span class="line">  public $age;</span><br><span class="line"> </span><br><span class="line">  public function __construct($name=&quot;&quot;, $age=25, $sex=&apos;男&apos;)</span><br><span class="line">  &#123;</span><br><span class="line">    $this-&gt;name = $name;</span><br><span class="line">    $this-&gt;age = $age;</span><br><span class="line">    $this-&gt;sex = $sex;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  /**</span><br><span class="line">   * @return array</span><br><span class="line">   */</span><br><span class="line">  public function __sleep() &#123;</span><br><span class="line">    echo &quot;当在类外部使用serialize()时会调用这里的__sleep()方法&lt;br&gt;&quot;;</span><br><span class="line">    $this-&gt;name = base64_encode($this-&gt;name);</span><br><span class="line">    return array(&apos;name&apos;, &apos;age&apos;); // 这里必须返回一个数值，里边的元素表示返回的属性名称</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  /**</span><br><span class="line">   * __wakeup</span><br><span class="line">   */</span><br><span class="line">  public function __wakeup() &#123;</span><br><span class="line">    echo &quot;当在类外部使用unserialize()时会调用这里的__wakeup()方法&lt;br&gt;&quot;;</span><br><span class="line">    $this-&gt;name = 2;</span><br><span class="line">    $this-&gt;sex = &apos;男&apos;;</span><br><span class="line">    // 这里不需要返回数组</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$person = new Person(&apos;小明&apos;); // 初始赋值</span><br><span class="line">var_dump(serialize($person));</span><br><span class="line">var_dump(unserialize(serialize($person)));</span><br><span class="line">运行结果：</span><br><span class="line"></span><br><span class="line">当在类外部使用serialize()时会调用这里的__sleep()方法</span><br><span class="line">string(58) &quot;O:6:&quot;Person&quot;:2:&#123;s:4:&quot;name&quot;;s:8:&quot;5bCP5piO&quot;;s:3:&quot;age&quot;;i:25;&#125;&quot; 当在类外部使用serialize()时会调用这里的__sleep()方法</span><br><span class="line">当在类外部使用unserialize()时会调用这里的__wakeup()方法</span><br><span class="line">object(Person)#2 (3) &#123; [&quot;sex&quot;]=&gt; string(3) &quot;男&quot; [&quot;name&quot;]=&gt; int(2) [&quot;age&quot;]=&gt; int(25) &#125;</span><br></pre></td></tr></table></figure></p>
<p>十一、 <code>__toString()</code>，类被当成字符串时的回应方法<br>作用：</p>
<p><code>__toString()</code> 方法用于一个类被当成字符串时应怎样回应。例如 <code>echo $obj;</code> 应该显示些什么。<br>注意：</p>
<p>此方法必须返回一个字符串，否则将发出一条 <code>E_RECOVERABLE_ERROR</code> 级别的致命错误。<br>警告：</p>
<p>不能在 <code>__toString()</code> 方法中抛出异常。这么做会导致致命错误。<br>代码：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">  public $sex;</span><br><span class="line">  public $name;</span><br><span class="line">  public $age;</span><br><span class="line"> </span><br><span class="line">  public function __construct($name=&quot;&quot;, $age=25, $sex=&apos;男&apos;)</span><br><span class="line">  &#123;</span><br><span class="line">    $this-&gt;name = $name;</span><br><span class="line">    $this-&gt;age = $age;</span><br><span class="line">    $this-&gt;sex = $sex;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  public function __toString()</span><br><span class="line">  &#123;</span><br><span class="line">    return &apos;go go go&apos;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$person = new Person(&apos;小明&apos;); // 初始赋值</span><br><span class="line">echo $person;</span><br><span class="line">结果：</span><br><span class="line"></span><br><span class="line">go go go</span><br></pre></td></tr></table></figure></p>
<p>那么如果类中没有 <code>__toString()</code> 这个魔术方法运行会发生什么呢？让我们来测试下：</p>
<p>代码：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">  public $sex;</span><br><span class="line">  public $name;</span><br><span class="line">  public $age;</span><br><span class="line"> </span><br><span class="line">  public function __construct($name=&quot;&quot;, $age=25, $sex=&apos;男&apos;)</span><br><span class="line">  &#123;</span><br><span class="line">    $this-&gt;name = $name;</span><br><span class="line">    $this-&gt;age = $age;</span><br><span class="line">    $this-&gt;sex = $sex;</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$person = new Person(&apos;小明&apos;); // 初始赋值</span><br><span class="line">echo $person;</span><br><span class="line">结果：</span><br><span class="line"></span><br><span class="line">Catchable fatal error: Object of class Person could not be converted to string in D:\phpStudy\WWW\test\index.php on line 18</span><br><span class="line">很明显，页面报了一个致命错误，这是语法所不允许的。</span><br></pre></td></tr></table></figure></p>
<p>十二、 <code>__invoke()</code>，调用函数的方式调用一个对象时的回应方法</p>
<p>作用：</p>
<p>当尝试以调用函数的方式调用一个对象时，<code>__invoke()</code> 方法会被自动调用。<br>注意：</p>
<p>本特性只在 PHP 5.3.0 及以上版本有效。<br>直接上代码：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">  public $sex;</span><br><span class="line">  public $name;</span><br><span class="line">  public $age;</span><br><span class="line"> </span><br><span class="line">  public function __construct($name=&quot;&quot;, $age=25, $sex=&apos;男&apos;)</span><br><span class="line">  &#123;</span><br><span class="line">    $this-&gt;name = $name;</span><br><span class="line">    $this-&gt;age = $age;</span><br><span class="line">    $this-&gt;sex = $sex;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  public function __invoke() &#123;</span><br><span class="line">    echo &apos;这可是一个对象哦&apos;;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$person = new Person(&apos;小明&apos;); // 初始赋值</span><br><span class="line">$person();</span><br><span class="line">查看运行结果：</span><br><span class="line"></span><br><span class="line">这可是一个对象哦</span><br><span class="line">当然，如果你执意要将对象当函数方法使用，那么会得到下面结果：</span><br><span class="line"></span><br><span class="line">Fatal error: Function name must be a string in D:\phpStudy\WWW\test\index.php on line 18</span><br></pre></td></tr></table></figure></p>
<p>十三、 <code>__set_state()</code>，调用var_export()导出类时，此静态方法会被调用。</p>
<p>作用：</p>
<p>自 PHP 5.1.0 起，当调用 var_export() 导出类时，此静态方法会被自动调用。<br>参数：</p>
<p>本方法的唯一参数是一个数组，其中包含按 array(‘property’ =&gt; value, …) 格式排列的类属性。<br>下面我们先来看看在没有加 <code>__set_state()</code> 情况按下，代码及运行结果如何：</p>
<p>上代码：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">  public $sex;</span><br><span class="line">  public $name;</span><br><span class="line">  public $age;</span><br><span class="line"> </span><br><span class="line">  public function __construct($name=&quot;&quot;, $age=25, $sex=&apos;男&apos;)</span><br><span class="line">  &#123;</span><br><span class="line">    $this-&gt;name = $name;</span><br><span class="line">    $this-&gt;age = $age;</span><br><span class="line">    $this-&gt;sex = $sex;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$person = new Person(&apos;小明&apos;); // 初始赋值</span><br><span class="line">var_export($person);</span><br><span class="line">看结果：</span><br><span class="line"></span><br><span class="line">Person::__set_state(array( &apos;sex&apos; =&gt; &apos;男&apos;, &apos;name&apos; =&gt; &apos;小明&apos;, &apos;age&apos; =&gt; 25, ))</span><br><span class="line">很明显，将对象中的属性都打印出来了</span><br><span class="line"></span><br><span class="line">加了 __set_state() 之后：</span><br><span class="line"></span><br><span class="line">继续上代码：</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">  public $sex;</span><br><span class="line">  public $name;</span><br><span class="line">  public $age;</span><br><span class="line"> </span><br><span class="line">  public function __construct($name=&quot;&quot;, $age=25, $sex=&apos;男&apos;)</span><br><span class="line">  &#123;</span><br><span class="line">    $this-&gt;name = $name;</span><br><span class="line">    $this-&gt;age = $age;</span><br><span class="line">    $this-&gt;sex = $sex;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  public static function __set_state($an_array)</span><br><span class="line">  &#123;</span><br><span class="line">    $a = new Person();</span><br><span class="line">    $a-&gt;name = $an_array[&apos;name&apos;];</span><br><span class="line">    return $a;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$person = new Person(&apos;小明&apos;); // 初始赋值</span><br><span class="line">$person-&gt;name = &apos;小红&apos;;</span><br><span class="line">var_export($person);</span><br><span class="line">继续看结果：</span><br><span class="line"></span><br><span class="line">Person::__set_state(array( &apos;sex&apos; =&gt; &apos;男&apos;, &apos;name&apos; =&gt; &apos;小红&apos;, &apos;age&apos; =&gt; 25, ))</span><br></pre></td></tr></table></figure></p>
<p>十四、 <code>__clone()</code>，当对象复制完成时调用<br>在多数情况下，我们并不需要完全复制一个对象来获得其中属性。但有一个情况下确实需要：如果你有一个 GTK 窗口对象，该对象持有窗口相关的资源。你可能会想复制一个新的窗口，保持所有属性与原来的窗口相同，但必须是一个新的对象（因为如果不是新的对象，那么一个窗口中的改变就会影响到另一个窗口）。还有一种情况：如果对象 A 中保存着对象 B 的引用，当你复制对象 A 时，你想其中使用的对象不再是对象 B 而是 B 的一个副本，那么你必须得到对象 A 的一个副本。</p>
<p>作用：</p>
<p>对象复制可以通过 clone 关键字来完成（如果可能，这将调用对象的 <code>__clone()</code> 方法）。对象中的 <code>__clone()</code> 方法不能被直接调用。</p>
<p>语法：</p>
<p>$copy_of_object = clone $object;<br>注意：</p>
<p>当对象被复制后，PHP 5 会对对象的所有属性执行一个浅复制（shallow copy）。所有的引用属性 仍然会是一个指向原来的变量的引用。</p>
<p>当复制完成时，如果定义了 <code>__clone()</code> 方法，则新创建的对象（复制生成的对象）中的 <code>__clone()</code>方法会被调用，可用于修改属性的值（如果有必要的话）。<br>看代码：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">  public $sex;</span><br><span class="line">  public $name;</span><br><span class="line">  public $age;</span><br><span class="line"> </span><br><span class="line">  public function __construct($name=&quot;&quot;, $age=25, $sex=&apos;男&apos;)</span><br><span class="line">  &#123;</span><br><span class="line">    $this-&gt;name = $name;</span><br><span class="line">    $this-&gt;age = $age;</span><br><span class="line">    $this-&gt;sex = $sex;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  public function __clone()</span><br><span class="line">  &#123;</span><br><span class="line">    echo __METHOD__.&quot;你正在克隆对象&lt;br&gt;&quot;;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$person = new Person(&apos;小明&apos;); // 初始赋值</span><br><span class="line">$person2 = clone $person;</span><br><span class="line"> </span><br><span class="line">var_dump(&apos;persion1:&apos;);</span><br><span class="line">var_dump($person);</span><br><span class="line">echo &apos;&lt;br&gt;&apos;;</span><br><span class="line">var_dump(&apos;persion2:&apos;);</span><br><span class="line">var_dump($person2);</span><br><span class="line">看结果：</span><br><span class="line"></span><br><span class="line">Person::__clone你正在克隆对象</span><br><span class="line">string(9) &quot;persion1:&quot; object(Person)#1 (3) &#123; [&quot;sex&quot;]=&gt; string(3) &quot;男&quot; [&quot;name&quot;]=&gt; string(6) &quot;小明&quot; [&quot;age&quot;]=&gt; int(25) &#125; </span><br><span class="line">string(9) &quot;persion2:&quot; object(Person)#2 (3) &#123; [&quot;sex&quot;]=&gt; string(3) &quot;男&quot; [&quot;name&quot;]=&gt; string(6) &quot;小明&quot; [&quot;age&quot;]=&gt; int(25) &#125;</span><br><span class="line">克隆成功。</span><br></pre></td></tr></table></figure></p>
<p>十五、<code>__autoload()</code>，尝试加载未定义的类<br>作用：</p>
<p>你可以通过定义这个函数来启用类的自动加载。<br>在魔术函数 <code>__autoload()</code> 方法出现以前，如果你要在一个程序文件中实例化100个对象，那么你必须用include或者require包含进来100个类文件，或者你把这100个类定义在同一个类文件中 —— 相信这个文件一定会非常大，然后你就痛苦了。</p>
<p>但是有了 <code>__autoload()</code> 方法，以后就不必为此大伤脑筋了，这个类会在你实例化对象之前自动加载制定的文件。</p>
<p>还是通过例子来看看吧：</p>
<p>先看看以往的方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/** </span><br><span class="line"> * 文件non_autoload.php </span><br><span class="line"> */</span><br><span class="line">   </span><br><span class="line">require_once(&apos;project/class/A.php&apos;); </span><br><span class="line">require_once(&apos;project/class/B.php&apos;); </span><br><span class="line">require_once(&apos;project/class/C.php&apos;); </span><br><span class="line">   </span><br><span class="line">if (条件A) &#123; </span><br><span class="line">  $a = new A(); </span><br><span class="line">  $b = new B(); </span><br><span class="line">  $c = new C(); </span><br><span class="line">  // … 业务逻辑 </span><br><span class="line">&#125; else if (条件B) &#123; </span><br><span class="line">  $a = newA(); </span><br><span class="line">  $b = new B(); </span><br><span class="line">  // … 业务逻辑 </span><br><span class="line">&#125;</span><br><span class="line">看到了吗？不用100个，只是3个看起来就有点烦了。而且这样就会有一个问题：如果脚本执行“条件B”这个分支时，C.php这个文件其实没有必要包含。因为，任何一个被包含的文件，无论是否使用，均会被php引擎编译。如果不使用，却被编译，这样可以被视作一种资源浪费。更进一步，如果C.php包含了D.php，D.php包含了E.php。并且大部分情况都执行“条件B”分支，那么就会浪费一部分资源去编译C.php,D.php,E.php三个“无用”的文件。</span><br><span class="line"></span><br><span class="line">那么如果使用 __autoload() 方式呢？</span><br><span class="line"></span><br><span class="line">/** </span><br><span class="line"> * 文件autoload_demo.php </span><br><span class="line"> */</span><br><span class="line">function __autoload($className) &#123; </span><br><span class="line">  $filePath = “project/class/&#123;$className&#125;.php”; </span><br><span class="line">  if (is_readable($filePath)) &#123; </span><br><span class="line">    require($filePath); </span><br><span class="line">  &#125; </span><br><span class="line">&#125; </span><br><span class="line">   </span><br><span class="line">if (条件A) &#123; </span><br><span class="line">  $a = new A(); </span><br><span class="line">  $b = new B(); </span><br><span class="line">  $c = new C(); </span><br><span class="line">  // … 业务逻辑 </span><br><span class="line">&#125; else if (条件B) &#123; </span><br><span class="line">  $a = newA(); </span><br><span class="line">  $b = new B(); </span><br><span class="line">  // … 业务逻辑 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ok,不论效率怎么用，最起码界面看起来舒服多了，没有太多冗余的代。</p>
<p>再来看看这里的效率如何，我们分析下：</p>
<p>当php引擎第一次使用类A，但是找不到时，会自动调用 <code>__autoload</code>方法，并将类名“A”作为参数传入。所以，我们在 <code>__autoload()</code>中需要的做的就是根据类名，找到相应的文件，并包含进来，如果我们的方法也找不到，那么php引擎就会报错了。</p>
<p>注意：</p>
<p>这里可以只用require，因为一旦包含进来后，php引擎再遇到类A时，将不会调用 <code>__autoload</code>，而是直接使用内存中的类A，不会导致多次包含。<br>扩展：</p>
<p>其实php发展到今天，已经有将 <code>spl_autoload_register</code> — 注册给定的函数作为 <code>__autoload</code>的实现了<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">function classLoader($class)</span><br><span class="line">&#123;</span><br><span class="line">    $path = str_replace(&apos;\\&apos;, DIRECTORY_SEPARATOR, $class);</span><br><span class="line">    $file = __DIR__ . &apos;/src/&apos; . $path . &apos;.php&apos;;</span><br><span class="line"></span><br><span class="line">    if (file_exists($file)) &#123;</span><br><span class="line">        require_once $file;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">spl_autoload_register(&apos;classLoader&apos;);</span><br><span class="line"></span><br><span class="line">require_once  __DIR__ . &apos;/src/Qiniu/functions.php&apos;;</span><br></pre></td></tr></table></figure></p>
<p>十六、<code>__debugInfo()</code>，打印所需调试信息</p>
<p>注意：</p>
<p>该方法在PHP 5.6.0及其以上版本才可以用，如果你发现使用无效或者报错，请查看啊你的版本。<br>看代码：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class C &#123;</span><br><span class="line">  private $prop;</span><br><span class="line"> </span><br><span class="line">  public function __construct($val) &#123;</span><br><span class="line">    $this-&gt;prop = $val;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  /**</span><br><span class="line">   * @return array</span><br><span class="line">   */</span><br><span class="line">  public function __debugInfo() &#123;</span><br><span class="line">    return [</span><br><span class="line">      &apos;propSquared&apos; =&gt; $this-&gt;prop ** 2,</span><br><span class="line">    ];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">var_dump(new C(42));</span><br><span class="line">结果：</span><br><span class="line"></span><br><span class="line">object(C)#1 (1) &#123; [&quot;propSquared&quot;]=&gt; int(1764) &#125;</span><br><span class="line">再次注意：</span><br><span class="line"></span><br><span class="line">这里的 `**` 是乘方的意思，也是在PHP5.6.0及其以上才可以使用，详情请查看PHP手册</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>PHP细节-02</title>
    <url>/2018/20180331-2.html</url>
    <content><![CDATA[<h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><ul>
<li>二进制文件读写 pack() unpack()</li>
<li>系统函数判断图像类型：exif_imagetype()</li>
<li><p>文件指针</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fseek() 在文件指针中定位</span><br><span class="line">ftell() 返回文件指针读写的位置</span><br><span class="line">rewind() 倒回文件指针的位置</span><br><span class="line">feof() 测试文件指针是否到了文件结束的位置</span><br></pre></td></tr></table></figure>
</li>
<li><p>超大文件上传</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">swfUpload、uploadify 等flash组件</span><br><span class="line">XMLHTTPRequest 大文件断点续传+分段上传 ajax2.0</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="PHP运行原理"><a href="#PHP运行原理" class="headerlink" title="PHP运行原理"></a>PHP运行原理</h1><blockquote>
<p>UA -&gt; apache -&gt; SAPI -&gt; zend engine -&gt; php script</p>
</blockquote>
<h1 id="PHP运行模式"><a href="#PHP运行模式" class="headerlink" title="PHP运行模式"></a>PHP运行模式</h1><ul>
<li><p>CLI模式 命令行接口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">定时任务</span><br><span class="line">shell脚本中使用</span><br><span class="line">桌面应用程序</span><br><span class="line">PHP server 服务</span><br></pre></td></tr></table></figure>
</li>
<li><p>CGI 通用网关接口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">就像桥梁一样，把网页和web服务器中的执行程序连接起来，它把http服务器接收的指令传递给执行程序，再把执行程序的结果返回http服务器。CGI跨平台性及佳，几乎可以在任何操作系统实现</span><br><span class="line"></span><br><span class="line">提供http服务</span><br><span class="line">性能比较差，一个请求fork一个进程</span><br></pre></td></tr></table></figure>
</li>
<li><p>FastCGI 快速通用网关接口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">也是交互程序与web服务器通信协议。致力于介绍服务器与程序之前互动的开销</span><br><span class="line">web服务器启动时，载入FastCGI进程管理器 对于PHP来讲就是php-fpm</span><br><span class="line">FastCGI 会启动多个CGI进程等待web服务器的连接</span><br><span class="line">收到请求时由FastCGI子进程处理。子进程关闭连接时，请求处理完成。子进程接着等待并处理FastCGI进程管理器的下一个连接</span><br><span class="line"></span><br><span class="line">提供http服务</span><br><span class="line">支持大并发</span><br><span class="line">多进程消耗较多内存</span><br></pre></td></tr></table></figure>
</li>
<li><p>模块模式 apache 和 ISS</p>
</li>
</ul>
<h1 id="进程、线程、协程"><a href="#进程、线程、协程" class="headerlink" title="进程、线程、协程"></a>进程、线程、协程</h1><ul>
<li>单进程：单个CPU一次只能运行一个任务</li>
<li>一个进程可以包括多个线程（防止多个线程同时读写某一块区域加锁机制）</li>
<li>协程避免了无意义的调度，由此提高了性能。但因此要程序员自己承担调度的责任，同时也失去了标准线程使用多CPU的能力</li>
</ul>
<blockquote>
<p>多进程形式，允许多个任务同时运行<br>多线程形式，允许单个任务分成不同部分运行</p>
</blockquote>
<ul>
<li>ts Thread safe 线程安全，执行时会进程线程安全检查，防止有新要求就启动新线程的执行方式而耗尽系统资源</li>
<li>nts Non Thread Safe 非线程安全，在执行时不进行线程安全检查</li>
</ul>
<blockquote>
<p>由于ISAPI是线程执行的，所以选择PHP版本时要选择TS版本的。其它选择NTS版本就行了。</p>
</blockquote>
<ul>
<li><p>Apache 的 prefork 模块</p>
<blockquote>
<p>prefork 采用预派生子进程模式，用单独的子进程来处理不同的请求，进程之间彼此独立。httpd-mpm.conf 配置包括：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">StartServers 5 #  初始化进程数量</span><br><span class="line">MinSpareServers 5 # 空闲进程总数最小值</span><br><span class="line">MaxApareServers 10 # 空闲进程总数最大值</span><br><span class="line">MaxClients 150 # 最大客户端连接数量限制</span><br><span class="line">MaxRequestsPerChild 0 # 子进程减能处理的请求数量</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>Apache 的 worker 模块</p>
<blockquote>
<p>worker 全新的支持多线程和多进程混合模型的MPM，由于使用线程来处理，所以可以处理相对海量的数据请求。而系统资源的开销要小于基于进程的服务器</p>
</blockquote>
</li>
<li><p>Apache 的 event 模式</p>
</li>
</ul>
<p>为什么大访问量下NGINX性能更高？</p>
<blockquote>
<p>Apache 所采用的select 网络 I/O 模型非常低效<br>Nginx 使用了最新的epoll 和 kqueue(freebsd) 网络 I/O 模型<br>PHP是 Apache 的一个扩展模块，所以Apache 进程 干的事情也比较多，执行PHP、输出HTML 都得干，占用的资源也多（CPU，内存）</p>
</blockquote>
<h1 id="PHP运行机制与原理"><a href="#PHP运行机制与原理" class="headerlink" title="PHP运行机制与原理"></a>PHP运行机制与原理</h1><ul>
<li><p>PHP 底层原理</p>
<blockquote>
<p>PHP通过 SAPI 和 Apache相连<br>PHP总共有三个模块：内核、Zend引擎、以及扩展层<br>PHP内核用来处理请求、文件流、错误处理等相关操作<br>Zend引擎（ZE）用以将源文件转换成机器语言，然后在虚拟机上运行它；<br>扩展层是一株函数、类库和流，PHP使用它们来执行一些特定的操作，如：MySQL扩展来连接MySQL数据库<br>ZE引擎执行程序是可能需要连接若干扩展，这是ZE将控制权交给扩展，等待处理完任务和再返还<br>最后ZE将程序运行结果反回给PHP内核，它再将结果传送给SAPI传给Apache</p>
</blockquote>
</li>
<li><p>PHP运行机制</p>
<blockquote>
<ol>
<li>扫描</li>
</ol>
</blockquote>
</li>
</ul>
<ol start="2">
<li>解析</li>
<li>编译</li>
<li>执行</li>
<li>输出</li>
</ol>
<h1 id="PHP垃圾回收机制"><a href="#PHP垃圾回收机制" class="headerlink" title="PHP垃圾回收机制"></a>PHP垃圾回收机制</h1><p>没有引用的内存变量就垃圾，PHP开启了很多内存空间，如果不销毁内存会一点点的被吃掉，最终导致内存溢出。</p>
<ol>
<li>找到所有已定义的变量：get_defined_vars</li>
<li>refcount_gc 是否为0 就知道是不是垃圾 无引用的变量 (清除为0的5.2版本以前   5.3以后 采用了引用计数系统中的同步周期回收算法来清除)</li>
<li>当我们存储的疑似垃圾区域满了的时候，就会被执行清除垃圾的操作。前提是开启了 php.ini 中的 zend.enable_gc 配置 也可以调用 gc_enable() 和 gc_disable() 打开和关闭垃圾回收机制  也可以通过 gc_collect_cycles() 强制执行周期回收 </li>
</ol>
<h1 id="PHP常用选项"><a href="#PHP常用选项" class="headerlink" title="PHP常用选项"></a>PHP常用选项</h1><ul>
<li>display_errors 是否显示错误信息 辅助开发使用，不要在生产环境使用</li>
<li>error_reporting 设置错误报告的级别</li>
<li>variables_order 设置EGPCS超全局变量的解析顺序</li>
<li>request_order 确定 <code>$_GET</code> 和 <code>$_POST</code> 等超全局变量的顺序，后面的会把前面的数据重写覆盖   “GP”</li>
<li>disable_classes 、 disable_functions 禁用某些类和某些函数</li>
</ul>
<h1 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET /index.html HTTP/1.1</span><br><span class="line">HOST: www.example.com</span><br><span class="line">Range: bytcs-500-999</span><br><span class="line">Connection:keep-alive</span><br></pre></td></tr></table></figure>
<ul>
<li>HTTP 工作流程<br>访问一个网址时，发生了什么？<blockquote>
<ol>
<li>通过DNS解析域名对应的服务器IP地址</li>
<li>建立TCP连接</li>
<li>向服务器发送请求</li>
<li>返回内容</li>
</ol>
</blockquote>
</li>
</ul>
<h1 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h1><ul>
<li>闭包<blockquote>
<p>闭包使用不当可能会导致内存泄露。<br>闭包是指有权访问另一个函数作用域中的变量的函数<br>一个外部函数执行完毕后，由于其内部函数被外部引用，导致其作用域中的变量存活，而不能在函数执行完毕后被销毁，包含这些变量的那个对象就被称为闭包</p>
</blockquote>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>PHP细节-01</title>
    <url>/2018/20180331-1.html</url>
    <content><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><ul>
<li>双引号或者heredoc其中的变量 以及 <code>\</code> 开始的符合8进制16进制和特殊符号</li>
<li>字符串底层是C语言的结构体，所以可以用<code>[]</code> 或 <code>{}</code> 来访问某个字符</li>
<li>字符串最大长度可以达到2G内存</li>
<li>C语言字符串<code>\0</code>代表字符串结束，但PHP结构体是有个长度字段，可以让二进制字符串安全</li>
<li>用超出字符串长度的下标写入将会拉长字符串并以空格填充</li>
<li>UTF-8 编码<blockquote>
<p>16进制 Unicode 编码范围 0800 - FFFF<br>2进制 1110xxxx 10xxxxxx 10xxxxxx<br>为了通用优先选择UTF-8 3个字节,为了节省空间用GBK 2个字节</p>
</blockquote>
</li>
</ul>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><ul>
<li>key 可以是integer 或者 string (包含合法整形的字符串，浮点数和布尔值都会被转化为整形)</li>
<li>unset() 后，不会重建索引</li>
<li><p>遍历中的引用分析</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $key =&gt; &amp;$value) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> $value; <span class="comment">// 3 是 &amp;$arr[2] = 3;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump($arr); <span class="comment">// [1,2,2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环1 $value = &amp;$arr[2] = $arr[0] = 1;</span></span><br><span class="line"><span class="comment">// 循环2 $value = &amp;$arr[2] = $arr[1] = 2;</span></span><br><span class="line"><span class="comment">// 循环3 $value = &amp;$arr[2] = $arr[2] = 2;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>位运算：<code>$a&amp;1 == 0 偶数 反之奇数</code></p>
</li>
</ul>
<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>组成 = 元字符 + 普通字符<br>常见元字符<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^ 		匹配字符串的开始</span><br><span class="line">$       匹配字符串的结束</span><br><span class="line">.		匹配除换行以外的任意字符</span><br><span class="line">\w 		匹配字母或者数字或者下划线</span><br><span class="line">\W 		不匹配字母数字下划线</span><br><span class="line">\s 		匹配任意的空字符 相当于[\f\r\n\t\v]</span><br><span class="line">\d 		匹配任意的数字</span><br><span class="line">\b 		匹配单词的开始或者结束</span><br><span class="line">\xxx	查找以八进制xxx规定的字符</span><br><span class="line">\xdd	查找以十六进制dd对顶的字符</span><br><span class="line">\uxxx 	查找以十六进制 xxxx 规定的 Unicode 字符</span><br><span class="line">[abcd]  匹配任意一个字符</span><br><span class="line">[a-d]   匹配任意一个字符</span><br><span class="line">[^abcd] 不匹配任意一个字符</span><br><span class="line">[\u4e00-\u9fa5] 匹配任意单个汉字</span><br></pre></td></tr></table></figure></p>
<p>常见限定符 （限定的是前面一个单元）<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|		或关系</span><br><span class="line">*		匹配0到多个，相当于&#123;0,&#125;</span><br><span class="line">?		匹配0到1个，相当于&#123;0,1&#125;</span><br><span class="line">+		匹配至少1个字符，相当于&#123;1,&#125;</span><br><span class="line">&#123;n&#125;		匹配n个字符</span><br><span class="line">&#123;n,&#125;    匹配至少n个字符</span><br><span class="line">&#123;n,m&#125;	匹配n到m个字符</span><br></pre></td></tr></table></figure></p>
<p>环视<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(?=exp) 	位置后面能匹配exp</span><br><span class="line">(?!=exp)	位置后面不能匹配exp</span><br><span class="line">(?&lt;=exp)	位置前面能匹配exp</span><br><span class="line">(?&lt;!exp)	位置前面不能匹配exp</span><br></pre></td></tr></table></figure></p>
<p>贪婪与懒惰</p>
<blockquote>
<p>通常的行为是尽可能匹配多的字符（回溯）<br>只要在它后面加一个问号，匹配成功的前提是使用最少的重复</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$string = &apos;aaabaab&apos;;</span><br><span class="line">$pattern1 = &apos;/a.&#123;1,10&#125;b/&apos;;</span><br><span class="line">$pattern2 = &apos;/a.&#123;1,10&#125;?b/&apos;;</span><br><span class="line">preg_match_all($pattern1,$string,$matchs1);</span><br><span class="line">preg_match_all($pattern2,$string,$matchs2);</span><br><span class="line"></span><br><span class="line">var_dump($matchs1);</span><br><span class="line">var_dump($matchs2);</span><br><span class="line"></span><br><span class="line">array(1) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  array(1) &#123;</span><br><span class="line">    [0]=&gt;</span><br><span class="line">    string(7) &quot;aaabaab&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">array(1) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  array(2) &#123;</span><br><span class="line">    [0]=&gt;</span><br><span class="line">    string(4) &quot;aaab&quot;</span><br><span class="line">    [1]=&gt;</span><br><span class="line">    string(3) &quot;aab&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>回溯</p>
<blockquote>
<p>贪婪模式的回溯是影响性能</p>
</blockquote>
<h1 id="习惯"><a href="#习惯" class="headerlink" title="习惯"></a>习惯</h1><ul>
<li>优先使用单引号</li>
<li><p>内置函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 邮件过滤：$email = filter_var(&apos;hi@uiste.com&apos;, FILTER_VALIDATE_EMAIL);</span><br><span class="line">2. 获取文件扩展名：pathinfo($filename, PATHINFO_EXTENSION);</span><br></pre></td></tr></table></figure>
</li>
<li><p>strtr 与 str_replace 函数前者优先级更高</p>
</li>
<li><p>yield 实现协程 生成器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function createRange($number)&#123;</span><br><span class="line">    for($i=0;$i&lt;$number;$i++)&#123;</span><br><span class="line">        yield time();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$result = createRange(10); // 这里调用上面我们创建的函数</span><br><span class="line">foreach($result as $value)&#123;</span><br><span class="line">    sleep(1);</span><br><span class="line">    echo $value , PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">1554027375</span><br><span class="line">1554027376</span><br><span class="line">1554027377</span><br><span class="line">1554027378</span><br><span class="line">1554027379</span><br><span class="line">1554027380</span><br><span class="line">1554027381</span><br><span class="line">1554027382</span><br><span class="line">1554027383</span><br><span class="line">1554027384</span><br><span class="line">[Finished in 10.2s]</span><br><span class="line"></span><br><span class="line">我们来还原一下代码执行过程。</span><br><span class="line"></span><br><span class="line">首先调用 createRange 函数，传入参数10，但是 for 值执行了一次然后停止了，并且告诉 foreach 第一次循环可以用的值。</span><br><span class="line"> foreach 开始对 $result 循环，进来首先 sleep(1) ，然后开始使用 for 给的一个值执行输出。</span><br><span class="line"> foreach 准备第二次循环，开始第二次循环之前，它向 for 循环又请求了一次。</span><br><span class="line"> for 循环于是又执行了一次，将生成的时间戳告诉 foreach .</span><br><span class="line"> foreach 拿到第二个值，并且输出。由于 foreach 中 sleep(1) ，所以， for 循环延迟了1秒生成当前时间</span><br><span class="line">所以，整个代码执行中，始终只有一个记录值参与循环，内存中也只有一条信息。</span><br><span class="line"></span><br><span class="line">无论开始传入的 $number 有多大，由于并不会立即生成所有结果集，所以内存始终是一条循环的值。</span><br><span class="line"></span><br><span class="line">读取超大文件</span><br><span class="line">PHP开发很多时候都要读取大文件，比如csv文件、text文件，或者一些日志文件。这些文件如果很大，比如5个G。这时，直接一次性把所有的内容读取到内存中计算不太现实。</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">header(&quot;content-type:text/html;charset=utf-8&quot;);</span><br><span class="line">function readTxt()</span><br><span class="line">&#123;</span><br><span class="line">    # code...</span><br><span class="line">    $handle = fopen(&quot;./test.txt&quot;, &apos;rb&apos;);</span><br><span class="line"></span><br><span class="line">    while (feof($handle)===false) &#123;</span><br><span class="line">        # code...</span><br><span class="line">        yield fgets($handle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fclose($handle);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foreach (readTxt() as $key =&gt; $value) &#123;</span><br><span class="line">    # code...</span><br><span class="line">    echo $value , PHP_EOL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>语法支持带来更高效率 用 ** 更快</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo 2**3 , PHP_EOL;</span><br><span class="line">echo pow(2,3) , PHP_EOL;</span><br></pre></td></tr></table></figure>
</li>
<li><p>用 … 定义变成参数</p>
</li>
<li>&lt;=&gt; 大于为1，等于为0，小于为-1</li>
<li>if 使用技巧给定初始值，比增加else效率更高</li>
<li>if 使用技巧 三元运算符替换</li>
<li>去掉多此一举的写法 直接return 出去，尽量精简代码</li>
<li>根据二维数组中的某个键值排序：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 根据uv_price排序</span><br><span class="line">array_multisort(array_column($productData, &apos;uv_price&apos;), SORT_DESC, $productData);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="php坑人题"><a href="#php坑人题" class="headerlink" title="php坑人题"></a>php坑人题</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="number">3</span>;</span><br><span class="line">$b = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">if</span>($a = <span class="number">5</span> || $b = <span class="number">7</span>)&#123;</span><br><span class="line">	$a++;</span><br><span class="line">	++$b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $a . <span class="string">'-'</span> . $b;  <span class="comment">//1-7</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$count = <span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCount</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">static</span> $count = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> $count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> ++$count . PHP_EOL; <span class="comment">//6</span></span><br><span class="line"><span class="keyword">echo</span> getCount() . PHP_EOL; <span class="comment">//0</span></span><br><span class="line"><span class="keyword">echo</span> getCount() . PHP_EOL; <span class="comment">//1</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> count(<span class="string">'1234'</span>) + count(<span class="keyword">null</span>) + count(<span class="keyword">false</span>) . PHP_EOL; <span class="comment">// 1+0+1 = 2</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="number">0.2</span>+<span class="number">0.7</span>;</span><br><span class="line">$b = <span class="number">0.9</span>;</span><br><span class="line"><span class="keyword">echo</span> $a . PHP_EOL; <span class="comment">// 0.9</span></span><br><span class="line"><span class="keyword">echo</span> $b . PHP_EOL; <span class="comment">// 0.9</span></span><br><span class="line">var_dump($a == $b); <span class="comment">// bool(false)</span></span><br><span class="line"><span class="comment">// php在比较浮点数大小时，需要把浮点数转为字符串进行比较。</span></span><br><span class="line"></span><br><span class="line">要使用 BC 这个函数库，要在编译 PHP 程序时加入 --enable-bcmath 的选项。</span><br><span class="line"></span><br><span class="line">bcadd: 将二个高精确度数字相加。</span><br><span class="line">bccomp: 比较二个高精确度数字。</span><br><span class="line">bcdiv: 将二个高精确度数字相除。</span><br><span class="line">bcmod: 取得高精确度数字的余数。</span><br><span class="line">bcmul: 将二个高精确度数字相乘。</span><br><span class="line">bcpow: 求一高精确度数字次方值。</span><br><span class="line">bcscale: 配置程序中所有 BC 函数库的默认小数点位数。</span><br><span class="line">bcsqrt: 求一高精确度数字的平方根。</span><br><span class="line">bcsub: 将二个高精确度数字相减。</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>brew更换国内镜像源</title>
    <url>/2018/20180329-5.html</url>
    <content><![CDATA[<p>homebrew主要分两部分：git repo（位于GitHub）和二进制bottle（位于binary），这两者在国内访问不太顺畅。其实可以替换成国内的镜像，git repo国内镜像就比较多了，可以自行查找，如：中科大镜像…</p>
<h2 id="替换homebrew默认源"><a href="#替换homebrew默认源" class="headerlink" title="替换homebrew默认源"></a>替换homebrew默认源</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">替换brew.git:</span><br><span class="line">cd &quot;$(brew --repo)&quot;</span><br><span class="line">git remote set-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class="line"></span><br><span class="line">替换homebrew-core.git:</span><br><span class="line">cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;</span><br><span class="line">git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br></pre></td></tr></table></figure>
<p>如果替换源之后brew update 没反应<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &quot;$(brew --repo)&quot;</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure></p>
<h2 id="切回官方源"><a href="#切回官方源" class="headerlink" title="切回官方源"></a>切回官方源</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">重置brew.git:</span><br><span class="line">cd &quot;$(brew --repo)&quot;</span><br><span class="line">git remote set-url origin https://github.com/Homebrew/brew.git</span><br><span class="line"></span><br><span class="line">重置homebrew-core.git:</span><br><span class="line">cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;</span><br><span class="line">git remote set-url origin https://github.com/Homebrew/homebrew-core.git</span><br></pre></td></tr></table></figure>
<p>注释掉bash配置文件里的有关Homebrew Bottles即可恢复官方源。 重启bash或让bash重读配置文件。<br>Homebrew Bottles是Homebrew提供的二进制代码包，目前镜像站收录了以下仓库：</p>
<p>对于bash用户<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &apos;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&apos; &gt;&gt; ~/.bash_profile</span><br><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure></p>
<p>对于zsh用户<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &apos;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&apos; &gt;&gt; ~/.zshrc</span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>网络协议</title>
    <url>/2018/20180329-4.html</url>
    <content><![CDATA[<p>网络协议为计算机网络中进行数据交换而建立的规则,标准或约定的集合,所有的计算机/手机等网络设备通信都得遵循网络协议.<br>网络协议根据通信的步骤,层级划分为7个层级,从上往下为:</p>
<ul>
<li>应用层</li>
<li>表示层</li>
<li>会话层</li>
<li>传输层</li>
<li>网络层</li>
<li>数据链路层</li>
<li>物理层</li>
</ul>
<p><img src="https://www.easyswoole.com/Manual/3.x/Cn/_book/noobCourse/NetworkrPotocol/networkPotocol.png" alt="TCP/IP模型与OSI模型对比"></p>
<blockquote>
<p>内容来源： <a href="https://www.easyswoole.com" target="_blank" rel="noopener">easyswoole</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>立个flag</title>
    <url>/2018/20180329-3.html</url>
    <content><![CDATA[<p>好久都没有在这里写笔记了。记录的地方比较零散，有道云、OneNote、web博客(域名迁移备案失效，服务器也关闭了)。有时候突然想要查找一些内容都忘记放在哪里了。也就只能是一个记录过程却少了一些查找的过程。立个flag以后继续记录在这里了。</p>
]]></content>
  </entry>
  <entry>
    <title>nginx 配置</title>
    <url>/2018/20180329-2.html</url>
    <content><![CDATA[<h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">	upstream http_server &#123;</span><br><span class="line">		server x.x.x.x weight=10; # 权重</span><br><span class="line">		server x.x.x.x weight=20; # 权重</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	upstream backend &#123;</span><br><span class="line">    	server 127.0.0.1:8080;</span><br><span class="line">    	server 127.0.0.1:9090;</span><br><span class="line">    	ip_hash; # ip_hash</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	server &#123;</span><br><span class="line">		...</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>nginx 转发比较消耗CPU</p>
</blockquote>
<h1 id="nginx-转发"><a href="#nginx-转发" class="headerlink" title="nginx 转发"></a>nginx 转发</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">	listen 8888;</span><br><span class="line">	server name localhost;</span><br><span class="line"></span><br><span class="line">	#access_log logs/host.access.log main;</span><br><span class="line"></span><br><span class="line">	location / &#123;</span><br><span class="line">		root /home/...;</span><br><span class="line">		index index.html index.htm</span><br><span class="line">		</span><br><span class="line">		if (!-e $request_filename) &#123; # 找不到请求地址</span><br><span class="line">			proxy_pass http://127.0.0.1:8811; # 单机转发 外网IP</span><br><span class="line">			#proxy_pass http://http_server; # 负载均衡名称</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="nginx-的-upstream权重配置"><a href="#nginx-的-upstream权重配置" class="headerlink" title="nginx 的 upstream权重配置"></a>nginx 的 upstream权重配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">权重配置：</span><br><span class="line"></span><br><span class="line">weight和请求数量成正比，主要用于上游服务器配置不均衡的情况。下面的配置中，192.168.10.2机器的请求量是192.168.10.1机器请求量的2倍。</span><br><span class="line"></span><br><span class="line">upstream nodes &#123;</span><br><span class="line"></span><br><span class="line">server 192.168.10.1:8668 weight=5;</span><br><span class="line"></span><br><span class="line">server 192.168.10.2:8668 weight=10;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ip_hash配置：</span><br><span class="line"></span><br><span class="line">每一个请求按照请求的ip的hash结果分配。这样每一个请求固定落在一个上游服务器，能够解决ip会话在同一台服务器的问题。</span><br><span class="line"></span><br><span class="line">upstream nodes &#123;</span><br><span class="line"></span><br><span class="line">ip_hash;</span><br><span class="line"></span><br><span class="line">server 192.168.10.1:8668;</span><br><span class="line"></span><br><span class="line">server 192.168.10.2:8668;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fair配置：</span><br><span class="line"></span><br><span class="line">按上游服务器的响应时间来分配请求。响应时间短的优先分配。</span><br><span class="line"></span><br><span class="line">upstream nodes &#123;</span><br><span class="line"></span><br><span class="line">server 192.168.10.1:8668;</span><br><span class="line"></span><br><span class="line">server 192.168.10.2:8668;</span><br><span class="line"></span><br><span class="line">fair;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url_hash配置：</span><br><span class="line"></span><br><span class="line">按照访问的url的hash结果来分配请求，使每一个url定向到同一个上游服务器。注意：在upstream中加入hash语句。server语句中不能写入weight等其他的參数，hash_method是使用的hash算法。</span><br><span class="line"></span><br><span class="line">upstream nodes &#123;</span><br><span class="line"></span><br><span class="line">server 192.168.10.1:8668;</span><br><span class="line"></span><br><span class="line">server 192.168.10.2:8668;</span><br><span class="line"></span><br><span class="line">hash $request_uri;</span><br><span class="line"></span><br><span class="line">hash_method crc32;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">下面再说下在upstream中常用的配置项：</span><br><span class="line"></span><br><span class="line">down：表示当前的server不參与负载均衡。</span><br><span class="line"></span><br><span class="line">weight：默觉得1，weight越大，负载的权重就越大。</span><br><span class="line"></span><br><span class="line">max_fails ：请求失败的次数默觉得1。</span><br><span class="line"></span><br><span class="line">fail_timeout : max_fails次失败后，暂停请求此台服务器的时间。</span><br><span class="line"></span><br><span class="line">backup： 其他全部的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</span><br><span class="line"></span><br><span class="line">upstream nodes &#123;</span><br><span class="line"></span><br><span class="line">ip_hash;</span><br><span class="line"></span><br><span class="line">server 192.168.10.1:8668 down;</span><br><span class="line"></span><br><span class="line">server 192.168.10.2:8668 weight=2;</span><br><span class="line"></span><br><span class="line">server 192.168.10.3:8668;</span><br><span class="line"></span><br><span class="line">server 192.168.10.4:8668 backup;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Linux命令"><a href="#Linux命令" class="headerlink" title="Linux命令"></a>Linux命令</h1><h2 id="机器名"><a href="#机器名" class="headerlink" title="机器名"></a>机器名</h2><p><code>hostname -i</code></p>
<h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p><code>netstat -anp | grep 8888</code></p>
]]></content>
  </entry>
  <entry>
    <title>sheel 脚本</title>
    <url>/2018/20180329-1.html</url>
    <content><![CDATA[<h1 id="reload-sh-平滑重启"><a href="#reload-sh-平滑重启" class="headerlink" title="reload.sh  平滑重启"></a>reload.sh  平滑重启</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;loading...&quot;</span><br><span class="line">pid = `pidof live_master`</span><br><span class="line">echo $pid</span><br><span class="line">kill -USR1 $pid</span><br><span class="line">echo &apos;&quot;loading success&apos;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>mysql 常见问题</title>
    <url>/2018/20180328-1.html</url>
    <content><![CDATA[<h2 id="mysql8-0-设置简单密码报错ERROR-1819-HY000-Your-password-does-not-satisfy-the-current-policy-requirements"><a href="#mysql8-0-设置简单密码报错ERROR-1819-HY000-Your-password-does-not-satisfy-the-current-policy-requirements" class="headerlink" title="mysql8.0 设置简单密码报错ERROR 1819 (HY000): Your password does not satisfy the current policy requirements"></a>mysql8.0 设置简单密码报错ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE &apos;validate_password%&apos;;</span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">| Variable_name                        | Value  |</span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">| validate_password.check_user_name    | ON     |</span><br><span class="line">| validate_password.dictionary_file    |        |</span><br><span class="line">| validate_password.length             | 8      |</span><br><span class="line">| validate_password.mixed_case_count   | 1      |</span><br><span class="line">| validate_password.number_count       | 1      |</span><br><span class="line">| validate_password.policy             | MEDIUM |</span><br><span class="line">| validate_password.special_char_count | 1      |</span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">7 rows in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; set global validate_password.policy=0;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; set global validate_password.length=4;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; exit;</span><br><span class="line">Bye</span><br><span class="line"></span><br><span class="line">➜  ~ mysql_secure_installation</span><br><span class="line"></span><br><span class="line">Securing the MySQL server deployment.</span><br><span class="line"></span><br><span class="line">Enter password for user root:</span><br><span class="line">Error: Access denied for user &apos;root&apos;@&apos;localhost&apos; (using password: YES)</span><br></pre></td></tr></table></figure>
<h2 id="Syntax-error-or-access-violation-1055-Expression-1-of-SELECT-list-is-not-in-GROUP-BY-clause-and-contains-nonaggregated-column-‘XXX-Y-ZZZZ’-which-is-not-functionally-dependent-on-columns-in-GROUP-BY-clause-this-is-incompatible-with-sql-mode-only-full-group-by"><a href="#Syntax-error-or-access-violation-1055-Expression-1-of-SELECT-list-is-not-in-GROUP-BY-clause-and-contains-nonaggregated-column-‘XXX-Y-ZZZZ’-which-is-not-functionally-dependent-on-columns-in-GROUP-BY-clause-this-is-incompatible-with-sql-mode-only-full-group-by" class="headerlink" title="Syntax error or access violation: 1055 Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column ‘XXX.Y.ZZZZ’ which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by"></a>Syntax error or access violation: 1055 Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column ‘XXX.Y.ZZZZ’ which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by</h2><blockquote>
<p>原因：<br>MySQL 5.7.5和up实现了对功能依赖的检测。如果启用了only_full_group_by SQL模式(在默认情况下是这样)，那么MySQL就会拒绝选择列表、条件或顺序列表引用的查询，这些查询将引用组中未命名的非聚合列，而不是在功能上依赖于它们。(在5.7.5之前，MySQL没有检测到功能依赖项，only_full_group_by在默认情况下是不启用的。关于前5.7.5行为的描述，请参阅MySQL 5.6参考手册。)</p>
</blockquote>
<p>执行以下个命令，可以查看 sql_mode 的内容。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　　mysql&gt; SHOW SESSION VARIABLES;</span><br><span class="line"></span><br><span class="line">　　</span><br><span class="line">　　mysql&gt; SHOW GLOBAL VARIABLES;</span><br><span class="line"></span><br><span class="line">　　mysql&gt; select @@sql_mode;</span><br></pre></td></tr></table></figure></p>
<p>可见session和global 的sql_mode的值都为： </p>
<p><code>ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</code></p>
<p>only_full_group_by说明：<br>only_full_group_by ：使用这个就是使用和oracle一样的group 规则, select的列都要在group中,或者本身是聚合列(SUM,AVG,MAX,MIN) 才行，其实这个配置目前个人感觉和distinct差不多的，所以去掉就好<br>官网摘抄：<br>官网：ONLY_FULL_GROUP_BY<br>Reject queries for which the select list, HAVING condition, or ORDER BY list refer to nonaggregated columns that are neither named in the GROUP BY clause nor are functionally dependent on (uniquely determined by) GROUP BY columns.</p>
<p>As of MySQL 5.7.5, the default SQL mode includes ONLY_FULL_GROUP_BY. (Before 5.7.5, MySQL does not detect functional dependency and ONLY_FULL_GROUP_BY is not enabled by default. For a description of pre-5.7.5 behavior, see the MySQL 5.6 Reference Manual.)</p>
<p>A MySQL extension to standard SQL permits references in the HAVING clause to aliased expressions in the select list. Before MySQL 5.7.5, enabling ONLY_FULL_GROUP_BY disables this extension, thus requiring the HAVING clause to be written using unaliased expressions. As of MySQL 5.7.5, this restriction is lifted so that the HAVING clause can refer to aliases regardless of whether ONLY_FULL_GROUP_BY is enabled.</p>
<p>解决：<br>执行以下两个命令：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; set global sql_mode=&apos;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&apos;;</span><br><span class="line"></span><br><span class="line">mysql&gt; set session sql_mode=&apos;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&apos;;</span><br></pre></td></tr></table></figure></p>
<p>这两个命令，去掉 sql_mode 的 ONLY_FULL_GROUP_BY</p>
<h2 id="Mac-OS-X-完全卸载MySQL"><a href="#Mac-OS-X-完全卸载MySQL" class="headerlink" title="Mac OS X 完全卸载MySQL"></a>Mac OS X 完全卸载MySQL</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">执行下列命令</span><br><span class="line">servie.mysql stop</span><br><span class="line">brew uninstall mysql</span><br><span class="line">sudo rm /usr/local/mysql</span><br><span class="line">sudo rm -rf /usr/local/mysql*</span><br><span class="line">sudo rm -rf /Library/StartupItems/MySQLCOM</span><br><span class="line">sudo rm -rf /Library/PreferencePanes/My*</span><br><span class="line">rm -rf ~/Library/PreferencePanes/My*</span><br><span class="line">sudo rm -rf /Library/Receipts/mysql*</span><br><span class="line">sudo rm -rf /Library/Receipts/MySQL*</span><br><span class="line">sudo rm -rf /var/db/receipts/com.mysql.*</span><br><span class="line">其实不同的安装方式有些东西的存储位置不一样，删除完检查一下下面这些文件是否删除了，没有的话则删除掉：</span><br><span class="line"></span><br><span class="line">/usr/local/Cellar 里的mysql文件</span><br><span class="line">/usr/local/var 里的mysql文件</span><br><span class="line">/tmp 里的mysql.sock, mysql.sock.lock, my.cnf文件</span><br><span class="line">pid文件和err文件都在/usr/local/var/mysql里确保删除了</span><br><span class="line">brew安装的安装包存储在/usr/local/Library/Cache/Homebrew也可以一并删除</span><br><span class="line">执行brew cleanup</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>swoole 测试</title>
    <url>/2018/20180325-3.html</url>
    <content><![CDATA[<h2 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h2><h2 id="安装sowoole-扩展"><a href="#安装sowoole-扩展" class="headerlink" title="安装sowoole 扩展"></a>安装sowoole 扩展</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  package cd swoole</span><br><span class="line">➜  swoole git:(master) phpize</span><br><span class="line">Configuring for:</span><br><span class="line">PHP Api Version:         20170718</span><br><span class="line">Zend Module Api No:      20170718</span><br><span class="line">Zend Extension Api No:   320170718</span><br><span class="line">➜  swoole git:(master) ./configure</span><br><span class="line">➜  swoole git:(master) make &amp;&amp; make installs</span><br><span class="line"></span><br><span class="line">···</span><br><span class="line">Build complete.</span><br><span class="line">Don&apos;t forget to run &apos;make test&apos;.</span><br><span class="line"></span><br><span class="line">Installing shared extensions:     /usr/local/Cellar/php@7.2/7.2.16/pecl/20170718/</span><br><span class="line">Installing header files:          /usr/local/Cellar/php@7.2/7.2.16/include/php/</span><br></pre></td></tr></table></figure>
<h2 id="ws-server"><a href="#ws-server" class="headerlink" title="ws_server"></a>ws_server</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ws</span> </span>&#123;</span><br><span class="line">    <span class="keyword">CONST</span> HOST = <span class="string">"0.0.0.0"</span>;</span><br><span class="line">    <span class="keyword">CONST</span> PORT = <span class="number">8811</span>;</span><br><span class="line">    <span class="keyword">CONST</span> CHART_PORT = <span class="number">8812</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $ws = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取 key 有值 del</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;ws = <span class="keyword">new</span> swoole_websocket_server(<span class="keyword">self</span>::HOST, <span class="keyword">self</span>::PORT);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ws-&gt;listen(<span class="keyword">self</span>::HOST, <span class="keyword">self</span>::CHART_PORT, SWOOLE_SOCK_TCP);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;ws-&gt;set(</span><br><span class="line">            [</span><br><span class="line">                <span class="string">'enable_static_handler'</span> =&gt; <span class="keyword">true</span>,</span><br><span class="line">                <span class="string">'document_root'</span> =&gt; <span class="string">"/home/work/hdtocs/swoole_mooc/thinkphp/public/static"</span>,</span><br><span class="line">                <span class="string">'worker_num'</span> =&gt; <span class="number">4</span>,</span><br><span class="line">                <span class="string">'task_worker_num'</span> =&gt; <span class="number">4</span>,</span><br><span class="line">            ]</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;ws-&gt;on(<span class="string">"start"</span>, [<span class="keyword">$this</span>, <span class="string">'onStart'</span>]);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ws-&gt;on(<span class="string">"open"</span>, [<span class="keyword">$this</span>, <span class="string">'onOpen'</span>]);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ws-&gt;on(<span class="string">"message"</span>, [<span class="keyword">$this</span>, <span class="string">'onMessage'</span>]);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ws-&gt;on(<span class="string">"workerstart"</span>, [<span class="keyword">$this</span>, <span class="string">'onWorkerStart'</span>]);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ws-&gt;on(<span class="string">"request"</span>, [<span class="keyword">$this</span>, <span class="string">'onRequest'</span>]);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ws-&gt;on(<span class="string">"task"</span>, [<span class="keyword">$this</span>, <span class="string">'onTask'</span>]);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ws-&gt;on(<span class="string">"finish"</span>, [<span class="keyword">$this</span>, <span class="string">'onFinish'</span>]);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ws-&gt;on(<span class="string">"close"</span>, [<span class="keyword">$this</span>, <span class="string">'onClose'</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;ws-&gt;start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $server</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onStart</span><span class="params">($server)</span> </span>&#123;</span><br><span class="line">        swoole_set_process_name(<span class="string">"live_master"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $server</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $worker_id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onWorkerStart</span><span class="params">($server,  $worker_id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义应用目录</span></span><br><span class="line">        define(<span class="string">'APP_PATH'</span>, <span class="keyword">__DIR__</span> . <span class="string">'/../../../application/'</span>);</span><br><span class="line">        <span class="comment">// 加载框架里面的文件</span></span><br><span class="line">        <span class="comment">//require __DIR__ . '/../thinkphp/base.php';</span></span><br><span class="line">        <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/../../../thinkphp/start.php'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * request回调</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onRequest</span><span class="params">($request, $response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>($request-&gt;server[<span class="string">'request_uri'</span>] == <span class="string">'/favicon.ico'</span>) &#123;</span><br><span class="line">            $response-&gt;status(<span class="number">404</span>);</span><br><span class="line">            $response-&gt;end();</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        $_SERVER  =  [];</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($request-&gt;server)) &#123;</span><br><span class="line">            <span class="keyword">foreach</span>($request-&gt;server <span class="keyword">as</span> $k =&gt; $v) &#123;</span><br><span class="line">                $_SERVER[strtoupper($k)] = $v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($request-&gt;header)) &#123;</span><br><span class="line">            <span class="keyword">foreach</span>($request-&gt;header <span class="keyword">as</span> $k =&gt; $v) &#123;</span><br><span class="line">                $_SERVER[strtoupper($k)] = $v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $_GET = [];</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($request-&gt;get)) &#123;</span><br><span class="line">            <span class="keyword">foreach</span>($request-&gt;get <span class="keyword">as</span> $k =&gt; $v) &#123;</span><br><span class="line">                $_GET[$k] = $v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        $_FILES = [];</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($request-&gt;files)) &#123;</span><br><span class="line">            <span class="keyword">foreach</span>($request-&gt;files <span class="keyword">as</span> $k =&gt; $v) &#123;</span><br><span class="line">                $_FILES[$k] = $v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        $_POST = [];</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($request-&gt;post)) &#123;</span><br><span class="line">            <span class="keyword">foreach</span>($request-&gt;post <span class="keyword">as</span> $k =&gt; $v) &#123;</span><br><span class="line">                $_POST[$k] = $v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;writeLog();</span><br><span class="line">        $_POST[<span class="string">'http_server'</span>] = <span class="keyword">$this</span>-&gt;ws;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ob_start();</span><br><span class="line">        <span class="comment">// 执行应用并响应</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            think\Container::get(<span class="string">'app'</span>, [APP_PATH])</span><br><span class="line">                -&gt;run()</span><br><span class="line">                -&gt;send();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (\<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">            <span class="comment">// todo</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $res = ob_get_contents();</span><br><span class="line">        ob_end_clean();</span><br><span class="line">        $response-&gt;end($res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $serv</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $taskId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $workerId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onTask</span><span class="params">($serv, $taskId, $workerId, $data)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分发 task 任务机制，让不同的任务 走不同的逻辑</span></span><br><span class="line">        $obj = <span class="keyword">new</span> app\common\lib\task\Task;</span><br><span class="line"></span><br><span class="line">        $method = $data[<span class="string">'method'</span>];</span><br><span class="line">        $flag = $obj-&gt;$method($data[<span class="string">'data'</span>], $serv);</span><br><span class="line">        <span class="comment">/*$obj = new app\common\lib\ali\Sms();</span></span><br><span class="line"><span class="comment">        try &#123;</span></span><br><span class="line"><span class="comment">            $response = $obj::sendSms($data['phone'], $data['code']);</span></span><br><span class="line"><span class="comment">        &#125;catch (\Exception $e) &#123;</span></span><br><span class="line"><span class="comment">            // todo</span></span><br><span class="line"><span class="comment">            echo $e-&gt;getMessage();</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $flag; <span class="comment">// 告诉worker</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $serv</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $taskId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onFinish</span><span class="params">($serv, $taskId, $data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"taskId:&#123;$taskId&#125;\n"</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"finish-data-sucess:&#123;$data&#125;\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听ws连接事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $ws</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $request</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onOpen</span><span class="params">($ws, $request)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// fd redis [1]</span></span><br><span class="line">        \app\common\lib\redis\Predis::getInstance()-&gt;sAdd(config(<span class="string">'redis.live_game_key'</span>), $request-&gt;fd);</span><br><span class="line">        var_dump($request-&gt;fd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听ws消息事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $ws</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $frame</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onMessage</span><span class="params">($ws, $frame)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"ser-push-message:&#123;$frame-&gt;data&#125;\n"</span>;</span><br><span class="line">        $ws-&gt;push($frame-&gt;fd, <span class="string">"server-push:"</span>.date(<span class="string">"Y-m-d H:i:s"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * close</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $ws</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $fd</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onClose</span><span class="params">($ws, $fd)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// fd del</span></span><br><span class="line">        \app\common\lib\redis\Predis::getInstance()-&gt;sRem(config(<span class="string">'redis.live_game_key'</span>), $fd);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"clientid:&#123;$fd&#125;\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 记录日志</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">writeLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $datas = array_merge([<span class="string">'date'</span> =&gt; date(<span class="string">"Ymd H:i:s"</span>)],$_GET, $_POST, $_SERVER);</span><br><span class="line"></span><br><span class="line">        $logs = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">foreach</span>($datas <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">            $logs .= $key . <span class="string">":"</span> . $value . <span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        swoole_async_writefile(APP_PATH.<span class="string">'../runtime/log/'</span>.date(<span class="string">"Ym"</span>).<span class="string">"/"</span>.date(<span class="string">"d"</span>).<span class="string">"_access.log"</span>, $logs.PHP_EOL, <span class="function"><span class="keyword">function</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">            <span class="comment">// todo</span></span><br><span class="line">        &#125;, FILE_APPEND);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Ws();</span><br></pre></td></tr></table></figure>
<h2 id="ws-client"><a href="#ws-client" class="headerlink" title="ws_client"></a>ws_client</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>singwa-swoole-ws测试<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> wsUrl = <span class="string">"ws://swoole.demo.com:8812"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> websocket = <span class="keyword">new</span> WebSocket(wsUrl);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//实例对象的onopen属性</span></span></span><br><span class="line"><span class="javascript">    websocket.onopen = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      websocket.send(<span class="string">"hello-sinwa"</span>);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"conected-swoole-success"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 实例化 onmessage</span></span></span><br><span class="line"><span class="javascript">    websocket.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"ws-server-return-data:"</span> + evt.data);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//onclose</span></span></span><br><span class="line"><span class="javascript">    websocket.onclose = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"close"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">//onerror</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    websocket.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">evt, e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"error:"</span> + evt.data);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Server &#123;</span><br><span class="line">    const PORT = 8811;</span><br><span class="line"></span><br><span class="line">    public function port() &#123;</span><br><span class="line">        $shell  =  &quot;netstat -anp 2&gt;/dev/null | grep &quot;. self::PORT . &quot; | grep LISTEN | wc -l&quot;;</span><br><span class="line"></span><br><span class="line">        $result = shell_exec($shell);</span><br><span class="line">        if($result != 1) &#123;</span><br><span class="line">            // 发送报警服务 邮件 短信</span><br><span class="line">            /// todo</span><br><span class="line">            echo date(&quot;Ymd H:i:s&quot;).&quot;error&quot;.PHP_EOL;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            echo date(&quot;Ymd H:i:s&quot;).&quot;succss&quot;.PHP_EOL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// nohup</span><br><span class="line">swoole_timer_tick(2000, function($timer_id) &#123;</span><br><span class="line">    (new Server())-&gt;port();</span><br><span class="line">    echo &quot;time-start&quot;.PHP_EOL;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>php-ini 文件</title>
    <url>/2018/20180325-2.html</url>
    <content><![CDATA[<h1 id="多个版本改哪个文件下的php-ini-配置才有效？"><a href="#多个版本改哪个文件下的php-ini-配置才有效？" class="headerlink" title="多个版本改哪个文件下的php.ini 配置才有效？"></a>多个版本改哪个文件下的php.ini 配置才有效？</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  package php -i | grep php.ini</span><br><span class="line">Configuration File (php.ini) Path =&gt; /usr/local/etc/php/7.2</span><br><span class="line">Loaded Configuration File =&gt; /usr/local/etc/php/7.2/php.ini</span><br></pre></td></tr></table></figure>
<h1 id="别名设置"><a href="#别名设置" class="headerlink" title="别名设置"></a>别名设置</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  package vim ~/.bash_profile</span><br><span class="line"></span><br><span class="line">	alias php72=/Users/uiste/Downloads/package/soft/php/bin/php</span><br><span class="line"></span><br><span class="line">➜  package source ~/.bash_profile</span><br></pre></td></tr></table></figure>
<h1 id="编译时指定PHP配置信息"><a href="#编译时指定PHP配置信息" class="headerlink" title="编译时指定PHP配置信息"></a>编译时指定PHP配置信息</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ./configure \</span><br><span class="line">--prefix=/usr/local/php \ # 安装路径</span><br><span class="line">--with-config-file-path=/etc # 配置路径</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>PHP 7.2 升级后 Yii2 升级</title>
    <url>/2018/20180325-1.html</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote>
<p>PHP升级7.2后，Yii 2.0.12 版本由于类命名约束问题会产生如下问题：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Fatal error: Cannot use &apos;Object&apos; as class name as it is reserved in /Users/uiste/www/my_project/mike-app/vendor/yiisoft/yii2/base/Object.php on line 77</span><br></pre></td></tr></table></figure>
<h2 id="升级方法"><a href="#升级方法" class="headerlink" title="升级方法"></a>升级方法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  mike-app git:(version-update) composer install</span><br><span class="line">Loading composer repositories with package information</span><br><span class="line">Installing dependencies (including require-dev) from lock file</span><br><span class="line">Nothing to install or update</span><br><span class="line">Generating autoload files</span><br><span class="line">➜  mike-app git:(version-update) composer global require &quot;fxp/composer-asset-plugin:^1.4.1&quot;</span><br><span class="line">Changed current directory to /Users/uiste/.composer</span><br><span class="line">./composer.json has been updated</span><br><span class="line">Loading composer repositories with package information</span><br><span class="line">Updating dependencies (including require-dev)</span><br><span class="line">Package operations: 0 installs, 1 update, 0 removals</span><br><span class="line">  - Updating fxp/composer-asset-plugin (v1.2.2 =&gt; v1.4.4): Downloading (100%)         </span><br><span class="line">Writing lock file</span><br><span class="line">Generating autoload files</span><br><span class="line">➜  mike-app git:(version-update) composer update yiisoft/yii2 yiisoft/yii2-composer bower-asset/jquery.inputmask</span><br><span class="line">The &quot;extra.asset-installer-paths&quot; option is deprecated, use the &quot;config.fxp-asset.installer-paths&quot; option</span><br><span class="line">Loading composer repositories with package information</span><br><span class="line">Updating dependencies (including require-dev)                                                                                                                     GitHub API limit (60 calls/hr) is exhausted, could not fetch https://api.github.com/repos/RobinHerbots/Inputmask/contents/bower.json?ref=4.x. Create a GitHub OAuth token to go over the API rate limit. You can also wait until 2018-03-25 07:52:25 for the rate limit to reset.</span><br><span class="line"></span><br><span class="line">Head to https://github.com/settings/tokens/new?scopes=repo&amp;description=Composer+on+uiste+2018-03-25+0657</span><br><span class="line">to retrieve a token. It will be stored in &quot;/Users/uiste/.composer/auth.json&quot; for future use by Composer.</span><br><span class="line">Token (hidden):</span><br></pre></td></tr></table></figure>
<blockquote>
<p>浏览器打开：<br><code>https://github.com/settings/tokens/new?scopes=repo&amp;description=Composer+on+localhost.localdomain+2018-03-25+1945</code><br>登录github账号 生成token ，在命令行输入即可 token</p>
</blockquote>
<p>继续<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">composer updated</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>安装walle后进行检测错误总出现的问题解决</title>
    <url>/2018/20180223-1.html</url>
    <content><![CDATA[<h1 id="安装walle后进行检测错误总出现的问题解决"><a href="#安装walle后进行检测错误总出现的问题解决" class="headerlink" title="安装walle后进行检测错误总出现的问题解决"></a>安装walle后进行检测错误总出现的问题解决</h1><p>安装好 walle后，进行项目配置，但是检测总是出现错误，错误如下：</p>
<p>宿主机代码检出检测出错，请确认把php进程用户www的ssh-key加入git的deploy-keys列表。</p>
<p>目标机器检测出错，请确认php进程www用户ssh-key加入目标机器的www用户ssh-key信任列表。</p>
<p>目标机 ansible ping 出错，请检查 ~/.ssh/config 及 ssh 证书配置<br>目标机器检测出错，请确认www有目标机器发布版本库/data/www/publish写入权限。</p>
<p>解决方法：<br>  1，在宿主机安装了ansible后，就消灭了一个关于ansible未安装的问题</p>
<p>  2，其实我们是把宿主机器php进程用户www加入了目标机器www用户的信任authired_keys表的，但是任然报未加入，此处，主要的错误就是因为我们在目标机器中对于</p>
<pre><code>www用户的.ssh文件夹和authorized_keys的权限和所属者；

chmod -R 755 /home/www/

chmod -R 700 /home/www/.ssh/

chmod -R 644 /home/www/.ssh/authorized_keys 
</code></pre><p> 必须满足以上三个条件才能免密码登录，同时也是解决总报没有加入目标机器信任列表的问题关键</p>
<p> <code>chown  www.www -R /home/www</code>      将所属者为www用户</p>
<blockquote>
<p>需要记住的宿主机和目标机器的  .ssh   authorized_keys      /home/www/   都需要注意权限问题  </p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Mysql 相关命令</title>
    <url>/2018/20180222-1.html</url>
    <content><![CDATA[<h1 id="Mysql-添加阿里RDS远程登陆用户"><a href="#Mysql-添加阿里RDS远程登陆用户" class="headerlink" title="Mysql 添加阿里RDS远程登陆用户"></a>Mysql 添加阿里RDS远程登陆用户</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; use mysql;</span><br><span class="line">mysql&gt; select user,host from user;</span><br><span class="line">mysql&gt; grant all privileges on *.* to &apos;dms&apos;@&apos;121.43.18.67&apos; identified by &apos;mypassword&apos;;</span><br><span class="line">mysql&gt; flush privileges; </span><br><span class="line">mysql&gt; quit;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>此项目将被立刻删除，您不能撤销此操作</title>
    <url>/2018/20180221-1.html</url>
    <content><![CDATA[<p>mac 删除文件不经过废纸篓，提示“此项目将被立刻删除，您不能撤销此操作。”，解决办法。</p>
<p>终端机运行两个命令：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm -R ~/.Trash</span><br><span class="line">killall Finder</span><br></pre></td></tr></table></figure></p>
<p>退出终端机。</p>
<p>如果它说你没有权限删除，那么就这样：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo rm -R ~/.Trash</span><br><span class="line">killall Finder</span><br></pre></td></tr></table></figure></p>
<p>删除废纸篓，finder会自动生成。</p>
]]></content>
  </entry>
  <entry>
    <title>Linux 配置，命令</title>
    <url>/2018/20180219-2.html</url>
    <content><![CDATA[<h2 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h2><h3 id="添加管理员用户"><a href="#添加管理员用户" class="headerlink" title="添加管理员用户"></a>添加管理员用户</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># useradd test</span><br><span class="line"># passwd test</span><br><span class="line"># mkdir -p /home/test/.ssh</span><br><span class="line"># chown 600 /home/test/.ssh/</span><br><span class="line"># vim /etc/sudoers</span><br><span class="line"># cd /home/test/.ssh/</span><br><span class="line"># rz</span><br><span class="line"># # Received /Users/uiste/.ssh/id_rsa.pub</span><br><span class="line"># ls</span><br><span class="line"># mv id_rsa.pub authorized_keys</span><br><span class="line"># ls -al</span><br><span class="line"># chown test:test authorized_keys </span><br><span class="line"># chmod 700 authorized_keys </span><br><span class="line"># ls -al</span><br><span class="line"># chmod 600 authorized_keys </span><br><span class="line"># ls</span><br><span class="line"># pwd</span><br><span class="line"># chown test:test /home/test/.ssh</span><br><span class="line"># ls -al /home/test/</span><br><span class="line"></span><br><span class="line"># 自定义生成ssh key</span><br><span class="line">root@iZbp1bb2egi7vzn29c1dhvZ ~]# su - www</span><br><span class="line">上一次登录：二 1月  1 22:49:16 CST 2019pts/1 上</span><br><span class="line">[www@iZbp1bb2egi7vzn29c1dhvZ ~]$ sudo su -</span><br><span class="line">Last login: Tue Jan  1 22:49:46 CST 2019 from 223.167.32.98 on pts/2</span><br><span class="line">[root@iZbp1bb2egi7vzn29c1dhvZ ~]# su - www</span><br><span class="line">Last login: Tue Jan  1 22:50:58 CST 2019 on pts/2</span><br><span class="line">[www@iZbp1bb2egi7vzn29c1dhvZ ~]$ ssh-keygen -t rsa</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># useradd test</span><br><span class="line"></span><br><span class="line">修改管理员配置</span><br><span class="line"># vim /etc/sudoers</span><br><span class="line"></span><br><span class="line">## Allow root to run any commands anywhere </span><br><span class="line">root    ALL=(ALL)       ALL</span><br><span class="line">test     ALL=(ALL)       NOPASSWD: ALL</span><br></pre></td></tr></table></figure>
<h3 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 切换自定用户</span><br><span class="line"># su - test</span><br><span class="line"></span><br><span class="line"># 切换root用户</span><br><span class="line"># sudo su -</span><br></pre></td></tr></table></figure>
<h3 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown test:test /home/test/</span><br><span class="line">chmod 755 /home/test/.ssh/</span><br><span class="line"></span><br><span class="line">[test@izbp14s0hny0qt9wghm6lcz .ssh]$ ls -al</span><br><span class="line">total 12</span><br><span class="line">drwxr-xr-x 2 test test 4096 Sep 26 10:54 .</span><br><span class="line">drwx------ 3 test test 4096 Sep 26 10:44 ..</span><br><span class="line">-rw------- 1 test test  411 Sep 26 10:36 authorized_keys</span><br><span class="line"></span><br><span class="line">[test@izbp14s0hny0qt9wghm6lcz .ssh]$ cat authorized_keys </span><br><span class="line">ssh-rsa AAAAB3Nza...E27svfEF6qsVb9B5dooFFFS5hNjyJJma8dyCLzmpAKXH......8XDB+ofAZYkF/7NyU9ON0OwkKWJL4jL570kfazGgJQQwrjWh5x5.....nLsLvQB2rnjbeyV+RXnNemMutokrjIgrT Administrator@PC-20180613WOHL</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">## 常用命令</span><br><span class="line">* 递归创建文件夹</span><br><span class="line">`mkdir -p /data/yiilogs/`</span><br><span class="line"></span><br><span class="line">* 修改文件夹用户</span><br><span class="line">`chown test:test /data/yiilogs/`</span><br><span class="line"></span><br><span class="line">* 修改文件读写权限</span><br><span class="line">`chmod 777 /data/yiilogs/`</span><br><span class="line"></span><br><span class="line">* 查看端口占用情况</span><br><span class="line">`netstat -tunlp | grep 3306`</span><br><span class="line"></span><br><span class="line">* 匹配log中自定内容信息</span><br></pre></td></tr></table></figure>
<p>tail -f /data/yiilog/xxx/access_app_nginx.log |grep ‘interface-loan/xxx’<br><code>`</code></p>
]]></content>
  </entry>
  <entry>
    <title>lnmp环境 (centos7+nginx+MySQL5.7.9+PHP7)</title>
    <url>/2018/20180219-1.html</url>
    <content><![CDATA[<h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><p><strong> 首先更新系统软件 </strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># yum update</span><br></pre></td></tr></table></figure></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol>
<li><p>安装nginx源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># yum localinstall http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装nginx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动nginx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># service nginx start</span><br><span class="line">Redirecting to /bin/systemctl start  nginx.service</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问http://你的ip/</p>
</li>
</ol>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/conf.d/service.conf</span><br><span class="line"></span><br><span class="line"># api-doc.xxx.com</span><br><span class="line">server &#123;</span><br><span class="line">listen 80; #默认监听 80 端口</span><br><span class="line">server_name api-doc.xxx.com; #配置域名或者公网 ip</span><br><span class="line">location / &#123;</span><br><span class="line">   proxy_pass http://127.0.0.1:4000;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># api-doc.xxx.com</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  api-doc.xxx.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /data/web/blackuser-api-doc/_book;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ /\.ht &#123;</span><br><span class="line">        deny  all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># admin.xxx.com</span><br><span class="line">server&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name admin.xxx.com;</span><br><span class="line">    root /data/web/xxx/backend/web; # 该项要修改为你准备存放相关网页的路径</span><br><span class="line">    location / &#123;</span><br><span class="line">        index  index.php index.html index.htm;</span><br><span class="line">         #如果请求既不是一个文件，也不是一个目录，则执行一下重写规则</span><br><span class="line">         if (!-e $request_filename)</span><br><span class="line">         &#123;</span><br><span class="line">            #地址作为将参数rewrite到index.php上。</span><br><span class="line">            rewrite ^/(.*)$ /index.php/$1;</span><br><span class="line">            #若是子目录则使用下面这句，将subdir改成目录名称即可。</span><br><span class="line">            #rewrite ^/subdir/(.*)$ /subdir/index.php/$1;</span><br><span class="line">         &#125;</span><br><span class="line">	#deny all;</span><br><span class="line">    &#125;</span><br><span class="line">    #proxy the php scripts to php-fpm</span><br><span class="line">    location ~ \.php &#123;</span><br><span class="line">            include fastcgi_params;</span><br><span class="line">            ##pathinfo支持start</span><br><span class="line">            #定义变量 $path_info ，用于存放pathinfo信息</span><br><span class="line">            set $path_info &quot;&quot;;</span><br><span class="line">            #定义变量 $real_script_name，用于存放真实地址</span><br><span class="line">            set $real_script_name $fastcgi_script_name;</span><br><span class="line">            #如果地址与引号内的正则表达式匹配</span><br><span class="line">            if ($fastcgi_script_name ~ &quot;^(.+?\.php)(/.+)$&quot;) &#123;</span><br><span class="line">                    #将文件地址赋值给变量 $real_script_name</span><br><span class="line">                    set $real_script_name $1;</span><br><span class="line">                    #将文件地址后的参数赋值给变量 $path_info</span><br><span class="line">                    set $path_info $2;</span><br><span class="line">            &#125;</span><br><span class="line">            #配置fastcgi的一些参数</span><br><span class="line">            fastcgi_param SCRIPT_FILENAME $document_root$real_script_name;</span><br><span class="line">            fastcgi_param SCRIPT_NAME $real_script_name;</span><br><span class="line">            fastcgi_param PATH_INFO $path_info;</span><br><span class="line">            ###pathinfo支持end</span><br><span class="line">        fastcgi_intercept_errors on;</span><br><span class="line">        fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ^~ /data/runtime &#123;</span><br><span class="line">    return 404;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ^~ /application &#123;</span><br><span class="line">    return 404;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ^~ /simplewind &#123;</span><br><span class="line">    return 404;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="安装MySQL5-7"><a href="#安装MySQL5-7" class="headerlink" title="安装MySQL5.7.*"></a>安装MySQL5.7.*</h2><h3 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h3><ol>
<li><p>安装mysql源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># yum localinstall  http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装mysql</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install mysql-community-server</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装mysql的开发包，以后会有用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install mysql-community-devel</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动mysql</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service mysqld start</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看mysql启动状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># service mysqld status</span><br><span class="line">出现pid</span><br><span class="line"></span><br><span class="line">证明启动成功</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取mysql默认生成的密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># grep &apos;temporary password&apos; /var/log/mysqld.log</span><br><span class="line">选中的就是密码。</span><br></pre></td></tr></table></figure>
</li>
<li><p>换成自己的密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mysql -uroot -p</span><br><span class="line">mysql&gt;  set global validate_password_policy=0; # 默认是1，即MEDIUM，所以刚开始设置的密码必须符合长度，且必须含有数字，小写或大写字母，特殊字符。有时候，只是为了自己测试，不想密码设置得那么复杂，譬如说，我只想设置root的密码为123456。</span><br><span class="line">mysql&gt;  set global validate_password_length=1; # validate_password_number_count指定了密码中数据的长度，validate_password_special_char_count指定了密码中特殊字符的长度，validate_password_mixed_case_count指定了密码中大小字母的长度。这些参数，默认值均为1，所以validate_password_length最小值为4，如果你显性指定validate_password_length的值小于4，尽管不会报错，但validate_password_length的值将设为4。</span><br><span class="line">mysql&gt;  ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;MyNewPasdfs4!&apos;;</span><br><span class="line">mysql&gt; quit;</span><br><span class="line"></span><br><span class="line"># mysql -uroot -p</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="编译安装php7-0-1"><a href="#编译安装php7-0-1" class="headerlink" title="编译安装php7.0.1"></a>编译安装php7.0.1</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><ol>
<li><p>下载php7源码包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cd /root &amp; wget -O php7.tar.gz http://cn2.php.net/get/php-7.1.2.tar.gz/from/this/mirror</span><br></pre></td></tr></table></figure>
</li>
<li><p>解压源码包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tar -xvf php7.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cd php-7.0.1</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装php依赖包　</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># yum install libxml2 libxml2-devel openssl openssl-devel bzip2 bzip2-devel libcurl libcurl-devel libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel gmp gmp-devel libmcrypt libmcrypt-devel readline readline-devel libxslt libxslt-devel</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译配置，这里如果上一步的某些依赖包没有安装好，就会遇到很多configure error，我们一一解决，安装上相关软件开发包就可以</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ./configure \</span><br><span class="line">--prefix=/usr/local/php \</span><br><span class="line">--with-config-file-path=/etc \</span><br><span class="line">--enable-fpm \</span><br><span class="line">--with-fpm-user=www  \</span><br><span class="line">--with-fpm-group=www \</span><br><span class="line">--enable-inline-optimization \</span><br><span class="line">--disable-debug \</span><br><span class="line">--disable-rpath \</span><br><span class="line">--enable-shared  \</span><br><span class="line">--enable-soap \</span><br><span class="line">--with-libxml-dir \</span><br><span class="line">--with-xmlrpc \</span><br><span class="line">--with-openssl \</span><br><span class="line">--with-mcrypt \</span><br><span class="line">--with-mhash \</span><br><span class="line">--with-pcre-regex \</span><br><span class="line">--with-sqlite3 \</span><br><span class="line">--with-zlib \</span><br><span class="line">--enable-bcmath \</span><br><span class="line">--with-iconv \</span><br><span class="line">--with-bz2 \</span><br><span class="line">--enable-calendar \</span><br><span class="line">--with-curl \</span><br><span class="line">--with-cdb \</span><br><span class="line">--enable-dom \</span><br><span class="line">--enable-exif \</span><br><span class="line">--enable-fileinfo \</span><br><span class="line">--enable-filter \</span><br><span class="line">--with-pcre-dir \</span><br><span class="line">--enable-ftp \</span><br><span class="line">--with-gd \</span><br><span class="line">--with-openssl-dir \</span><br><span class="line">--with-jpeg-dir \</span><br><span class="line">--with-png-dir \</span><br><span class="line">--with-zlib-dir  \</span><br><span class="line">--with-freetype-dir \</span><br><span class="line">--enable-gd-native-ttf \</span><br><span class="line">--enable-gd-jis-conv \</span><br><span class="line">--with-gettext \</span><br><span class="line">--with-gmp \</span><br><span class="line">--with-mhash \</span><br><span class="line">--enable-json \</span><br><span class="line">--enable-mbstring \</span><br><span class="line">--enable-mbregex \</span><br><span class="line">--enable-mbregex-backtrack \</span><br><span class="line">--with-libmbfl \</span><br><span class="line">--with-onig \</span><br><span class="line">--enable-pdo \</span><br><span class="line">--with-mysqli=mysqlnd \</span><br><span class="line">--with-pdo-mysql=mysqlnd \</span><br><span class="line">--with-zlib-dir \</span><br><span class="line">--with-pdo-sqlite \</span><br><span class="line">--with-readline \</span><br><span class="line">--enable-session \</span><br><span class="line">--enable-shmop \</span><br><span class="line">--enable-simplexml \</span><br><span class="line">--enable-sockets  \</span><br><span class="line">--enable-sysvmsg \</span><br><span class="line">--enable-sysvsem \</span><br><span class="line">--enable-sysvshm \</span><br><span class="line">--enable-wddx \</span><br><span class="line">--with-libxml-dir \</span><br><span class="line">--with-xsl \</span><br><span class="line">--enable-zip \</span><br><span class="line">--enable-mysqlnd-compression-support \</span><br><span class="line">--with-pear \</span><br><span class="line">--enable-opcache</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译与安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加 PHP 命令到环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vim /etc/profile</span><br><span class="line"></span><br><span class="line">在末尾加入</span><br><span class="line"></span><br><span class="line">PATH=$PATH:/usr/local/php/bin</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">要使改动立即生效执行</span><br><span class="line"># source /etc/profile</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># echo $PATH</span><br><span class="line"># php -v</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><ol>
<li><p>配置php-fpm</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cp php.ini-production /etc/php.ini</span><br><span class="line"># cp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf</span><br><span class="line"></span><br><span class="line"># cp /usr/local/php/etc/php-fpm.d/www.conf.default /usr/local/php/etc/php-fpm.d/www.conf</span><br><span class="line"># cp sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm</span><br><span class="line"># chmod +x /etc/init.d/php-fpm</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动php-fpm</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># /etc/init.d/php-fpm start</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><strong> 异常处理 </strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">configure error:</span><br><span class="line"></span><br><span class="line">1.configure: error: xml2-config not found. Please check your libxml2 installation.</span><br><span class="line"></span><br><span class="line">解决：</span><br><span class="line"></span><br><span class="line"># yum install libxml2 libxml2-devel&lt;/span&gt;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">2.configure: error: Cannot find OpenSSL&apos;s &lt;evp.h&gt;</span><br><span class="line"></span><br><span class="line">解决：</span><br><span class="line"></span><br><span class="line"># yum install openssl openssl-devel&lt;/span&gt;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">3.configure: error: Please reinstall the BZip2 distribution</span><br><span class="line"></span><br><span class="line">解决：</span><br><span class="line"></span><br><span class="line"># yum install bzip2 bzip2-devel&lt;/span&gt;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">4.configure: error: Please reinstall the libcurl distribution - easy.h should be in &lt;curl-dir&gt;/include/curl/</span><br><span class="line"></span><br><span class="line">解决：</span><br><span class="line"></span><br><span class="line"># yum install libcurl libcurl-devel&lt;/span&gt;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">5.If configure fails try --with-webp-dir=&lt;DIR&gt; configure: error: jpeglib.h not found.</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">解决：</span><br><span class="line"></span><br><span class="line"># yum install libjpeg libjpeg-devel&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">6.If configure fails try --with-webp-dir=&lt;DIR&gt;</span><br><span class="line"></span><br><span class="line">checking for jpeg_read_header in -ljpeg... yes</span><br><span class="line"></span><br><span class="line">configure: error: png.h not found.</span><br><span class="line"></span><br><span class="line">解决：</span><br><span class="line"></span><br><span class="line"># yum install libpng libpng-devel&lt;/span&gt;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">7.If configure fails try --with-webp-dir=&lt;DIR&gt;</span><br><span class="line"></span><br><span class="line">checking for jpeg_read_header in -ljpeg... yes</span><br><span class="line"></span><br><span class="line">checking for png_write_image in -lpng... yes</span><br><span class="line"></span><br><span class="line">If configure fails try --with-xpm-dir=&lt;DIR&gt;</span><br><span class="line"></span><br><span class="line">configure: error: freetype-config not found.</span><br><span class="line"></span><br><span class="line">解决：</span><br><span class="line"></span><br><span class="line"># yum install freetype freetype-devel&lt;/span&gt;</span><br><span class="line">8.configure: error: Unable to locate gmp.h</span><br><span class="line"></span><br><span class="line">解决：</span><br><span class="line"></span><br><span class="line"># yum install gmp gmp-devel&lt;/span&gt;</span><br><span class="line">9.configure: error: mcrypt.h not found. Please reinstall libmcrypt.</span><br><span class="line"></span><br><span class="line">解决：</span><br><span class="line"></span><br><span class="line"># yum install libmcrypt libmcrypt-devel</span><br><span class="line"></span><br><span class="line">10.configure: error: Please reinstall readline - I cannot find readline.h</span><br><span class="line"></span><br><span class="line">解决：</span><br><span class="line"></span><br><span class="line"># yum install readline readline-devel&lt;/span&gt;</span><br><span class="line">11.configure: error: xslt-config not found. Please reinstall the libxslt &gt;= 1.1.0 distribution</span><br><span class="line"></span><br><span class="line">解决：</span><br><span class="line"></span><br><span class="line"># yum install libxslt libxslt-devel&lt;/span&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="修改服务运行用户"><a href="#修改服务运行用户" class="headerlink" title="修改服务运行用户"></a>修改服务运行用户</h2><h3 id="修改nginx的运行角色"><a href="#修改nginx的运行角色" class="headerlink" title="修改nginx的运行角色"></a>修改nginx的运行角色</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /etc/nginx</span><br><span class="line">sudo vi nginx.conf</span><br><span class="line"># 头部是这样</span><br><span class="line">user www-data;</span><br><span class="line">worker_processes auto;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line">include /etc/nginx/modules-enabled/*.conf;</span><br><span class="line"></span><br><span class="line"># 修改为</span><br><span class="line">user test;</span><br><span class="line">worker_processes auto;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line">include /etc/nginx/modules-enabled/*.conf;</span><br><span class="line"></span><br><span class="line">#重启nginx</span><br><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure>
<h3 id="修改php的运行角色"><a href="#修改php的运行角色" class="headerlink" title="修改php的运行角色"></a>修改php的运行角色</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /etc/php/7.0/fpm/pool.d/</span><br><span class="line">sudo vi www.conf</span><br><span class="line"># 找到</span><br><span class="line">user = www-data</span><br><span class="line">group = www-data</span><br><span class="line"></span><br><span class="line"># 改为</span><br><span class="line">user = test</span><br><span class="line">group = test</span><br><span class="line"></span><br><span class="line">cd /run/php/</span><br><span class="line">ls -al</span><br><span class="line"># 这个目录下面有两个文件</span><br><span class="line"># php7.0-fpm.pid和php7.0-fpm.sock</span><br><span class="line"># 修改这两个文件的权限</span><br><span class="line">sudo chown test:test php7.0-fpm.pid</span><br><span class="line">sudo chown test:test php7.0-fpm.sock</span><br><span class="line"></span><br><span class="line"># 重启php-fpm</span><br><span class="line">sudo service php7-fpm restart</span><br></pre></td></tr></table></figure>
<blockquote>
<p>test用户是杜撰出来的根据自己的当前用户修改</p>
</blockquote>
<h2 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service nginx restart</span><br><span class="line">service php-fpm restart</span><br></pre></td></tr></table></figure>
<h2 id="配置服务开启启动"><a href="#配置服务开启启动" class="headerlink" title="配置服务开启启动"></a>配置服务开启启动</h2><p>开机自启动nginx，php-fpm（其他服务类似）<br>centos 7以上是用Systemd进行系统初始化的，Systemd 是 Linux 系统中最新的初始化系统（init），它主要的设计目标是克服 sysvinit 固有的缺点，提高系统的启动速度。<br>Systemd服务文件以.service结尾，比如现在要建立nginx为开机启动，如果用yum install命令安装的，yum命令会自动创建nginx.service文件，直接用命令systemcel enable nginx.service设置开机启动即可。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemcel enable nginx.service</span><br></pre></td></tr></table></figure></p>
<p>源码安装的手动建立nginx.service服务文件<br>在系统服务目录里创建nginx.service文件<br><code>vi /lib/systemd/system/nginx.service</code></p>
<p>写入以下内容（路径改成自己的）<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=nginx</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/www/lnmp/nginx/sbin/nginx -c /www/lnmp/nginx/conf/nginx.conf</span><br><span class="line">ExecReload=/www/lnmp/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/www/lnmp/nginx/sbin/nginx -s quit</span><br><span class="line">PrivateTmp=true</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p>
<p>在系统服务目录里创建php-fpm.service文件<br><code>vi /lib/systemd/system/php-fpm.service</code></p>
<p>写入以下内容（路径改成自己的）<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=php-fpm</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/www/lnmp/php/sbin/php-fpm</span><br><span class="line">PrivateTmp=true</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>Description:描述服务<br>After:描述服务类别<br>[Service]服务运行参数的设置<br>Type=forking是后台运行的形式<br>ExecStart为服务的具体运行命令<br>ExecReload为重启命令<br>ExecStop为停止命令<br>PrivateTmp=True表示给服务分配独立的临时空间<br>注意：[Service]的启动、重启、停止命令全部要求使用绝对路径<br>[Install]运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3<br>测试并加入开机自启<br>先关闭nginx，php-fpm<br>使用以下命令开启<br><code>systemctl start nginx.service</code>             #如果服务是开启状态，使用此命令会启动失败。<br><code>systemctl start php-fpm.service</code></p>
</blockquote>
<p>开启成功，将服务加入开机自启<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable nginx.service                #注意后面不能跟空格</span><br><span class="line">systemctl enable php-fpm.service</span><br></pre></td></tr></table></figure></p>
<p>重启服务器，查看是否启动<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shutdown -r now        #重启</span><br><span class="line"></span><br><span class="line">systemctl list-units --type=service           #查看运行的服务</span><br></pre></td></tr></table></figure></p>
<p>其他命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start nginx.service              #启动nginx服务</span><br><span class="line">systemctl enable nginx.service             #设置开机自启动</span><br><span class="line">systemctl disable nginx.service            #停止开机自启动</span><br><span class="line">systemctl status nginx.service             #查看服务当前状态</span><br><span class="line">systemctl restart nginx.service　          #重新启动服务</span><br><span class="line">systemctl list-units --type=service        #查看所有已启动的服务</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>lnmp</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac OS X下配置远程Linux 服务器SSH密钥认证自动登录</title>
    <url>/2017/20171223-1.html</url>
    <content><![CDATA[<h2 id="在本地机器创建公钥"><a href="#在本地机器创建公钥" class="headerlink" title="在本地机器创建公钥"></a>在本地机器创建公钥</h2><p>打开万能的终端，执行如下命令，无视一切输出，一路欢快地回车即可。</p>
<p>ssh-keygen -t rsa -C  ‘your <a href="mailto:email@domain.com" target="_blank" rel="noopener">email@domain.com</a>‘<br>-t 指定密钥类型，默认即 rsa ，可以省略<br>-C 设置注释文字，比如你的邮箱</p>
<h2 id="将公钥复制到ssh服务器"><a href="#将公钥复制到ssh服务器" class="headerlink" title="将公钥复制到ssh服务器"></a>将公钥复制到ssh服务器</h2><p>将前一步骤生成的公钥~/id_rsa.pub文件，复制到ssh服务器对应用户下的~/.ssh/authorized_keys文件,可以有多种方式，这里只介绍常用的三种。</p>
<p>[适用于osx系统]使用ssh-copy-id-for-OSX工具将公钥复制至ssh服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install ssh-copy-id</span><br><span class="line">ssh-copy-id username@hostname  #将username和hostname替换为你的ssh服务器用户名和IP</span><br><span class="line">当ssh服务器username用户目录下尚未有.ssh目录时使用此方式</span><br><span class="line">cat ~/.ssh/id_rsa.pub | ssh username@hostname &quot;mkdir ~/.ssh; cat &gt;&gt; ~/.ssh/authorized_keys&quot;</span><br></pre></td></tr></table></figure>
<p>通用方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp ~/.ssh/id_rsa.pub username@hostname:~/ #将公钥文件复制至ssh服务器</span><br><span class="line">ssh username@hostname #使用用户名和密码方式登录至ssh服务器</span><br><span class="line">mkdir .ssh  #若.ssh目录已存在，可省略此步</span><br><span class="line">cat id_rsa.pub &gt;&gt; .ssh/authorized_keys  #将公钥文件id_rsa.pub文件内容追加到authorized_keys文件</span><br></pre></td></tr></table></figure>
<h2 id="快捷登录"><a href="#快捷登录" class="headerlink" title="快捷登录"></a>快捷登录</h2><p>完成以上步骤后，即可使用以下命令直接登录ssh服务器，妈妈再也不用担心你记不住密码了</p>
<p>ssh username@hostname #将username替换为你的ssh服务器用户名，hostname替换为服务器的ip<br>但是，每次仍然需要输入ssh username@hostname，仍算不上最优的解决方案，要是能实现一键登录或一条命令登录最好不过了，下面来看看都有那些解决方法</p>
<p>ssh本身也提供了一种快捷的方式来解决这个问题，往~/.ssh/config配置文件添加你的ssh服务器信息即可<br>vim ~/.ssh/config   #若没有该文件，直接新建即可<br>添加文件内容格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Host        alias #自定义别名</span><br><span class="line">    HostName        hostname  #替换为你的ssh服务器ip或domain</span><br><span class="line">    Port            port #ssh服务器端口，默认为22</span><br><span class="line">    User            user #ssh服务器用户名</span><br><span class="line">    IdentityFile    ~/.ssh/id_rsa #第一个步骤生成的公钥文件对应的私钥文件</span><br></pre></td></tr></table></figure>
<p>保存文件退出后，即可使用别名登录ssh服务器</p>
<p>ssh alias #alias是你在~/.ssh/config文件配置的别名<br>若有多个ssh账号需要配置，只要在~/.ssh/config空行再写即可，如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Host        foo</span><br><span class="line">    HostName        192.168.2.222</span><br><span class="line">    Port            22</span><br><span class="line">    User            test</span><br><span class="line">    IdentityFile    ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">Host        alias</span><br><span class="line">    HostName    hostname</span><br><span class="line">    Port        port</span><br><span class="line">    User        user</span><br></pre></td></tr></table></figure>
<p>如果你本地终端使用的是zsh，那就太简单不过了，直接给zsh添加一条别名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;alias ssh-to-username=&apos;ssh username@hostname&apos;&quot; &gt;&gt; ~/.zshrc #将username和hostname替换为你的服务器信息</span><br><span class="line">source ~/.zshrc   #重新加载更改后的zshrc文件</span><br><span class="line">ssh-to-username   #使用别名，一条命令即可登录你的ssh服务器</span><br></pre></td></tr></table></figure>
<p>如果你本地终端使用的是iterm2还可以添加Profile实现一键登录，具体步骤此处略过</p>
]]></content>
  </entry>
  <entry>
    <title>MySQL 项目开发常规约束建议</title>
    <url>/2017/20170818-1.html</url>
    <content><![CDATA[<h1 id="建表规约"><a href="#建表规约" class="headerlink" title="建表规约"></a>建表规约</h1><ol>
<li>【强制】表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned tinyint ( 1表示是，0表示否)，此规则同样适用于odps建表。 说明:任何字段如果为非负数，必须是 unsigned。</li>
<li>【强制】表名、字段名必须使用小写字母或数字;禁止出现数字开头，禁止两个下划线中间只 出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。 正例:getter_admin，task_config，level3_name 反例:GetterAdmin，taskConfig，level_3_name</li>
<li>【强制】表名不使用复数名词。 说明:表名应该仅仅表示表里面的实体内容，不应该表示实体数量，对应于 DO 类名也是单数 形式，符合表达习惯。</li>
<li>【强制】禁用保留字，如 desc、range、match、delayed 等，请参考 MySQL 官方保留字。</li>
<li>【强制】唯一索引名为 uk_字段名;普通索引名则为 idx_字段名。<br>说明:uk_ 即 unique key;idx_ 即 index 的简称。</li>
<li>【强制】小数类型为 decimal，禁止使用 float 和 double。<br>说明:float 和 double 在存储的时候，存在精度损失的问题，很可能在值的比较时，得到不 正确的结果。如果存储的数据范围超过 decimal 的范围，建议将数据拆成整数和小数分开存储。</li>
<li>【强制】如果存储的字符串长度几乎相等，使用 char 定长字符串类型。</li>
<li>【强制】varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长 度大于此值，定义字段类型为 text，独立出来一张表，用主键来对应，避免影响其它字段索 引效率。</li>
<li>【强制】表必备三字段:id, gmt_create, gmt_modified。 说明:其中id必为主键，类型为unsigned bigint、单表时自增、步长为1。gmt_create, gmt_modified 的类型均为 date_time 类型。</li>
<li>【推荐】表的命名最好是加上“业务名称_表的作用”。 正例:tiger_task / tiger_reader / mpp_config</li>
<li>【推荐】库名与应用名称尽量一致。</li>
<li>【推荐】如果修改字段含义或对字段表示的状态追加时，需要及时更新字段注释。</li>
<li>【推荐】字段允许适当冗余，以􏰁高性能，但是必须考虑数据同步的情况。冗余字段应遵循:<br>1)不是频繁修改的字段。<br>2)不是 varchar 超长字段，更不能是 text 字段。 正例:商品类目名称使用频率高，字段长度短，名称基本一成不变，可在相关联的表中冗余存 储类目名称，避免关联查询。</li>
<li>【推荐】单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。 说明:如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。</li>
<li>【参考】合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是􏰁升检 索速度。<br>正例:人的年龄用 unsigned tinyint(表示范围 0-255，人的寿命不会超过 255 岁);海龟 就必须是 smallint，但如果是太阳的年龄，就必须是 int;如果是所有恒星的年龄都加起来， 那么就必须使用 bigint。</li>
</ol>
<h1 id="索引规约"><a href="#索引规约" class="headerlink" title="索引规约"></a>索引规约</h1><ol>
<li>【强制】业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。 说明:不要以为唯一索引影响了 insert 速度，这个速度损耗可以忽略，但􏰁高查找速度是明 显的;另外，即使在应用层做了非常完善的校验和控制，只要没有唯一索引，根据墨菲定律， 必然有脏数据产生。</li>
<li>【强制】 超过三个表禁止 join。需要 join 的字段，数据类型保持绝对一致;多表关联查询 时，保证被关联的字段需要有索引。<br>说明:即使双表 join 也要注意表索引、SQL 性能。</li>
<li>【强制】在 varchar 字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据 实际文本区分度决定索引长度。 说明:索引的长度与区分度是一对矛盾体，一般对字符串类型数据，长度为 20 的索引，区分 度会高达 90%以上，可以使用 count(distinct left(列名, 索引长度))/count(*)的区分度 来确定。</li>
<li>【强制】页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。 说明:索引文件具有 B-Tree 的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索 引。</li>
<li>【推荐】如果有 order by 的场景，请注意利用索引的有序性。order by 最后的字段是组合 索引的一部分，并且放在索引组合顺序的最后，避免出现 file_sort 的情况，影响查询性能。 正例:where a=? and b=? order by c; 索引:a_b_c 反例:索引中有范围查找，那么索引有序性无法利用，如:WHERE a&gt;10 ORDER BY b; 索引 a_b 无法排序。</li>
<li>【推荐】利用覆盖索引来进行查询操作，来避免回表操作。<br>说明:如果一本书需要知道第 11 章是什么标题，会翻开第 11 章对应的那一页吗?目录浏览 一下就好，这个目录就是起到覆盖索引的作用。 正例:能够建立索引的种类:主键索引、唯一索引、普通索引，而覆盖索引是一种查询的一种 效果，用explain的结果，extra列会出现:using index。</li>
<li>【推荐】利用延迟关联或者子查询优化超多分页场景。<br>说明:MySQL 并不是跳过 offset 行，而是取 offset+N 行，然后返回放弃前 offset 行，返回 N 行，那当 offset 特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过 特定阈值的页数进行 SQL 改写。<br>正例:先快速定位需要获取的 id 段，然后再关联:<br>SELECT a.* FROM 表 1 a, (select id from 表 1 where 条件 LIMIT 100000,20 ) b where a.id=b.id</li>
<li>【推荐】SQL 性能优化的目标:至少要达到 range 级别，要求是 ref 级别，如果可以是 consts 最好。<br>说明:<br>1)consts 单表中最多只有一个匹配行(主键或者唯一索引)，在优化阶段即可读取到数据。 2)ref 指的是使用普通的索引(normal index)。<br>3)range 对索引进行范围检索。<br>反例:explain 表的结果，type=index，索引物理文件全扫􏰀，速度非常慢，这个 index 级 别比较 range 还低，与全表扫􏰀是小巫见大巫。</li>
<li>【推荐】建组合索引的时候，区分度最高的在最左边。<br>正例:如果 where a=? and b=? ，a 列的几乎接近于唯一值，那么只需要单建 idx_a 索引即 可。 说明:存在非等号和等号混合判断条件时，在建索引时，请把等号条件的列前置。如:where a&gt;? and b=? 那么即使 a 的区分度更高，也必须把 b 放在索引的最前列。</li>
<li>【参考】创建索引时避免有如下极端误解: 1)误认为一个查询就需要建一个索引。 2)误认为索引会消耗空间、严重拖慢更新和新增速度。 3)误认为唯一索引一律需要在应用层通过“先查后插”方式解决。</li>
</ol>
<h1 id="SQL规约"><a href="#SQL规约" class="headerlink" title="SQL规约"></a>SQL规约</h1><ol>
<li>【强制】不要使用 count(列名)或 count(常量)来替代 count(<em>)，count(</em>)就是 SQL92 定义 的标准统计行数的语法，跟数据库无关，跟 NULL 和非 NULL 无关。 说明:count(*)会统计值为 NULL 的行，而 count(列名)不会统计此列为 NULL 值的行。</li>
<li>【强制】count(distinct col) 计算该列除 NULL 之外的不重复数量。注意 count(distinct col1, col2) 如果其中一列全为 NULL，那么即使另一列有不同的值，也返回为 0。</li>
<li>【强制】当某一列的值全是 NULL 时，count(col)的返回结果为 0，但 sum(col)的返回结果为 NULL，因此使用 sum()时需注意 NPE 问题。 正例:可以使用如下方式来避免sum的NPE问题:SELECT IF(ISNULL(SUM(g)),0,SUM(g)) FROM table;</li>
<li>【强制】使用 ISNULL()来判断是否为 NULL 值。注意:NULL 与任何值的直接比较都为 NULL。 说明:<br>1) NULL&lt;&gt;NULL的返回结果是NULL，而不是false。 2) NULL=NULL的返回结果是NULL，而不是true。 3) NULL&lt;&gt;1的返回结果是NULL，而不是true。</li>
<li>【强制】 在代码中写分页查询逻辑时，若 count 为 0 应直接返回，避免执行后面的分页语句。</li>
<li>【强制】不得使用外键与级联，一切外键概念必须在应用层解决。 说明:(概念解释)学生表中的 student_id 是主键，那么成绩表中的 student_id 则为外键。 如果更新学生表中的 student_id，同时触发成绩表中的 student_id 更新，则为级联更新。 外键与级联更新适用于单机低并发，不适合分布式、高并发集群;级联更新是强阻塞，存在数 据库更新风暴的风险;外键影响数据库的插入速度。</li>
<li>【强制】禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。</li>
<li>【强制】数据订正时，删除和修改记录时，要先 select，避免出现误删除，确认无误才能执<br>行更新语句。</li>
<li>【推荐】in 操作能避免则避免，若实在避免不了，需要仔细评估 in 后边的集合元素数量，控<br>制在 1000 个之内。</li>
<li>【参考】如果有全球化需要，所有的字符存储与表示，均以 utf-8 编码，那么字符计数方法 注意:<br>说明:<br>SELECT LENGTH(“轻松工作”); 返回为12<br>SELECT CHARACTER_LENGTH(“轻松工作”); 返回为4 如果要使用表情，那么使用 utfmb4 来进行存储，注意它与 utf-8 编码的区别。</li>
<li>【参考】TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少，但 TRUNCATE<br>无事务且不触发 trigger，有可能造成事故，故不建议在开发代码中使用此语句。 说明:TRUNCATE TABLE 在功能上与不带 WHERE 子句的 DELETE 语句相同。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>mysql运行中的事务导致锁表</title>
    <url>/2017/20170817-1.html</url>
    <content><![CDATA[<p>有时代码的不合理操作会导致，事务不能提交，mysql表上执行任何的操作，都在等待，查询也好，修改也好，所有的进程，都会卡在那里，然后你会慌，误以为电脑怎么卡了，这个时候呢，要排查问题。</p>
<h2 id="首先，查询当前的系统进程"><a href="#首先，查询当前的系统进程" class="headerlink" title="首先，查询当前的系统进程"></a>首先，查询当前的系统进程</h2><p><code>show processlist;</code></p>
<p>如果有等待的进程，状态就会显示在等待，同时info会显示执行的sql</p>
<h2 id="第一步只是确认你的操作确实被锁了，第二步就是查询事务了"><a href="#第一步只是确认你的操作确实被锁了，第二步就是查询事务了" class="headerlink" title="第一步只是确认你的操作确实被锁了，第二步就是查询事务了"></a>第一步只是确认你的操作确实被锁了，第二步就是查询事务了</h2><p>SELECT * from information_schema.innodb_trx;</p>
<p>这是表里就会有一条trx_state为running的记录，然后记下trx_mysql_thread_id这个字段的值，这个值是进程id</p>
<h2 id="干掉那个进程id就可以了"><a href="#干掉那个进程id就可以了" class="headerlink" title="干掉那个进程id就可以了"></a>干掉那个进程id就可以了</h2><p>在mysql中执行：kill  [trx_mysql_thread_id] 即可。</p>
]]></content>
  </entry>
  <entry>
    <title>mysql SQL优化</title>
    <url>/2017/20170816-1.html</url>
    <content><![CDATA[<p>mysql5.7中type的类型达到了14种之多，这里只记录和理解最重要且经常遇见的六种类型，它们分别是all,index,range,ref,eq_ref，const。从左到右，它们的效率依次是增强的</p>
<h2 id="mysql-explain功能中展示各种信息的解释："><a href="#mysql-explain功能中展示各种信息的解释：" class="headerlink" title="mysql explain功能中展示各种信息的解释："></a>mysql explain功能中展示各种信息的解释：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id:优化器选定的执行计划中查询的序列号。</span><br><span class="line">select_type:所用的查询类型，主要由以下这集中查询类型。</span><br><span class="line">  . DEPENDENT UNION:子查询中的UNION，且为UNION中从第二个SELECT开始的后面所有SELECT，同样依赖于外部查询的结果集。</span><br><span class="line"></span><br><span class="line">  . SIMPLE:厨子查询或UNION之外的其他查询。</span><br><span class="line">    》explain select * from admin_user where user_id = 1 \G;</span><br><span class="line"></span><br><span class="line">  . PRIMARY:子查询中最外层查询，注意并不是主键查询。</span><br><span class="line">  . SUBQUERY: 子查询内层查询的第一个SELECT，结果不依赖与外部查询结果集。</span><br><span class="line">    》explain select * from role where id = (select role_id from admin_user where user_id = 1) \G;</span><br><span class="line"></span><br><span class="line">  . UNCACHEABLE SUBQUERY:结果集无法缓存的子查询</span><br><span class="line"></span><br><span class="line">  . UNION:UNION 语句中第二个SELECT开始后面的所有SELECT,第一个SELECT为PRIMARY。</span><br><span class="line"></span><br><span class="line">  . UNION RESULT:UNION 中的合并结果。</span><br><span class="line"></span><br><span class="line">table：显示这一步所访问的数据库中的表的名称。</span><br><span class="line">type：告诉我们对标使用的访问方式，主要包含如下几种类型。</span><br><span class="line">  . all： 全表扫描。</span><br><span class="line">  . const: 读常量，最多只会有一条记录匹配，由于是常量，实际上只需要读一次。</span><br><span class="line">  . eq_ref：最多只会有一条匹配结果，一般是通过主键或唯一键索引来访问</span><br><span class="line">  . fulltext：进行全文索引检索</span><br><span class="line">  . index：全索引扫描</span><br><span class="line">  . index_merge：查询中同时使用两个（或更多）索引，然后对索引结果进行和并，在读取表数据。</span><br><span class="line">  . index_subquery：子查询中的返回结果字段组合是一个索引（或索引组合），但不是一个主键或唯一索引。</span><br><span class="line">  . rang：索引范围扫描。</span><br><span class="line">  . ref：join语句中被驱动表索引引用的查询。</span><br><span class="line">  . ref_or_null：与ref的唯一区别就是使用索引引用的查询之外再增加一个空值的查询。</span><br><span class="line">  . system：系统表，表中只有一行数据：</span><br><span class="line">  . unique_subqery：子查询中的返回结果字段组合式主键或唯一约束。</span><br><span class="line">Possible_keys：该查询可以利用的索引。如果没有任何索引可以使用，就会显示程null，这项内容对优化索引时的调整非常重要。</span><br><span class="line">key：优化器从possible_keys中选择使用的索引。</span><br><span class="line">key_len：被选中使用索引的索引建长度。</span><br><span class="line">ref：列出是通过常量，还是某个字段的某个字段来过滤的</span><br><span class="line">rows：优化其通过系统手机的统计信息估算出来的结果集记录条数</span><br><span class="line">extra：查询中每一步实现的额外细节信息。</span><br><span class="line">  . using index : 出现这个说明mysql使用了覆盖索引，避免访问了表的数据行，效率不错。</span><br><span class="line">  . using where ：这说明服务器在存储引擎收到行后讲进行过滤。</span><br><span class="line">  . using temporary ：这意味着mysql对查询结果进行排序的时候使用了一张临时表</span><br><span class="line">  . using filesort ：这个说明mysql会对数据使用一个外部的索引排序</span><br><span class="line"></span><br><span class="line">注意当出现using temporary 和 using filesort时候说明需要优化操作</span><br></pre></td></tr></table></figure>
<h2 id="用小的数据量驱动大的结果集"><a href="#用小的数据量驱动大的结果集" class="headerlink" title="用小的数据量驱动大的结果集"></a>用小的数据量驱动大的结果集</h2><h2 id="索引失效问题"><a href="#索引失效问题" class="headerlink" title="索引失效问题"></a>索引失效问题</h2><h1 id="底层btree机制"><a href="#底层btree机制" class="headerlink" title="底层btree机制"></a>底层btree机制</h1><h2 id="首先抛个问题，MySQL的索引为何用树而不是其他数据结构如hash，hash的读和写都是O-1-，而树的话查询和插入都是O-log-n"><a href="#首先抛个问题，MySQL的索引为何用树而不是其他数据结构如hash，hash的读和写都是O-1-，而树的话查询和插入都是O-log-n" class="headerlink" title="首先抛个问题，MySQL的索引为何用树而不是其他数据结构如hash，hash的读和写都是O(1)，而树的话查询和插入都是O(log(n))?"></a>首先抛个问题，MySQL的索引为何用树而不是其他数据结构如hash，hash的读和写都是O(1)，而树的话查询和插入都是O(log(n))?</h2><blockquote>
<p>答：因为索引设计成树，是和SQL需求相关的，如果单独只查询某条数据，自然是hash算法快，但是我们平常用的查询往往不是只查询单条数据，而是order by，group by，&lt; &gt;这种排序查询，遇到这种情况，hash就会退化成O(n)，而树因为它的有序性依然保持O(log(n))高效率。</p>
</blockquote>
<h2 id="那为何用的是B-树呢？这就得比较B树，B-树与红黑树的区别了。"><a href="#那为何用的是B-树呢？这就得比较B树，B-树与红黑树的区别了。" class="headerlink" title="那为何用的是B+树呢？这就得比较B树，B+树与红黑树的区别了。"></a>那为何用的是B+树呢？这就得比较B树，B+树与红黑树的区别了。</h2><ol>
<li>B+树的非叶子节点只保存索引，不保存行记录。而B树叶子节点和非叶子节点都存储索引和行记录，这样的话，同样的空间，B+树能存储更多的索引。这就意味着同样的数据，B+树比B树更”矮胖“，减少IO次数。</li>
<li>查询的时候，由于B树叶子节点和非叶子节点都存在行记录，也就是是说，B树查询其实是不稳定的（好的时候，只查根节点，坏的时候，查到叶子节点）。而B+树查询最终必须到叶子节点，查询销量稳定。</li>
<li>B树范围查询只能通过中序遍历查询来定位最小和最大值，而B+树通过链表就能实现，查询更方便。<br>综合起来：B+树比B树优势有三个：1.IO次数更少；2.查询性能更稳定；3.范围查询简便。</li>
</ol>
<h2 id="InnoDB一棵B-树可以存放多少行数据？这个问题的简单回答是：约2千万"><a href="#InnoDB一棵B-树可以存放多少行数据？这个问题的简单回答是：约2千万" class="headerlink" title="InnoDB一棵B+树可以存放多少行数据？这个问题的简单回答是：约2千万"></a>InnoDB一棵B+树可以存放多少行数据？这个问题的简单回答是：约2千万</h2><p>那如何计算呢？<br>首先我假设每行记录为1k，<br>首先假设树高为2，那么根节点存储的指针对应每个叶子节点。也就是说，最大的话，有多少个指针就有多少个叶子节点。<br>这棵B+树存储的总行数=根节点指针树<em>每个叶子节点的行记录树。<br>那么根节点能存储多少指针呢？<br>InnoDB最小单位为页，一页为16k，我们假设主键ID为bigint类型，长度为8字节，而指针大小在InnoDB源码中设置为6字节，这样一共14字节，那么一页的总指针树为16k/(8+6) = 1170。<br>每个指针对应1页，假设每行记录为1k（实际上现在很多互联网业务数据记录大小通常就是1K左右），那么一页大概能存16条行记录。<br>所以这棵B+树总行数为：117016 = 18720<br>三层的话，总指针数为1170 1170，故总行数为1170</em> 1170*16=21902400<br>所以当单表数据超过千万级别后，就得考虑分表了，否则B+树的层级可能会超过3级，造成查询效率下降。</p>
<h2 id="聚簇索引和非聚簇索引"><a href="#聚簇索引和非聚簇索引" class="headerlink" title="聚簇索引和非聚簇索引"></a>聚簇索引和非聚簇索引</h2><p>数据库表的索引从数据存储方式上可以分为聚簇索引和非聚簇索引（又叫二级索引）两种</p>
<h3 id="聚簇索引的优点"><a href="#聚簇索引的优点" class="headerlink" title="聚簇索引的优点"></a>聚簇索引的优点</h3><p>聚簇索引将索引和数据行保存在同一个B-Tree中，查询通过聚簇索引可以直接获取数据，相比非聚簇索引需要第二次查询（非覆盖索引的情况下）效率要高。<br>聚簇索引对于范围查询的效率很高，因为其数据是按照大小排列的，</p>
<h3 id="聚簇索引的缺点"><a href="#聚簇索引的缺点" class="headerlink" title="聚簇索引的缺点"></a>聚簇索引的缺点</h3><p>聚簇索引的更新代价比较高，如果更新了行的聚簇索引列，就需要将数据移动到相应的位置。这可能因为要插入的页已满而导致“页分裂”。<br>插入速度严重依赖于插入顺序，按照主键进行插入的速度是加载数据到Innodb中的最快方式。如果不是按照主键插入，最好在加载完成后使用OPTIMIZE TABLE命令重新组织一下表。<br>聚簇索引在插入新行和更新主键时，可能导致“页分裂”问题。<br>聚簇索引可能导致全表扫描速度变慢，因为可能需要加载物理上相隔较远的页到内存中（需要耗时的磁盘寻道操作）。</p>
<h3 id="非聚簇索引"><a href="#非聚簇索引" class="headerlink" title="非聚簇索引"></a>非聚簇索引</h3><p>非聚簇索引，又叫二级索引。二级索引的叶子节点中保存的不是指向行的物理指针，而是行的主键值。当通过二级索引查找行，存储引擎需要在二级索引中找到相应的叶子节点，获得行的主键值，然后使用主键去聚簇索引中查找数据行，这需要两次B-Tree查找。</p>
<p><img src="https://raw.githubusercontent.com/uiste/uiste.github.io/master/images/doc/mysql-btree-1.png" alt></p>
<h2 id="主键和唯一索引都要求值唯一-但是它们还是有区别的"><a href="#主键和唯一索引都要求值唯一-但是它们还是有区别的" class="headerlink" title="主键和唯一索引都要求值唯一,但是它们还是有区别的:"></a>主键和唯一索引都要求值唯一,但是它们还是有区别的:</h2><p>1.主键是一种约束,唯一索引是一种索引;<br>2.一张表只能有一个主键,但可以创建多个唯一索引;<br>3.主键创建后一定包含一个唯一索引,唯一索引并一定是主键;<br>4.主键不能为null,唯一索引可以为null;<br>5.主键可以做为外键,唯一索引不行;</p>
<h2 id="全文索引的版本、存储引擎、数据类型的支持情况"><a href="#全文索引的版本、存储引擎、数据类型的支持情况" class="headerlink" title="全文索引的版本、存储引擎、数据类型的支持情况"></a>全文索引的版本、存储引擎、数据类型的支持情况</h2><p>MySQL 5.6 以前的版本，只有 MyISAM 存储引擎支持全文索引；<br>MySQL 5.6 及以后的版本，MyISAM 和 InnoDB 存储引擎均支持全文索引;<br>只有字段的数据类型为 char、varchar、text 及其系列才可以建全文索引。</p>
<p>使用全文索引<br>和常用的模糊匹配使用 like + % 不同，全文索引有自己的语法格式，使用 match 和 against 关键字，比如</p>
<p><code>select * from fulltext_test where match(content,tag) against(&#39;xxx xxx&#39;);</code></p>
<p>注意： match() 函数中指定的列必须和全文索引中指定的列完全相同，否则就会报错，无法使用全文索引，这是因为全文索引不会记录关键字来自哪一列。如果想要对某一列使用全文索引，请单独为该列创建全文索引。</p>
<h2 id="mysql强制索引和禁止某个索引"><a href="#mysql强制索引和禁止某个索引" class="headerlink" title="mysql强制索引和禁止某个索引"></a>mysql强制索引和禁止某个索引</h2><h3 id="mysql强制使用索引-force-index-索引名或者主键PRI"><a href="#mysql强制使用索引-force-index-索引名或者主键PRI" class="headerlink" title="mysql强制使用索引:force index(索引名或者主键PRI)"></a>mysql强制使用索引:force index(索引名或者主键PRI)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from table force index(PRI) limit 2;(强制使用主键)</span><br><span class="line"></span><br><span class="line">select * from table force index(ziduan1_index) limit 2;(强制使用索引&quot;ziduan1_index&quot;)</span><br><span class="line"></span><br><span class="line">select * from table force index(PRI,ziduan1_index) limit 2;(强制使用索引&quot;PRI和ziduan1_index&quot;)</span><br></pre></td></tr></table></figure>
<h3 id="mysql禁止某个索引：ignore-index-索引名或者主键PRI"><a href="#mysql禁止某个索引：ignore-index-索引名或者主键PRI" class="headerlink" title="mysql禁止某个索引：ignore index(索引名或者主键PRI)"></a>mysql禁止某个索引：ignore index(索引名或者主键PRI)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from table ignore index(PRI) limit 2;(禁止使用主键)</span><br><span class="line"></span><br><span class="line">select * from table ignore index(ziduan1_index) limit 2;(禁止使用索引&quot;ziduan1_index&quot;)</span><br><span class="line"></span><br><span class="line">select * from table ignore index(PRI,ziduan1_index) limit 2;(禁止使用索引&quot;PRI,ziduan1_index&quot;)</span><br></pre></td></tr></table></figure>
<h3 id="MySQL索引分类"><a href="#MySQL索引分类" class="headerlink" title="MySQL索引分类"></a>MySQL索引分类</h3><p>MySQL索引分为普通索引、唯一索引、主键索引、组合索引、全文索引。索引不会包含有null值的列，索引项可以为null（唯一索引、组合索引等），但是只要列中有null值就不会被包含在索引中。</p>
<p>（1）普通索引：create index index_name on table(column)；</p>
<pre><code>或者创建表时指定，create table(..., index index_name column);
</code></pre><p>（2）唯一索引：类似普通索引，索引列的值必须唯一（可以为空，这点和主键索引不同）</p>
<pre><code>create unique index index_name on table(column)；或者创建表时指定unique index_name column
</code></pre><p>（3）主键索引：特殊的唯一索引，不允许为空，只能有一个，一般是在建表时指定primary key(column)</p>
<p>（4）组合索引：在多个字段上创建索引，遵循最左前缀原则。alter table t add index index_name(a,b,c);</p>
<p>（5）全文索引：主要用来查找文本中的关键字，不是直接与索引中的值相比较，像是一个搜索引擎，配合match against使用，现在只有char，varchar，text上可以创建全文索引。在数据量较大时，先将数据放在一张没有全文索引的表里，然后再利用create index创建全文索引，比先生成全文索引再插入数据快很多。</p>
<h3 id="何时使用索引"><a href="#何时使用索引" class="headerlink" title="何时使用索引"></a>何时使用索引</h3><pre><code>MySQL每次查询只使用一个索引。与其说是“数据库查询只能用到一个索引”，倒不如说，和全表扫描比起来，去分析两个索引B+树更加耗费时间。所以where A=a and B=b这种查询使用（A，B）的组合索引最佳，B+树根据（A，B）来排序。
</code></pre><p>（1）主键，unique字段；</p>
<p>（2）和其他表做连接的字段需要加索引；</p>
<p>（3）在where里使用＞，≥，＝，＜，≤，is null和between等字段；</p>
<p>（4）使用不以通配符开始的like，where A like ‘China%’；</p>
<p>（5）聚集函数MIN()，MAX()中的字段；</p>
<p>（6）order by和group by字段；</p>
<h3 id="何时不使用索引"><a href="#何时不使用索引" class="headerlink" title="何时不使用索引"></a>何时不使用索引</h3><p>（1）表记录太少；</p>
<p>（2）数据重复且分布平均的字段（只有很少数据值的列）；</p>
<p>（3）经常插入、删除、修改的表要减少索引；</p>
<p>（4）text，image等类型不应该建立索引，这些列的数据量大（假如text前10个字符唯一，也可以对text前10个字符建立索引）；</p>
<p>（5）MySQL能估计出全表扫描比使用索引更快时，不使用索引；</p>
<h3 id="索引何时失效"><a href="#索引何时失效" class="headerlink" title="索引何时失效"></a>索引何时失效</h3><p>（1）组合索引未使用最左前缀，例如组合索引（A，B），where B=b不会使用索引；</p>
<p>（2）like未使用最左前缀，where A like ‘%China’；</p>
<p>（3）搜索一个索引而在另一个索引上做order by，where A=a order by B，只使用A上的索引，因为查询只使用一个索引 ；</p>
<p>（4）or会使索引失效。如果查询字段相同，也可以使用索引。例如where A=a1 or A=a2（生效），where A=a or B=b（失效）</p>
<p>（5）如果列类型是字符串，要使用引号。例如where A=’China’，否则索引失效（会进行类型转换）；</p>
<p>（6）在索引列上的操作，函数（upper()等）、or、！=(&lt;&gt;)、not in等；</p>
]]></content>
  </entry>
  <entry>
    <title>mysql 数据文件、数据结构</title>
    <url>/2017/20170815-1.html</url>
    <content><![CDATA[<h1 id="基础结构"><a href="#基础结构" class="headerlink" title="基础结构"></a>基础结构</h1><p><img src="https://raw.githubusercontent.com/uiste/uiste.github.io/master/images/doc/mysql-structure-1.png" alt></p>
<p>Connection:这一块其实主要是其他语言的连接，并不属于MySQL本身;主要是其他语言对于MySQL的连接操作的工具比如PHP中的:pdo，mysqli或者 Navicat for MySQL<br>SQL层:功能主要包括权限判断，SQL解析功能和查询缓存处理等。</p>
<ol>
<li>链接/线程处理:客户端通过 连接/线程层 来连接MySQL数据库，连接/线程层主要用来处理客户端的请求、身份验证和数据库安全性验证等。 </li>
<li>查询缓存和查询分析器是SQL层的核心部分，其中主要涉及查询的解析、优化、缓存、以及所有内置的函数，存储过程，触发器，视图等功能。 </li>
<li>优化器主要负责存储和获取所有存储在MySQL中的数据。</li>
</ol>
<h2 id="MySQL物理文件类型"><a href="#MySQL物理文件类型" class="headerlink" title="MySQL物理文件类型"></a>MySQL物理文件类型</h2><h3 id="日志文件主要包括"><a href="#日志文件主要包括" class="headerlink" title="日志文件主要包括:"></a>日志文件主要包括:</h3><ol>
<li>错误日志(ErrorLog)、</li>
<li>二进制日志(Binary Log)、</li>
<li>事务日志(InnoDB redo Log &amp; undo Log)、 </li>
<li>慢查询日志(Slow Query Log)、、</li>
<li>查询日志(Query Log)</li>
</ol>
<h3 id="数据库文件"><a href="#数据库文件" class="headerlink" title="数据库文件:"></a>数据库文件:</h3><ol>
<li>‘.frm’文件</li>
<li>‘.MYD’文件 myisam 数据文件</li>
<li>‘.MYI’文件 myisam 索引文件</li>
<li>‘.ibd’文件（独享）和’.ibdata’文件（共享） innodb 数据和索引存放</li>
</ol>
<blockquote>
</blockquote>
<h3 id="其他配置文件"><a href="#其他配置文件" class="headerlink" title="其他配置文件"></a>其他配置文件</h3><ol>
<li>系统配置文件(my.ini或者my.cnf) </li>
<li>pid,err文件</li>
<li>socket文件</li>
</ol>
<h2 id="错误日志"><a href="#错误日志" class="headerlink" title="错误日志"></a>错误日志</h2><p><code>show global variables like &#39;%log_error%&#39;;</code></p>
<h2 id="二进制日志"><a href="#二进制日志" class="headerlink" title="二进制日志"></a>二进制日志</h2><p><code>show global variables like &#39;%log_bin%&#39;</code>;`</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol>
<li>以二进制形式记录更改数据库的SQL语句(insert，update，delete，create，drop，alter等)。 </li>
<li>用于MySQL主从复制。</li>
<li>增量数据备份及恢复</li>
</ol>
<h2 id="事务日志-InnoDB"><a href="#事务日志-InnoDB" class="headerlink" title="事务日志(InnoDB)"></a>事务日志(InnoDB)</h2><p>查看存储引擎: show engines ;</p>
<p>InnoDB引擎在线Redo日志记录了InnoDB所做的所有物理变更和事务信息。通过Redo日志和Undo信息，InnoDB大大地加强了事务的安全性。InnDB在线Redo 日志默认存放在data命令下，可通过设置innodb_log_griyo_home_dir选项来更改日志文件存放位置，通过innodb_log_files_in_group选项来说何止日志的数量<br>使用事务日志，存储引擎在修改表的数据时只需要修改其内存拷贝，再把修改行为记录到持久在硬盘上的事务日志中，而不用每次都将修改的数据本身持久到磁 盘。事务日志采用追加的方式，因此写日志的操作是磁盘上一小块区域内的顺序I/O，而不像随机I/O需要在磁盘的多个地方移动磁头，所以采用事务日志的方式 相对来说要快得多。事务日志持久以后，内存中被修改的数据在后台可以慢慢的刷回到磁盘。目前大多数的存储引擎都是这样实现的。</p>
<h2 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h2><p>慢查询日志是值所有SQL执行的实际超过long_query_time变量的语句和达到min_examined_row_limit条举例的语句。用户可以针对这部分语句性能调 优。慢查询日志通过设置log-slow_queries[=file_name]选项开启后，将记录日志所在的路劲和名称。MySQL系统默认的慢查询日志的文件名是show.log，默认目 录是data目录。</p>
<p>命令:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查看long_query_time设置时间</span><br><span class="line">show global variables like &apos;%long%&apos;;</span><br><span class="line">-- 查看具体信息</span><br><span class="line">-- slow_query_log: off关闭状态 on开启状态</span><br><span class="line">-- slow_query_log_file 慢查询日志存放地点</span><br><span class="line">show variables like &quot;%slow%&quot; ;</span><br></pre></td></tr></table></figure></p>
<h1 id="mysql性能测试"><a href="#mysql性能测试" class="headerlink" title="mysql性能测试"></a>mysql性能测试</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show status</span><br><span class="line"></span><br><span class="line">show processlist</span><br><span class="line"></span><br><span class="line">show variables</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>mysql 锁机制、事务</title>
    <url>/2017/20170814-1.html</url>
    <content><![CDATA[<h1 id="锁机制"><a href="#锁机制" class="headerlink" title="锁机制"></a>锁机制</h1><h2 id="三大锁"><a href="#三大锁" class="headerlink" title="三大锁"></a>三大锁</h2><p>表锁、行锁、页锁</p>
<h2 id="锁类型。"><a href="#锁类型。" class="headerlink" title="锁类型。"></a>锁类型。</h2><ol>
<li>MyISAM 和 Memory 存储引擎使用的是表级锁,BDB 引擎使用的是页级锁，也支持表级锁。由于 BDB 引擎基本已经成为历史，因此就不再介绍了。</li>
<li>InnoDB 存储引擎既支持行级锁，也支持表级锁，默认情况下使用行级锁。</li>
<li>表级锁，它直接锁住的是一个表，开销小，加锁快，不会出现死锁的情况，锁定粒度大，发生锁冲突的概率更高，并发度最低。</li>
<li>行级锁，它直接锁住的是一条记录，开销大，加锁慢，发生锁冲突的概率较低，并发度很高。</li>
<li>页级锁，它是锁住的一个页面，在 InnoDB 中一个页面为16KB，它的开销介于表级锁和行级锁中间，也可能会出现死锁，锁定粒度也介于表级锁和行级 锁中间，并发度也介于表级锁和行级锁中间。</li>
<li>仅仅从锁的角度来说，表级锁更加适合于以查询为主的应用，只有少量按照索引条件更新数据的应用</li>
<li>行级锁更适合大量按照索引条件并发更新少量不同的数据，同时还有并发查询的应用</li>
</ol>
<h2 id="InnoDB有两种类型的行级锁，两种内部使用的意向锁"><a href="#InnoDB有两种类型的行级锁，两种内部使用的意向锁" class="headerlink" title="InnoDB有两种类型的行级锁，两种内部使用的意向锁;"></a>InnoDB有两种类型的行级锁，两种内部使用的意向锁;</h2><p>共享锁(S):允许一个事务读一行数据时，阻止其他的事务读取相同数据的排他锁。<br>排他锁(X):允许获得排他锁的事务更新数据，阻止其他事务取得相同数据的共享锁和排他锁。 意向共享锁(IS):事务打算给数据行加行共享锁。事务在给一个数据行加共享锁前必须先取得该表的IS锁。<br>意向排他锁(IX):事务打算给数据行加行排他锁。事务在给一个数据行加排他锁前必须先取得该表的IX锁。</p>
<blockquote>
<p>意向锁是InnoDB存储引擎自动加的，对于普通select语句，InnoDB不会加任何锁，对于insert，update，delete语句，InnoDB会自动改涉及的数据加排他锁，<br>InnoDB以通过以下语句显示添加的共享锁和排他锁。<br>共享锁语句<br><code>select * from table_name lock in share mode;</code><br>排他锁语句<br><code>select * from table_name for update;</code></p>
</blockquote>
<blockquote>
<p>加上共享锁的时候，排他锁就会等待</p>
</blockquote>
<blockquote>
<p>排它锁：锁住的这一条数据不能被别的锁而操作（读和写）<br>共享锁：锁住的这条数据可以被 共享锁操作（读）<br>都不会影响普通的查询</p>
</blockquote>
<blockquote>
<p>insert、update、delete 默认都会加上排它锁，普通查询不加锁</p>
</blockquote>
<h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><blockquote>
<p>死锁是由于两个或以上的线程互相持有对方需要的资源，导致这些线程处于等待状态，无法执行。<br>共享锁 只可读，不可写 与任和锁一起使用都不会冲突（除了排它锁）<br>排它锁 不可读也不可写 与任何锁一起使用时都会冲突</p>
</blockquote>
<h3 id="产生死锁的四个必要条件"><a href="#产生死锁的四个必要条件" class="headerlink" title="产生死锁的四个必要条件"></a>产生死锁的四个必要条件</h3><ol>
<li>互斥性：线程对资源的占有是排他性的，一个资源只能被一个线程占有，直到释放。</li>
<li>请求和保持条件：一个线程对请求被占有资源发生阻塞时，对已经获得的资源不释放。</li>
<li>不剥夺：一个线程在释放资源之前，其他的线程无法剥夺占用。</li>
<li>循环等待：发生死锁时，线程进入死循环，永久阻塞。</li>
</ol>
<h3 id="对于锁的建议"><a href="#对于锁的建议" class="headerlink" title="对于锁的建议"></a>对于锁的建议</h3><p>收集死锁信息:<br>利用命令 SHOW ENGINE INNODB STATUS查看死锁原因。<br>调试阶段开启 innodb_print_all_deadlocks，收集所有死锁日志。</p>
<p>减少死锁:<br>使用事务，不使用 lock tables 。<br>保证没有长事务。<br>操作完之后立即提交事务，特别是在交互式命令行中。<br>如果在用 (SELECT … FOR UPDATE or SELECT … LOCK IN SHARE MODE)，尝试降低隔离级别。 修改多个表或者多个行的时候，将修改的顺序保持一致。<br>创建索引，可以使创建的锁更少。<br>最好不要用 (SELECT … FOR UPDATE or SELECT … LOCK IN SHARE MODE)。</p>
<h2 id="InnoDB-行锁、表锁、innodb间隙锁"><a href="#InnoDB-行锁、表锁、innodb间隙锁" class="headerlink" title="InnoDB 行锁、表锁、innodb间隙锁"></a>InnoDB 行锁、表锁、innodb间隙锁</h2><p>InnoDB 行级锁是通过给索引上的索引项加锁来实现的，InnoDB行级锁只有通过索引条件检索数据，才使用行级锁;否则，InnoDB使用表锁 在不通过索引(主键)条件查询的时候，InnoDB是表锁而不是行锁。<br>在没有使用索引的情况下InnoDB就会使用表级锁(共享锁不会有这个情况)<br>如果查询的条件没有带索引，那么行锁则会转为表锁即时表中字段有主键;所以在查询的时候建议使用索引字段查询</p>
<p>innodb间隙锁<br>可以理解为是对于一定范围内的数据进行锁定，如果说这个区间没有这条数据的话也是会锁住的;主要是解决幻读的问题,如果没有添加间隙锁，如果其他事物中<br>添加id在1到100之间的某条记录，此时会发生幻读;另一方面，视为了满足其恢复和赋值的需求。</p>
<p>默认情况下，innodb_locks_unsafe_for_binlog是0(禁用)，这意味着启用了间隙锁定:InnoDB使用下一个键锁进行搜索和索引扫描。若要启用该变量，请将其设 置为1。</p>
<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="回滚日志"><a href="#回滚日志" class="headerlink" title="回滚日志"></a>回滚日志</h2><p>想要保证事务的原子性，就需要在异常发生时，对已经执行的操作进行回滚，而在 MySQL 中，恢复机制是通过回滚日志(undo log)实现的，所有事务进行的<br>修改都会先记录到这个回滚日志中，然后在对数据库中的对应行进行写入。</p>
<h2 id="重做日志"><a href="#重做日志" class="headerlink" title="重做日志"></a>重做日志</h2><p>与原子性一样，事务的持久性也是通过日志来实现的，MySQL 使用重做日志(redo log)实现事务的持久性，重做日志由两部分组成，一是内存中的重做日志缓冲区，因为重做日志缓冲区在内存中，所以它是易失的，另一个就是在磁盘上的重做日志文件，它是持久的。</p>
<blockquote>
<p>回滚日志(undo log)和重做日志(redo log);在数据库系统中，事务的原子性和持久性是由事务日志 (transaction log)保证的，在实现时也就是上面提到的两种日志，前者用于对事务的影响进行撤销，后者在错误处理时对已经提交的事务进行重做，它们能保 证两点:</p>
<ol>
<li>发生错误或者需要回滚的事务能够成功回滚(原子性);</li>
<li>在事务提交后，数据没来得及写会磁盘就宕机时，在下次重新启动后能够成功恢复数据(持久性);</li>
</ol>
</blockquote>
<h2 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h2><p>数据库事务的隔离级别有4种，由低到高分别为Read uncommitted 、Read committed 、Repeatable read 、Serializable</p>
<p>READ-UNCOMMITTED(读取未提交)： 最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。<br>READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。<br>REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。<br>SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th style="text-align:center">脏读</th>
<th style="text-align:center">不可重复读</th>
<th style="text-align:center">幻影读</th>
</tr>
</thead>
<tbody>
<tr>
<td>READ-UNCOMMITTED</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td>READ-COMMITTED</td>
<td style="text-align:center">×</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td>REPEATABLE-READ</td>
<td style="text-align:center">×</td>
<td style="text-align:center">×</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td>SERIALIZABLE</td>
<td style="text-align:center">×</td>
<td style="text-align:center">×</td>
<td style="text-align:center">×</td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%ios%'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 局部 @@session</span></span><br><span class="line"><span class="comment">-- 全局 @@global</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> @@session.tx_ioslation = <span class="string">'READ-COMMITTED'</span>;</span><br><span class="line"><span class="keyword">set</span> @@session.tx_ioslation = <span class="string">'REPEATABLE-READ'</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>脏读（一个事务读取到另一个事务未提交的数据）<br>不可重复读（一个事务读取到另一个事务已经提交的数据）<br>幻读（一个事务多次查询整表数据，由于其他事务新增（删除）记录造成多次查询的记录条数不同（一个事务读取到另一个事务已经提交的数据））</p>
</blockquote>
<blockquote>
<p>事务不会自动回滚。</p>
</blockquote>
<h2 id="对于事务的建议-innodb存储引擎由于实现了行几所，颗粒更小，实现更复杂。但是innodb行锁在并发性能上远远要高于表锁页锁。在使用方面可以尽量做到以下几点"><a href="#对于事务的建议-innodb存储引擎由于实现了行几所，颗粒更小，实现更复杂。但是innodb行锁在并发性能上远远要高于表锁页锁。在使用方面可以尽量做到以下几点" class="headerlink" title="对于事务的建议 innodb存储引擎由于实现了行几所，颗粒更小，实现更复杂。但是innodb行锁在并发性能上远远要高于表锁页锁。在使用方面可以尽量做到以下几点;"></a>对于事务的建议 innodb存储引擎由于实现了行几所，颗粒更小，实现更复杂。但是innodb行锁在并发性能上远远要高于表锁页锁。在使用方面可以尽量做到以下几点;</h2><ol>
<li>控制事务大小，减少锁定的资源量和锁定时间长度。</li>
<li>人所有的数据检索都通过索引来完成，从而避免因为无法通过索引加锁而升级为表锁。</li>
<li>减少基于范围的数据检索过滤条件，避免因为间隙锁带来的负面影响而锁定了不该锁定的数据。 </li>
<li>在业务条件允许下，尽量使用较低隔离级别的事务隔离。减少隔离级别带来的附加成本。</li>
<li>使用索引，让innodb在索引上面加锁的时候更加准确。</li>
<li>在应用中尽可能做到访问的顺序执行</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>mysql 视图、触发器、存储过程</title>
    <url>/2017/20170813-1.html</url>
    <content><![CDATA[<h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 视图</span></span><br><span class="line"><span class="comment">## 创建视图</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> test_view <span class="keyword">as</span> <span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span>,age <span class="keyword">from</span> tb_test <span class="keyword">where</span> <span class="keyword">status</span> = <span class="number">1</span> <span class="keyword">with</span> <span class="keyword">check</span> <span class="keyword">option</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 插入视图数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_view (<span class="keyword">name</span>,age,<span class="keyword">status</span>) <span class="keyword">values</span> (<span class="string">'uiste'</span>,<span class="number">18</span>,<span class="number">1</span>);</span><br><span class="line"><span class="comment">-- insert into test_view (name,age) values ('uiste',18)</span></span><br><span class="line"><span class="comment">-- 1369 - CHECK OPTION failed 'riskserve_test.test_view', Time: 0.009000s</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- insert into test_view (name,age,status) values ('uiste',18,1)</span></span><br><span class="line"><span class="comment">-- 1054 - Unknown column 'status' in 'field list', Time: 0.011000s</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 修改视图数据</span></span><br><span class="line"><span class="keyword">update</span> test_view <span class="keyword">set</span> age =<span class="number">19</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span>;</span><br><span class="line"><span class="comment">-- Affected rows: 1, Time: 0.022000s</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> test_view <span class="keyword">where</span> <span class="keyword">id</span> =<span class="number">1</span>;</span><br><span class="line"><span class="comment">-- Affected rows: 1, Time: 0.012000s</span></span><br><span class="line"><span class="comment">## 查询视图数据</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test_view;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 删除视图</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> test_view;</span><br><span class="line"><span class="comment">-- OK, Time: 0.006000s</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 查询视图结构</span></span><br><span class="line">desc view test_view;</span><br></pre></td></tr></table></figure>
<h2 id="视图应用-amp-好处"><a href="#视图应用-amp-好处" class="headerlink" title="视图应用&amp;好处"></a>视图应用&amp;好处</h2><blockquote>
<p>提高了重用性，就像一个函数<br>对数据库重构，却不影响程序的运行<br>提高了安全性能。可以对不同的用户<br>让数据更加清晰</p>
</blockquote>
<h2 id="视图不可编辑表数据的情况"><a href="#视图不可编辑表数据的情况" class="headerlink" title="视图不可编辑表数据的情况"></a>视图不可编辑表数据的情况</h2><ol>
<li>包含聚合函数、distinct、group by、having、union、union all</li>
<li>常量视图。</li>
<li>select包含子查询。</li>
<li>包含连接操作。</li>
<li>from 一个不能更新的视图。</li>
<li>where 子句的子查询引用了 from 子句中的表。</li>
</ol>
<h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create trigger [触发器名称] [触发器的执行时间] [执行的动作点] on [表名] for each row [函数 或者动作]</span><br><span class="line">触发器的执行时间 :before, after </span><br><span class="line">执行的动作点:insert, update, delete </span><br><span class="line">函数:begin end;</span><br><span class="line">或者动作:update ,insert</span><br><span class="line"></span><br><span class="line">触发器类似于框架事件</span><br></pre></td></tr></table></figure>
<h2 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 触发器</span></span><br><span class="line"><span class="comment">-- 触发器 类似于 框架 事件</span></span><br><span class="line"><span class="comment">-- create trigger [触发器名称] [触发器的执行时间] [执行的动作点] on [表名] for each row [函数 或者动作]</span></span><br><span class="line"><span class="comment">-- 触发器的执行时间 :before, after </span></span><br><span class="line"><span class="comment">-- 执行的动作点:insert, update, delete </span></span><br><span class="line"><span class="comment">-- 函数:begin sql end;</span></span><br><span class="line"><span class="comment">-- 或者动作:update ,insert</span></span><br><span class="line"><span class="comment">## 创建触发器</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`test_trigger`</span>;</span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> test_trigger </span><br><span class="line"><span class="keyword">before</span> <span class="keyword">insert</span></span><br><span class="line"><span class="keyword">on</span> tb_test </span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">set</span> new.created_at=<span class="keyword">unix_timestamp</span>(<span class="keyword">now</span>()),new.updated_at=<span class="keyword">unix_timestamp</span>(<span class="keyword">now</span>());</span><br><span class="line">	<span class="comment">-- 其它表操作可以使用SQL语句</span></span><br><span class="line">	<span class="comment">-- update tb_other set num=num+1,updated_at=unix_timestamp(now()) where id = NEW.id;</span></span><br><span class="line">	<span class="comment">-- 本表操作只能修改字段</span></span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line">$$</span><br><span class="line">DELIMITER;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test (<span class="string">`name`</span>,<span class="string">`age`</span>,<span class="string">`status`</span>) <span class="keyword">values</span> (<span class="string">'mandy'</span>,<span class="number">17</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询时create_at 、updated_at 自动生成数据</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_test;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>相对INSERT触发器中使用NEW关键字，UPDATE/DELETE触发器有OLD 和 NEW关键字.</p>
</blockquote>
<h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>存储过程和函数可以理解为一段 SQL 语句的集合，它们被事先编译好并且存储在数据库中</p>
<h2 id="创建一个存储过程的语法为"><a href="#创建一个存储过程的语法为" class="headerlink" title="创建一个存储过程的语法为:"></a>创建一个存储过程的语法为:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create procedure 存储过程名(参数列表) </span><br><span class="line">begin</span><br><span class="line">存储过程体</span><br><span class="line">end</span><br><span class="line">call 存储过程名(参数列表)</span><br><span class="line">如下简单存储过程</span><br><span class="line"></span><br><span class="line">DROP PROCEDURE IF EXISTS test_procedure;</span><br><span class="line">DELIMITER $$</span><br><span class="line">CREATE PROCEDURE test_procedure(in x int, out y varchar(32)) -- in 表示输入 </span><br><span class="line">BEGIN</span><br><span class="line">  -- declare y int default 0; -- 变量声明和赋默认值</span><br><span class="line">  select name into y from tb_test where id = x; -- 执行</span><br><span class="line">END</span><br><span class="line">$$</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line">call test_procedure(1, @a);</span><br><span class="line">select @a;</span><br></pre></td></tr></table></figure>
<h2 id="参数类型"><a href="#参数类型" class="headerlink" title="参数类型"></a>参数类型</h2><ol>
<li>从上面的过程中我们了解到存储过程有参数类型这种说法，它的类型可以取值有三个:in、out、inout。</li>
<li>其中它们的意义如下:<br>(1) in 表示只是用来输入。<br>(2) out 表示只是用来输出。<br>(3) inout 可以用来输入，也可以用作输出。</li>
</ol>
<h2 id="存储过程理解"><a href="#存储过程理解" class="headerlink" title="存储过程理解"></a>存储过程理解</h2><ol>
<li>调用存储过程与直接执行 SQL 语句的效果是相同的，但是存储过程的一个好处是处理逻辑都封装在数据库端。</li>
<li>当我们调用存储过程的时候，我们不需要了解其中的处理逻辑，一旦处理逻辑发生变化，只需要修改存储过程即可，对调用它的程 序完全无影响。 3. 调用存储过程和函数可以简化应用开发人员的很多工作，减少数据在数据库和应用服务器之间的传输，可以提高数据处理的效率<br>show create PROCEDURE user_procedure_out;<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2></li>
<li>存储过程中是可以使用变量的，我们可以通过 declare 来定义一个局部变量，该变量的作用域只是 begin….end 块中。</li>
<li>变量的定义必须写在符合语句的开头，并且在任何其他语句的前面。我们可以一次声明多个相同类型的变量，我们还可以使用default来赋予默认值。 3. 定义一个变量的语法为: declare 变量名 1 [,变量名 2…] 变量类型 [default 默认值]</li>
<li>上面的变量类型就是 MySQL 支持的类型，而变量名的取值规则也是一个老生常谈的话题了，就不赘述了。</li>
<li>变量可以直接赋值，还可以通过查询赋值。</li>
<li>直接赋值就是使用 set 来进行赋值，它的语法为: set 变量名 1 = 表达式 1 [,变量名 2=表达式 2…]</li>
<li>也可以通过查询来将结果赋值给变量，它需要要求查询返回的结果只有一行，语法范例: select 列名列表 into 变量列表 from 表名 其他语句;</li>
</ol>
<h2 id="存储过程中的数据类型"><a href="#存储过程中的数据类型" class="headerlink" title="存储过程中的数据类型"></a>存储过程中的数据类型</h2><ol>
<li>数值类型:Int,float,double,decimal </li>
<li>日期类型:timestamp,date,year</li>
<li>字符串:char,varchar,text<br>timestamp: 是使用最多的数据类型-》十位数的时间戳 text:一旦用到text类型的时候就可以考虑分表; 如果部分表的话，该字段的查询不会直接放在一起查 询，因为多个字段查询中其中如果有text字段的话，就容易遇到慢查询 所以通常的话，如果需要这个值的时候会根据id单独拿这个text字段</li>
</ol>
<h2 id="流程控制语句其他语法"><a href="#流程控制语句其他语法" class="headerlink" title="流程控制语句其他语法"></a>流程控制语句其他语法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if 的语法格式为:</span><br><span class="line">if 条件表达式 then 语句</span><br><span class="line">[elseif 条件表达式 then 语句] ....</span><br><span class="line">[else 语句] end if</span><br><span class="line">case 的语法格式 首先是第一种写法: case 表达式</span><br><span class="line">when 值 then 语句 when 值 then 语句 ...</span><br><span class="line">[else 语句]</span><br><span class="line">end case</span><br><span class="line">然后是第二种写法:</span><br><span class="line">case</span><br><span class="line">when 表达式 then 语句 when 表达式 then 语句 ....</span><br><span class="line">[else 语句]</span><br><span class="line">end case</span><br><span class="line">loop 循环 语法格式为: [标号:] loop</span><br><span class="line">循环语句 end loop [标号]</span><br><span class="line">while</span><br><span class="line">while a&gt;100 do</span><br><span class="line">循环语句</span><br><span class="line">End while</span><br><span class="line">Repeat //游标 SQL语句1</span><br><span class="line">UNTIL 条件表达式</span><br><span class="line">END Repeat;</span><br><span class="line">Loop SQL语句</span><br><span class="line">  所有的条件判断和跳出需要自己实现</span><br><span class="line">End loop</span><br><span class="line">leave 语句用来从标注的流程构造中退出，它通常和 begin...end 或循环一起使用 leave 标号;</span><br></pre></td></tr></table></figure>
<p>声明语句结束符，可以自定义: DELIMITER [符合]<br>delimiter $$<br>$$</p>
<h2 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h2><ol>
<li>游标也有的资料上称为光标。</li>
<li>我们可以在存储过程中使用游标来对结果集进行循环的处理。 </li>
<li>游标的使用步骤基本分为:声明、打开、取值、关闭。<br>语法:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DECLARE test_cursor CURSOR FOR 结果集; //声明游标</span><br><span class="line">OPEN test_cursor;</span><br><span class="line">fetch test_cursor into 变量名,</span><br><span class="line">CLOSE test_cursor;</span><br><span class="line">DECLARE CONTINUE HANDLER FOR NOT FOUND //结果集查询不到数据自动跳出</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>总结:</p>
<ol>
<li>游标的声明的语法: declare 游标名称 cursor for 查询语句;</li>
<li>打开光标的语法: open 游标名称;</li>
<li>获取游标数据: fetch 游标名称 into 变量名 1 [,变量名 2 ….]</li>
<li>关闭游标的语法: close 游标名称;</li>
<li>游标的基本使用须知:对某个表按照循环的处理，判断循环结束 的条件是捕获 not found 的条件，当 fetch 光标找不到下一条记录的 时候，就会关闭光标 然后退出过程。</li>
<li>可能有过 Pascal 编程经验的朋友们都会知道，声明的顺序也是很 重要的，在 SQL 中，我们使用 declare 定义的顺序是:变量、条件、 游标、应用程序<br>操作 查询出来的数据会放置于临时表中，然后再通过游标去读取数据。 案例</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line">create procedure exchange(out count int ) begin</span><br><span class="line">declare supply_id1 int default 0; </span><br><span class="line">declare amount1 int default 0;</span><br><span class="line">-- 游标标识</span><br><span class="line">declare blag int default 1;</span><br><span class="line">-- 游标</span><br><span class="line">declare order_cursor cursor for select supply_id,amount from order_group; -- not found 这个异常进行处理</span><br><span class="line">declare continue handler for not found set blag = 0;</span><br><span class="line">set count = 0;</span><br><span class="line">-- 打开游标</span><br><span class="line">open order_cursor;</span><br><span class="line">-- 遍历</span><br><span class="line">read_loop: LOOP</span><br><span class="line">fetch order_cursor into supply_id1,amount1; if blag = 0 then</span><br><span class="line">leave read_loop; end if;</span><br><span class="line">if supply_id1 = 1 then</span><br><span class="line">set count = count + amount1;</span><br><span class="line">end if;</span><br><span class="line">end loop read_loop;</span><br><span class="line">end;</span><br><span class="line">$$</span><br><span class="line">delimiter ;</span><br><span class="line">call exchange(@count); select @count;</span><br></pre></td></tr></table></figure>
<h2 id="存储过程优点"><a href="#存储过程优点" class="headerlink" title="存储过程优点"></a>存储过程优点</h2><ol>
<li>第一点优势就是执行速度快。因为我们的每个 SQL 语句都需要经 过编译，然后再运行，但是存储过程都是直接编译好了之后，直接 运行即可。</li>
<li>第二点优势就是减少网络流量。我们传输一个存储过程比我们传 输大量的 SQL 语句的开销要小得多。</li>
<li>第三点优势就是提高系统安全性。因为存储过程可以使用权限控 制，而且参数化的存储过程可以有效地防止 SQL 注入攻击。保证了 其安全性。</li>
<li>第四点优势就是耦合性降低。当我们的表结构发生了调整或变动 之后，我们可以修改相应的存储过程，我们的应用程序在一定程度 上需要改动的地方就较<br>小了。</li>
<li>第五点优势就是重用性强。因为我们写好一个存储过程之后，再 次调用它只需要一个名称即可，也就是”一次编写，随处调用”,而且 使用存储过程也可以让<br>程序的模块化加强。<br>//打开游标 //关闭游标</li>
</ol>
<h2 id="存储过程的缺点"><a href="#存储过程的缺点" class="headerlink" title="存储过程的缺点"></a>存储过程的缺点</h2><ol>
<li>第一个缺点就是移植性差。因为存储过程是和数据库绑定的，如 果我们要更换数据库之类的操作，可能很多地方需要改动。</li>
<li>第二个缺点就是修改不方便。因为对于存储过程而言，我们并不 能特别有效的调试，它的一些 bug 可能发现的更晚一些，增加了应 用的危险性。</li>
<li>第三个缺点就是优势不明显和赘余功能。对于小型 web 应用来说， 如果我们使用语句缓存，发现编译 SQL 的开销并不大，但是使用存 储过程却需要检查<br>权限一类的开销，这些赘余功能也会在一定程度 上拖累性能。</li>
</ol>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入更新利息 </span></span><br><span class="line">$sql = <span class="string">"CREATE PROCEDURE ADD_ACCOUNT_INTEREST_AND_RETURN_AMOUNT (IN accountId INT, IN dayInteresetRate decimal(10,10))  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">BEGIN</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">DECLARE originAmount decimal(28,14) DEFAULT 0;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">DECLARE afterUpdateAmount decimal(28,14) DEFAULT 0;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">DECLARE changeAmountValue decimal(28,14) DEFAULT 0;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">SELECT `amount` INTO originAmount FROM user_assets_account WHERE id=accountId;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">SET changeAmountValue = originAmount*dayInteresetRate;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">UPDATE user_assets_account SET `amount`=`amount`+changeAmountValue WHERE id=accountId;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">SELECT `amount` INTO afterUpdateAmount FROM user_assets_account WHERE id=accountId;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">SELECT originAmount,afterUpdateAmount,changeAmountValue;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">END;"</span>;</span><br><span class="line"><span class="keyword">return</span> Account::getDb()-&gt;createCommand($sql)-&gt;execute();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$db = Account::getDb();</span><br><span class="line">$transaction = $db-&gt;beginTransaction();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    $amountSql = <span class="string">"CALL ADD_ACCOUNT_INTEREST_AND_RETURN_AMOUNT(&#123;$toAccount-&gt;id&#125;,&#123;$dayInterestRate&#125;)"</span>;</span><br><span class="line">    $data = $db-&gt;createCommand($amountSql)-&gt;queryOne();</span><br><span class="line">    </span><br><span class="line">    TradeService::addInterestLog($interestAcoount, $toAccount, $data[<span class="string">'changeAmountValue'</span>], $data[<span class="string">'afterUpdateAmount'</span>]);</span><br><span class="line">    $transaction-&gt;commit();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (\<span class="keyword">Exception</span> $ex) &#123;</span><br><span class="line">    $transaction-&gt;rollBack();</span><br><span class="line">    <span class="keyword">throw</span> $ex;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>字符串的gzip压缩与解压的整理</title>
    <url>/2017/20170722-1.html</url>
    <content><![CDATA[<p>背景介绍<br>因为一直在处理restful API，给移动端提供的数据需要考虑流量问题，优先考虑就是压缩现有的字符串，然后再考虑业务逻辑方面的减少流量。鉴于找这些资料也花了不少时间，所以整理了这篇文章，留作纪念。<br>参考网址<br>PHP与C#的压缩与解压<br><a href="http://www.oschina.net/question/2265205_181108" target="_blank" rel="noopener">http://www.oschina.net/question/2265205_181108</a><br><a href="http://my.oschina.net/linland/blog/217769?fromerr=Kf9b6ElQ" target="_blank" rel="noopener">http://my.oschina.net/linland/blog/217769?fromerr=Kf9b6ElQ</a><br><a href="http://www.yiibai.com/sql/function.gzencode.html" target="_blank" rel="noopener">http://www.yiibai.com/sql/function.gzencode.html</a></p>
<p><a href="https://forums.xamarin.com/discussion/33607/using-system-io-compression-in-pcl" target="_blank" rel="noopener">https://forums.xamarin.com/discussion/33607/using-system-io-compression-in-pcl</a></p>
<p>=====================<br>python的压缩与解压</p>
<p><a href="http://outofmemory.cn/code-snippet/2030/Python-usage-gzip-pack-shujubao" target="_blank" rel="noopener">http://outofmemory.cn/code-snippet/2030/Python-usage-gzip-pack-shujubao</a><br><a href="http://www.cnblogs.com/mmix2009/p/3221371.html" target="_blank" rel="noopener">http://www.cnblogs.com/mmix2009/p/3221371.html</a></p>
<h1 id="http-blog-csdn-net-lxdcyh-article-details-4021476"><a href="#http-blog-csdn-net-lxdcyh-article-details-4021476" class="headerlink" title="http://blog.csdn.net/lxdcyh/article/details/4021476"></a><a href="http://blog.csdn.net/lxdcyh/article/details/4021476" target="_blank" rel="noopener">http://blog.csdn.net/lxdcyh/article/details/4021476</a></h1><p>javascript的压缩与解压<br><a href="http://stackoverflow.com/questions/14620769/decompress-gzip-and-zlib-string-in-javascript" target="_blank" rel="noopener">http://stackoverflow.com/questions/14620769/decompress-gzip-and-zlib-string-in-javascript</a><br><a href="http://nodeca.github.io/pako/" target="_blank" rel="noopener">http://nodeca.github.io/pako/</a></p>
<p>代码具体实现<br>PHP (&gt;=5.4)</p>
<p>[php] view plain copy<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$srcString=<span class="string">"1"</span>;  </span><br><span class="line">$srcCompress=base64_encode(gzencode($srcString,<span class="number">9</span>));  </span><br><span class="line"><span class="keyword">echo</span> strlen($srcCompress).<span class="string">'---压缩后字符串长度&lt;br/&gt;'</span>;  </span><br><span class="line">$newString=base64_decode($srcCompress);  </span><br><span class="line">$newString=gzdecode($newString);  </span><br><span class="line"><span class="keyword">echo</span> $newString.<span class="string">'----解压后原字符串&lt;br/&gt;'</span>;</span><br></pre></td></tr></table></figure></p>
<p>c#<br>(建议还是考虑各个平台的，PCL版本下的见前面的网址，但是没调试通过)</p>
<p>[csharp] view plain copy<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">using System.IO.Compression;  </span><br><span class="line">using System.Text;  </span><br><span class="line">public  string Compress (string text)  </span><br><span class="line">&#123;  </span><br><span class="line">byte[] buffer = Encoding.UTF8.GetBytes (text);  </span><br><span class="line">using (MemoryStream ms = new MemoryStream ()) &#123;  </span><br><span class="line">GZipStream Compress = new GZipStream (ms, CompressionMode.Compress);  </span><br><span class="line">  </span><br><span class="line">Compress.Write (buffer, 0, buffer.Length);  </span><br><span class="line">  </span><br><span class="line">Compress.Close ();  </span><br><span class="line">  </span><br><span class="line">return Convert.ToBase64String (ms.ToArray ());  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">public string Decompress (string text)  </span><br><span class="line">&#123;  </span><br><span class="line">byte[] buffer = Convert.FromBase64String (text);  </span><br><span class="line">using (MemoryStream tempMs = new MemoryStream ()) &#123;  </span><br><span class="line">using (MemoryStream ms = new MemoryStream (buffer)) &#123;  </span><br><span class="line">GZipStream Decompress = new GZipStream (ms, CompressionMode.Decompress);  </span><br><span class="line">  </span><br><span class="line">Decompress.CopyTo (tempMs);  </span><br><span class="line">  </span><br><span class="line">Decompress.Close ();  </span><br><span class="line">  </span><br><span class="line">return Encoding.UTF8.GetString (tempMs.ToArray ());  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>python<br>[python] view plain copy<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8  </span></span><br><span class="line"><span class="keyword">import</span> base64  </span><br><span class="line"><span class="keyword">import</span> StringIO,gzip  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zipData</span><span class="params">( content)</span>:</span>  </span><br><span class="line">    zbuf = StringIO.StringIO()  </span><br><span class="line">    zfile = gzip.GzipFile(mode=<span class="string">'wb'</span>, compresslevel=<span class="number">9</span>, fileobj=zbuf)  </span><br><span class="line">    zfile.write(content)  </span><br><span class="line">    zfile.close()  </span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(zbuf.getvalue())  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unzipData</span><span class="params">(content)</span>:</span>  </span><br><span class="line">    compresseddata=base64.b64decode(content)  </span><br><span class="line">    compressedstream = StringIO.StringIO(compresseddata)  </span><br><span class="line">    gzipper = gzip.GzipFile(fileobj=compressedstream)  </span><br><span class="line">    data = gzipper.read()  </span><br><span class="line">    <span class="keyword">return</span> data  </span><br><span class="line">s=zipData(<span class="string">"1"</span>)  </span><br><span class="line"><span class="keyword">print</span> s  </span><br><span class="line">s1=unzipData(s)  </span><br><span class="line"><span class="keyword">print</span> s1</span><br></pre></td></tr></table></figure></p>
<p>javascript<br>[html] view plain copy<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;  </span><br><span class="line">&lt;head&gt;  </span><br><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;  </span><br><span class="line">&lt;script src=<span class="string">"http://code.jquery.com/jquery-2.1.4.min.js"</span>&gt;&lt;/script&gt;  </span><br><span class="line">&lt;script src=<span class="string">"https://raw.githubusercontent.com/nodeca/pako/master/dist/pako.js"</span>&gt;&lt;/script&gt;  </span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gzip</span>(<span class="params">string</span>) </span>&#123;  </span><br><span class="line"><span class="keyword">var</span> charData    = string.split(<span class="string">''</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;<span class="keyword">return</span> x.charCodeAt(<span class="number">0</span>);&#125;);  </span><br><span class="line"><span class="keyword">var</span> binData     = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(charData);  </span><br><span class="line"><span class="keyword">var</span> data= pako.gzip(binData);  </span><br><span class="line"><span class="keyword">var</span> strData= <span class="built_in">String</span>.fromCharCode.apply(<span class="literal">null</span>, <span class="keyword">new</span> <span class="built_in">Uint16Array</span>(data));  </span><br><span class="line"><span class="keyword">return</span> btoa(strData);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ungzip</span>(<span class="params">string</span>)  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line"><span class="keyword">var</span> strData     = atob(string);  </span><br><span class="line"><span class="keyword">var</span> charData    = strData.split(<span class="string">''</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;<span class="keyword">return</span> x.charCodeAt(<span class="number">0</span>);&#125;);  </span><br><span class="line"><span class="keyword">var</span> binData     = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(charData);  </span><br><span class="line"><span class="keyword">var</span> data= pako.ungzip(binData);  </span><br><span class="line"><span class="keyword">var</span> strData= <span class="built_in">String</span>.fromCharCode.apply(<span class="literal">null</span>, <span class="keyword">new</span> <span class="built_in">Uint16Array</span>(data));  </span><br><span class="line"><span class="keyword">return</span> strData;  </span><br><span class="line">&#125;  </span><br><span class="line">test=<span class="string">"1"</span>;  </span><br><span class="line"><span class="keyword">var</span> s=gzip(test);  </span><br><span class="line">alert(s);  </span><br><span class="line">alert(ungzip(s));  </span><br><span class="line">&lt;<span class="regexp">/script&gt;  </span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;  </span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>关于file_get_contents(&quot;php://input&quot;)</title>
    <url>/2017/20170721-1.html</url>
    <content><![CDATA[<blockquote>
<p>“php://input allows you to read raw POST data. It is a less memory intensive alternative to $HTTP_RAW_POST_DATA and does not need any special php.ini directives. php://input is not available with enctype=”multipart/form-data”. </p>
</blockquote>
<p>翻译过来，是这样：<br>“php://input可以读取没有处理过的POST数据。相较于$HTTP_RAW_POST_DATA而言，它给内存带来的压力较小，并且不需要特殊的php.ini设置。php://input不能用于enctype=multipart/form-data”<br>找了一通资料，原来是这么回事：</p>
<p>1，Coentent-Type仅在取值为application/x-www-data-urlencoded和multipart/form-data两种情况下，</p>
<p>PHP才会将http请求数据包中相应的数据填入全局变量$_POST </p>
<p>2，PHP不能识别的Content-Type类型的时候，会将http请求包中相应的数据填入变量$HTTP_RAW_POST_DATA </p>
<p>3, 只有Coentent-Type不为multipart/form-data的时候，PHP不会将http请求数据包中的相应数据填入php://input，</p>
<p>否则其它情况都会。填入的长度，由Coentent-Length指定。 </p>
<p>4，只有Content-Type为application/x-www-data-urlencoded时，php://input数据才跟$_POST数据相一致。 </p>
<p>5，php://input数据总是跟$HTTP_RAW_POST_DATA相同，但是php://input比$HTTP_RAW_POST_DATA更凑效，</p>
<p>且不需要特殊设置php.ini </p>
<p>6，PHP会将PATH字段的query_path部分，填入全局变量$_GET。通常情况下，GET方法提交的http请求，body为空。</p>
<p>从官网信息来看，php://input是一个只读信息流，当请求方式是post的，并且enctype不等于”multipart/form-data”时，可以使用php://input来获取原始请求的数据。</p>
<p>看一个简单的例子。</p>
<p>客户端就是一个表单，非常简单。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"tom"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    age:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"22"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>将表单提交到服务端，服务端使用file_get_contents获取php://input内容</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$content = file_get_contents(<span class="string">"php://input"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $content; <span class="comment">//输出name=tom&amp;amp;age=22</span></span><br></pre></td></tr></table></figure>
<p>官网关于php://input的说明中，反复有提到$HTTP_RAW_POST_DATA这个变量，这个变量其实和file_get_contents(php://input)的内容是一样的。如果要开启这个变量，需要修改配置文件，找到always_populate_raw_post_data这个选项，设置为On，然后重新启动web服务器，就可以了。而使用php://input不需要修改php配置文件。</p>
<p>在项目应用中，如摄像头拍照，上传保存，就可以用到php://input。客户端拍照后，把图片流传送到服务端，服务端使用file_get_getcontents(‘php://input’)就能获取到图片流，然后把图片流保存到一个文件，这个文件就是图片了</p>
]]></content>
  </entry>
  <entry>
    <title>gitbook安装与使用</title>
    <url>/2017/20170719-1.html</url>
    <content><![CDATA[<h2 id="gitbook安装"><a href="#gitbook安装" class="headerlink" title="gitbook安装"></a>gitbook安装</h2><ol>
<li>安装npm<br>从网站 <a href="https://nodejs.org/#download" target="_blank" rel="noopener">https://nodejs.org/#download</a> 下载node.js源代码（点击绿色的INSTALL），<br>解压<br>./configure<br>make<br>make install<br>成功执行后，npm就被安装好了。</li>
</ol>
<ol start="2">
<li>gitbook 安装<br><code>npm install -g gitbook-cli</code><br><code>gitbook -V</code><br>查看gitbook是否安装成功。</li>
</ol>
<h2 id="gitbook使用"><a href="#gitbook使用" class="headerlink" title="gitbook使用"></a>gitbook使用</h2><ol>
<li>根据目录生成图书结构 </li>
</ol>
<p>1.1 README.md 与 SUMMARY编写<br>README.md<br>这个文件相当于一本Gitbook的简介。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkdir test_gitbook</span><br><span class="line">$ touch README.md</span><br></pre></td></tr></table></figure></p>
<p>SUMMARY.md<br>这个文件是一本书的目录结构，使用Markdown语法，<br>如我们这本书的SUMMARY.md：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ touch SUMMARY.md</span><br><span class="line">$ vim SUMMARY.md</span><br></pre></td></tr></table></figure></p>
<p>输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* [简介](README.md)</span><br><span class="line">* [第一章](chapter1/README.md)</span><br><span class="line"> - [第一节](chapter1/section1.md)</span><br><span class="line"> - [第二节](chapter1/section2.md)</span><br><span class="line">* [第二章](chapter2/README.md)</span><br><span class="line"> - [第一节](chapter2/section1.md)</span><br><span class="line"> - [第二节](chapter2/section2.md)</span><br><span class="line">* [结束](end/README.md)</span><br></pre></td></tr></table></figure>
<p>1.2 生成图书结构<br>当这个目录文件创建好之后，我们可以使用Gitbook<br>的命令行工具将这个目录结构生成相应的目录及文件：<br>$ gitbook init<br>$ tree . #查看建立的目录和文件<br>.<br>├── chapter1<br>│   ├── README.md<br>│   ├── section1.md<br>│   └── section2.md<br>├── chapter2<br>│   ├── README.md<br>│   ├── section1.md<br>│   └── section2.md<br>├── end<br>│   └── README.md<br>├── README.md<br>└── SUMMARY.md</p>
<p>我们可以看到，gitbook给我们生成了与SUMMARY.md所<br>对应的目录及文件。</p>
<p>每个目录中，都有一个README.md文件，相当于一章的说明。</p>
<ol start="2">
<li>生成图书</li>
</ol>
<p>2.1 输出为静态网站<br>你有两种方式输出一个静态网站：<br>2.1.1 本地预览时自动生成<br>当你在自己的电脑上编辑好图书之后，你可以使用Gitbook<br>的命令行进行本地预览：</p>
<p><code>$ gitbook serve</code></p>
<p>然后浏览器中输入 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 就可以预览生<br>成的以网页形式组织的书籍。<br>这里你会发现，你在你的图书项目的目录中多了一个名为<br>_book的文件目录，而这个目录中的文件，即是生成的静态<br>网站内容。<br>使用build参数生成到指定目录<br>与直接预览生成的静态网站文件不一样的是，使用这个命令，<br>你可以将内容输入到你所想要的目录中去：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkdir /tmp/gitbook</span><br><span class="line">$ gitbook build --output=/tmp/gitbook</span><br></pre></td></tr></table></figure></p>
<p>2.2 输出PDF<br>输入为PDF文件，需要先使用NPM安装上gitbook pdf：<br><code>$ sudo npm install gitbook-pdf -g</code><br>我在执行上面这条命令的时候出现了下面的错误：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">***************************************************</span><br><span class="line">Downloading http://cdn.bitbucket.org/ariya/phantomjs/downloads/phantomjs-1.9.7-linux-i686.tar.bz2</span><br><span class="line">Saving to /usr/local/lib/node_modules/gitbook-pdf/node_modules/phantomjs/phantomjs/phantomjs-1.9.7-linux-i686.tar.bz2</span><br><span class="line">Error: connect ETIMEDOUT</span><br><span class="line">    at exports._errnoException (util.js:746:11)</span><br><span class="line">    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1010:19)</span><br><span class="line">npm ERR! Linux 3.2.0-4-686-pae</span><br><span class="line">npm ERR! argv &quot;/usr/local/bin/node&quot; &quot;/usr/local/bin/npm&quot; &quot;install&quot; &quot;gitbook-pdf&quot; &quot;-g&quot;</span><br><span class="line">npm ERR! node v0.12.7</span><br><span class="line">npm ERR! npm  v2.11.3</span><br><span class="line">npm ERR! code ELIFECYCLE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">npm ERR! phantomjs@1.9.7-5 install: `node install.js`</span><br><span class="line">npm ERR! Exit status 1</span><br><span class="line">npm ERR! </span><br><span class="line">npm ERR! Failed at the phantomjs@1.9.7-5 install script &apos;node install.js&apos;.</span><br><span class="line">npm ERR! This is most likely a problem with the phantomjs package,</span><br><span class="line">npm ERR! not with npm itself.</span><br><span class="line">npm ERR! Tell the author that this fails on your system:</span><br><span class="line">npm ERR!     node install.js</span><br><span class="line">npm ERR! You can get their info via:</span><br><span class="line">npm ERR!     npm owner ls phantomjs</span><br><span class="line">npm ERR! There is likely additional logging output above.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">npm ERR! Please include the following file with any support request:</span><br><span class="line">npm ERR!     /home/wangxq/repository/phantomjs/npm-debug.log</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">***************************************************</span><br></pre></td></tr></table></figure></p>
<p>由错误报告内容的第一行可以知道，发生错误的原因是下载<br>phantomjs发生了错误，因此我们需要手动下载和安装。</p>
<p>解决方法：[1]<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone git://github.com/ariya/phantomjs.git</span><br><span class="line">$ sudo apt-get install build-essential g++ flex bison gperf ruby perl \</span><br><span class="line">  libsqlite3-dev libfontconfig1-dev libicu-dev libfreetype6 libssl-dev \</span><br><span class="line">  libpng-dev libjpeg-dev python libx11-dev libxext-dev       #安装编译需要的工具和依赖</span><br><span class="line">$ cd phantomjs</span><br><span class="line">$ git checkout 1.9.7  #注意：这里的1.9.7是phantom的版本号，可以由错误报告的第一行找出 </span><br><span class="line">$ ./build.sh --jobs 4</span><br><span class="line">$ sudo cp bin/phantomjs /bin/</span><br><span class="line">$ sudo npm install gitbook-pdf -g  #重新进行安装</span><br></pre></td></tr></table></figure></p>
<p>然后，使用下面的命令，要PDF文件，首先安装依赖库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install calibre  </span><br><span class="line">$ gitbook -v 2.1.0 pdf</span><br></pre></td></tr></table></figure>
<p>发生错误：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*****************************************************</span><br><span class="line">info: start conversion to pdf ....ERROR</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Error: Command failed: /bin/sh -c ebook-convert /tmp/tmp-29384ctltwbk/SUMMARY.html /tmp/tmp-29384ctltwbk/index.pdf --title=&quot;&quot; --comments=&quot;这本书是gitbook的一个例子&quot; --language=&quot;en&quot; --book-producer=&quot;GitBook&quot; --publisher=&quot;GitBook&quot; --chapter=&quot;descendant-or-self::*[contains(concat(&apos; &apos;, normalize-space(@class), &apos; &apos;), &apos; book-chapter &apos;)]&quot; --chapter-mark=&quot;pagebreak&quot; --page-breaks-before=&quot;/&quot; --level1-toc=&quot;descendant-or-self::*[contains(concat(&apos; &apos;, normalize-space(@class), &apos; &apos;), &apos; book-chapter-1 &apos;)]&quot; --level2-toc=&quot;descendant-or-self::*[contains(concat(&apos; &apos;, normalize-space(@class), &apos; &apos;), &apos; book-chapter-2 &apos;)]&quot; --level3-toc=&quot;descendant-or-self::*[contains(concat(&apos; &apos;, normalize-space(@class), &apos; &apos;), &apos; book-chapter-3 &apos;)]&quot; --no-chapters-in-toc --max-levels=&quot;1&quot; --breadth-first --margin-left=&quot;62&quot; --margin-right=&quot;62&quot; --margin-top=&quot;56&quot; --margin-bottom=&quot;56&quot; --pdf-default-font-size=&quot;12&quot; --pdf-mono-font-size=&quot;12&quot; --paper-size=&quot;a4&quot; --pdf-header-template=&quot;&lt;p class=&apos;header&apos;&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&quot; --pdf-footer-template=&quot;&lt;p class=&apos;footer&apos;&gt;&lt;span&gt;_SECTION_&lt;/span&gt; &lt;span style=&apos;float:right;&apos;&gt;_PAGENUM_&lt;/span&gt;&lt;/p&gt;&quot;</span><br><span class="line">Usage: ebook-convert input_file output_file [options]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Convert an ebook from one format to another.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input_file is the input and output_file is the output. Both must be specified as the first two arguments to the command.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">The output ebook format is guessed from the file extension of output_file. output_file can also be of the special format .EXT where EXT is the output file extension. In this case, the name of the output file is derived the name of the input file. Note that the filenames must not start with a hyphen. Finally, if output_file has no extension, then it is treated as a directory and an &quot;open ebook&quot; (OEB) consisting of HTML files is written to that directory. These files are the files that would normally have been passed to the output plugin.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">After specifying the input and output file you can customize the conversion by specifying various options. The available options depend on the input and output file types. To get help on them specify the input and output file and then use the -h option.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">For full documentation of the conversion system see</span><br><span class="line">http://manual.calibre-ebook.com/conversion.html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Whenever you pass arguments to ebook-convert that have spaces in them, enclose the arguments in quotation marks.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ebook-convert: error: no such option: --pdf-default-font-size</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*****************************************************</span><br></pre></td></tr></table></figure></p>
<p>解决方法[2]<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo -v &amp;&amp; wget -nv -O- https://raw.githubusercontent.com/kovidgoyal/calibre/master/setup/linux-installer.py | sudo python -c &quot;import sys; main=lambda:sys.stderr.write(&apos;Download failed\n&apos;); exec(sys.stdin.read()); main()&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ gitbook -v 2.1.0 pdf .  # 重新执行命令生成pdf，目标文件为book.pdf</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><code>https://github.com/zhangjikai/gitbook-use/</code></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>绊脚石</title>
    <url>/2017/20170410-1.html</url>
    <content><![CDATA[<p>今天发布了这样一条朋友圈：</p>
<blockquote>
<p>有时候，一些不是特别良好的状态产生时，都会有一种体验特别不舒服的忧虑感。大多数这种情况的产生最终还是会产生正面的结果。因为在敢于承担的过程，在问题解决以后会觉得某些地方有些提升。所以今天的忧虑都是靠这个说服自己。</p>
</blockquote>
<p><img src="http://resoure.uiste.com/%E5%9F%BA%E6%9C%AC%E4%B8%8A%E6%98%AF%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E6%83%85%E5%86%B5.png" alt="基本上是这样一个情况  "><br>这段话引起了朋友进一步追问的兴趣，我凯凯而回，说只是装X的东西。自己又想表达的一个观点是，老罗说他创业五年很多失败的经历是成长过程宝贵的财富。自己有意去挖掘一些这样的失败案例。到不为自己所为的成功，但却有成长的必要。</p>
<p>想到这里，突然想到，学生时代看过的一些求职面试宝典，说面试官可能会问你之前的工作生活中，遇到的最大的空难是什么，你是如何解决的。虽然，以后可能找工作的次数不会太多。但好像此刻对这个问题，有了比较豁然的想法：又要重复那段话了。战胜的最大困难，就是心理斗争的过程，多数的时候由于不好的状态产生时，这种心理上的阴影是最大困难的产生，我有及其良好的态度能说服自己承担下来，战胜它。最后会凯凯而笑，自己又成长了。</p>
<p>这样的素材，希望能够不断的积累，可能有这些，会让自己的人生道路变得充实一些吧。</p>
<p>说了好多也都在总结一些空话。素材只做点录：渠道产品逻辑调整，解决终极问题，虽有风险顾虑，却有勇气坚持自己的观点。</p>
]]></content>
  </entry>
  <entry>
    <title>vagrant打造开发环境</title>
    <url>/2017/20170405-1.html</url>
    <content><![CDATA[<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VirtualBox 5.1.8</span><br><span class="line">下载地址 https://www.virtualbox.org/wiki/Download_Old_Builds_5_1</span><br><span class="line">Vagrant 1.8.6</span><br><span class="line"></span><br><span class="line">下载地址：https://releases.hashicorp.com/vagrant/1.8.6/</span><br><span class="line">切记根据自己的操作系统下载，同时分32位和64位</span><br></pre></td></tr></table></figure>
<h2 id="vagrant常用命令"><a href="#vagrant常用命令" class="headerlink" title="vagrant常用命令"></a>vagrant常用命令</h2><ul>
<li><p>查看vagrant list<br><code>uiste:box uiste$ vagrant box list</code></p>
</li>
<li><p>添加vagrant box<br><code>uiste:box uiste$ vagrant box add ubuntu1404 ubuntu1404.box</code></p>
</li>
<li><p>添加虚拟机</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uiste:local_lamp_dev uiste$ pwd</span><br><span class="line">/Users/uiste/vagrant/local_lamp_dev</span><br><span class="line">uiste:local_lamp_dev uiste$ vagrant init ubuntu1404</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动虚拟机<br><code>uiste:local_lamp_dev uiste$ vagrant up</code></p>
</li>
<li><p>取得链接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uiste:local_lamp_dev uiste$ vagrant ssh</span><br><span class="line">vagrant@vagrant-ubuntu-trusty-64:~$</span><br></pre></td></tr></table></figure>
</li>
<li><p>退出、挂起虚拟机</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vagrant@vagrant-ubuntu-trusty-64:~$ exit</span><br><span class="line">logout</span><br><span class="line">Connection to 127.0.0.1 closed.</span><br><span class="line">uiste:local_lamp_dev uiste$ vagrant suspend</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启虚拟机</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uiste:local_lamp_dev uiste$ vagrant reload</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="对虚拟机进行优化"><a href="#对虚拟机进行优化" class="headerlink" title="对虚拟机进行优化"></a>对虚拟机进行优化</h2><ul>
<li>替换源<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak #备份</span><br><span class="line">vagrant@vagrant-ubuntu-trusty-64:~$ sudo vim /etc/apt/sources.list #修改源</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">vagrant@vagrant-ubuntu-trusty-64:~$ sudo apt-get update #更新列表</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="L-A-N-MP软件安装"><a href="#L-A-N-MP软件安装" class="headerlink" title="L(A|N)MP软件安装"></a>L(A|N)MP软件安装</h2><ul>
<li><p>安装nginx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vagrant@vagrant-ubuntu-trusty-64:~$ sudo apt-get install nginx -y</span><br><span class="line">// 安装成功测试</span><br><span class="line">vagrant@vagrant-ubuntu-trusty-64:~$ nginx -v</span><br><span class="line">nginx version: nginx/1.4.6 (Ubuntu)</span><br><span class="line">vagrant@vagrant-ubuntu-trusty-64:~$ curl -I &apos;http://127.0.0.1&apos;</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.4.6 (Ubuntu)</span><br><span class="line">Date: Tue, 04 Apr 2017 17:17:02 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 612</span><br><span class="line">Last-Modified: Tue, 04 Mar 2014 11:46:45 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: &quot;5315bd25-264&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装Apache</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vagrant@vagrant-ubuntu-trusty-64:~$ sudo apt-get install apache2 -y</span><br><span class="line">// 安装成功测试</span><br><span class="line">vagrant@vagrant-ubuntu-trusty-64:~$ apache2 -v</span><br><span class="line">Server version: Apache/2.4.7 (Ubuntu)</span><br><span class="line">// nginx 服务停止</span><br><span class="line">vagrant@vagrant-ubuntu-trusty-64:~$ sudo /etc/init.d/nginx stop</span><br><span class="line">// 启动 apache2 服务</span><br><span class="line">vagrant@vagrant-ubuntu-trusty-64:~$ sudo /etc/init.d/apache2 start</span><br><span class="line"> * Starting web server apache2                                                  AH00558: apache2: Could not reliably determine the server&apos;s fully qualified domain name, using 10.0.2.15. Set the &apos;ServerName&apos; directive globally to suppress this message</span><br><span class="line"> *</span><br><span class="line"> vagrant@vagrant-ubuntu-trusty-64:~$ curl -I &apos;http://127.0.0.1&apos;</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Tue, 04 Apr 2017 17:24:09 GMT</span><br><span class="line">Server: Apache/2.4.7 (Ubuntu)</span><br><span class="line">Last-Modified: Tue, 04 Apr 2017 17:18:42 GMT</span><br><span class="line">ETag: &quot;2cf6-54c5a77b221fa&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: 11510</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">Content-Type: text/html</span><br><span class="line">#端口修改-Apache</span><br><span class="line">vagrant@vagrant-ubuntu-trusty-64:~$ sudo vim  /etc/apache2/ports.conf</span><br><span class="line">Listen 8888</span><br><span class="line">vagrant@vagrant-ubuntu-trusty-64:~$ sudo /etc/init.d/apache2 restart</span><br><span class="line">#端口修改-Nginx</span><br><span class="line">#修改成9000端口 ，默认sock模式</span><br><span class="line">cd /etc/php5/fpm/pool.d</span><br><span class="line">sudo vim www.conf # search listen = 127.0.0.1:9000</span><br><span class="line">sudo /etc/init.d/php5-fpm restart</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装MySQL软件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#服务器端</span><br><span class="line">vagrant@vagrant-ubuntu-trusty-64:~$ sudo apt-get install mysql-server</span><br><span class="line">安装期间会提示输入为mysql设置root密码，我这边不操作，直接enter 不设置密码</span><br><span class="line">#客户端</span><br><span class="line">vagrant@vagrant-ubuntu-trusty-64:~$ sudo apt-get install mysql-client</span><br><span class="line">#测试连接库，上面安装服务端没有设置密码，这里直接enter进入</span><br><span class="line">vagrant@vagrant-ubuntu-trusty-64:~$ mysql -uroot -p</span><br><span class="line">Enter password:</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装PHP</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#安装php</span><br><span class="line">vagrant@vagrant-ubuntu-trusty-64:~$ sudo apt-get install php5-cli -y</span><br><span class="line">#安装成功测试</span><br><span class="line">vagrant@vagrant-ubuntu-trusty-64:~$ php -v</span><br><span class="line">PHP 5.5.9-1ubuntu4.21 (cli) (built: Feb  9 2017 20:54:58)</span><br><span class="line">#安装php扩展</span><br><span class="line">vagrant@vagrant-ubuntu-trusty-64:~$ sudo apt-get install php5-mcrypt php5-mysql php5-gd -y</span><br><span class="line">#支持apache2的php模块</span><br><span class="line">vagrant@vagrant-ubuntu-trusty-64:~$ sudo apt-get install libapache2-mod-php5</span><br><span class="line">#支持nginx fastcgi 启动php</span><br><span class="line">vagrant@vagrant-ubuntu-trusty-64:~$ sudo apt-get install php5-cgi php5-fpm</span><br><span class="line">#开发Apache文件.htaccess重写功能</span><br><span class="line">vagrant@vagrant-ubuntu-trusty-64:/$ sudo a2enmod rewrite</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装git</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vagrant@vagrant-ubuntu-trusty-64:/home/www/code$ sudo apt-get install git -y</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Vagrant高级配置"><a href="#Vagrant高级配置" class="headerlink" title="Vagrant高级配置"></a>Vagrant高级配置</h2><ul>
<li><p>端口转发</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">配置</span><br><span class="line"></span><br><span class="line"> config.vm.network &quot;forwarded_port&quot;, guest: 80, host: 8888 </span><br><span class="line"> config.vm.network &quot;forwarded_port&quot;, guest: 8888, host: 8889</span><br><span class="line">测试效果</span><br><span class="line"></span><br><span class="line">http://127.0.0.1:8888/</span><br><span class="line">http://127.0.0.1:8889/</span><br></pre></td></tr></table></figure>
</li>
<li><p>网络设置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">配置</span><br><span class="line"></span><br><span class="line">config.vm.network &quot;private_network&quot;, ip: &quot;192.168.199.101&quot;</span><br><span class="line">效果</span><br><span class="line"></span><br><span class="line">http://192.168.199.101/ 或者 http://192.168.199.101:80/</span><br><span class="line">http://192.168.199.101:8888/</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>*共享目录<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">配置</span><br><span class="line"></span><br><span class="line">config.vm.synced_folder &quot;/Users/uiste/www/code/&quot;, &quot;/home/www&quot;</span><br></pre></td></tr></table></figure></p>
<h2 id="框架配置"><a href="#框架配置" class="headerlink" title="框架配置"></a>框架配置</h2><h3 id="tp5"><a href="#tp5" class="headerlink" title="tp5"></a>tp5</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/top-think/think tp5</span><br><span class="line">然后切换到tp5目录下面，再克隆核心框架仓库：cd tp5 &amp;&amp; git clone https://github.com/top-think/framework thinkphp</span><br><span class="line">nginx 配置</span><br><span class="line">server &#123;</span><br><span class="line">        server_name tp5.code.com;</span><br><span class="line">        root  /home/www/code/tp5/public;</span><br><span class="line">        index  index.php index.html;</span><br><span class="line">        location / &#123;</span><br><span class="line">            if ( -f $request_filename) &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if ( !-e $request_filename) &#123;</span><br><span class="line">                rewrite ^/(.*)$ /index.php/$1 last;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ \.php &#123;</span><br><span class="line">            set $script $uri;</span><br><span class="line">            set $path_info &quot;&quot;;</span><br><span class="line">            if ($uri ~ &quot;^(.+\.php)(/.+)&quot;) &#123;</span><br><span class="line">                set $script $1;</span><br><span class="line">                set $path_info $2;</span><br><span class="line">            &#125;</span><br><span class="line">            include   fastcgi_params;</span><br><span class="line">            fastcgi_index    index.php?IF_REWRITE=1;</span><br><span class="line">            fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">            fastcgi_param    PATH_INFO    $path_info;</span><br><span class="line">            fastcgi_param    SCRIPT_FILENAME    $document_root$fastcgi_script_name;</span><br><span class="line">            fastcgi_param    SCRIPT_NAME    $script;</span><br><span class="line">            try_files $uri =404;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">针对fasecgi要配置下php-fpm</span><br><span class="line">vim /etc/php5/fpm/pool.d/www.conf</span><br><span class="line">;listen = /var/run/php5-fpm.sock</span><br><span class="line">listen = 127.0.0.1:9000</span><br><span class="line">无法查看日志 sudo chmod -R 755 /var/log/nginx</span><br><span class="line">apache 配置</span><br><span class="line">    &lt;VirtualHost *:8888&gt;</span><br><span class="line">    	ServerName tp5.imooc.test</span><br><span class="line">    	DocumentRoot /home/www/code/tp5/public/</span><br><span class="line">    	ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log</span><br><span class="line">    	CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined</span><br><span class="line">    &lt;/VirtualHost&gt;</span><br><span class="line">无法查看日志sudo chmod -R 755 /var/log/apache2</span><br><span class="line">Forbidden解决办法</span><br><span class="line">cd /etc/apache2</span><br><span class="line">sudo vim apache2.conf &lt;Directory /&gt; Options FollowSymLinks AllowOverride None #修改成AllowOverride ALL 打开rewrite #Require all denied #把这行屏蔽掉，拒绝一切链接 &lt;/Directory&gt;</span><br><span class="line">测试效果</span><br><span class="line">http://tp5.code.com 或者 http://tp5.code.com:8888</span><br><span class="line">做个测试页面 http://tp5.code.com/index/index/test 或者 http://tp5.code.com:8000/index/index/test</span><br></pre></td></tr></table></figure>
<h3 id="yii2"><a href="#yii2" class="headerlink" title="yii2"></a>yii2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下载：github.com/yiisoft/yii2/releases/download/2.0.10/yii-basic-app-2.0.10.tgz</span><br><span class="line">nginx 配置</span><br><span class="line">server &#123;</span><br><span class="line">        charset utf-8;</span><br><span class="line">        client_max_body_size 128M;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name yii.code.com;</span><br><span class="line"></span><br><span class="line">        root  /home/www/code/yii2/web;</span><br><span class="line">        index  index.php;</span><br><span class="line"></span><br><span class="line">        location ~* \.(eot|otf|ttf|woff)$ &#123;</span><br><span class="line">            add_header Access-Control-Allow-Origin *;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            try_files $uri $uri/ /index.php?$args;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">            include   fastcgi_params;</span><br><span class="line">            fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">            try_files $uri =404;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">apache 配置</span><br><span class="line">    &lt;VirtualHost *:8888&gt;</span><br><span class="line">    	ServerName yii.code.com</span><br><span class="line">    	DocumentRoot /home/www/code/yii2/web</span><br><span class="line">    	#&lt;Directory &quot;/home/www/code/yii2/web&quot;&gt;</span><br><span class="line">            #RewriteEngine on</span><br><span class="line">    	    #RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">    	    #RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">    	    #RewriteRule . index.php</span><br><span class="line">    	#&lt;/Directory&gt;</span><br><span class="line">    	ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log</span><br><span class="line">    	CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined</span><br><span class="line">    &lt;/VirtualHost&gt;</span><br><span class="line">测试效果 * http://yii.code.com 或者 http://yii.code.com:8888 * 做个测试页面 http://yii.code.com/site/test 或者 http://yii.code.com:8000/site/test</span><br><span class="line">问题</span><br><span class="line">runtime/logs&quot;: mkdir(): Permission denied</span><br><span class="line">权限不够 chmod -R 777 runtime (如果在虚拟机不能修改文件权限，请使用nfs共享目录)</span><br><span class="line">yii\web\Request::cookieValidationKey must be configured with a secret key.</span><br><span class="line">config/web.php cookieValidationKey 赋值</span><br><span class="line">如果打不开 site/test ，请修改config/web.php 中urlManager 注释打开</span><br><span class="line">&apos;db&apos; =&gt; require(__DIR__ . &apos;/db.php&apos;),</span><br><span class="line">&apos;urlManager&apos; =&gt; [</span><br><span class="line">    &apos;enablePrettyUrl&apos; =&gt; true,</span><br><span class="line">    &apos;showScriptName&apos;  =&gt; false,</span><br><span class="line">    &apos;rules&apos; =&gt; [</span><br><span class="line">    ],</span><br><span class="line">],</span><br><span class="line">yii2/web/.htaccess</span><br><span class="line">RewriteEngine on</span><br><span class="line">#If a directory or a file exists, use it directly</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">#Otherwise forward it to index.php</span><br><span class="line">RewriteRule . index.php</span><br></pre></td></tr></table></figure>
<h3 id="laravel5"><a href="#laravel5" class="headerlink" title="laravel5"></a>laravel5</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下载： down.golaravel.com/laravel/laravel-v5.1.11.zip</span><br><span class="line">nginx 配置</span><br><span class="line">server &#123;</span><br><span class="line">        charset utf-8;</span><br><span class="line">        client_max_body_size 128M;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name laravel.code.com;</span><br><span class="line"></span><br><span class="line">        root  /home/www/code/laravel/public;</span><br><span class="line">        index  index.php;</span><br><span class="line"></span><br><span class="line">        location ~* \.(eot|otf|ttf|woff)$ &#123;</span><br><span class="line">            add_header Access-Control-Allow-Origin *;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            try_files $uri $uri/ /index.php?$args;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">            include   fastcgi_params;</span><br><span class="line">            fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">            try_files $uri =404;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">apache 配置</span><br><span class="line">    &lt;VirtualHost *:8888&gt;</span><br><span class="line">    	ServerName laravel.code.com</span><br><span class="line">    	DocumentRoot /home/www/code/laravel/public/</span><br><span class="line">    	ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log</span><br><span class="line">    	CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined</span><br><span class="line">    &lt;/VirtualHost&gt;</span><br><span class="line">测试效果</span><br><span class="line">http://laravel.code.com 或者 http://laravel.code.com:8888</span><br></pre></td></tr></table></figure>
<h2 id="vagrant虚拟机配置"><a href="#vagrant虚拟机配置" class="headerlink" title="vagrant虚拟机配置"></a>vagrant虚拟机配置</h2><p>虚拟机名称<br><code>vb.name = &quot;ubuntu_code&quot;</code><br>虚拟机主机名<br><code>config.vm.hostname = &quot;code&quot;</code><br>配置虚拟机内存和CPU<br><code>vb.memory = &quot;1024&quot;</code><br><code>vb.cpus = 2</code></p>
<h2 id="打包命令"><a href="#打包命令" class="headerlink" title="打包命令"></a>打包命令</h2><p><code>vagrant package --output uiste.box</code></p>
<ul>
<li>打包升级</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">config.vm.provision &quot;shell&quot;, inline: &lt;&lt;-SHELL</span><br><span class="line">  #   apt-get update</span><br><span class="line">  #   apt-get install -y apache2</span><br><span class="line">apt-get insatll -y redis-server</span><br><span class="line">SHELL</span><br><span class="line"></span><br><span class="line">#执行安装命令</span><br><span class="line">vagrant reload --provision</span><br><span class="line">uiste:box uiste$ vagrant box add new_uiste uiste.box</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Thinkphp5中使用PHPExcel</title>
    <url>/2017/20170404-1.html</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li>项目所在目录：<br><code>uiste:tp5.0 uiste$ composer require phpexcel/phpexcel</code></li>
</ul>
<h2 id="简单上手"><a href="#简单上手" class="headerlink" title="简单上手"></a>简单上手</h2><ol>
<li><p>实例化对象<br><code>$objPHPExcel = new \PHPExcel();</code></p>
</li>
<li><p>获取活动sheet，设置sheet名字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$objSheet = $objPHPExcel-&gt;getActiveSheet(); </span><br><span class="line">$objSheet -&gt;setTitle(&quot;demo&quot;);//可以给sheet设置名称为&quot;demo&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后就是在表格中写入数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//数据量大的时候使用第一种方法</span><br><span class="line">$objSheet-&gt;setCellValue(&quot;A1&quot;,&quot;姓名&quot;)-&gt;setCellValue(&quot;B1&quot;,&quot;分数&quot;);  </span><br><span class="line">$objSheet-&gt;setCellValue(&quot;A2&quot;,&quot;张三&quot;)-&gt;setCellValue(&quot;B2&quot;,&quot;100&quot;);  </span><br><span class="line">//数据量小的时候使用第二种方法</span><br><span class="line">$array = array(  </span><br><span class="line">    array(),  </span><br><span class="line">    array(&apos;姓名&apos;,&apos;分数&apos;),  </span><br><span class="line">    array(&apos;张三&apos;,&apos;60&apos;),  </span><br><span class="line">    array(&apos;李四&apos;,&apos;61&apos;),  </span><br><span class="line">    array(&apos;王五&apos;,&apos;62&apos;),  </span><br><span class="line">);  </span><br><span class="line">$objSheet -&gt; fromArray($array);//数据较大时，不建议使用此方法，建议使用setCellValue()</span><br></pre></td></tr></table></figure>
</li>
<li><p>保存写入的数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, &apos;Excel2007&apos;);//生成一个Excel2007文件  </span><br><span class="line">		$objWriter-&gt;save(&apos;/Users/uiste/www/tp5.0/public/test.xlsx&apos;);//保存文件</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="在浏览器上输出Excel"><a href="#在浏览器上输出Excel" class="headerlink" title="在浏览器上输出Excel"></a>在浏览器上输出Excel</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$filename = &apos;student.xls&apos;;</span><br><span class="line">$type = &apos;Excel2007&apos;;</span><br><span class="line">$objPHPExcel = new \PHPExcel();</span><br><span class="line">for ($i=0; $i &lt;= 1; $i++) &#123;</span><br><span class="line">	// 如果sheet大于0  则创建一个新的sheet</span><br><span class="line">	if ($i&gt;0) &#123;  </span><br><span class="line">		$objPHPExcel-&gt;createSheet();</span><br><span class="line">	&#125;</span><br><span class="line">	$objPHPExcel-&gt;setActiveSheetIndex($i);//把当前创建的sheet设置为活动sheet</span><br><span class="line">	$objSheet = $objPHPExcel-&gt;getActiveSheet();//获得当前活动Sheet</span><br><span class="line">	$objSheet-&gt;setTitle(&quot;student&quot; . $i);</span><br><span class="line">	if($i==0)&#123;</span><br><span class="line">	$student = Db::name(&apos;student&apos;)-&gt;where([&apos;sex&apos;=&gt;10])-&gt;select();  </span><br><span class="line">	&#125;else&#123;  </span><br><span class="line">	$student = DB::name(&apos;student&apos;)-&gt;where(&apos;sex != 10&apos;)-&gt;select();  </span><br><span class="line">	&#125;</span><br><span class="line">	$objSheet-&gt;setCellValue(&apos;A1&apos;,&apos;序号&apos;)</span><br><span class="line">			 -&gt;setCellValue(&apos;B1&apos;,&apos;姓名&apos;)</span><br><span class="line">			 -&gt;setCellValue(&apos;C1&apos;,&apos;年龄&apos;)</span><br><span class="line">			 -&gt;setCellValue(&apos;D1&apos;,&apos;性别&apos;)</span><br><span class="line">			 -&gt;setCellValue(&apos;E1&apos;,&apos;创建时间&apos;)</span><br><span class="line">			 -&gt;setCellValue(&apos;F1&apos;,&apos;更新时间&apos;);  </span><br><span class="line">	$j = 2; // 从第二行开始写入</span><br><span class="line">	foreach ($student as $key =&gt; $value) &#123;</span><br><span class="line">		$objSheet-&gt;setCellValue(&apos;A&apos;.$j,$value[&apos;id&apos;])</span><br><span class="line">				 -&gt;setCellValue(&apos;B&apos;.$j,$value[&apos;name&apos;])</span><br><span class="line">				 -&gt;setCellValue(&apos;C&apos;.$j,$value[&apos;age&apos;])</span><br><span class="line">				 -&gt;setCellValue(&apos;D&apos;.$j,$value[&apos;sex&apos;])  </span><br><span class="line">				 -&gt;setCellValue(&apos;E&apos;.$j,$value[&apos;created_at&apos;])</span><br><span class="line">				 -&gt;setCellValue(&apos;F&apos;.$j,$value[&apos;updated_at&apos;]);  </span><br><span class="line">		$j++;</span><br><span class="line">	&#125;  </span><br><span class="line">&#125;</span><br><span class="line">$objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel,&apos;Excel5&apos;);//生成excel文件</span><br><span class="line">//$objWriter-&gt;save($dir.&quot;/export_1.xls&quot;);//保存文件</span><br><span class="line">if($type==&quot;Excel5&quot;)&#123;</span><br><span class="line">	header(&apos;Content-Type: application/vnd.ms-excel&apos;);//告诉浏览器将要输出excel03文件</span><br><span class="line">&#125;else&#123;</span><br><span class="line">	header(&apos;Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&apos;);//告诉浏览器数据excel07文件</span><br><span class="line">&#125;</span><br><span class="line">header(&apos;Content-Disposition: attachment;filename=&quot;&apos;.$filename.&apos;&quot;&apos;);//告诉浏览器将输出文件的名称</span><br><span class="line">header(&apos;Cache-Control: max-age=0&apos;);//禁止缓存</span><br><span class="line">$objWriter-&gt;save(&quot;php://output&quot;);</span><br></pre></td></tr></table></figure>
<h2 id="读取指定Excel文件中的数据"><a href="#读取指定Excel文件中的数据" class="headerlink" title="读取指定Excel文件中的数据"></a>读取指定Excel文件中的数据</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">header(&quot;Content-Type:text/html;charset=utf-8&quot;);</span><br><span class="line">$filename=ROOT_PATH . &apos;public&apos; . DS . &quot;test.xlsx&quot;; // 读取文件</span><br><span class="line">$sheetName=array(&quot;demo&quot;); //只加载指定的sheet</span><br><span class="line">$rowStart = 1; //指定开始读取的行数</span><br><span class="line"></span><br><span class="line">$fileType=\PHPExcel_IOFactory::identify($filename);//自动获取文件的类型提供给phpexcel用</span><br><span class="line">$objReader=\PHPExcel_IOFactory::createReader($fileType);//获取文件读取操作对象</span><br><span class="line"></span><br><span class="line">$objReader-&gt;setLoadSheetsOnly($sheetName);//只加载指定的sheet</span><br><span class="line">$objPHPExcel=$objReader-&gt;load($filename);//加载文件</span><br><span class="line">/* 数据量小的时候使用 */</span><br><span class="line">/**$sheetCount=$objPHPExcel-&gt;getSheetCount();//获取excel文件里有多少个sheet</span><br><span class="line">for($i=0;$i&lt;$sheetCount;$i++)&#123;</span><br><span class="line">	$data=$objPHPExcel-&gt;getSheet($i)-&gt;toArray();//读取每个sheet里的数据 全部放入到数组中</span><br><span class="line">	print_r($data);</span><br><span class="line">&#125;**/</span><br><span class="line"></span><br><span class="line">/* 数据量大的时候使用 */</span><br><span class="line">foreach($objPHPExcel-&gt;getWorksheetIterator() as $sheet)&#123;//循环取sheet</span><br><span class="line">		foreach($sheet-&gt;getRowIterator() as $row)&#123;//逐行处理</span><br><span class="line">				if($row-&gt;getRowIndex()&lt;$rowStart)&#123;</span><br><span class="line">					continue;</span><br><span class="line">				&#125;</span><br><span class="line">				foreach($row-&gt;getCellIterator() as $cell)&#123;//逐列读取</span><br><span class="line">						$data=$cell-&gt;getValue();//获取单元格数据</span><br><span class="line">						echo $data.&quot; &quot;;</span><br><span class="line">				&#125;</span><br><span class="line">				echo &apos;&lt;br/&gt;&apos;;</span><br><span class="line">		&#125;</span><br><span class="line">		echo &apos;&lt;br/&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">exit;</span><br></pre></td></tr></table></figure>
<h2 id="小案例-POST发送读取文件数据发送到服务器"><a href="#小案例-POST发送读取文件数据发送到服务器" class="headerlink" title="小案例-POST发送读取文件数据发送到服务器"></a>小案例-POST发送读取文件数据发送到服务器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public function operate()</span><br><span class="line">&#123;</span><br><span class="line">	$filename=ROOT_PATH . &apos;public&apos; . DS . &quot;test.xlsx&quot;; // 读取文件</span><br><span class="line">	$sheetName=array(&apos;工作表2&apos;); //只加载指定的sheet</span><br><span class="line">	$rowStart = 1; //指定开始读取的行数</span><br><span class="line">	$url = &apos;http://www.test.com/history/study4/MVC_1/index.php?c=products&amp;a=add&apos;;</span><br><span class="line">	$receive = [&apos;proname&apos;,&apos;proguige&apos;,&apos;proprice&apos;,&apos;proamount&apos;,&apos;proimages&apos;,&apos;proweb&apos;]; // 定义接收方的数据下标</span><br><span class="line">	// 第一步读取文件</span><br><span class="line">	if (!$data = $this-&gt;_fileRead($filename, $sheetName, $rowStart)) &#123;</span><br><span class="line">		echo &apos;无法读取文件中的数据！！！&apos;;</span><br><span class="line">	&#125;</span><br><span class="line">	// dump($data);die;</span><br><span class="line">	// 第二步发送数据请求</span><br><span class="line">	foreach ($data as $sheet) &#123; // 工作表</span><br><span class="line">		foreach ($sheet as $key1 =&gt; $rows) &#123; // 工作表行</span><br><span class="line">			if (count($rows) != count($receive)) &#123;</span><br><span class="line">				echo &apos;表中数据列数与要发送的字段数不一致请核实！！！&apos;;die;</span><br><span class="line">			&#125;</span><br><span class="line">			$row = array();</span><br><span class="line">			foreach ($rows as $key =&gt; $cell) &#123; //单元格</span><br><span class="line">				$row[$receive[$key]] = $cell;</span><br><span class="line">			&#125;</span><br><span class="line">			if (!empty($row)) &#123;</span><br><span class="line">				// $url = &quot;http://localhost/web_services.php&quot;;</span><br><span class="line">				// $post_data = array (&quot;username&quot; =&gt; &quot;bob&quot;,&quot;key&quot; =&gt; &quot;12345&quot;);</span><br><span class="line">				$post_data = $row;</span><br><span class="line">				$ch = curl_init();</span><br><span class="line">				curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">				curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);// post数据</span><br><span class="line">				curl_setopt($ch, CURLOPT_POST, 1);// post的变量</span><br><span class="line">				curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);</span><br><span class="line">				$output = curl_exec($ch);</span><br><span class="line">				curl_close($ch);</span><br><span class="line"></span><br><span class="line">				//打印获得的数据</span><br><span class="line">				if ($output) &#123;</span><br><span class="line">					echo &apos;第 &apos; . $key1+1 . &apos; 行录入成功！！！&apos; . &apos;&lt;br/&gt;&apos;;</span><br><span class="line">				&#125;else&#123;</span><br><span class="line">					echo &apos;第 &apos; . $key1+1 . &apos; 行录入失败！！！&apos; . &apos;&lt;br/&gt;&apos;;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	echo &apos;录入完成 ， 哈哈哈&lt;br&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function _fileRead($filename, $sheetName = [&apos;sheet1&apos;], $rowStart = 1)</span><br><span class="line">&#123;</span><br><span class="line">	header(&quot;Content-Type:text/html;charset=utf-8&quot;);</span><br><span class="line"></span><br><span class="line">	$fileType=\PHPExcel_IOFactory::identify($filename);//自动获取文件的类型提供给phpexcel用</span><br><span class="line">	$objReader=\PHPExcel_IOFactory::createReader($fileType);//获取文件读取操作对象</span><br><span class="line"></span><br><span class="line">	$objReader-&gt;setLoadSheetsOnly($sheetName);//只加载指定的sheet</span><br><span class="line">	$objPHPExcel=$objReader-&gt;load($filename);//加载文件</span><br><span class="line">	/* 数据量小的时候使用 */</span><br><span class="line">	$sheetCount=$objPHPExcel-&gt;getSheetCount();//获取excel文件里有多少个sheet</span><br><span class="line">	$data = array();</span><br><span class="line">	for($i=0;$i&lt;$sheetCount;$i++)&#123;</span><br><span class="line">		$data[$sheetName[$i]]=$objPHPExcel-&gt;getSheet($i)-&gt;toArray();//读取每个sheet里的数据 全部放入到数组中</span><br><span class="line">	&#125;</span><br><span class="line">	return $data;</span><br><span class="line">	</span><br><span class="line">	/* 数据量大的时候使用 */</span><br><span class="line">	// $data = array();</span><br><span class="line">	// foreach($objPHPExcel-&gt;getWorksheetIterator() as $sheet)&#123;//循环取sheet</span><br><span class="line">	// 		foreach($sheet-&gt;getRowIterator() as $row)&#123;//逐行处理</span><br><span class="line">	// 				if($row-&gt;getRowIndex()&lt;$rowStart)&#123;</span><br><span class="line">	// 					continue;</span><br><span class="line">	// 				&#125;</span><br><span class="line">	// 				foreach($row-&gt;getCellIterator() as $cell)&#123;//逐列读取</span><br><span class="line">	// 						$data=$cell-&gt;getValue();//获取单元格数据</span><br><span class="line">	// 						echo $data.&quot; &quot;;</span><br><span class="line">	// 				&#125;</span><br><span class="line">	// 				echo &apos;&lt;br/&gt;&apos;;</span><br><span class="line">	// 		&#125;</span><br><span class="line">	// 		echo &apos;&lt;br/&gt;&apos;;</span><br><span class="line">	// &#125;</span><br><span class="line">	exit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>相关文章<br><a href="http://www.cnblogs.com/sweet521/p/5868672.html" target="_blank" rel="noopener">PHPExcel的使用</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>PHPExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>7个高级技巧帮助你释放大量Mac OS X硬盘空间</title>
    <url>/2017/20170319-2.html</url>
    <content><![CDATA[<p>硬盘空间用尽是一件很让人头疼的事情，尤其是MacBook Air等设备上的固态硬盘可用的储存空间很少。下面为大家介绍7个高级技巧来释放大量的硬盘空间，当然这些高级技巧更改了系统功能和文件，必须通过使用命令行实现，还需要使用rm或rf这样的危险命令，所以Mac OS X新手还是要谨慎尝试。</p>
<p>1：禁用SafeSleep休眠模式——能节省出4GB-16GB空间</p>
<p><code>Screen Shot 2013-05-11 at 3.57.34 AM.jpg</code></p>
<p>下面的命令可以关闭OS X原生的休眠功能，也就是SafeSleep。这种休眠模式当Mac休眠或者没电池时会将内存中的内容储存在硬盘上的sleepimage文件上。sleepimage文件与Mac电脑的内存一样大，这意味着如果你的内存是4GB，该文件就有4GB，如果是16GB，该文件就有16GB。关闭SafeSleep可以不让系统自动创建该文件，缺点就是当Mac电脑没电池时，你不能恢复到之前的状态。不过我们可以使用OS X的自动保存功能在电池将要耗尽的时候保存自己的工作。</p>
<p>如果想要禁用SafeSleep功能，我们需要在终端中输入下面的命令：</p>
<p><code>sudo pmset -a hibernatemode 0</code></p>
<p>复制代码<br>然后定位到<code>/private/var/vm/</code>删除已经存在的sleepimage文件</p>
<p><code>cd /private/var/vm/</code></p>
<p>复制代码<br>使用下面的命令删除该文件</p>
<p><code>sudo rm sleepimage</code></p>
<p>复制代码<br>最后我们要防止OS X继续创建该文件，所以我们需要下面的命令生成一个无法被替换的空文件</p>
<p><code>touch sleepimage</code><br><code>chmod 000 /private/var/vm/sleepimage</code></p>
<p>复制代码<br>当然，如果你想要重新开启SafeSleep功能，只需下面的命令即可。</p>
<p><code>sudo pmset -a hibernatemode 3</code><br><code>sudo rm /private/var/vm/sleepimage</code></p>
<p>复制代码</p>
<p>2：移除系统嗓音文件——可以节省出500MB-3GB+硬盘空间</p>
<p><code>Screen Shot 2013-05-11 at 3.56.52 AM.jpg</code></p>
<p>如果你不适用文字转语音功能，那么你肯定不会使用到OS X内置的嗓音文件。你可以删除这些文件重新获得硬盘空间。在终端应用中，使用下面的命令即可，首先定位到文件所在文件夹：</p>
<p><code>cd /System/Library/Speech/</code></p>
<p>复制代码<br>然后执行删除命令，将所有嗓音文件删除</p>
<p><code>sudo rm -rf Voices/*</code></p>
<p>复制代码</p>
<p>如果你执行了命令，那么你将无法使用系统的文字转语音功能。</p>
<p>3：删除所有系统日志——可以节省出100MB-2GB硬盘空间</p>
<p>随着你使用Mac的时间越来越长，系统日志文件也会越来越多，根据电脑的用量、错误和服务，这些文件会越来越多。这些系统日志文件是用来调试和排除故障的，如果你感觉没有用，可以使用下面的命令删除：</p>
<p><code>sudo rm -rf /private/var/log/*</code></p>
<p>复制代码</p>
<p>系统日志文件会不断的产生，所以你可以定时执行这条命令。</p>
<p>4：删除快速查看生成的缓存文件——可以节省出100MB-300MB硬盘空间</p>
<p><code>Screen Shot 2013-05-11 at 3.58.21 AM.jpg</code></p>
<p>快速查看功能是OS X系统内置的文件预览功能，在Finder中选择任何文件后都可以点击空格来查看文件的详情。不过快速查看功能依靠缓存功能才能更流畅，而且这些缓存文件会一直增加，通过下面的命令移除缓存：</p>
<p><code>sudo rm -rf /private/var/folders/</code></p>
<p>复制代码</p>
<p>5：删除Emacs——可以节省出60MB+的硬盘空间</p>
<p>如果你都不知道什么是Emacs，那么你可以放心的将其移除。Emacs是终端中的文本编辑器，如果你使用的固态硬盘空间实在太小，那么删除它就是不错的选择，况且你还可以使用vi和nano在终端中编辑文本。下面是删除Emacs的命令：</p>
<p><code>sudo rm -rf /usr/share/emacs/</code></p>
<p>复制代码</p>
<p>6：删除临时文件——可以节省500MB-5GB硬盘空间</p>
<p>/private/var/tmp/是存放系统缓存的文件夹，通常情况下会在系统重启时清楚，不过有时确不会。而且如果你长时间不关闭Mac，也不重启的话，缓存文件会越来越多。使用下面的命令清楚这些临时文件：</p>
<p><code>cd /private/var/tmp/</code><br><code>rm -rf TM*</code></p>
<p>复制代码</p>
<p>7：清除缓存文件——可以节省1GB-10GB硬盘空间</p>
<p>缓存文件有很多种，比如网页浏览记录，应用meta数据等等。这些缓存文件的容量究竟多大跟用户使用的应用有关，也与Mac重启的频率有关。此外，很多在线音乐播放app也会产生大量的缓存文件，我们可以通过下面的命令删除这些缓存文件：</p>
<p><code>cd ~/Library/Caches/</code><br><code>rm -rf ~/Library/Caches/*</code></p>
<p>复制代码</p>
<p>这里介绍的7个高级方法都需要使用终端才能实现，而且有的方法有些风险，所以请大家使用时注意！</p>
]]></content>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>mac如何查看隐藏文件夹？苹果mac显示隐藏文件夹方法和命令介绍</title>
    <url>/2017/20170319-1.html</url>
    <content><![CDATA[<p>很多时候，无论是Windows还是Mac OS系统一些重要的文件夹和文件都是要被隐藏起来的，以防止用户因为误操作修改或者删除而导致系统或者软件的损坏。但是很多时候我们Mac用户，也需要修改隐藏的文件，才能实现一些操作。所以这个时候我们就需要将隐藏的文件或者文件夹显示出来。<br>那么Mac系统怎么显示隐藏的文件夹和文件呢？或者说Mac显示隐藏文件好文件夹的命令是什么呢？<br>命令方式最简单，键入如下两行命令你就可以实现对文件的现实和隐藏功能了。这个时候肯定会有童鞋问：“在哪里敲命令呢？”，Launchpad——其他——终端，打开之后就可以键入命令了。<br>显示：<code>defaults write com.apple.finder AppleShowAllFiles -bool true</code><br>隐藏：<code>defaults write com.apple.finder AppleShowAllFiles -bool false</code></p>
]]></content>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Yii2.0 对数据库 查询的一些简单的操作</title>
    <url>/2017/20170226-1.html</url>
    <content><![CDATA[<p>1： 此方法返回 <code>[&#39;name&#39; =&gt; &#39;daxia&#39;]</code> 的所有数据；</p>
<p><code>User::find()-&gt;where([&#39;name&#39; =&gt; &#39;daxia&#39;])-&gt;all();</code><br>2： 此方法返回 <code>[&#39;name&#39; =&gt; &#39;daxia&#39;]</code>的一条数据</p>
<p><code>User::find()-&gt;where([&#39;name&#39; =&gt; &#39;daxia&#39;])-&gt;one();</code><br>3： 在条件name的基础上，额外添加另一个条件sex</p>
<p><code>User::find()-&gt;where([&#39;name&#39; =&gt; &#39;daxia&#39;])-&gt;andWhere([&#39;sex&#39; =&gt; &#39;女&#39;])-&gt;one();</code></p>
<p>或者：</p>
<p><code>User::find()-&gt;where([&#39;name&#39; =&gt; &#39;daxia&#39;, &#39;sex&#39; =&gt; &#39;女&#39;])-&gt;one();</code></p>
<p>说明： 这两种方法都是可以的<br>4： andFilterWhere/andWhere应用： 在[1427925600-1427968800]之间查询</p>
<p><code>User::find()-&gt;andFilterWhere([&#39;between&#39;, &#39;regtime&#39;, &#39;1427925600&#39;, &#39;1427968800’])</code><br>说到andFilterWhere，下面我把用到的各种的情况示例列出：</p>
<p>1) : sql:   id=1 AND id=2<br>     条件:  <code>[&#39;and&#39;, &#39;id=1&#39;, &#39;id=2&#39;]</code></p>
<p>2) : sql:   id=1 OR id=2<br>     条件:  <code>[&#39;or&#39;, &#39;id=1&#39;, &#39;id=2&#39;]</code></p>
<p>3) : sql:   id BETWEEN 1 AND 10<br>     条件:   <code>[&#39;between&#39;, &#39;id&#39;, 1, 10]</code></p>
<p>4) : sql:   id IN (1, 2, 3)<br>     条件:  <code>[&#39;in&#39;, &#39;id&#39;, [1, 2, 3]]</code></p>
<p>5) : sql:   name LIKE ‘%tester%’     模糊查询<br>     条件:  <code>[&#39;like&#39;, &#39;name&#39;, &#39;tester&#39;]</code></p>
<p>6) : sql:   age&gt;10<br>     条件:  <code>[&#39;&gt;&#39;, &#39;age&#39;, 10]</code></p>
<p>5： orderBy() 应用</p>
<p>sql： ORDER BY <code>id</code> ASC, <code>name</code> DESC</p>
<p>Yii对应的model书写如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$query-&gt;orderBy([</span><br><span class="line">   &apos;id&apos; =&gt; SORT_ASC,  升序  默认</span><br><span class="line">   &apos;name&apos; =&gt; SORT_DESC,  降序</span><br><span class="line">]);</span><br></pre></td></tr></table></figure></p>
<p>6： groupBy() 应用：</p>
<p>sql:  … GROUP BY <code>id</code>, <code>status</code></p>
<p>Yii对应的model书写如下：</p>
<p><code>$query-&gt;groupBy([&#39;id&#39;, &#39;status&#39;]);</code><br>7： having()应用：</p>
<p>sql:  … HAVING <code>status</code> = 1</p>
<p>Yii对应的model书写如下：</p>
<p><code>$query-&gt;having([&#39;status&#39; =&gt; 1]);</code><br>8： limit() offset() 应用：</p>
<p>sql:  … LIMIT 10 OFFSET 20</p>
<p>Yii对应的model书写如下</p>
<p><code>$query-&gt;limit(10)-&gt;offset(20);</code><br>9： 用自己书写的sql语句，去查询符合的数据</p>
<p><code>User::findBySql(&#39;SELECT * FROM user&#39;)-&gt;one();</code> 此方法是用 sql  语句查询 user 表里面的一条数据；</p>
<p><code>User::findBySql(&#39;SELECT * FROM user&#39;)-&gt;all();</code> 此方法是用 sql  语句查询 user 表里面的所有数据；<br>说明： 测试 - 你也许想要测试或者使用一个由 yii\db\Query 对象创建的 SQL 语句。 你可以使用以下的代码来达到目的：</p>
<p><code>$query-&gt;createCommand()-&gt;getRawSql();</code><br>下面就是官网上面展示的，一些比较常见的查询方法：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yii\db\Query 提供了一整套的用于不同查询目的的方法。</span><br><span class="line">  ● yii\db\Query::all(): 将返回一个由行组成的数组，每一行是一个由名称和值构成的关联数组（译者注：省略键的数组称为索引数组）。</span><br><span class="line">  ● yii\db\Query::one(): 返回结果集的第一行。</span><br><span class="line">  ● yii\db\Query::column(): 返回结果集的第一列。</span><br><span class="line">  ● yii\db\Query::scalar(): 返回结果集的第一行第一列的标量值。</span><br><span class="line">  ● yii\db\Query::exists(): 返回一个表示该查询是否包结果集的值。</span><br><span class="line">  ● yii\db\Query::count(): 返回 COUNT 查询的结果。</span><br><span class="line">  ● 其它集合查询方法: 包括 yii\db\Query::sum(), yii\db\Query::average(), yii\db\Query::max(), yii\db\Query::min() 等. $q 是一个必选参数， 既可以是一个字段名称，又可以是一个 DB 表达式。</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>yii</tag>
      </tags>
  </entry>
  <entry>
    <title>阶段性搬砖总结</title>
    <url>/2017/20170225-1.html</url>
    <content><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>因为最近工作的原因,断了学习成长的一个节奏，想着还是做个记录。虽然暂更博客内容的时间不长，却在这短暂的时间有所迷失了自己的方向，麻木的生活，重复的工作，好像一把机械性的操手。沉浸与思考之后，又自我感觉忧虑。</p>
<p>也许一辈子都不能做成什么大事，还是希望能做好这一件小事。</p>
<h2 id="以后"><a href="#以后" class="headerlink" title="以后"></a>以后</h2><p>静心学习，慢一点，稳一点，走好脚下的路…</p>
]]></content>
  </entry>
  <entry>
    <title>Html Body 莫名加上&#39;MacOSX ATTRV&#39;原因及解决</title>
    <url>/2016/20161113-1.html</url>
    <content><![CDATA[<p>前言</p>
<p>今天上传项目时是由Mac tar打包上传到Linux服务器解包的，部署完成后访问页面发现页面的Body之前都被加入了</p>
<p>一行奇怪的字符。</p>
<p>Mac环境解决方案</p>
<p>Google后发现Mac解决方案</p>
<p><code>xattr -r -d com.apple.quarantine file-path</code><br>原文地址<code>http://entropytc.com/got-com-apple-quarantine-problems/</code></p>
<blockquote>
<p>不过在Linux下没有xattr命令，就去Linux目录下ls -a发现每个文件都被克隆了一个.<em>开头的文件，由于检查过原始文件并未遭到改动，果然删除这些.</em>开头文件即解决了问题</p>
</blockquote>
<p>Linux解决方案 - 批量删除._开头文件</p>
<p><code>find ./ -name &quot;._*&quot; -exec rm -f {} \;</code></p>
]]></content>
  </entry>
  <entry>
    <title>在 Group by 之内(前)实现 Order by 排序</title>
    <url>/2016/20161015-1.html</url>
    <content><![CDATA[<h2 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h2><p>统计功能需求时，比如统计某 APP 在一小时内最后一笔交易的时间点，测试后发现数据实为该小时内的第一笔交易。</p>
<p>SQL 语句示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT appid, created_time</span><br><span class="line">FROM order</span><br><span class="line">WHERE paid = 1</span><br><span class="line">      AND created_time &gt;= &apos;2016-01-26 17:00:00&apos;</span><br><span class="line">      AND created_time &lt; &apos;2016-01-26 18:00:00&apos;</span><br><span class="line">GROUP BY appid</span><br><span class="line">ORDER BY created_time DESC;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行后发现实际 ORDER BY created_time DESC 仅是在 GROUP BY 外排序，而没有满足需求在 GROUP BY 内排序。</p>
</blockquote>
<h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>方法一、使用 MAX 函数</p>
<p>SQL 语句示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT appid, created_time, MAX(created_time) AS latest_created_time</span><br><span class="line">FROM order</span><br><span class="line">WHERE paid = 1</span><br><span class="line">      AND created_time &gt;= &apos;2016-01-26 17:00:00&apos;</span><br><span class="line">      AND created_time &lt; &apos;2016-01-26 18:00:00&apos;</span><br><span class="line">GROUP BY appid;</span><br></pre></td></tr></table></figure>
<p>其中 <code>created_time</code> 为该小时内第一笔交易，<code>latest_created_time</code> 为该小时内最后一笔交易</p>
<blockquote>
<p>优点: 使用简单，逻辑清楚<br>缺点: 全表排，效率低，大数据量慎用</p>
</blockquote>
<p>方法二、使用子查询</p>
<p>SQL 语句示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT appid, created_time, latest_created_time </span><br><span class="line">FROM (</span><br><span class="line">  SELECT appid, created_time FROM order</span><br><span class="line">    WHERE paid = 1</span><br><span class="line">      AND created_time &gt;= &apos;2016-01-26 17:00:00&apos;</span><br><span class="line">      AND created_time &lt; &apos;2016-01-26 18:00:00&apos;</span><br><span class="line">    ORDER BY created_time ASC</span><br><span class="line">    ) AS temp_table_a , (</span><br><span class="line">    SELECT created_time AS latest_created_time FROM order</span><br><span class="line">    WHERE paid = 1</span><br><span class="line">      AND created_time &gt;= &apos;2016-01-26 17:00:00&apos;</span><br><span class="line">      AND created_time &lt; &apos;2016-01-26 18:00:00&apos;</span><br><span class="line">    ORDER BY created_time DESC</span><br><span class="line">  ) AS temp_table_b</span><br><span class="line">GROUP BY appid;</span><br></pre></td></tr></table></figure>
<p>同上，其中 <code>created_time</code> 为该小时内第一笔交易，<code>latest_created_time</code> 为该小时内最后一笔交易</p>
<blockquote>
<p>优点: 效率高，适用大数据量<br>缺点: 语句较复杂，需要脱离框架，手动拼接实现</p>
</blockquote>
<p>总结</p>
<p>不必纠结了，数据量小于200万就使用第一种方法吧，反之使用第二种。</p>
]]></content>
  </entry>
  <entry>
    <title>连接SSH时出现UNPROTECTED PRIVATE KEY FILE</title>
    <url>/2016/20161010-1.html</url>
    <content><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><blockquote>
<p>使用密钥连接 SSH 时提示 WARNING: UNPROTECTED PRIVATE KEY FILE，找到原因是由于之前重新配置了 ~/.ssh 目录权限，导致密钥能够通过其他用户访问。所以将密钥或者 .ssh 目录权限设置为仅当前用户具有访问权限即可解决。若提示 Bad owner or permissions, 也可以通过下述方案解决。</p>
</blockquote>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote>
<p>sudo chown -R uiste:staff .ssh<br>sudo chmod -R 700 .ssh</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>PHP开发安全问题总结</title>
    <url>/2016/20160523-2.html</url>
    <content><![CDATA[<h2 id="安全保护一般性要点"><a href="#安全保护一般性要点" class="headerlink" title="安全保护一般性要点"></a>安全保护一般性要点</h2><h3 id="不相信表单"><a href="#不相信表单" class="headerlink" title="不相信表单"></a>不相信表单</h3><p>对于一般的Javascript前台验证，由于无法得知用户的行为，例如关闭了浏览器的javascript引擎，这样通过POST恶意数据到服务器。需要在服务器端进行验证，对每个php脚本验证传递到的数据，防止XSS攻击和SQL注入</p>
<h3 id="不相信用户"><a href="#不相信用户" class="headerlink" title="不相信用户"></a>不相信用户</h3><p>要假设你的网站接收的每一条数据都是存在恶意代码的，存在隐藏的威胁，要对每一条数据都进行清理</p>
<h3 id="关闭全局变量"><a href="#关闭全局变量" class="headerlink" title="关闭全局变量"></a>关闭全局变量</h3><p>在php.ini文件中进行以下配置：</p>
<p><code>register_globals = Off</code><br>如果这个配置选项打开之后，会出现很大的安全隐患。例如有一个process.php的脚本文件，会将接收到的数据插入到数据库，接收用户输入数据的表单可能如下：</p>
<p><code>&lt;input name=&quot;username&quot; type=&quot;text&quot; size=&quot;15&quot; maxlength=&quot;64&quot;&gt;</code><br>这样，当提交数据到process.php之后，php会注册一个$username变量，将这个变量数据提交到process.php，同时对于任何POST或GET请求参数，都会设置这样的变量。如果不是显示进行初始化那么就会出现下面的问题：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// Define $authorized = true only if user is authenticated</span><br><span class="line">if (authenticated_user()) &#123;</span><br><span class="line">    $authorized = true;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p>
<p>此处，假设<code>authenticated_user</code>函数就是判断<code>$authorized</code>变量的值，如果开启了<code>register_globals</code>配置，那么任何用户都可以发送一个请求，来设置$authorized变量的值为任意值从而就能绕过这个验证。</p>
<p>所有的这些提交数据都应该通过PHP预定义内置的全局数组来获取，包括<code>$_POST、$_GET、$_FILES、$_SERVER、$_REQUEST</code>等，其中<code>$_REQUEST</code>是一个<code>$_GET/$_POST/$_COOKIE</code>三个数组的联合变量，默认的顺序是<code>$_COOKIE、$_POST、$_GET</code>。</p>
<h3 id="推荐的安全配置选项"><a href="#推荐的安全配置选项" class="headerlink" title="推荐的安全配置选项"></a>推荐的安全配置选项</h3><p><code>error_reporting</code>设置为Off：不要暴露错误信息给用户，开发的时候可以设置为ON</p>
<p><code>safe_mode</code>设置为Off</p>
<p><code>register_globals</code>设置为Off</p>
<p>将以下函数禁用：<code>system、exec、passthru、shell_exec、proc_open、popen</code></p>
<p><code>open_basedir</code>设置为 /tmp ，这样可以让session信息有存储权限，同时设置单独的网站根目录</p>
<p><code>expose_php</code>设置为Off</p>
<p><code>allow_url_fopen</code>设置为Off</p>
<p><code>allow_url_include</code>设置为Off</p>
<h2 id="SQL注入攻击"><a href="#SQL注入攻击" class="headerlink" title="SQL注入攻击"></a>SQL注入攻击</h2><p>对于操作数据库的SQL语句，需要特别注意安全性，因为用户可能输入特定语句使得原有的SQL语句改变了功能。类似下面的例子：</p>
<p><code>$sql = &quot;select * from pinfo where product = &#39;$product&#39;&quot;;</code><br>此时如果用户输入的$product参数为：</p>
<p><code>39&#39;; DROP pinfo; SELECT &#39;FOO</code><br>那么最终SQL语句就变成了如下的样子：</p>
<p><code>select product from pinfo where product = &#39;39&#39;; DROP pinfo; SELECT &#39;FOO&#39;</code><br>这样就会变成三条SQL语句，会造成pinfo表被删除，这样会造成严重的后果。</p>
<p>这个问题可以简单的使用PHP的内置函数解决：</p>
<p><code>$sql = &#39;Select * from pinfo where product = &#39;&quot;&#39;</code><br>       <code>mysql_real_escape_string($product) . &#39;&quot;&#39;;</code><br>防止SQL注入攻击需要做好两件事：</p>
<p>对输入的参数总是进行类型验证</p>
<p>对单引号、双引号、反引号等特殊字符总是使用<code>mysql_real_escape_string</code>函数进行转义</p>
<p>但是，这里根据开发经验，不要开启php的Magic Quotes，这个特性在php6中已经废除，总是自己在需要的时候进行转义。</p>
<h2 id="防止基本的XSS攻击"><a href="#防止基本的XSS攻击" class="headerlink" title="防止基本的XSS攻击"></a>防止基本的XSS攻击</h2><p>XSS攻击不像其他攻击，这种攻击在客户端进行，最基本的XSS工具就是防止一段javascript脚本在用户待提交的表单页面，将用户提交的数据和cookie偷取过来。</p>
<p>XSS工具比SQL注入更加难以防护，各大公司网站都被XSS攻击过，虽然这种攻击与php语言无关，但可以使用php来筛选用户数据达到保护用户数据的目的，这里主要使用的是对用户的数据进行过滤，一般过滤掉HTML标签，特别是a标签。下面是一个普通的过滤方法：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function transform_HTML($string, $length = null) &#123;</span><br><span class="line">// Helps prevent XSS attacks</span><br><span class="line">    // Remove dead space.</span><br><span class="line">    $string = trim($string);</span><br><span class="line">    // Prevent potential Unicode codec problems.</span><br><span class="line">    $string = utf8_decode($string);</span><br><span class="line">    // HTMLize HTML-specific characters.</span><br><span class="line">    $string = htmlentities($string, ENT_NOQUOTES);</span><br><span class="line">    $string = str_replace(&quot;#&quot;, &quot;#&quot;, $string);</span><br><span class="line">    $string = str_replace(&quot;%&quot;, &quot;%&quot;, $string);</span><br><span class="line">    $length = intval($length);</span><br><span class="line">    if ($length &gt; 0) &#123;</span><br><span class="line">        $string = substr($string, 0, $length);</span><br><span class="line">    &#125;</span><br><span class="line">    return $string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这个函数将HTML的特殊字符转换为了HTML实体，浏览器在渲染这段文本的时候以纯文本形式显示。如<strong>bold</strong>会被显示为：</p>
<p>&lt;STRONG&gt;BoldText&lt;/STRONG&gt;</p>
<p>上述函数的核心就是htmlentities函数，这个函数将html特殊标签转换为html实体字符，这样可以过滤大部分的XSS攻击。</p>
<p>但是对于有经验的XSS攻击者，有更加巧妙的办法进行攻击：将他们的恶意代码使用十六进制或者utf-8编码，而不是普通的ASCII文本，例如可以使用下面的方式进行：</p>
<p><code>&lt;a href=&quot;http://host/a.php?variable=%22%3e %3c%53%43%52%49%50%54%3e%44%6f%73%6f%6d%65%74%68%69%6e%67%6d%61%6c%69%63%69%6f%75%73%3c%2f%53%43%52%49%50%54%3e&quot;&gt;</code><br>这样浏览器渲染的结果其实是：</p>
<p><code>&lt;a href=&quot;http://host/a.php?variable=&quot;&gt; &lt;SCRIPT&gt;Dosomethingmalicious&lt;/SCRIPT&gt;</code><br>这样就达到了攻击的目的。为了防止这种情况，需要在transform_HTML函数的基础上再将#和%转换为他们对应的实体符号，同时加上了$length参数来限制提交的数据的最大长度。</p>
<h2 id="使用SafeHTML防止XSS攻击"><a href="#使用SafeHTML防止XSS攻击" class="headerlink" title="使用SafeHTML防止XSS攻击"></a>使用SafeHTML防止XSS攻击</h2><p>上述关于XSS攻击的防护非常简单，但是不包含用户的所有标记，同时有上百种绕过过滤函数提交javascript代码的方法，也没有办法能完全阻止这个情况。</p>
<p>目前，没有一个单一的脚本能保证不被攻击突破，但是总有相对来说防护程度更好的。一共有两个安全防护的方式：白名单和黑名单。其中白名单更加简单和有效。</p>
<p>一种白名单解决方案就是SafeHTML，它足够智能能够识别有效的HTML，然后就可以去除任何危险的标签。这个需要基于HTMLSax包来进行解析。</p>
<p>安装使用SafeHTML的方法：</p>
<p>1、前往<a href="http://pixel-apes.com/safehtml/?page=safehtml" target="_blank" rel="noopener">http://pixel-apes.com/safehtml/?page=safehtml</a> 下载最新的SafeHTML</p>
<p>2、将文件放入服务器的classes 目录，这个目录包含所有的SafeHTML和HTMLSax库</p>
<p>3、在自己的脚本中包含SafeHTML类文件</p>
<p>4、建立一个SafeHTML对象</p>
<p>5、使用parse方法进行过滤<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/* If you&apos;re storing the HTMLSax3.php in the /classes directory, along</span><br><span class="line">   with the safehtml.php script, define XML_HTMLSAX3 as a null string. */</span><br><span class="line">define(XML_HTMLSAX3, &apos;&apos;);</span><br><span class="line">// Include the class file.</span><br><span class="line">require_once(&apos;classes/safehtml.php&apos;);</span><br><span class="line">// Define some sample bad code.</span><br><span class="line">$data = &quot;This data would raise an alert &lt;script&gt;alert(&apos;XSS Attack&apos;)&lt;/script&gt;&quot;;</span><br><span class="line">// Create a safehtml object.</span><br><span class="line">$safehtml = new safehtml();</span><br><span class="line">// Parse and sanitize the data.</span><br><span class="line">$safe_data = $safehtml-&gt;parse($data);</span><br><span class="line">// Display result.</span><br><span class="line">echo &apos;The sanitized data is &lt;br /&gt;&apos; . $safe_data;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p>
<p>SafeHTML并不能完全防止XSS攻击，只是一个相对复杂的脚本来检验的方式。</p>
<p>使用单向HASH加密方式来保护数据</p>
<p>单向hash加密保证对每个用户的密码都是唯一的，而且不能被破译的，只有最终用户知道密码，系统也是不知道原始密码的。这样的一个好处是在系统被攻击后攻击者也无法知道原始密码数据。</p>
<p>加密和Hash是不同的两个过程。与加密不同，Hash是无法被解密的，是单向的；同时两个不同的字符串可能会得到同一个hash值，并不能保证hash值的唯一性。</p>
<p>MD5函数处理过的hash值基本不能被破解，但是总是有可能性的，而且网上也有MD5的hash字典。</p>
<p>使用mcrypt加密数据</p>
<p>MD5 hash函数可以在可读的表单中显示数据，但是对于存储用户的信用卡信息的时候，需要进行加密处理后存储，并且需要之后进行解密。</p>
<p>最好的方法是使用mcrypt模块，这个模块包含了超过30中加密方式来保证只有加密者才能解密数据。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$data = &quot;Stuff you want encrypted&quot;;</span><br><span class="line">$key = &quot;Secret passphrase used to encrypt your data&quot;;</span><br><span class="line">$cipher = &quot;MCRYPT_SERPENT_256&quot;;</span><br><span class="line">$mode = &quot;MCRYPT_MODE_CBC&quot;;</span><br><span class="line">function encrypt($data, $key, $cipher, $mode) &#123;</span><br><span class="line">// Encrypt data</span><br><span class="line">return (string)</span><br><span class="line">            base64_encode</span><br><span class="line">                (</span><br><span class="line">                mcrypt_encrypt</span><br><span class="line">                    (</span><br><span class="line">                    $cipher,</span><br><span class="line">                    substr(md5($key),0,mcrypt_get_key_size($cipher, $mode)),</span><br><span class="line">                    $data,</span><br><span class="line">                    $mode,</span><br><span class="line">                    substr(md5($key),0,mcrypt_get_block_size($cipher, $mode))</span><br><span class="line">                    )</span><br><span class="line">                );</span><br><span class="line">&#125;</span><br><span class="line">function decrypt($data, $key, $cipher, $mode) &#123;</span><br><span class="line">// Decrypt data</span><br><span class="line">    return (string)</span><br><span class="line">            mcrypt_decrypt</span><br><span class="line">                (</span><br><span class="line">                $cipher,</span><br><span class="line">                substr(md5($key),0,mcrypt_get_key_size($cipher, $mode)),</span><br><span class="line">                base64_decode($data),</span><br><span class="line">                $mode,</span><br><span class="line">                substr(md5($key),0,mcrypt_get_block_size($cipher, $mode))</span><br><span class="line">                );</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p>
<p>mcrypt函数需要以下信息：</p>
<p>1、待加密数据</p>
<p>2、用来加密和解密数据的key</p>
<p>3、用户选择的加密数据的特定算法（cipher：如 <code>MCRYPT_TWOFISH192,MCRYPT_SERPENT_256， MCRYPT_RC2, MCRYPT_DES, and MCRYPT_LOKI97</code>）</p>
<p>4、用来加密的模式</p>
<p>5、加密的种子，用来起始加密过程的数据，是一个额外的二进制数据用来初始化加密算法</p>
<p>6、加密key和种子的长度，使用<code>mcrypt_get_key_size函数和mcrypt_get_block_size</code>函数可以获取</p>
<p>如果数据和key都被盗取，那么攻击者可以遍历ciphers寻找开行的方式即可，因此我们需要将加密的key进行MD5一次后保证安全性。同时由于mcrypt函数返回的加密数据是一个二进制数据，这样保存到数据库字段中会引起其他错误，使用了base64encode将这些数据转换为了十六进制数方便保存。</p>
]]></content>
  </entry>
  <entry>
    <title>PHP网站常见安全漏洞及防御方法</title>
    <url>/2016/20160523-1.html</url>
    <content><![CDATA[<h2 id="常见PHP网站安全漏洞"><a href="#常见PHP网站安全漏洞" class="headerlink" title="常见PHP网站安全漏洞"></a>常见PHP网站安全漏洞</h2><p>对于PHP的漏洞，目前常见的漏洞有五种。分别是Session文件漏洞、SQL注入漏洞、脚本命令执行漏洞、全局变量漏洞和文件漏洞。这里分别对这些漏洞进行简要的介绍。</p>
<h3 id="session文件漏洞"><a href="#session文件漏洞" class="headerlink" title="session文件漏洞"></a>session文件漏洞</h3><p>Session攻击是黑客最常用到的攻击手段之一。当一个用户访问某一个网站时，为了免客户每进人一个页面都要输人账号和密码，PHP设置了Session和Cookie用于方便用户的使用和访向。</p>
<h3 id="SQL注入漏洞"><a href="#SQL注入漏洞" class="headerlink" title="SQL注入漏洞"></a>SQL注入漏洞</h3><p>在进行网站开发的时候，程序员由于对用户输人数据缺乏全面判断或者过滤不严导致服务器执行一些恶意信息，比如用户信息查询等。黑客可以根据恶意程序返回的结果获取相应的信息。这就是月行胃的SQL注入漏洞。</p>
<h3 id="脚本执行漏洞"><a href="#脚本执行漏洞" class="headerlink" title="脚本执行漏洞"></a>脚本执行漏洞</h3><p>脚本执行漏洞常见的原因是由于程序员在开发网站时对用户提交的URL参数过滤较少引起的，用户提交的URL可能包含恶意代码导致跨站脚本攻击。脚本执行漏洞在以前的PHP网站中经常存在，但是随着PHP版本的升级，这些间题已经减少或者不存在了。</p>
<h3 id="全局变量漏洞"><a href="#全局变量漏洞" class="headerlink" title="全局变量漏洞"></a>全局变量漏洞</h3><p>PHP中的变量在使用的时候不像其他开发语言那样需要事先声明，PHP中的变量可以不经声明就直接使用，使用的时候系统自动创建，而且也不需要对变量类型进行说明，系统会自动根据上下文环境自动确定变量类型。这种方式可以大大减少程序员编程中出错的概率，使用起来非常的方便。</p>
<h3 id="文件漏洞"><a href="#文件漏洞" class="headerlink" title="文件漏洞"></a>文件漏洞</h3><p>文件漏洞通常是由于网站开发者在进行网站设计时对外部提供的数据缺乏充分的过滤导致黑客利用其中的漏洞在Web进程上执行相应的命令。假如在lsm.php中包含这样一段代码:include($b.”/aaa.php”.)，这对黑客来说，可以通过变量$b来实现远程攻击，可以是黑客自已的代码，用来实现对网站的攻击。可以向服务器提交a.php include=<a href="http://lZ7.0.0" target="_blank" rel="noopener">http://lZ7.0.0</a>. 1/b.php,然后执行b.php的指令。</p>
<h2 id="PHP常见漏洞的防范措施"><a href="#PHP常见漏洞的防范措施" class="headerlink" title="PHP常见漏洞的防范措施"></a>PHP常见漏洞的防范措施</h2><h3 id="对于Session漏洞的防范"><a href="#对于Session漏洞的防范" class="headerlink" title="对于Session漏洞的防范"></a>对于Session漏洞的防范</h3><p>从前面的分析可以知道，Session攻击最常见的就是会话劫持，也就是黑客通过各种攻击手段获取用户的Session ID，然后利用被攻击用户的身份来登录相应网站。为此，这里可以用以下几种方法进行防范:一是定期更换Session ID，更换Session ID可以用PHP自带函数来实现;二是更换Session名称，通常情况下Session的默认名称是PHPSESSID，这个变量一般是在cookie中保存的，如果更改了它的名称，就可以阻档黑客的部分攻击;三是对透明化的Session ID进行关闭处理，所谓透明化也就是指在http请求没有使用cookies来制定Session id时，Sessioin id使用链接来传递.关闭透明化Session ID可以通过操作PHP.ini文件来实现;四是通过URL传递隐藏参数，这样可以确保即使黑客获取了session数据，但是由于相关参数是隐藏的，它也很难获得Session ID变量值。</p>
<h3 id="对SQL注入漏洞的防范"><a href="#对SQL注入漏洞的防范" class="headerlink" title="对SQL注入漏洞的防范"></a>对SQL注入漏洞的防范</h3><p>黑客进行SQL注入手段很多，而且灵活多变，但是SQL注人的共同点就是利用输入过滤漏洞。因此，要想从根本上防止SQL注入，根本解决措施就是加强对请求命令尤其是查询请求命令的过滤。具体来说，包括以下几点:一是把过滤性语句进行参数化处理，也就是通过参数化语句实现用户信息的输入而不是直接把用户输入嵌入到语句中。二是在网站开发的时候尽可能少用解释性程序，黑客经常通过这种手段来执行非法命令;三是在网站开发时尽可能避免网站出现bug，否则黑客可能利用这些信息来攻击网站;仅仅通过防御SQL注入还是不够的，另外还要经常使用专业的漏洞扫描工具对网站进行漏洞扫描。</p>
<h3 id="对脚本执行漏洞的防范"><a href="#对脚本执行漏洞的防范" class="headerlink" title="对脚本执行漏洞的防范"></a>对脚本执行漏洞的防范</h3><p>黑客利用脚本执行漏洞进行攻击的手段是多种多样的，而且是灵活多变的，对此，必须要采用多种防范方法综合的手段，才能有效防止黑客对脚本执行漏洞进行攻击。这里常用的方法方法有以下四种。一是对可执行文件的路径进行预先设定。可以通过safe_moade_exec_dir来实现;二是对命令参数进行处理，一般用escapeshellarg函数实现;三是用系统自带的函数库来代替外部命令;四是在操作的时候进可能减少使用外部命令。</p>
<h3 id="对全局变量漏洞防范"><a href="#对全局变量漏洞防范" class="headerlink" title="对全局变量漏洞防范"></a>对全局变量漏洞防范</h3><p>对于PHP全局变量的漏洞问题，以前的PHP版本存在这样的问题，但是随着PHP版本升级到5.5以后，可以通过对php.ini的设置来实现，设置ruquest_order为GPC。另外在php.ini配置文件中，可以通过对Magic_quotes_runtime进行布尔值设置是否对外部引人的数据中的溢出字符加反斜线。为了确保网站程序在服务器的任何设置状态下都能运行。可以在整个程序开始的时候用get_magic_quotes_runtime检测设置状态决定是否要手工处理，或者在开始(或不需要自动转义的时候)用set_magic_quotes_runtime(0)关掉。</p>
<h3 id="对文件漏洞的防范"><a href="#对文件漏洞的防范" class="headerlink" title="对文件漏洞的防范"></a>对文件漏洞的防范</h3><p>对于PHP文件漏桐可以通过对服务器进行设置和配置来达到防范目的。这里具体的操作如下:一是把PHP代码中的错误提示关闭，这样可以避免黑客通过错误提示获取数据库信息和网页文件物理路径;二是对open_basedir尽心设置，也就是对目录外的文件操作进行禁止处理;这样可以对本地文件或者远程文件起到保护作用，防止它们被攻击，这里还要注意防范Session文件和上载文件的攻击;三是把safe-made设置为开启状态，从而对将要执行的命令进行规范，通过禁止文件上传，可以有效的提高PHP网站的安全系数。</p>
]]></content>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器架构</title>
    <url>/2016/20160522-1.html</url>
    <content><![CDATA[<p><img src="http://resoure.uiste.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-23%2022.59.35.png" alt="架构"></p>
]]></content>
      <tags>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>PSR规范</title>
    <url>/2016/20160521-1.html</url>
    <content><![CDATA[<p>PSR是由PHP Framework Interoperability Group（PHP通用性框架小组）发布的一系列标准/规范，目前包括了PSR-0~PSR-4共4个，而PSR-0就是其中的自动加载标准（其后的PSR-4称为改进的自动加载的标准，是PSR-0的补充。PSR-0使用更广泛）。<br><code>https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md</code></p>
<h2 id="强制要求"><a href="#强制要求" class="headerlink" title="强制要求"></a>强制要求</h2><p>下面描述了具体互操作性的自动加载所必须的条件：</p>
<ol>
<li>一个完全合格的namespace和class必须符合这样的结构 \<vendor name><namespace>*<class name></class></namespace></vendor></li>
<li>每个namespace必须有一个顶层的namespace（”Vendor Name”提供者名字）</li>
<li>每个namespace可以有多个子namespace</li>
<li>当从文件系统中加载时，每个namespace的分隔符要转换成 DIRECTORY_SEPARATOR(操作系统路径分隔符)</li>
<li>在CLASS NAME（类名）中，每个下划线(_)符号要转换成DIRECTORY_SEPARATOR。在namespace中，下划线(_)符号是没有（特殊）意义的。</li>
<li>当从文件系统中载入时，合格的namespace和class一定是以 .php 结尾的</li>
<li>verdor name,namespaces,class名可以由大小写字母组合而成（大小写敏感的）</li>
<li>除此之外可能还会遵循这个规则：如果文件不存在则返回false。</li>
</ol>
<p>例子<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\Doctrine\Common\IsolatedClassLoader =&gt; /path/to/project/lib/vendor/Doctrine/Common/IsolatedClassLoader.php</span><br><span class="line">\Symfony\Core\Request =&gt; /path/to/project/lib/vendor/Symfony/Core/Request.php</span><br><span class="line">\Zend\Acl =&gt; /path/to/project/lib/vendor/Zend/Acl.php</span><br><span class="line">\Zend\Mail\Message =&gt; /path/to/project/lib/vendor/Zend/Mail/Message.php</span><br><span class="line">NameSpace和Class Name中的下划线</span><br><span class="line">\namespace\package\Class_Name =&gt; /path/to/project/lib/vendor/namespace/package/Class/Name.php</span><br><span class="line">\namespace\package_name\Class_Name =&gt; /path/to/project/lib/vendor/namespace/package_name/Class/Name.php</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>将下划线转换成DIRECTORY_SEPARATOR实际上是出于兼容PHP5.3之前的版本的考虑</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autoload</span><span class="params">($className)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="comment">//这里的$className一般是用namespace的方式来引用的，文章开头已有介绍  </span></span><br><span class="line">    <span class="comment">//去除$className左边的'\' 这是PHP5.3的一个bug，详见https://bugs.php.net/50731  </span></span><br><span class="line">    $className = ltrim($className, <span class="string">'\\'</span>);  </span><br><span class="line">    $fileName  = <span class="string">''</span>;  </span><br><span class="line">    $namespace = <span class="string">''</span>;  </span><br><span class="line">    <span class="comment">//找到最后一个namespace分隔符的位置  </span></span><br><span class="line">    <span class="keyword">if</span> ($lastNsPos = strrpos($className, <span class="string">'\\'</span>)) &#123;  </span><br><span class="line">        $namespace = substr($className, <span class="number">0</span>, $lastNsPos);  </span><br><span class="line">        $className = substr($className, $lastNsPos + <span class="number">1</span>);  </span><br><span class="line">        $fileName  = str_replace(<span class="string">'\\'</span>, DIRECTORY_SEPARATOR, $namespace) . DIRECTORY_SEPARATOR;  </span><br><span class="line">    &#125;  </span><br><span class="line">    $fileName .= str_replace(<span class="string">'_'</span>, DIRECTORY_SEPARATOR, $className) . <span class="string">'.php'</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">require</span> $fileName;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="NameSpace（命名空间）"><a href="#NameSpace（命名空间）" class="headerlink" title="NameSpace（命名空间）"></a>NameSpace（命名空间）</h2><p>namespace是PHP5.3版本加入的新特性，用来解决在编写类库或应用程序时创建可重用的代码如类或函数时碰到的两类问题：</p>
<ol>
<li>用户编写的代码与PHP内部的类/函数/常量或第三方类/函数/常量之间的名字冲突。</li>
<li>为很长的标识符名称(通常是为了缓解第一类问题而定义的)创建一个别名（或简短）的名称，提高源代码的可读性。</li>
</ol>
<p>PHP 命名空间中的元素使用了类似文件系统的原理。例如，类名可以通过三种方式引用：</p>
<ol>
<li>非限定名称，或不包含前缀的类名称，例如 $a=new foo(); 或 foo::staticmethod();。如果当前命名空间是 currentnamespace，foo 将被解析为 currentnamespace\foo。如果使用 foo 的代码是全局的，不包含在任何命名空间中的代码，则 foo 会被解析为foo。 警告：如果命名空间中的函数或常量未定义，则该非限定的函数名称或常量名称会被解析为全局函数名称或常量名称。详情参见 使用命名空间：后备全局函数名称/常量名称。</li>
<li>限定名称,或包含前缀的名称，例如 $a = new subnamespace\foo(); 或 subnamespace\foo::staticmethod();。如果当前的命名空间是 currentnamespace，则 foo 会被解析为 currentnamespace\subnamespace\foo。如果使用 foo 的代码是全局的，不包含在任何命名空间中的代码，foo 会被解析为subnamespace\foo。</li>
<li>完全限定名称，或包含了全局前缀操作符的名称，例如， $a = new \currentnamespace\foo(); 或 \currentnamespace\foo::staticmethod();。在这种情况下，foo 总是被解析为代码中的文字名(literal name)currentnamespace\foo。<br>另外注意访问任意全局类、函数或常量，都可以使用完全限定名称，例如 \strlen() 或 \Exception 或 \INI_ALL。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line">use My\Full\Classname as Another, My\Full\NSname;  </span><br><span class="line">  </span><br><span class="line">$obj = new Another; // 实例化一个 My\Full\Classname 对象  </span><br><span class="line">$obj = new \Another; // 实例化一个Another对象  </span><br><span class="line">$obj = new Another\thing; // 实例化一个My\Full\Classname\thing对象  </span><br><span class="line">$obj = new \Another\thing; // 实例化一个Another\thing对象  </span><br><span class="line">  </span><br><span class="line">$a = \strlen(&apos;hi&apos;); // 调用全局函数strlen  </span><br><span class="line">$b = \INI_ALL; // 访问全局常量 INI_ALL  </span><br><span class="line">$c = new \Exception(&apos;error&apos;); // 实例化全局类 Exception  </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h2 id="Autoload（自动加载）"><a href="#Autoload（自动加载）" class="headerlink" title="Autoload（自动加载）"></a>Autoload（自动加载）</h2><p>通过定义的一个或一系列autoload函数，它会在试图使用尚未被定义的类时自动调用。通过调用autoload函数，脚本引擎在 PHP 出错失败前有了最后一个机会加载所需的类。这个autoload函数可以是默认的__autoload()，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line">function __autoload($class_name) &#123;  </span><br><span class="line">    require_once $class_name . &apos;.php&apos;;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">$obj  = new MyClass();  </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>也可以采用更灵活的方式，通过spl_autoload_register()来定义我们自己的__autoload()函数：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line">function my_autoload($class_name) &#123;  </span><br><span class="line">    require_once $class_name . &apos;.php&apos;;  </span><br><span class="line">&#125;  </span><br><span class="line">spl_autoload_register(&quot;my_autoload&quot;);  </span><br><span class="line">$obj  = new MyClass(); </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>以上代码将my_autoload()函数注册到<strong>autoload栈中，从而取到</strong>autoload()函数（注意<strong>autoload()函数将不再起作用，但可以显式的将其注册到</strong>autoload栈）。注意到刚才提到了__autoload栈，意味着我们可以注册多个autoload函数，根据注册的顺序依次加载（通过spl_autoload_register的第三个参数可以改变这一顺序)。<br>在这里我们展示了autoload函数最简单的例子，当然通过一些规则的设置，也可以胜任实际环境中许多复杂的情况。</p>
</blockquote>
]]></content>
      <tags>
        <tag>规范</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP正则</title>
    <url>/2016/20160123-1.html</url>
    <content><![CDATA[<p>没有金刚钻，别揽瓷器活！正则使用方便也有性能隐患！！！<br>PHP 正则替换<br>正则中的一些概念<br>元字符<br><code>.</code> 匹配除换行符意外的任意字符</p>
<p><code>\w</code> 匹配字母或数字或下划线</p>
<p><code>\s</code> 匹配任意的空白符</p>
<p><code>\d</code> 匹配数字</p>
<p><code>\b</code> 匹配单词的开始或结束</p>
<p><code>^</code> 匹配字符串的开始</p>
<p><code>$</code> 匹配字符串的结束</p>
<p><code>[x]</code> 匹配x字符，如匹配字符串中的 a、b 和 c 字符</p>
<p><code>\W</code> \w的反义，即匹配任意非字母，数字，下划线和汉字的字符</p>
<p><code>\S</code> \s的反义，即匹配任意非空白符的字符</p>
<p><code>\D</code> \d的反义，即匹配任意非数字的字符</p>
<p><code>\B</code> \b的反义，即不是单词开头或结束的位置</p>
<p><code>[^x]</code> 匹配除了 x 以外的任意字符，如 [^abc] 匹配除了 abc 这几个字母之外的任意字符</p>
<p>重复<br><code>*</code> 重复零次或更多次</p>
<p><code>+</code> 重复 1 次或更多次</p>
<p><code>?</code> 重复零次或 1 次</p>
<p><code>{n}</code> 重复 n 次</p>
<p><code>{n,}</code> 重复 n 次或更多次</p>
<p><code>{n,m}</code> 重复 n 到 m 次</p>
<p>模式修正符<br><code>i</code> 模式中的字符将同时匹配大小写字母<br><code>m</code> 字符串视为多行<br><code>s</code> 将字符串视为单行，换行符作为普通字符<br><code>x</code> 将模式中的空白忽略<br><code>e</code> preg_replace() 函数在替换字符串中对逆向引用作正常的替换，将其作为 PHP 代码求值，并用其结果来替换所搜索的字符串。<br><code>A</code> 强制仅从目标字符串的开头开始匹配<br><code>D</code> 模式中的 $ 元字符仅匹配目标字符串的结尾<br><code>U</code> 匹配最近的字符串<br><code>u</code> 模式字符串被当成 UTF-8</p>
<p>PHP正则函数<br>在 PHP 应用中，正则表达式主要用于：</p>
<ol>
<li>正则匹配：根据正则表达式匹配相应的内容 2. 正则替换：根据正则表达式匹配内容并替换 3. 正则分割：根据正则表达式分割字符串</li>
</ol>
<p>PHP 正则表达式匹配 <code>preg_match</code> 与 <code>preg_match_all</code> 函数<br><code>preg_match()</code><br><code>preg_match()</code> 函数用于进行正则表达式匹配，成功返回 1 ，否则返回 0 。</p>
<p>语法：</p>
<p><code>int preg_match( string pattern, string subject [, array matches ] )</code><br>参数说明：<br>pattern 正则表达式 <code>subject</code> 需要匹配检索的对象 <code>matches</code> 可选，存储匹配结果的数组， <code>$matches[0]</code> 将包含与整个模式匹配的文本，<code>$matches[1]</code> 将包含与第一个捕获的括号中的子模式所匹配的文本，以此类推</p>
<p><code>preg_match_all()</code><br><code>preg_match_all()</code> 函数用于进行正则表达式全局匹配，成功返回整个模式匹配的次数（可能为零），如果出错返回 FALSE 。</p>
<p>语法：</p>
<p><code>int preg_match_all( string pattern, string subject, array matches [, int flags ] )</code><br>参数说明:<br><code>pattern</code>: 正则表达式<br><code>subject</code>: 需要匹配检索的对象<br><code>matches</code>: 存储匹配结果的数组<br><code>flags</code>: 可选，指定匹配结果放入 <code>matches</code> 中的顺序，可供选择的标记有： </p>
<ol>
<li><code>PREG_PATTERN_ORDER</code>：默认，对结果排序使 <code>$matches[0]</code> 为全部模式匹配的数组，<code>$matches[1]</code> 为第一个括号中的子模式所匹配的字符串组成的数组，以此类推 </li>
<li><code>PREG_SET_ORDER</code>：对结果排序使 $matches[0] 为第一组匹配项的数组，$matches[1] 为第二组匹配项的数组，以此类推 3. <code>PREG_OFFSET_CAPTURE</code>：如果设定本标记，对每个出现的匹配结果也同时返回其附属的字符串偏移量</li>
</ol>
<p>部分实例<br>//1，过滤所有html标签的正则表达式： <code>&lt;/?[^&gt;]+&gt;</code></p>
<p>//2，过滤所有html标签的属性的正则表达式： <code>$html = preg_replace(“/&lt;([a-zA-Z]+)[^&gt;]*&gt;/”,“&lt;\\1&gt;“,$html);</code></p>
<p>//3，过滤部分html标签的正则表达式的排除式（比如排除</p><p>，即不过滤</p><p>）： &lt;/?[^pP/&gt;]+&gt;</p>
<p>//4，过滤部分html标签的正则表达式的枚举式（比如需要过滤<a><p><b>等）： &lt;/?[aApPbB][^&gt;]*&gt;</b></p>
<p>//5，过滤部分html标签的属性的正则表达式的排除式（比如排除alt属性，即不过滤alt属性）： \s(?!alt)[a-zA-Z]+=[^\s]*</p>
<p>//6，过滤部分html标签的属性的正则表达式的枚举式（比如alt属性）： (\s)alt=[^\s]*</p>
<p>正则表达式中排除不需要匹配的字符串或字符<br>(1)排除不需要匹配的某个字符： 例： [^\w] 排除匹配中的一个数字或字符串</p>
<p>(2) 排除匹配中不需要的字符串：例：(?!元宝商城|游戏特权|图说新游|多玩策划|新游视频|娱乐视频|多玩演播室|多玩画报)</p>
<p>加上|用于或选择。上面列出的字符串都不会参与匹配</p>
<p>常用正则<br>删除空行: <code>\r\n\r\n =&gt; \r\n</code></p>
<p>删除有空格的空行: <code>^ +$ =&gt;</code></p>
</a></p>]]></content>
      <tags>
        <tag>PHP正则</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP数据缓存</title>
    <url>/2016/20160119-1.html</url>
    <content><![CDATA[<p>缓存技术是web开发用来提高网站访问速度和减缓服务器压力的的重要手段之一，缓存主要分为页面缓存和数据缓存，一般情况下首页都采用页面缓存技术，其他的一些页面采用数据缓存比较多。下面贴上最近用php实现的数据缓存代码</p>
<p>cache.php<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Cache &#123;</span><br><span class="line">private $cache_path;//path for the cache</span><br><span class="line">private $cache_expire;//seconds that the cache expires</span><br><span class="line">//cache constructor, optional expiring time and cache path</span><br><span class="line">function __construct($exp_time=3600,$path=”cache/”)&#123;</span><br><span class="line">$this-&gt;cache_expire=$exp_time;</span><br><span class="line">$this-&gt;cache_path=$path;</span><br><span class="line">&#125;</span><br><span class="line">//returns the filename for the cache</span><br><span class="line">private function fileName($key)&#123;</span><br><span class="line">return $this-&gt;cache_path.md5($key);</span><br><span class="line">&#125;</span><br><span class="line">//creates new cache files with the given data, $key== name of the cache, data the info/values to store</span><br><span class="line">public function put($key, $data)&#123;</span><br><span class="line">$values = serialize($data);</span><br><span class="line">$filename = $this-&gt;fileName($key);</span><br><span class="line">$file = fopen($filename, ‘w’);</span><br><span class="line">    if ($file)&#123;//able to create the file</span><br><span class="line">        fwrite($file, $values);</span><br><span class="line">        fclose($file);</span><br><span class="line">          return true;</span><br><span class="line">    &#125;</span><br><span class="line">    else return false;</span><br><span class="line">&#125;</span><br><span class="line">//returns cache for the given key</span><br><span class="line">public function get($key)&#123;</span><br><span class="line">$filename = $this-&gt;fileName($key);</span><br><span class="line">if (!file_exists($filename) || !is_readable($filename))&#123;//can’t read the cache</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">if ( time() &lt; (filemtime($filename) + $this-&gt;cache_expire) ) &#123;//cache for the key not expired</span><br><span class="line">$file = fopen($filename, “r”);// read data file</span><br><span class="line">        if ($file)&#123;//able to open the file</span><br><span class="line">            $data = fread($file, filesize($filename));</span><br><span class="line">            fclose($file);</span><br><span class="line">            return unserialize($data);//return the values</span><br><span class="line">        &#125;</span><br><span class="line">        else return false;</span><br><span class="line">&#125;</span><br><span class="line">else return false;//was expired you need to create new</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p>
<p>调用方法（完整列子）：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function get_cache_data($key)&#123;</span><br><span class="line">      //从缓存从读取键值 $key 的数据</span><br><span class="line">      $values = $this-&gt;data_cache-&gt;get($key);</span><br><span class="line">      //返回读取结果</span><br><span class="line">      return $values;</span><br><span class="line">    &#125;</span><br><span class="line">    function put_cache_data($key,$data)&#123;</span><br><span class="line">      //insert code here…</span><br><span class="line">      //写入键值 $key 的数据</span><br><span class="line">      $is_write = $this-&gt;data_cache-&gt;put($key, $data);</span><br><span class="line">      return $is_write;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">      * 最新成交列表</span><br><span class="line">      */</span><br><span class="line">    public function get_lastbargainlist()</span><br><span class="line">    &#123;</span><br><span class="line">      $list_xml = $this-&gt;get_cache_data(“lastbargainlist”);</span><br><span class="line">      if(!$list_xml)&#123;</span><br><span class="line">        $list_xml = $this-&gt;soap_client-&gt;doRequest($this-&gt;request_xml(“HS”,”lastbargainlist”));</span><br><span class="line">        if(!$this-&gt;put_cache_data(“lastbargainlist”,$list_xml))&#123;</span><br><span class="line">          // echo “&lt;script&gt; alert(‘失败！’); &lt;/script&gt;”;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      $list_arr = simplexml_load_string($list_xml);</span><br><span class="line">      return $list_arr;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>实现页面缓存需要用到 ob_start  ob_get_content ob_clean等函数，下次有需要的时候再去实现</p>
]]></content>
      <tags>
        <tag>缓存优化</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 经典SQL语句</title>
    <url>/2015/20151210-Library-sql-library.html</url>
    <content><![CDATA[<h2 id="随机推荐SQL"><a href="#随机推荐SQL" class="headerlink" title="随机推荐SQL"></a>随机推荐SQL</h2><p>原生：<code>mysql&gt; select goods_id,goods_name from sh_goods order by rand() limit 5;</code></p>
<p>ThinkPHP：<code>$this-&gt;field(&#39;goods_id,goods_name,goods_thumb,goods_price&#39;)-&gt;where($where)-&gt;order(&#39;rand()&#39;)-&gt;limit($limit)-&gt;select();</code></p>
<h2 id="字段拼接"><a href="#字段拼接" class="headerlink" title="字段拼接"></a>字段拼接</h2><p><code>select group_concat(concat(b.attr_name,&#39;:&#39;,a.goods_attr_values) separator &#39;&lt;br/&gt;&#39; ) as ga from sh_goods_atr a left join sh_attribute b on a.attr_id = b.attr_id where a.id in (36,41);</code></p>
<h2 id="集合优化"><a href="#集合优化" class="headerlink" title="集合优化"></a>集合优化</h2><p>方法一：通过模糊查询<br><code>select * from goods where `goods_status` like &#39;%hot%&#39;;</code></p>
<p>模糊查询，以%百分号开头的查询无法使用索引，只能是全表扫描。效率低下</p>
<p>方法二：使用find_in_set(值，集合)<br><code>select * from goods where find_in_set(&#39;best&#39;,`goods_status`);</code></p>
<p>优化了方法一，效率提高了。但find_in_set()函数本身是个全表扫描的函数</p>
<p>方法三：使用位运算符<br>查找best：<br><code>select * from goods where goods_status &amp; 1;</code><br>查找既有best又有hot同时存在：<br><code>select * from goods where goods_status &amp; 1 and goods_status &amp; 4</code></p>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>ThinkPHP 钩子函数使用</title>
    <url>/2015/20151201-1.html</url>
    <content><![CDATA[<h2 id="注册-gt-邮箱验证"><a href="#注册-gt-邮箱验证" class="headerlink" title="注册 -&gt; 邮箱验证"></a>注册 -&gt; 邮箱验证</h2><h3 id="通过钩子函数完成数据入库前后的操作"><a href="#通过钩子函数完成数据入库前后的操作" class="headerlink" title="通过钩子函数完成数据入库前后的操作"></a>通过钩子函数完成数据入库前后的操作</h3><p>–Model<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入的前置钩子函数在注册数据入库前，进行密码加密</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  array &amp;$data  表单提交过来的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  array $option 表名和模型名以及一些查询条件（如果有）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_before_insert</span><span class="params">(&amp;$data,$option)</span></span>&#123;</span><br><span class="line">	$data[<span class="string">'salt'</span>]		= uniqid();</span><br><span class="line">	$data[<span class="string">'password'</span>]	= md5(md5($data[<span class="string">'password'</span>]) . $data[<span class="string">'salt'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入的后置钩子函数，在数据真正入库之后会被调用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  array $data   存入数据库的数据，包含主键id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  array $option 表名和模型名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_after_insert</span><span class="params">($data,$option)</span></span>&#123;</span><br><span class="line">	$email_key = md5($data[<span class="string">'id'</span>] . C(<span class="string">'EMAIL_KEY'</span>));</span><br><span class="line">	$content = <span class="string">"尊敬的用户您好，欢迎注册京西购物网站！&lt;br&gt;&lt;a href='http://local.shop.com/index.php/Member/Member/active/id/'"</span> .$data[<span class="string">'id'</span>]. <span class="string">"email_key"</span> . $email_key. <span class="string">" target='_blank'&gt;请点击激活您的账户&lt;/a&gt;"</span>;</span><br><span class="line">	sendMail($data[<span class="string">'email'</span>], <span class="string">'京西购物商城'</span>, $content );</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>–Controller<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 会员邮箱激活</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">active</span><span class="params">()</span></span>&#123;</span><br><span class="line">	$id = I(<span class="string">'id'</span>);</span><br><span class="line">	$email_key = I(<span class="string">'email_key'</span>);</span><br><span class="line">	$memberModel = D(<span class="string">'Member'</span>);</span><br><span class="line">	<span class="comment">// 验证用户id与用户秘钥是否匹配</span></span><br><span class="line">	<span class="keyword">if</span> (md5($id . C(<span class="string">'EMAIL_KEY'</span>)) == $email_key) &#123;</span><br><span class="line">		$userinfo = $memberModel-&gt;find($id);</span><br><span class="line">		<span class="keyword">if</span> ($userinfo) &#123;</span><br><span class="line">			$where = <span class="keyword">array</span>(<span class="string">'id'</span>=&gt;$id);</span><br><span class="line">			<span class="comment">// setField 返回更新信息影响的函数</span></span><br><span class="line">			$status = $memberModel-&gt;where($where)-&gt;setField(<span class="string">'isactive'</span>, <span class="number">1</span>);</span><br><span class="line">			<span class="keyword">if</span> ($status) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success(<span class="string">'用户激活成功'</span>, U(<span class="string">'Home/Index/index'</span>));</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">$this</span>-&gt;error(<span class="string">'用户激活失败'</span>, U(<span class="string">'Home/Index/index'</span>));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">$this</span>-&gt;error(<span class="string">'用户不存在'</span>, U(<span class="string">'Home/Index/index'</span>));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">$this</span>-&gt;error(<span class="string">'非法操作，该用户不存在'</span>,U(<span class="string">'Home/Index/index'</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="商品-gt-商品模块（简版）"><a href="#商品-gt-商品模块（简版）" class="headerlink" title="商品 -&gt; 商品模块（简版）"></a>商品 -&gt; 商品模块（简版）</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">** +-------------------------------------------</span></span><br><span class="line"><span class="comment">** | Author: uiste [ JUST DO IT ]</span></span><br><span class="line"><span class="comment">** +-------------------------------------------</span></span><br><span class="line"><span class="comment">** | Connection: &lt;blog.uiste.com&gt;</span></span><br><span class="line"><span class="comment">** +-------------------------------------------</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Admin</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 商品模块</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsModel</span> <span class="keyword">extends</span> <span class="title">Model</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//自动验证</span></span><br><span class="line">	<span class="keyword">protected</span> $_validate = <span class="keyword">array</span>(</span><br><span class="line">		<span class="keyword">array</span>(<span class="string">'goods_name'</span>, <span class="string">'require'</span>, <span class="string">'商品名称不能为空'</span>),</span><br><span class="line">	);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 自动填充</span></span><br><span class="line">	<span class="keyword">protected</span> $_auto = <span class="keyword">array</span>(</span><br><span class="line">		<span class="keyword">array</span>(<span class="string">'goods_sn'</span>,<span class="string">'_goods_sn'</span>,<span class="number">1</span>,<span class="string">'callback'</span>),</span><br><span class="line">		<span class="keyword">array</span>(<span class="string">'add_time'</span>,<span class="string">'_add_time'</span>,<span class="number">1</span>,<span class="string">'callback'</span>),</span><br><span class="line">	);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 商品货号填充检查</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">_goods_sn</span><span class="params">($sn)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">empty</span>($sn)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">'sn_'</span> . uniqid();</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> $sn;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 商品添加时间检查</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">_add_time</span><span class="params">($time)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">empty</span>($time)) &#123;</span><br><span class="line">			<span class="keyword">return</span> time();</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> strtotime($time);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 搜索分页功能</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">search</span><span class="params">()</span></span>&#123;</span><br><span class="line">		$where = <span class="string">'1 and is_delete = 0'</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 查询添加依据是否传递查询字段，没有传递默认为空，条件不成立</span></span><br><span class="line">		<span class="keyword">if</span> ($goods_name = I(<span class="string">'get.gn'</span>)) &#123;</span><br><span class="line">			$where .= <span class="string">" and `goods_name` like '%$goods_name%'"</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 排序字段与排序方式通过判断前台是否有传递，有传递使用，没有就用默认值</span></span><br><span class="line">		$orderBy 	= !<span class="keyword">empty</span>(I(<span class="string">'get.ob'</span>)) ? I(<span class="string">'get.ob'</span>) : <span class="string">'goods_id'</span>;</span><br><span class="line">		$orderWay 	= !<span class="keyword">empty</span>(I(<span class="string">'get.ow'</span>)) ? I(<span class="string">'get.ow'</span>) : <span class="string">'desc'</span>;</span><br><span class="line"></span><br><span class="line">		$count = <span class="keyword">$this</span>-&gt;where($where)-&gt;count();</span><br><span class="line">		$size = <span class="number">5</span>;</span><br><span class="line">		$page = <span class="keyword">new</span> \Think\Page($count, $size);</span><br><span class="line"></span><br><span class="line">		$page-&gt;setConfig(<span class="string">'prev'</span>,<span class="string">'«'</span>);</span><br><span class="line">		$page-&gt;setConfig(<span class="string">'next'</span>,<span class="string">'»'</span>);</span><br><span class="line">		$show = $page-&gt;show();</span><br><span class="line">		$list = <span class="keyword">$this</span>-&gt;where($where)</span><br><span class="line">				-&gt;alias(<span class="string">'goods'</span>)</span><br><span class="line">	            -&gt;join(<span class="string">'left join jx_category cate on goods.cate_id = cate.cate_id'</span>)</span><br><span class="line">				-&gt;order(<span class="string">"$orderBy $orderWay"</span>)</span><br><span class="line">				-&gt;limit($page-&gt;firstRow . <span class="string">','</span> . $page-&gt;listRows)</span><br><span class="line">				-&gt;select();</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">			<span class="string">'show'</span> 	=&gt; $show,</span><br><span class="line">			<span class="string">'list'</span>	=&gt;	$list,</span><br><span class="line">		);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 插入前置钩子函数处理图片上传</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">_before_insert</span><span class="params">(&amp;$data, $option)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">$this</span>-&gt;UploadFile($data, $option);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 更新前置钩子函数处理更新信息</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_before_update</span><span class="params">(&amp;$data, $options)</span></span>&#123;</span><br><span class="line">		<span class="comment">// 如果文件上传成功，执行以下更新信息</span></span><br><span class="line">		<span class="comment">// dump($options);exit();</span></span><br><span class="line">		<span class="comment">// 如果没有文件$_FILES['goods_img']['error'] == 4</span></span><br><span class="line">		<span class="keyword">if</span> ($_FILES[<span class="string">'goods_img'</span>][<span class="string">'error'</span>]== <span class="string">'0'</span> ) &#123;</span><br><span class="line">			$status = <span class="keyword">$this</span>-&gt;UploadFile($data, $option);</span><br><span class="line">			<span class="comment">// dump($status);exit();</span></span><br><span class="line">			<span class="keyword">if</span> ($status) &#123;</span><br><span class="line">				$goods_id = $options[<span class="string">'where'</span>][<span class="string">'goods_id'</span>];</span><br><span class="line">				$goodsOldImg = <span class="keyword">$this</span>-&gt;field(<span class="string">'goods_img , goods_thumb'</span>)-&gt;find();</span><br><span class="line">				<span class="comment">// dump($goodsOldImg);exit();</span></span><br><span class="line">				<span class="keyword">foreach</span> ($goodsOldImg <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">					@unlink( C(<span class="string">'UPLOAD_ROOT_PATH'</span>) . $value );</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 图片上传处理函数</span></span><br><span class="line">	<span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">UploadFile</span><span class="params">(&amp;$data, $option)</span></span>&#123;</span><br><span class="line">		$configMaxSize 	= 	(int)C(<span class="string">'MAX_UPLOAD_FILE_SIZE'</span>);</span><br><span class="line">		$phpiniMaxSize 	= 	(int)ini_get(<span class="string">'upload_max_filesize'</span>);</span><br><span class="line">		$allowMaxSize	=	min($configMaxSize, $phpiniMaxSize);</span><br><span class="line"></span><br><span class="line">		$rootPath		= 	C(<span class="string">'UPLOAD_ROOT_PATH'</span>);</span><br><span class="line">		$exts 			=	C(<span class="string">'ALLOW_EXTS'</span>);</span><br><span class="line"></span><br><span class="line">		$config 		=	<span class="keyword">array</span>(</span><br><span class="line">			<span class="string">'maxSize'</span>	=&gt;	$allowMaxSize * <span class="number">1024</span> * <span class="number">1024</span>,</span><br><span class="line">			<span class="string">'rootPath'</span>	=&gt;	$rootPath,</span><br><span class="line">			<span class="string">'savePath'</span>	=&gt;	<span class="string">'Goods/'</span>,</span><br><span class="line">			<span class="string">'exts'</span>		=&gt; $exts,</span><br><span class="line">		);</span><br><span class="line"></span><br><span class="line">		$upload = <span class="keyword">new</span> \Think\Upload($config);</span><br><span class="line">		$info   = $upload-&gt;upload();</span><br><span class="line">		<span class="keyword">if</span> ($info) &#123;</span><br><span class="line">			<span class="comment">// 图片上传路径</span></span><br><span class="line">			$data[<span class="string">'goods_img'</span>] = $info[<span class="string">'goods_img'</span>][<span class="string">'savepath'</span>] . $info[<span class="string">'goods_img'</span>][<span class="string">'savename'</span>];</span><br><span class="line">			<span class="comment">// 生成缩略图</span></span><br><span class="line">			$image = <span class="keyword">new</span> \Think\Image();</span><br><span class="line">			$image-&gt;open( $rootPath . $data[<span class="string">'goods_img'</span>] );</span><br><span class="line"></span><br><span class="line">			$thumImg = $info[<span class="string">'goods_img'</span>][<span class="string">'savepath'</span>] . <span class="string">'thumb_'</span> . $info[<span class="string">'goods_img'</span>][<span class="string">'savename'</span>];</span><br><span class="line">			$image-&gt;thumb( C(<span class="string">'THUMB.THUMB_W'</span>), C(<span class="string">'THUMB.THUMB_H'</span>), C(<span class="string">'THUMB.THUMB_S'</span>) )-&gt;save($rootPath . $thumImg );</span><br><span class="line">			$data[<span class="string">'goods_thumb'</span>] = $thumImg;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			$uploadError = $upload-&gt;getError();</span><br><span class="line">			<span class="keyword">$this</span>-&gt;error = $uploadError;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>ThinkPHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 负载均衡</title>
    <url>/2015/20151120-1.html</url>
    <content><![CDATA[<p>Nginx与Apache的区别<br>Apache：扩展模块众多，功能强大，并发性能表现一般<br>Nginx：功能相对于Apache较少，但并发性能特别好。异步非阻塞方式</p>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="Linux网络配置"><a href="#Linux网络配置" class="headerlink" title="Linux网络配置"></a>Linux网络配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ONBOOT=yes</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=192.168.34.102</span><br><span class="line">NETMASK=255.255.255.0</span><br></pre></td></tr></table></figure>
<h2 id="yum源软件安装"><a href="#yum源软件安装" class="headerlink" title="yum源软件安装"></a>yum源软件安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mkdir /mnt/cdrom</span><br><span class="line">[root@localhost ~]# mount /dev/cdrom /mnt/cdrom/</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# cd /etc/yum.repos.d/</span><br><span class="line">[root@localhost yum.repos.d]# mv CentOS-Base.repo CentOS-Base.repo.bak</span><br><span class="line">[root@localhost yum.repos.d]# vi CentOS-Media.repo</span><br><span class="line">    name=CentOS-$releasever - Media</span><br><span class="line">    baseurl=file:///media/CentOS/</span><br><span class="line">            file:///mnt/cdrom/</span><br><span class="line">            file:///media/cdrecorder/</span><br><span class="line">    gpgcheck=1</span><br><span class="line">    enabled=1</span><br><span class="line">[root@localhost yum.repos.d]# yum install -y vim</span><br><span class="line">[root@localhost yum.repos.d]# yum -y install make gcc gcc-c++ openssl openssl-devel pcre-devel zlib-devel libxml2 libxml2-devel</span><br></pre></td></tr></table></figure>
<h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><ol>
<li>解压<br><code>[root@localhost LNMP]# tar -zxvf nginx-1.8.0.tar.gz</code></li>
<li>编译<br><code>[root@localhost nginx-1.8.0]# ./configure --prefix=/usr/local/nginx</code></li>
<li>安装<br><code>[root@localhost nginx-1.8.0]# make &amp;&amp; make install</code></li>
<li>启动<br><code>[root@localhost nginx-1.8.0]# /usr/local/nginx/sbin/nginx</code></li>
<li>检查<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost nginx-1.8.0]# netstat -tunple|grep 80</span><br><span class="line">tcp        0      0 0.0.0.0:80                  0.0.0.0:*                   LISTEN      0          24507      5148/nginx</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>图示：<br><img src="http://resoure.uiste.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-23%2022.33.00.png" alt></p>
<h2 id="安装PHP服务"><a href="#安装PHP服务" class="headerlink" title="安装PHP服务"></a>安装PHP服务</h2><ol>
<li>解压<br><code>[root@localhost LNMP]# tar -zxvf php-5.3.28.tar.gz</code></li>
<li>编译(服务)<br><code>[root@localhost php-5.3.28]# ./configure --prefix=/usr/local/php --enable-fpm</code></li>
<li>安装<br><code>[root@localhost php-5.3.28]# make &amp;&amp; make install</code></li>
<li>配置文件<br><code>[root@localhost php-5.3.28]# cp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf</code><br><code>[root@localhost conf]# cp /home/LNMP/php-5.3.28/php.ini-development /usr/local/php/lib/php.ini</code></li>
<li><p>启动/重启<br><code>[root@localhost php-5.3.28]# /usr/local/php/sbin/php-fpm</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost conf]# ps -aux|grep php</span><br><span class="line">Warning: bad syntax, perhaps a bogus &apos;-&apos;? See /usr/share/doc/procps-3.2.8/FAQ</span><br><span class="line">root      4749  0.0  0.2  16256  2052 ?        Ss   22:46   0:00 php-fpm: master process (/usr/local/php/etc/php-fpm.conf)</span><br><span class="line">nobody    4750  0.0  0.2  16256  1724 ?        S    22:46   0:00 php-fpm: pool www</span><br><span class="line">nobody    4751  0.0  0.2  16256  1724 ?        S    22:46   0:00 php-fpm: pool www</span><br><span class="line">root      4759  0.0  0.0   5980   740 pts/0    S+   22:53   0:00 grep php</span><br><span class="line">[root@localhost conf]# kill -USR2 4749</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost php-5.3.28]# netstat -tunple|grep 9000</span><br><span class="line">tcp        0      0 127.0.0.1:9000              0.0.0.0:*                   LISTEN      0          86848      4749/php-fpm</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="nginx关联php"><a href="#nginx关联php" class="headerlink" title="nginx关联php"></a>nginx关联php</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost php-5.3.28]# cd /usr/local/nginx/conf/</span><br><span class="line">[root@localhost conf]# vim nginx.conf</span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">            root           html;</span><br><span class="line">            fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">            fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">            include        fastcgi.conf;</span><br><span class="line">        &#125;</span><br><span class="line">[root@localhost conf]# /usr/local/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>
<h2 id="nginx配置文件"><a href="#nginx配置文件" class="headerlink" title="nginx配置文件"></a>nginx配置文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#运行的用户</span><br><span class="line">#user  nobody;</span><br><span class="line"></span><br><span class="line">#工作进程数量，建议工作进程数等于cpu个数</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#错误日志</span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#记录nginx的主进程号的文件位置</span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#网络事件及连接数</span><br><span class="line">events &#123;</span><br><span class="line">    #每个工作进程最大的并发连接数，	</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#web相关的配置项</span><br><span class="line">http &#123;</span><br><span class="line">    #nginx能够识别的文件类型	</span><br><span class="line">    include       mime.types;</span><br><span class="line"></span><br><span class="line">    #默认的文件类型</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #日志文件格式	</span><br><span class="line">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line">    #访问日志	</span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    #是否使用系统的sendfile函数输出	</span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    #超时时间	</span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    </span><br><span class="line">    #开启gzip压缩	</span><br><span class="line">    #gzip  on;</span><br><span class="line">    </span><br><span class="line">    #虚拟主机配置，每一个sever就是一个虚拟主机	</span><br><span class="line">    server &#123;</span><br><span class="line">        #监听80端口 </span><br><span class="line">        listen       80;</span><br><span class="line">	#域名</span><br><span class="line">        server_name  abc.com;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line">         </span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line">        #默认的匹配规则</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html; #web项目的根目录</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>
<h2 id="配置虚拟主机"><a href="#配置虚拟主机" class="headerlink" title="配置虚拟主机"></a>配置虚拟主机</h2><ol>
<li><p>修改主配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost conf]# pwd</span><br><span class="line">/usr/local/nginx/conf</span><br><span class="line">[root@localhost conf]# vim nginx.conf</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line">    include /usr/local/nginx/conf/vhost/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建vhost目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost vhost]# vim uiste.conf</span><br><span class="line">server &#123;</span><br><span class="line">    #监听80端口</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.uiste.com;</span><br><span class="line">    root /usr/local/nginx/html/uiste; #虚拟主机站点根目录</span><br><span class="line">    #默认的匹配规则</span><br><span class="line">    location / &#123;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        fastcgi_index  index.php;</span><br><span class="line">        include        fastcgi.conf;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">[root@localhost vhost]# mkdir /usr/local/nginx/html/uiste</span><br><span class="line">[root@localhost vhost]# /usr/local/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="访问日志"><a href="#访问日志" class="headerlink" title="访问日志"></a>访问日志</h1><p>nginx下访问日志是由配置项中的log_format跟access_log两个参数控制</p>
<ol>
<li><p>log_format<br>作用：申明一个日志文件格式<br>语法：log_format 别名 具体的信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>access_log<br>作用：使用某种日志格式记录信息<br>语法：access_log 存储地址 使用的别名<br><code>access_log  logs/access.log  main;</code></p>
</li>
<li><p>访问日志中的参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$remote_addr：客户端的IP地址</span><br><span class="line">$remote_user：客户端的用户信息 通过权限验证之后的用户信息</span><br><span class="line">$time_local：时间及时区信息</span><br><span class="line">$request：请求类型及协议请求的URL地址</span><br><span class="line">$status：状态码</span><br><span class="line">$body_bytes_sent：返回数据大小</span><br><span class="line">$http_referer：请求的来源</span><br><span class="line">$http_user_agent：客户的信息</span><br><span class="line">$http_x_forwarded_for：真实客户端的IP地址，使用透传才能获取到真实客户端的IP地址</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>访问日志的申明只能写在http与sever之间，不能写在server配置中。访问日志可以申明多个。相对于server,http是全局设置，在虚拟主机设置使用访问日志，优先使用虚拟主机设置的格式，如果在虚拟主机中没有设置，但是在全局http中有开启使用访问日志，就会使用全局的格式记录</p>
</blockquote>
<h1 id="日志分割"><a href="#日志分割" class="headerlink" title="日志分割"></a>日志分割</h1><h2 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">基本格式 : </span><br><span class="line">*　*　*　*　*　command 表示(分　时　日　月　周　命令) </span><br><span class="line">第1列表示分钟1～59 每分钟用*或者 */1表示 </span><br><span class="line">第2列表示小时1～23（0表示0点） </span><br><span class="line">第3列表示日期1～31 </span><br><span class="line">第4列表示月份1～12 </span><br><span class="line">第5列标识号星期0～6（0表示星期天） </span><br><span class="line">第6列要运行的命令</span><br></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol>
<li>一个脚本</li>
<li>一个容器能够定时执行脚本</li>
</ol>
<h2 id="定时分割"><a href="#定时分割" class="headerlink" title="定时分割"></a>定时分割</h2><ol>
<li><p>创建cat_access.sh脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost uiste]# vim cat_access.sh</span><br><span class="line"># /bin/bash</span><br><span class="line">logs_path=&quot;/usr/local/nginx/logs/&quot;</span><br><span class="line">#以前的日志文件</span><br><span class="line">log_name=&quot;access.log&quot;</span><br><span class="line">#指定nginx主进程号存储位置</span><br><span class="line">pid_path=&quot;/usr/local/nginx/logs/nginx.pid&quot;</span><br><span class="line">mkdir -p $&#123;logs_path&#125;$(date -d &quot;yesterday&quot; +&quot;%Y&quot;)/$(date -d &quot;yesterday&quot; +&quot;%m&quot;)/</span><br><span class="line">mv $&#123;logs_path&#125;access.log $&#123;logs_path&#125;$(date -d &quot;yesterday&quot; +&quot;%Y&quot;)/$(date -d &quot;yesterday&quot; +&quot;%m&quot;)/access_$(date -d &quot;yesterday&quot; +&quot;%Y%m%d&quot;).log</span><br><span class="line"></span><br><span class="line">#重新加载配置文件</span><br><span class="line">kill -USR1 `cat $&#123;pid_path&#125;`</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改cat_access.sh脚本为可执行文件<br><code>[root@localhost uiste]# chmod -R 777 cat_access.sh</code></p>
</li>
<li>测试cat_access.sh脚本运行情况<br><code>[root@localhost uiste]# ./cat_access.sh</code></li>
<li><p>将脚本放入crontab中定时执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost uiste]# crontab -e</span><br><span class="line">* * * * * /usr/local/nginx/html/uiste/cat_access.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看结果<br><code>[root@localhost uiste]# tail -f /var/log/cron</code></p>
</li>
</ol>
<h1 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h1><ol>
<li>建立测试文件（略）</li>
<li><p>修改主服务器配置文件实现反向代理<br>将其他的locatin都删除掉只留下一个 /的location</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost uiste]# cd /usr/local/nginx/conf/vhost</span><br><span class="line">[root@localhost vhost]# vim uiste.conf</span><br><span class="line">server &#123;</span><br><span class="line">    #监听80端口</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.uiste.com;</span><br><span class="line">    root /usr/local/nginx/html/uiste; #虚拟主机站点根目录</span><br><span class="line">    #默认的匹配规则</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://192.168.34.101;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@localhost vhost]# /usr/local/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试<br>截图</p>
</li>
</ol>
<h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><p>192.168.34.105作为反向代理服务器<br>192.168.34.101真实处理请求的服务器<br>192.168.34.102真实处理请求的服务器</p>
<ol>
<li><p>配置nginx主配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost uiste]# vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    access_log  logs/access.log  main;</span><br><span class="line">    # 配置代理服务器</span><br><span class="line">    upstream web&#123;</span><br><span class="line">        server 192.168.34.101;</span><br><span class="line">        server 192.168.34.102;</span><br><span class="line">    &#125;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line">    include /usr/local/nginx/conf/vhost/*.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@localhost uiste]# vim /usr/local/nginx/conf/vhost/uiste.conf</span><br><span class="line">server &#123;</span><br><span class="line">    #监听80端口</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.uiste.com;</span><br><span class="line">    root /usr/local/nginx/html/uiste; #虚拟主机站点根目录</span><br><span class="line">    #默认的匹配规则</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://web; #反向代理一组服务器</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@localhost vhost]# /usr/local/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试效果</p>
</li>
</ol>
<p><strong>upstream语法说明</strong><br>语法：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Upstream 别名&#123;</span><br><span class="line">	Server IP地址/域名 参数;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>参数：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、down标注服务器为关闭状态，不参与负载均衡</span><br><span class="line">2、weight=number：权重按照轮循的方式依据权重实现不同的负载</span><br><span class="line">3、max_fails=number：最大失败次数</span><br><span class="line">4、fail_timeout=number：超时时间</span><br><span class="line">5、backup	：表示为备用服务器。</span><br></pre></td></tr></table></figure></p>
<p>负载均衡算法：</p>
<ol>
<li>轮循</li>
<li>权重</li>
<li>最小连接</li>
<li>ip_hash<h1 id="nginx重启报错"><a href="#nginx重启报错" class="headerlink" title="nginx重启报错"></a>nginx重启报错</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost vhost]# /usr/local/nginx/sbin/nginx -s reload</span><br><span class="line">nginx: [error] open() &quot;/usr/local/nginx/logs/nginx.pid&quot; failed (2: No such file or directory)</span><br><span class="line">#解决方法：</span><br><span class="line">`[root@localhost logs]# /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf`</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>使用nginx-c的参数指定nginx.conf文件的位置</p>
</blockquote>
]]></content>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Memcache 分布式缓存</title>
    <url>/2015/20151119-1.html</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Memcache是一套分布式高速缓存系统，分布式是说你可以在多台服务器上安装Memcache服务，这样可以达到一个很好的集群效果，<br>高速是因为Memcache所有的数据都是保存在内存中的，读取速度比存储在硬盘中的数据快的多。<br>Memcache的作用，但应用访问量特别大的时候，数据库的访问量也特别大。Memcache就是在应用与数据库之间的一个缓冲层。第一次读取数据库之后就可以保存到Memcache中，之后可以优先通过Memcache访问<br>Memcache可以理解为只有一张表的数据库，只有两个字段，分别是主键key和字段</p>
<p>Memcache是非持久化储存，一定要保存对数据的存储要求并不是特别高，即使数据丢失也不会对我们的数据造成太大的影响</p>
<p>Memcache是分布式的存储，对于内存的消耗是特别大的，如果是单机的情况，不建议使用Memcache</p>
<p>格式简单，key与value，保存除了资源以外的所有数据，都是通过内部序列化与反序列化的机制进行数据的存储的。</p>
<h2 id="memcache的常用参数"><a href="#memcache的常用参数" class="headerlink" title="memcache的常用参数"></a>memcache的常用参数</h2><p>-p：指定memcache的tcp协议使用的端口号<br>-d :start/stop：memcache的启动/关闭<br>-d: install/uninstall ：memcache服务的安装/卸载<br>-u：指定用户名，此参数只在Linux下使用<br>-m：表示memcache能够使用的最大的内存，默认64M<br>-c：表示指定memcache能够接受的最大的并发量，默认是1024个</p>
<p>在memcache中没有账号密码，因此memcache中的数据不太安全。<br>解决办法：</p>
<ol>
<li>将memcache服务器置于内网中，然后使用反向代理技术访问</li>
<li>只容许某个IP地址可以访问，通过服务器防火墙的配置</li>
</ol>
<h2 id="memcache中常用的操作指令"><a href="#memcache中常用的操作指令" class="headerlink" title="memcache中常用的操作指令"></a>memcache中常用的操作指令</h2><p><strong>set:</strong><br>作用：是用于设置(添加，修改)某个数据<br>语法：set keyname(键名)  0|1(数据是否压缩处理) exprie(有效时间) length(字符长度)<br>Value(具体的数据)<br>注意写入具体的value数据时有回车换行操作</p>
<p><strong>get:</strong><br>作用：获取某个键的值<br>语法：get keyname</p>
<p><strong>add:</strong><br>作用：添加某个键<br>语法：add keyname(键名)  0|1(数据是否压缩处理)     exprie(有效时间) length(字符长度)<br>Value(具体的数据)</p>
<p><strong>delete:</strong><br>作用：删除某个键<br>语法：delete 键名</p>
<p><strong>incr:</strong><br>作用：自增长<br>语法：incr keyname num(具体增长的值)</p>
<p><strong>decr:</strong><br>作用：自减<br>语法： decr keyname num</p>
<p><strong>flush_all:</strong><br>作用：清除所有的键<br>语法:flush_all</p>
<p><strong>stats</strong><br>作用：表示memcache服务器状态<br>语法：stats</p>
<blockquote>
<p>对于memcache有一个命中率来衡量服务器性能如何<br>命中率=get_hits/cmd_get*100%</p>
</blockquote>
<h2 id="存储数据类型"><a href="#存储数据类型" class="headerlink" title="存储数据类型"></a>存储数据类型</h2><p>memcache支持php中的除了资源类型外其他的都可以存储</p>
<h2 id="Linux下安装memcache服务"><a href="#Linux下安装memcache服务" class="headerlink" title="Linux下安装memcache服务"></a>Linux下安装memcache服务</h2><p>关闭防火墙<code>service iptables stop</code></p>
<h3 id="安装libevent"><a href="#安装libevent" class="headerlink" title="安装libevent"></a>安装libevent</h3><ol>
<li>解压：<code>[root@localhost memcache]# tar -zxvf libevent-2.0.20-stable</code>    （进入编译目录）</li>
<li>编译：<code>[root@localhost libevent-2.0.20-stable]# ./configure --prefix=/usr/local/libevent</code></li>
<li>安装：<code>[root@localhost libevent-2.0.20-stable]# make &amp;&amp; make install</code></li>
</ol>
<h3 id="安装Memcache："><a href="#安装Memcache：" class="headerlink" title="安装Memcache："></a>安装Memcache：</h3><ol>
<li>解压：<code>[root@localhost memcache]# tar -zxvf memcached-1.4.20.tar.gz</code>     (进入编译目录)</li>
<li>编译：<code>[root@localhost memcached-1.4.20]# ./configure --prefix=/usr/local/memcache --with-libevent=/usr/local/libevent</code></li>
<li>安装：<code>[root@localhost memcached-1.4.20]# make &amp;&amp; make install</code></li>
<li>启动：<br> a. <code>[root@localhost memcached-1.4.20]# cd /usr/local/memcache/bin</code><br> b. <code>[root@localhost bin]# ./memcached -u root -d start</code></li>
<li>检查：<code>[root@localhost bin]# netstat -tunple | grep 11211</code></li>
</ol>
<h2 id="memcache实际应用："><a href="#memcache实际应用：" class="headerlink" title="memcache实际应用："></a>memcache实际应用：</h2><ol>
<li>session 写入Memcache中</li>
<li>作为分布式存储系统：一个任务由多台服务器一起协调完成，如果一台服务器出现异常，整个任务链不能正常进行 addServer，依据键名实现分布式存储。</li>
<li>作为缓存系统使用</li>
</ol>
<h3 id="session写入Memcache中："><a href="#session写入Memcache中：" class="headerlink" title="session写入Memcache中："></a>session写入Memcache中：</h3><ul>
<li><p>写入文件中：</p>
<blockquote>
<p>session过多，会导致文件过多，查询效率变慢<br>负载均衡的项目不能正常使用</p>
</blockquote>
</li>
<li><p>写入数据库中：</p>
<blockquote>
<p><code>session_save_handle($open,$close,$read,$write,$destroy,$gc)</code></p>
</blockquote>
</li>
<li><p>写入Memcache中：</p>
<blockquote>
<p>session_save_handle();<br>设置配置文件<br>ini_set(‘session.save_handle’,’Memcache’);<br>ini_set(‘session.save_path’,’tcp://127.0.0.1:11211’);</p>
</blockquote>
</li>
</ul>
<h3 id="Memcache作为缓存系统"><a href="#Memcache作为缓存系统" class="headerlink" title="Memcache作为缓存系统"></a>Memcache作为缓存系统</h3><ol>
<li>读取数据时，先通过Memcache服务器读取，如果能读取到则直接使用，如果读取不到，则去数据库中查询，查询到以后将数据缓存到Memcache中</li>
<li>修改数据时，先将mysql中的数据修改掉，然后更新memcache缓存重点的数据(也可以之间删除对应的key)</li>
</ol>
]]></content>
      <tags>
        <tag>服务器优化</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/2015/20151119-2.html</url>
    <content><![CDATA[<p>redis是一个基于内存的键值对的数据库。支持5中数据类型其中包括字符串，链表，哈希，无序集合、有序集合。并且支持数据持久化操作(保证数据安全，在服务器重启之后，会自动的将数据还原到内存中)</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li>解压<br><code>[root@localhost redis]# tar -zxvf redis-2.6.14.tar.gz</code></li>
<li>安装<br><code>[root@localhost redis-2.6.14]# make &amp;&amp; make install</code></li>
<li>创建软件目录<br><code>[root@localhost redis-2.6.14]# mkdir /usr/local/redis</code></li>
<li>复制服务到软件目录<br><code>[root@localhost redis-2.6.14]# cp src/redis-server /usr/local/redis/</code></li>
<li>复制配置文件到软件目录<br><code>[root@localhost redis-2.6.14]# cp redis.conf /usr/local/redis/</code></li>
<li>进入软件目录下启动Redis<br><code>[root@localhost redis-2.6.14]# /usr/local/redis/redis-server</code><br><img src="http://resoure.uiste.com/Redis.png" alt="Redis_success"></li>
<li>修改Redis为后台启动<br><code></code></li>
<li>通过配置文件启动redis服务<br><code></code></li>
<li>查看是否正常运行<br><code>netstat -tunple|grep 6379</code></li>
</ol>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ol>
<li>exists key<br>检查某个key是否存在</li>
<li>del key<br>删除某个key</li>
<li>type key<br>检查key所对应的value的类型<br>在redis中对外显示没有整形，在内部有区分</li>
<li>keys pattern<br>查找满足条件的所有的key<br>keys <em><br>keys user_</em></li>
<li>rename oldkey newkey<br>重命名某个key<br>expire key<br>为某个key设置过期时间</li>
<li>ttl key<br>查看某个key的有效时间</li>
<li>select db<br>切换数据库<br>在redis中有数据库的概念。默认有16个数据库<br>每个数据库之间相互没有关系，默认是连接到0数据库<br>在redis配置项中有一个databases参数设置默认的数据个数</li>
<li>flushdb<br>清空当前所在的数据库下的所有数据</li>
</ol>
<h2 id="redis的数据结构"><a href="#redis的数据结构" class="headerlink" title="redis的数据结构"></a>redis的数据结构</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>可以包含任何数据，比如jpg图片或者序列化的对象(PHP中对象序列化函数serialize)。<br>单个value最大值上限是512M<br>如果说只用这种类型，Redis就像一个可以持久化的memcached服务器</p>
<blockquote>
<p>常用命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set key 设置key的值</span><br><span class="line">get key 获取key的值</span><br><span class="line">Mget key1 key2 ... 批量获取指定key的值</span><br><span class="line">Mset key1 value1 key2 value2 ... 批量设置值</span><br><span class="line">strlen key 返回字符串的长度</span><br><span class="line">incr key 对key的值进行自增</span><br><span class="line">decr key 对key的值进行自减</span><br><span class="line">incrby key num 对key值进行自加num操作</span><br><span class="line">decrby key num 对key值进行自减num操作</span><br><span class="line">append key value 对key值的值末尾追加value 如果key不存在则创建</span><br><span class="line">substr key start end 返回名称为key的字符串子串</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h3><p>hash是一个string类型的field和value的映射表。hash特别适合用于存储对象。相较于将对象的每个字段存成单个string类型。将一个对象存储在hash类型中会占用更少的内存，并且可以更方便的存取整个对象。</p>
<blockquote>
<p>常用命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hset key field value 添加一个filed属性 值为value</span><br><span class="line">hget key field 返回field属性的值</span><br><span class="line">hmset key field1 value1 field2 value2 批量设置key中field1和field2的值</span><br><span class="line">hmget key field1 field2 批量获取key总field1 field2的值</span><br><span class="line">hexists key field 检查key中为field属性的值是否存在</span><br><span class="line">hdel key field 删除key中的field的属性</span><br><span class="line">hlen key 返回key中属性的个数</span><br><span class="line">hvals key 返回key中所有的value值</span><br><span class="line">hgetall key 返回key总所有filed跟value对应值</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>list类型其实就是一个每个子元素都是string类型的双向链表<br>链表可以使用在显示最新登录的用户，邮件队列。消息推送，抢购。</p>
<blockquote>
<p>常用命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpush key value 表末添加一个元素</span><br><span class="line">lpush key value 表头添加一个元素</span><br><span class="line">lpop key 删除表头的元素</span><br><span class="line">rpop key 删除表尾的元素</span><br><span class="line">llen key 返回链表长度</span><br><span class="line">lrange key start end 返回list 中key从start开始end之间的元素</span><br><span class="line">ltrim key start end 截取名称为key 的list保留start到end之间的元素（该变了链表的元素）</span><br><span class="line">lindex key index 返回list中为index位置的元素</span><br><span class="line">iset key index value 给list中为index位置的元素赋值</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>很多字符串组合在一起就叫做集合，对于集合两两之间可以进行交集、并集、差集。主要应用在社交关系处理，例如计算两个人之间的共同好友可以通过集合取交集得到结果</p>
<blockquote>
<p>常用命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sadd key value 添加一个元素（集合中不能有重复元素）</span><br><span class="line">strm key value 删除为value的元素</span><br><span class="line">smembers key 返回所有的元素</span><br><span class="line">spop value 返回一个随机被删除的元素（集合会被修改）</span><br><span class="line">scard key 返回集合中有多少个元素</span><br><span class="line">smove key key2 value 将key 中元素为value的转移到key2集合中，key2不存在则创建</span><br><span class="line">sismember key value 测试key集合中是否存在value</span><br><span class="line">sinter key1 key2 集合求交集</span><br><span class="line">sinterstore key key1,key2 将集合key1和key2的交集保存到key集合中</span><br><span class="line">sunion key1 key2 求并集</span><br><span class="line">sunionstore key key1,key2 求并集 保存到key集合中</span><br><span class="line">sdiff key1 key2 求差集</span><br><span class="line">sidff key key1 key2 求差集保存到key集合中</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="有序集合"><a href="#有序集合" class="headerlink" title="有序集合"></a>有序集合</h3><p>有序集合是在无序集合的基础之上增加了一个权重score，可以用于排序操作。</p>
<blockquote>
<p>常用命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zadd key score member 添加元素到集合中</span><br><span class="line">zrem key member 删除指定元素</span><br><span class="line">zcard key返回集合中的元素</span><br><span class="line">zincrby key num member 将member上的分值增加num</span><br><span class="line">zrank key member返回指定元素在集合中的排名 score从小到大排列</span><br><span class="line">zrange key start end 获取集合中指定区间的元素</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>redis定期的将内存中的数据转存储到磁盘上，如果一旦出现重启情况，redis会自动的将磁盘中备份数据还原到内存中</p>
<p>###snap shotting快照方式(默认方式)</p>
<h4 id="实现1"><a href="#实现1" class="headerlink" title="实现1"></a>实现1</h4><p>redis默认开启快照备份功能，能够将数据存储到默认是存储到dump.rdb文件中</p>
<blockquote>
<p>参数描述<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">save 900 1:表示在900秒之内(以上一次备份的时间)有一个key发生变化，就会触发备份操作</span><br><span class="line">save 300 10:表示在300秒之内(以上一次备份的时间)有10个key发生变化，就会触发备份操作</span><br><span class="line">save 60 10000:表示在60秒之内(以上一次备份的时间)有10000个key发生变化，就会触发备份操作</span><br><span class="line">注意：只要有一个条件满足就会执行备份</span><br><span class="line">问题：例如16:25这个时间点发生了一次备份，下次备份将会法师在16:40这个时间，然后16:30突然服务器重启了。还原过程中只能讲数据还原到16:25这个时间点上，因此数据丢失。</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="实现2"><a href="#实现2" class="headerlink" title="实现2"></a>实现2</h4><p>手动备份可以通过在客户端上执行save或者bgsave命令备份<br>save：表示前台备份，该方式会阻塞其他请求。<br>bgsave：后台备份方式，此方式不会阻塞其他请求。<br>阻塞过程中其他客户端不能正常操作数据</p>
<h3 id="AOF备份"><a href="#AOF备份" class="headerlink" title="AOF备份"></a>AOF备份</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>aof备份会将每一个写入操作的命令都记录到某一个文件中，当redis重新运行起来之后，会把文件中记录的命令重新执行一遍，因此就能还原数据</p>
<h4 id="开启aof备份"><a href="#开启aof备份" class="headerlink" title="开启aof备份"></a>开启aof备份</h4><p>AOF备份默认是关闭的，通过配置项appendonle参数控制(注意：开启aof会清空所有的数据)<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">此三个参数是用于控制redis将命名写入文件中的速度</span><br><span class="line">always：每写入一个命名刷新缓冲区的内容到文件中，即每写入一个命令就将命令写入到文件中</span><br><span class="line">everysec:表示每秒钟写入一次</span><br><span class="line">no：由系统决定什么时候写入</span><br></pre></td></tr></table></figure></p>
<h4 id="aof备份文件压缩"><a href="#aof备份文件压缩" class="headerlink" title="aof备份文件压缩"></a>aof备份文件压缩</h4><p>随着时间变长，redis中的aof备份文件会越来越大，有很多写入命名，在重复操作占用了空间，因此可以使用压缩功能将文件大小减少<br>在客户端命令行下使用bgrewriteaof</p>
<h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><p>192.168.34.101：作为主服务器也叫master服务器<br>192.168.153.128：作为从服务器，去同步主服务器中的数据，也叫slave服务器</p>
<h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol>
<li>设置从服务器</li>
<li>重启Redis服务</li>
<li>验证从服务器数据</li>
</ol>
<blockquote>
<p>主服务器关闭防火墙</p>
</blockquote>
<h2 id="权限验证"><a href="#权限验证" class="headerlink" title="权限验证"></a>权限验证</h2><p>在redis中有权限验证的，验证方式只有密码，没有用户名，密码是存储在配置文件中，并且是明文存储，使用配置项requirepass指定密码。<br>redis数据存储在内存，速度比较快可以暴力破解密码，因此建议可以不使用密码。通过服务器安全防护</p>
<ol>
<li>修改配置文件中密码</li>
<li>重启Redis服务</li>
<li>进入Redis客户端</li>
<li>密码校验</li>
</ol>
<h2 id="PHP操作Redis"><a href="#PHP操作Redis" class="headerlink" title="PHP操作Redis"></a>PHP操作Redis</h2><ol>
<li><p>开启Redis扩展<br>查看phpinfo中Thread Safety：enabled -&gt; TS版本 线程是否安全选择ts或者nts版本<br>如果为5.3以上的版本有2个dll文件，并且顺序要是redis.dll的引入在下</p>
</li>
<li><p>PHP操作Redis数据</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">	<span class="comment">// 实例化对象</span></span><br><span class="line">	$redis = <span class="keyword">new</span> Redis();</span><br><span class="line">	$redis-&gt;connect(<span class="string">'192.168.153.132'</span>,<span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 密码验证</span></span><br><span class="line">	$redis-&gt;auth(<span class="string">'123456'</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 赋值操作</span></span><br><span class="line">	$res = $redis-&gt;set(<span class="string">'user'</span>,<span class="string">'uiste'</span>);</span><br><span class="line">	var_dump($res);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 取值操作</span></span><br><span class="line">	$content = $redis-&gt;get(<span class="string">'user'</span>);</span><br><span class="line">	var_dump($content);</span><br><span class="line"></span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <tags>
        <tag>数据库优化</tag>
      </tags>
  </entry>
  <entry>
    <title>Mongodb</title>
    <url>/2015/20151119-3.html</url>
    <content><![CDATA[<p>NOSQL：非关系型数据库</p>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ol>
<li><p>读写速度特别快</p>
<blockquote>
<p>原因内存映射机制：先将数据写入内存，写入完成后通过异步方式将内存中的数据写入文档中<br>查询部分使用频率较高的数据还停留在内存中。所需空间特别大</p>
</blockquote>
</li>
<li><p>数据无规则</p>
<blockquote>
<p>每一条数据都可以随意添加减少属性</p>
</blockquote>
</li>
<li><p>支持主从复制</p>
<blockquote>
<p>支持主从复制实现数据同步，故可以实现读写分离。自带监察模式，主服务器出现问题，自动在从如曲奇中选择一个服务器作为主服务器</p>
</blockquote>
</li>
<li><p>支持数据分片</p>
<blockquote>
<p>支持分布式存储</p>
</blockquote>
</li>
<li><p>不受SQL注入影响</p>
</li>
</ol>
<h2 id="适合储存的数据"><a href="#适合储存的数据" class="headerlink" title="适合储存的数据"></a>适合储存的数据</h2><p>由于mongodb不支持事务处理，因此不适合存储业务逻辑比较强的数据<br>适合存储数据量比较大，当时价值比较低的数据</p>
<h2 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h2><ul>
<li><p>解压进入编译目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost mongodb]# tar zxvf mongodb-linux-i686-rhel57-2.3.0.tgz  -C /usr/local</span><br><span class="line"></span><br><span class="line">[root@localhost local]# cd /usr/local/</span><br><span class="line">[root@localhost local]# pwd</span><br><span class="line">/usr/local</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建软链接或改名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost local]# ln -sv mongodb-linux-i686-rhel57-2.3.0/ mongodb</span><br><span class="line">&quot;mongodb&quot; -&gt; &quot;mongodb-linux-i686-rhel57-2.3.0/&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入到mongodb目录<br><code>[root@localhost local]# cd mongodb</code></p>
</li>
<li><p>创建数据存储目录及日志文件<br><code>[root@localhost mongodb]# mkdir data</code><br><code>[root@localhost mongodb]# touch log.log</code></p>
</li>
<li><p>启动mongodb</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost mongodb]# cd bin</span><br><span class="line">[root@localhost bin]# ./mongod --logpath=/usr/local/mongodb/log.log --dbpath=/r/local/mongodb/data/ --fork</span><br><span class="line"></span><br><span class="line">[root@localhost bin]# netstat -tunple | grep 27017</span><br><span class="line">tcp        0      0 0.0.0.0:27017               0.0.0.0:*                   LISTEN      0          15697      2571/./mongod</span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p><code>--fork</code>后台启动</p>
</blockquote>
<ul>
<li><p>使用配置文件启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost bin]# pkill mongo</span><br><span class="line">[root@localhost mongodb]# pwd</span><br><span class="line">/usr/local/mongodb</span><br><span class="line">[root@localhost mongodb]# vim mongo.conf</span><br><span class="line"></span><br><span class="line">logpath=/usr/local/mongodb/log.log</span><br><span class="line">dbpath=/usr/local/mongodb/data/</span><br><span class="line">fork = true</span><br><span class="line"></span><br><span class="line">[root@localhost mongodb]# ./bin/mongod -f /usr/local/mongodb/mongo.conf</span><br><span class="line">forked process: 2662</span><br><span class="line">all output going to: /usr/local/mongodb/log.log</span><br><span class="line">log file [/usr/local/mongodb/log.log] exists; copied to temporary file [/usr/local/mongodb/log.log.2016-11-18T21-15-30]</span><br><span class="line">child process started successfully, parent exiting</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查启动状态并进入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost bin]# netstat -tunple|grep 27017</span><br><span class="line">tcp        0      0 0.0.0.0:27017               0.0.0.0:*                   LISTEN      0          16183      2662/./bin/mongod</span><br><span class="line">[root@localhost bin]# ./mongo</span><br><span class="line">MongoDB shell version: 2.3.0</span><br><span class="line">connecting to: test</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="mongodb结构体系"><a href="#mongodb结构体系" class="headerlink" title="mongodb结构体系"></a>mongodb结构体系</h2><p>数据库-》表-》记录<br>Mysql:<code>databases-&gt;table-&gt;row</code></p>
<p>数据库-》集合-》文档<br>mongodb:<code>databases-&gt;collection-&gt;document</code></p>
<h2 id="数据库基本操作"><a href="#数据库基本操作" class="headerlink" title="数据库基本操作"></a>数据库基本操作</h2><ul>
<li><p>创建数据库</p>
<blockquote>
<p>隐式创建数据库,如果没有写入数据库，数据库则自动消失</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; use uiste</span><br><span class="line">switched to db uiste</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>查看数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; show dbs</span><br><span class="line">local	(empty)</span><br><span class="line">test	(empty)</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建集合</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">手动创建集合</span><br><span class="line">&gt; db.createCollection(&apos;student&apos;)</span><br><span class="line">&#123; &quot;ok&quot; : 1 &#125;</span><br><span class="line">隐式创建集合</span><br><span class="line">&gt; db.child.insert(&#123;name:123&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看集合</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; show collections</span><br><span class="line">child</span><br><span class="line">student</span><br><span class="line">&gt; show tables</span><br><span class="line">child</span><br><span class="line">student</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除集合</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; db.student.drop()</span><br><span class="line">true</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; db.dropDatabase()</span><br><span class="line">&#123; &quot;dropped&quot; : &quot;uiste&quot;, &quot;ok&quot; : 1 &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看帮助<br><code>help</code></p>
</li>
</ul>
<h2 id="数据基本操作"><a href="#数据基本操作" class="headerlink" title="数据基本操作"></a>数据基本操作</h2><ul>
<li><p>增加数据<br><code>db.集合.insert(数据)</code><br><code>&gt; db.student.insert({name:&#39;dumin&#39;,age:33})</code></p>
<blockquote>
<p>数据采用bson格式</p>
</blockquote>
</li>
<li><p>删除数据<br><code>db.集合.remove(条件)</code></p>
<blockquote>
<p>justOne可选参数默认为全部删除<code>db.student.remove({age:23}),{justOne:1})</code><br>操作符条件年龄大于24的：<code>db.student.remove({age:{&#39;$gt&#39;:24}})`</code>；$g:大于,$gte：大于等于，$lt：小于，$lte：小于等于</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; db.student.remove(&#123;name:&apos;dumin&apos;&#125;)</span><br><span class="line">&gt; db.student.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;582f9f107943ef82a49db406&quot;), &quot;name&quot; : &quot;xiaolan&quot;, &quot;age&quot; : 13 &#125;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>修改数据<br><code>db.集合.update(条件，新值，不存在是否添加:默认false，是否修改多条:默认false)</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; db.student.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;582f9f107943ef82a49db406&quot;), &quot;name&quot; : &quot;xiaolan&quot;, &quot;age&quot; : 13 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;582fa21c7943ef82a49db407&quot;), &quot;name&quot; : &quot;xiaolan&quot;, &quot;age&quot; : 13 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;582fa2267943ef82a49db408&quot;), &quot;name&quot; : &quot;dumin&quot;, &quot;age&quot; : 23 &#125;</span><br><span class="line">&gt; db.student.update(&#123;name:&apos;xiaozhang&apos;&#125;,&#123;&apos;score&apos;:23&#125;)</span><br><span class="line">&gt; db.student.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;582f9f107943ef82a49db406&quot;), &quot;name&quot; : &quot;xiaolan&quot;, &quot;age&quot; : 13 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;582fa21c7943ef82a49db407&quot;), &quot;name&quot; : &quot;xiaolan&quot;, &quot;age&quot; : 13 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;582fa2267943ef82a49db408&quot;), &quot;name&quot; : &quot;dumin&quot;, &quot;age&quot; : 23 &#125;</span><br><span class="line">&gt; db.student.update(&#123;name:&apos;xiaozhang&apos;&#125;,&#123;&apos;score&apos;:23&#125;,1)</span><br><span class="line">&gt; db.student.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;582f9f107943ef82a49db406&quot;), &quot;name&quot; : &quot;xiaolan&quot;, &quot;age&quot; : 13 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;582fa21c7943ef82a49db407&quot;), &quot;name&quot; : &quot;xiaolan&quot;, &quot;age&quot; : 13 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;582fa2267943ef82a49db408&quot;), &quot;name&quot; : &quot;dumin&quot;, &quot;age&quot; : 23 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;582fa8636da1e09f672deb59&quot;), &quot;score&quot; : 23 &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>修改器<br>$set：修改某一个字段,如果该字段不存在就增这个字段，语法同操作符<br>$inc：自增</p>
</blockquote>
<ul>
<li>查询数据<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; db.student.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;582f9ccf7943ef82a49db405&quot;), &quot;name&quot; : &quot;dumin&quot;, &quot;age&quot; : 33 &#125;</span><br><span class="line">&gt; db.student.findOne(&#123;name:&apos;xiaolan&apos;&#125;)</span><br><span class="line">&#123;</span><br><span class="line">	&quot;_id&quot; : ObjectId(&quot;582f9f107943ef82a49db406&quot;),</span><br><span class="line">	&quot;name&quot; : &quot;xiaolan&quot;,</span><br><span class="line">	&quot;age&quot; : 13</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol>
<li>实现读写分离</li>
<li>同步数据作为热备服务器</li>
<li>可以进行后台的数据统计</li>
</ol>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol>
<li>确定谁是主服务器</li>
<li>确定谁是从服务器</li>
<li>从服务器从哪里获取数据</li>
</ol>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ol>
<li><p>主服务器插入数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; db.student.insert([&#123;name:&apos;dumin&apos;,sex:1,age:23&#125;,&#123;name:&apos;xiaolan&apos;,sex:0,age:28&#125;])</span><br><span class="line">&gt; db.student.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;58330e07627dd4a28d28ca57&quot;), &quot;name&quot; : &quot;qiang&quot;, &quot;sex&quot; : 1, &quot;age&quot; : 22 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;58330e60d1dae1108d07fc20&quot;), &quot;name&quot; : &quot;dumin&quot;, &quot;sex&quot; : 1, &quot;age&quot; : 23 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;58330e60d1dae1108d07fc21&quot;), &quot;name&quot; : &quot;xiaolan&quot;, &quot;sex&quot; : 0, &quot;age&quot; : 28 &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭主服务器mongodb服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# pkill mongo</span><br><span class="line">[root@localhost ~]# netstat -tunple|grep mongo</span><br></pre></td></tr></table></figure>
</li>
<li><p>申明主服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost bin]# ./mongod --logpath=/usr/local/mongodb/log.log --dbpath=/usr/local/mongodb/data/ --fork --master</span><br><span class="line">forked process: 1303</span><br><span class="line">all output going to: /usr/local/mongodb/log.log</span><br><span class="line">log file [/usr/local/mongodb/log.log] exists; copied to temporary file [/usr/local/mongodb/log.log.2016-11-21T14-59-32]</span><br><span class="line">child process started successfully, parent exiting</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置从服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost mongodb]# pkill mongo</span><br><span class="line">[root@localhost mongodb]# ./bin/mongod --logpath=/usr/local/mongodb/log.log --dbpath=/usr/local/mongodb/data/ --fork --slave --source=192.168.34.102</span><br><span class="line">forked process: 1744</span><br><span class="line">all output going to: /usr/local/mongodb/log.log</span><br><span class="line">log file [/usr/local/mongodb/log.log] exists; copied to temporary file [/usr/local/mongodb/log.log.2016-11-21T15-14-45]</span><br><span class="line">child process started successfully, parent exiting</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">4. 进入客户端查看</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>[root@localhost mongodb]# ./bin/mongo<br>MongoDB shell version: 2.3.0<br>connecting to: test</p>
<blockquote>
<p>show dbs<br>local    0.0625GB<br>uiste    0.0625GB<br>use uiste<br>switched to db uiste<br>show collections<br>student<br>system.indexes<br>db.student.find();<br>{ “_id” : ObjectId(“58330e07627dd4a28d28ca57”), “name” : “qiang”, “sex” : 1, “age” : 22 }<br>{ “_id” : ObjectId(“58330e60d1dae1108d07fc20”), “name” : “dumin”, “sex” : 1, “age” : 23 }<br>{ “_id” : ObjectId(“58330e60d1dae1108d07fc21”), “name” : “xiaolan”, “sex” : 0, “age” : 28 }<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 权限控制</span><br><span class="line">mongodb中每一个数据库都会具备管理员有一个隐藏的admin数据库，此数据库时超级管理员相关的信息</span><br><span class="line">1. 创建超级管理员</span><br></pre></td></tr></table></figure></p>
</blockquote>
<blockquote>
<p>use admin<br>switched to db admin<br>db.addUser(‘root’,’123456’)<br>{<br>    “user” : “root”,<br>    “readOnly” : false,<br>    “pwd” : “34e5772aa66b703a319641d42a47d696”,<br>    “_id” : ObjectId(“583310bc627dd4a28d28ca58”)<br>}<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. 创建student用户</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>可读可写用户</p>
<blockquote>
<p>use student<br>switched to db student<br>db.addUser(‘uiste’,’123456’)<br>{<br>    “user” : “uiste”,<br>    “readOnly” : false,<br>    “pwd” : “2f77d219f5631ed7c0c8c833317d1ff5”,<br>    “_id” : ObjectId(“5833113c627dd4a28d28ca59”)<br>}<br>只读用户<br>db.addUser(‘dumin’,’123456’,true)<br>{<br>    “user” : “dumin”,<br>    “readOnly” : true,<br>    “pwd” : “36ad4172b50f7453498c00c80358d61a”,<br>    “_id” : ObjectId(“58331195627dd4a28d28ca5a”)<br>}<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3. 启用mongodb密码</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>[root@localhost bin]# pkill mongo<br>[root@localhost bin]# ./mongod –logpath=/usr/local/mongodb/log.log –dbpath=/usr/local/mongodb/data/ –fork –auth<br>forked process: 1408<br>all output going to: /usr/local/mongodb/log.log<br>log file [/usr/local/mongodb/log.log] exists; copied to temporary file [/usr/local/mongodb/log.log.2016-11-21T15-26-12]<br>child process started successfully, parent exiting<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">4. 使用密码访问</span><br><span class="line">* 权限校验：需要先选择数据库，然后登陆校验</span><br><span class="line">* 如果直接使用db.auth()校验，不会通过</span><br></pre></td></tr></table></figure></p>
<p>show dbs<br>use uiste<br>db.auth(‘uiste’,’123456’)<br>show dbs<br>show tables<br>db.student.insert({name:’zcc’})<br>db.student.find()<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">5. 删除用户</span><br></pre></td></tr></table></figure></p>
<p>db.system.users.find()<br>db.system.user.remove({user:’dumin’})<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## PHP操作mongodb</span><br><span class="line">mongodb 客户端中的“.” 换成“-&gt;” bson格式的数据转化成数组</span><br></pre></td></tr></table></figure></p>
<p>&lt;?php<br>/**</p>
<ul>
<li>MongoClien实例化会自动执行构造方法进行连接</li>
<li>一、$mongo = new MongoClient();//直接连接本机上的mongodb服务器</li>
<li>二、$mongo = new MongoClient(‘192.168.34.102:27017’);//连接自动的mongodb服务器</li>
<li>三、$mongo = new MongoCLient(‘mongodb://root:<a href="mailto:123456@192.168.34.102" target="_blank" rel="noopener">123456@192.168.34.102</a>:27017’);<br>*/<br>// 建立连接<br>$mongo = new MongoCLient(‘mongodb://root:<a href="mailto:123456@192.168.34.102" target="_blank" rel="noopener">123456@192.168.34.102</a>:27017’);<br>// 选择数据库<br>$db = $mongo-&gt;uiste;<br>$data = $db-&gt;student-&gt;find();<br>foreach ($data as $key =&gt; $value) {<br> var_dump($value);<br>}<br>?&gt;<br><code>`</code></li>
</ul>
]]></content>
      <tags>
        <tag>数据库优化</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL架构 | 多种方式登录</title>
    <url>/2015/20151118-1.html</url>
    <content><![CDATA[<p>集群由一组服务器相互独立的服务器，构建的高性能与可靠性的服务器架构</p>
<h2 id="MySQL读写分离"><a href="#MySQL读写分离" class="headerlink" title="MySQL读写分离"></a>MySQL读写分离</h2><p>主从复制是读写分离的基础</p>
<h3 id="主从复制原理"><a href="#主从复制原理" class="headerlink" title="主从复制原理"></a>主从复制原理</h3><ol>
<li>主服务器将修改的SQL语句写入到二进制（bin）日志中</li>
<li>从服务器中的IO线程通过授权账号读取二进制日志，将信息写入到中继日志中（relay）</li>
<li>从服务器中的SQL线程读取中继日志中的数据，然后将SQL语句执行，还原主服务器中的数据</li>
</ol>
<h3 id="实现主从复制"><a href="#实现主从复制" class="headerlink" title="实现主从复制"></a>实现主从复制</h3><ol>
<li><p>开启主服务器的二进制日志<br>centos yum 安装MySQL配置文件路径：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">log-bin=mysql-bin</span><br><span class="line">binlog_format=mixed</span><br><span class="line">server-id=101</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启主服务器MySQL<br><code>service mysqld restart</code></p>
</li>
<li><p>添加授权账号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost etc]# mysql -uroot -p</span><br><span class="line">Enter password:</span><br><span class="line">mysql&gt; GRANT REPLICATION SLAVE ON *.* TO repuser@&quot;192.168.%.%&quot; IDENTIFIED BY &apos;123456&apos;; </span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">#&apos;&apos;引号内是授权账号的密码</span><br></pre></td></tr></table></figure>
</li>
<li><p>在主服务器下刷新用户权限<br><code>mysql&gt; FLUSH PRIVILEGES;</code></p>
</li>
<li><p>查看主服务器状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |</span><br><span class="line">+------------------+----------+--------------+------------------+</span><br><span class="line">| mysql-bin.000001 |      326 |              |                  |</span><br><span class="line">+------------------+----------+--------------+------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">File ：表示正在使用二进制文件</span><br><span class="line">Position：二进制当前所在的位置</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改从服务器mysql配置项</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/my.cnf</span><br><span class="line">server-id       = 102</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启从服务器的mysql服务<br><code>[root@localhost ~]# service mysqld restart</code></p>
</li>
<li><p>配置从服务器通过授权账号读取主服务器信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; CHANGE MASTER TO MASTER_HOST=&apos;192.168.34.101&apos;,MASTER_USER=&apos;repuser&apos;,MASTER_PASSWORD=&apos;123456&apos;,MASTER_LOG_FILE=&apos;mysql-bin.000001&apos;,MASTER_LOG_POS=326;</span><br><span class="line">Query OK, 0 rows affected (0.07 sec)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在从服务器上开启主从同步数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; slave start;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看主从复制的状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show slave status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 192.168.34.101</span><br><span class="line">                  Master_User: repuser</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000001</span><br><span class="line">          Read_Master_Log_Pos: 326</span><br><span class="line">               Relay_Log_File: mysqld-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 251</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000001</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure>
</li>
<li><p>成功<br>在主服务器上建表，写入数据，查看重服务的数据表跟数据是否与主服务一样<br><img src="http://resoure.uiste.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-18%2023.17.49.png" alt="slave"></p>
<blockquote>
<p>slave_io_running与slave_sql_running要求都为yes则表示成功<br>可以使用 slave stop关闭主从，使用reset slave 可以清空主从信息</p>
</blockquote>
</li>
</ol>
<p>从服务器配置参数</p>
<blockquote>
<p>CHANGE MASTER TO<br>MASTER_HOST=’192.168.81.128’,//指定主服务器的地址<br>MASTER_USER=’repuser’,//指定授权账号的用户名<br>MASTER_PASSWORD=’123456’,//指定授权账号的密码<br>MASTER_LOG_FILE=’mysql-bin.000001’,//指定主服务的正在使用的二进制文件<br>MASTER_LOG_POS=326;//指定主服务器当前记录到的SQL语句的文字</p>
</blockquote>
<p>开启bin日志，相关配置文件</p>
<blockquote>
<p><code>log-bin=mysql-bin</code> 开启二进制日志，并且名称以mysql-bin开头<br><code>binlog-format=mixed</code> 指定二进制文件记录sql语句的格式。statement：用一条sql语句记录修改。row：表示记录每一条sql语句。mixed：表示混合使用由mysql自己决定<br><code>server-id = 101</code> 表示主从服务器每台的标识各不一样<br><code>datadir=/var/lib/mysql</code><br>mysql-bin.index //索引文件，列出当前有哪些二进制文件<br>mysql-bin.000001//记录修改的SQL语句<br>bin日志，只记录修改表数据的SQL语句：<code>inser</code>、<code>delete</code>、<code>update</code></p>
</blockquote>
<h3 id="读写分离原理"><a href="#读写分离原理" class="headerlink" title="读写分离原理"></a>读写分离原理</h3><p>判断sql语句，如果是insert、update、delete类型sql语句则直接连接主服务器修改数据；如果是select语句则从slave服务器中选择一台进行查询。</p>
<h3 id="实现读写分离"><a href="#实现读写分离" class="headerlink" title="实现读写分离"></a>实现读写分离</h3><h4 id="ThinkPHP实现读写分离"><a href="#ThinkPHP实现读写分离" class="headerlink" title="ThinkPHP实现读写分离"></a>ThinkPHP实现读写分离</h4><ol>
<li><p>修改配置项</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;DB_DEPLOY_TYPE&apos;        =&gt;  1, // 数据库部署方式:0 集中式(单一服务器),1 分布式(主从服务器)</span><br><span class="line">&apos;DB_RW_SEPARATE&apos;        =&gt;  true,       // 数据库读写是否分离 主从式有效</span><br><span class="line">&apos;DB_MASTER_NUM&apos;         =&gt;  1, // 读写分离后 主服务器数量</span><br><span class="line">&apos;DB_SLAVE_NO&apos;           =&gt;  &apos;&apos;, // 指定从服务器序号</span><br><span class="line">/* 数据库设置 */</span><br><span class="line">&apos;DB_TYPE&apos;               =&gt;  &apos;mysql&apos;,     // 数据库类型</span><br><span class="line">&apos;DB_HOST&apos;               =&gt;  &apos;192.168.34.101,192.168.34.102&apos;, // 服务器地址</span><br><span class="line">&apos;DB_NAME&apos;               =&gt;  &apos;test&apos;,          // 数据库名</span><br><span class="line">&apos;DB_USER&apos;               =&gt;  &apos;root,root&apos;,      // 用户名</span><br><span class="line">&apos;DB_PWD&apos;                =&gt;  &apos;123456,123456&apos;,          // 密码</span><br><span class="line">&apos;DB_PORT&apos;               =&gt;  &apos;3306,3306&apos;,        // 端口</span><br><span class="line">&apos;DB_PREFIX&apos;             =&gt;  &apos;&apos;,    // 数据库表前缀</span><br></pre></td></tr></table></figure>
</li>
<li><p>代码书写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public function read()&#123;</span><br><span class="line">	$model = M(&apos;slave&apos;);</span><br><span class="line">	$data = $model-&gt;select();</span><br><span class="line">	dump($data);</span><br><span class="line">&#125;</span><br><span class="line">public function write()&#123;</span><br><span class="line">	$model = M(&apos;slave&apos;);</span><br><span class="line">	$data=array(&apos;name&apos;=&gt;&apos;dumin&apos;,&apos;age&apos;=&gt;&apos;18&apos;,&apos;sex&apos;=&gt;&apos;女&apos;);</span><br><span class="line">	$res = $model -&gt; add($data);</span><br><span class="line">	dump($res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h2><p>垂直分表</p>
<ul>
<li>冷热字段区分</li>
</ul>
<p>水平分表</p>
<ul>
<li>逻辑分表 MySQL内部完成</li>
<li>物理分表 可通过主键取余、MD5加密数据字母与数据分表等</li>
</ul>
<h3 id="逻辑分表"><a href="#逻辑分表" class="headerlink" title="逻辑分表"></a>逻辑分表</h3><p>key：取模算法<br>hash：哈希算法<br>range：某一个范围<br>list：某些值得中间</p>
<h3 id="创建语法"><a href="#创建语法" class="headerlink" title="创建语法"></a>创建语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">具体某些字段信息</span><br><span class="line">)engine=myisam default charset=utf8</span><br><span class="line">partition by key(分表字段) partitions num;</span><br><span class="line"></span><br><span class="line">create table 表名(</span><br><span class="line">具体某些字段信息</span><br><span class="line">)engine=myisam default charset=utf8</span><br><span class="line">partition by hash(分表字段) partitions num;</span><br><span class="line"></span><br><span class="line">create table 表名(</span><br><span class="line">具体某些字段信息</span><br><span class="line">)engine=myisam default charset=utf8</span><br><span class="line">partition by range(字段)(</span><br><span class="line"> partition 别名 values less than (常量)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">create table 表名(</span><br><span class="line">具体某些字段信息</span><br><span class="line">)engine=myisam default charset=utf8</span><br><span class="line">partition by list(字段)(</span><br><span class="line"> partition 别名 values in (列表)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="添加语法"><a href="#添加语法" class="headerlink" title="添加语法"></a>添加语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">求余算法：alter table 表名 add partition partitions 5;</span><br><span class="line">条件算法：  </span><br><span class="line">alter table 表名 add partition(</span><br><span class="line">    partition 名称 values less than (常量)</span><br><span class="line">    或</span><br><span class="line">   partition 名称 in (n,n,n)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="分表与多方式登录数据表"><a href="#分表与多方式登录数据表" class="headerlink" title="分表与多方式登录数据表"></a>分表与多方式登录数据表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#创建一个不重复的ID</span><br><span class="line">create table blog_people_uid(</span><br><span class="line">	uid int not null auto_increment comment &apos;用户唯一id&apos;,</span><br><span class="line">	primary key(uid)</span><br><span class="line">)engine=myisam default charset=utf8;</span><br><span class="line"></span><br><span class="line">create table blog_people(</span><br><span class="line">	id int not null auto_increment comment &apos;用户表id&apos;,</span><br><span class="line">	uid int not null default 0 comment &apos;用户唯一id&apos;,</span><br><span class="line">	name char(24) not null default &apos;&apos; comment &apos;用户名&apos;,</span><br><span class="line">	pwd char(32) not null default &apos;&apos; comment &apos;密码&apos;,</span><br><span class="line">	tel char(11) not null default &apos;&apos; comment &apos;手机号码&apos;,</span><br><span class="line">	email char(30) not null default &apos;&apos; comment &apos;电子邮件&apos;,</span><br><span class="line">	primary key(id),</span><br><span class="line">	unique key (uid),</span><br><span class="line">	unique key (name),</span><br><span class="line">	unique key (tel),</span><br><span class="line">	unique key (email)</span><br><span class="line">)engine=myisam default charset=utf8;</span><br><span class="line"></span><br><span class="line">create table blog_people_index(</span><br><span class="line">	id int not null auto_increment comment &apos;登录检索表索引&apos;,</span><br><span class="line">	uid int not null default 0 comment &apos;检索用户id&apos;,</span><br><span class="line">	name char(30) not null default &apos;&apos; comment &apos;检索用户信息&apos;,</span><br><span class="line">	primary key(id)</span><br><span class="line">)engine=myisam default charset=utf8;</span><br></pre></td></tr></table></figure>
<p>laravel 源码<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>($input = Input::all());</span><br><span class="line">    <span class="comment">// 定义验证规则</span></span><br><span class="line">    $rules = [</span><br><span class="line">        <span class="string">'pwd'</span> =&gt; <span class="string">'required|between:6,20'</span>,</span><br><span class="line">        <span class="string">'name'</span> =&gt; <span class="string">'alpha_num'</span>,</span><br><span class="line">        <span class="string">'name'</span> =&gt; <span class="string">'unique:people,tel'</span>,</span><br><span class="line">        <span class="string">'email'</span> =&gt; <span class="string">'email'</span>,</span><br><span class="line">        <span class="string">'tel'</span> =&gt; <span class="string">'integer'</span>,</span><br><span class="line">    ];</span><br><span class="line">    <span class="comment">// 提示信息</span></span><br><span class="line">    $message = [</span><br><span class="line">        <span class="string">'name.alpha_num'</span> =&gt; <span class="string">'用户名只能是字符和数字'</span>,</span><br><span class="line">        <span class="string">'name.unique'</span> =&gt; <span class="string">'该用户已经存在请重新输入'</span>,</span><br><span class="line">        <span class="string">'email.email'</span> =&gt; <span class="string">'请输入合法邮箱'</span>,</span><br><span class="line">        <span class="string">'tel.integer'</span> =&gt; <span class="string">'请输入合法手机号码'</span>,</span><br><span class="line">        <span class="string">'pwd.required'</span> =&gt; <span class="string">'密码不能为空'</span>,</span><br><span class="line">        <span class="string">'pwd.between'</span>  =&gt; <span class="string">'密码必须在6-20位之间'</span>,</span><br><span class="line">    ];</span><br><span class="line">    $validator = Validator::make($input,$rules,$message);</span><br><span class="line">    <span class="keyword">if</span>($validator-&gt;passes())&#123;<span class="comment">//验证规则通过</span></span><br><span class="line">        $pwd   = $input[<span class="string">'pwd'</span>];</span><br><span class="line">        $tel   = $input[<span class="string">'tel'</span>];</span><br><span class="line">        $email = $input[<span class="string">'email'</span>];</span><br><span class="line">        <span class="comment">// 检查用户名是否存在</span></span><br><span class="line">        $name = People::where(<span class="string">'name'</span>,<span class="string">'='</span>,$input[<span class="string">'name'</span>])-&gt;first();</span><br><span class="line">        $tel = People::where(<span class="string">'tel'</span>,<span class="string">'='</span>,$input[<span class="string">'tel'</span>])-&gt;first();</span><br><span class="line">        $email = People::where(<span class="string">'email'</span>,<span class="string">'='</span>,$input[<span class="string">'email'</span>])-&gt;first();</span><br><span class="line">        <span class="keyword">if</span>($name!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            $data = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'sign'</span> =&gt; <span class="number">0</span>,</span><br><span class="line">            <span class="string">'code'</span> =&gt; <span class="string">'register error'</span>,</span><br><span class="line">            <span class="string">'msg'</span> =&gt; <span class="string">'该用户名已经存在，请返回登录或重新注册！'</span></span><br><span class="line">             );</span><br><span class="line">            <span class="keyword">return</span> json_encode($data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>($tel!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            $data = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'sign'</span> =&gt; <span class="number">0</span>,</span><br><span class="line">            <span class="string">'code'</span> =&gt; <span class="string">'register error'</span>,</span><br><span class="line">            <span class="string">'msg'</span> =&gt; <span class="string">'该手机已经注册，请返回登录或重新注册！'</span></span><br><span class="line">             );</span><br><span class="line">            <span class="keyword">return</span> json_encode($data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>($email!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            $data = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'sign'</span> =&gt; <span class="number">0</span>,</span><br><span class="line">            <span class="string">'code'</span> =&gt; <span class="string">'register error'</span>,</span><br><span class="line">            <span class="string">'msg'</span> =&gt; <span class="string">'该邮箱已经存在，请返回登录或重新注册！'</span></span><br><span class="line">             );</span><br><span class="line">            <span class="keyword">return</span> json_encode($data);</span><br><span class="line">        &#125;</span><br><span class="line">        $uid = DB::table(<span class="string">'people_uid'</span>)-&gt;insertGetId(<span class="keyword">array</span>());</span><br><span class="line">        $input[<span class="string">'uid'</span>]=$uid;</span><br><span class="line">        $input[<span class="string">'pwd'</span>] = Crypt::encrypt($input[<span class="string">'pwd'</span>]);</span><br><span class="line">        DB::table(<span class="string">'people'</span>)-&gt;insert($input);</span><br><span class="line">        DB::table(<span class="string">'people_index'</span>)-&gt;insert(<span class="keyword">array</span>(<span class="string">'uid'</span>=&gt;$uid,<span class="string">'name'</span>=&gt;$input[<span class="string">'name'</span>]));</span><br><span class="line">        DB::table(<span class="string">'people_index'</span>)-&gt;insert(<span class="keyword">array</span>(<span class="string">'uid'</span>=&gt;$uid,<span class="string">'name'</span>=&gt;$input[<span class="string">'tel'</span>]));</span><br><span class="line">        $res = DB::table(<span class="string">'people_index'</span>)-&gt;insert(<span class="keyword">array</span>(<span class="string">'uid'</span>=&gt;$uid,<span class="string">'name'</span>=&gt;$input[<span class="string">'email'</span>]));</span><br><span class="line">        <span class="keyword">if</span>($res)&#123;</span><br><span class="line">            <span class="comment">// 成功</span></span><br><span class="line">            $data = <span class="keyword">array</span>(</span><br><span class="line">                <span class="string">'sign'</span> =&gt; <span class="number">1</span>,</span><br><span class="line">                <span class="string">'code'</span> =&gt; <span class="string">'register success'</span>,</span><br><span class="line">                <span class="string">'msg'</span> =&gt; <span class="string">'注册成功！'</span></span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">echo</span> json_encode($data);<span class="keyword">exit</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 入库失败</span></span><br><span class="line">            $data = <span class="keyword">array</span>(</span><br><span class="line">                <span class="string">'sign'</span> =&gt; <span class="number">0</span>,</span><br><span class="line">                <span class="string">'code'</span> =&gt; <span class="string">'insert error'</span>,</span><br><span class="line">                <span class="string">'msg'</span> =&gt; <span class="string">'入库失败请联系管理员！'</span></span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">echo</span> json_encode($data);<span class="keyword">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 服务器端验证规则</span></span><br><span class="line">        $messages = $validator-&gt;messages();</span><br><span class="line">        $data = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'sign'</span> =&gt; <span class="number">0</span>,</span><br><span class="line">            <span class="string">'code'</span> =&gt; <span class="string">'insert error'</span>,</span><br><span class="line">            <span class="string">'msg'</span> =&gt; $messages-&gt;first(),</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">echo</span> json_encode($data);<span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>数据库优化</tag>
      </tags>
  </entry>
  <entry>
    <title>使用yum快速搭建LAMP环境</title>
    <url>/2015/20151117-1.html</url>
    <content><![CDATA[<h2 id="yum-源配置"><a href="#yum-源配置" class="headerlink" title="yum 源配置"></a>yum 源配置</h2><ol>
<li>挂载光驱<br><img src="http://resoure.uiste.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-16%2020.54.17.png" alt></li>
<li>配置yum源</li>
</ol>
<ul>
<li>创建挂载点：<code>[root@localhost mnt]# mkdir /mnt/cdrom</code></li>
<li><p>挂载系统安装光盘：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost mnt]# mount /dev/cdrom /mnt/cdrom</span><br><span class="line">mount: block device /dev/sr0 is write-protected, mounting read-only</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置本地yum源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost mnt]# cd /etc/yum.repos.d/</span><br><span class="line">[root@localhost yum.repos.d]# ll</span><br><span class="line">总用量 16</span><br><span class="line">-rw-r--r--. 1 root root 1926 11月 27 2013 CentOS-Base.repo  //本地配置源</span><br><span class="line">-rw-r--r--. 1 root root  638 11月 27 2013 CentOS-Debuginfo.repo</span><br><span class="line">-rw-r--r--. 1 root root  630 11月 27 2013 CentOS-Media.repo  //网络配置源</span><br><span class="line">-rw-r--r--. 1 root root 3664 11月 27 2013 CentOS-Vault.repo</span><br><span class="line">[root@localhost yum.repos.d]#</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改CentOS-Media.repo在baseurl 中修改第2个路径为/mnt/cdrom（即为光盘挂载点）将enabled=0改为1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost yum.repos.d]# vi CentOS-Media.repo</span><br><span class="line">[c6-media]</span><br><span class="line">name=CentOS-$releasever - Media</span><br><span class="line">baseurl=file:///media/CentOS/</span><br><span class="line">        file:///mnt/cdrom/  //改为挂载点</span><br><span class="line">        file:///media/cdrecorder/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1   //改为1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>禁用默认的yum 网络源<br><code>[root@localhost yum.repos.d]# mv CentOS-Base.repo CentOS-Base.repo.bak</code></li>
</ul>
<ol start="3">
<li>yum方式安装gcc，gcc-c++、make、openssl-devel<br><code>[root@localhost yum.repos.d]# yum -y install make gcc gcc-c++ openssl openssl-devel pcre-devel zlib-devel libxml2 libxml2-devel</code></li>
</ol>
<h2 id="Apache安装"><a href="#Apache安装" class="headerlink" title="Apache安装"></a>Apache安装</h2><p><code>[root@localhost ~]# yum -y install httpd</code><br><strong>开机自启动</strong><br><code>[root@localhost ~]# chkconfig httpd on</code><br><strong>启动httpd服务</strong><br><code>[root@localhost ~]# service httpd start</code><br><strong>安装Apache一些扩展</strong><br><code>[root@localhost ~]# yum -y install httpd-manual mod_ssl mod_perl mod_auth_mysql</code></p>
<blockquote>
<p>关闭防火墙<br><code>[root@localhost ~]# service iptables stop</code><br>输入服务器IP地址测试<br><img src="http://resoure.uiste.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-16%2021.12.36.png" alt></p>
</blockquote>
<blockquote>
<p>[root@localhost ~]# vim /var/www/html/</p>
</blockquote>
<h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><p><code>[root@localhost ~]# yum -y install mysql mysql-server mysql-devel</code></p>
<blockquote>
<p>mysql客户端程序<br>mysql-server 服务器程序<br>mysql-devel 开发设计的库</p>
</blockquote>
<ol>
<li><p>开机启动<br><code>[root@localhost ~]# chkconfig mysqld on</code><br><code>[root@localhost ~]# chkconfig --add mysqld</code><br>查看开机启动设置是否成功：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# chkconfig --list | grep mysql*</span><br><span class="line">mysqld         	0:关闭	1:关闭	2:启用	3:启用	4:启用	5:启用	6:关闭</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动mysqld服务<br><code>[root@localhost ~]# service mysqld start</code><br>或：<code>[root@localhost ~]# /etc/init.d/mysqld start</code></p>
</li>
<li><p>登录客户端设置远程访问，默认没有密码。</p>
</li>
<li><p>修改密码：<code>mysqladmin -u root password &#39;123456&#39;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mysql -uroot -p</span><br><span class="line">Enter password:</span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; select host,user from user;</span><br><span class="line">+-----------------------+------+</span><br><span class="line">| host                  | user |</span><br><span class="line">+-----------------------+------+</span><br><span class="line">| 127.0.0.1             | root |</span><br><span class="line">| localhost             |      |</span><br><span class="line">| localhost             | root |</span><br><span class="line">| localhost.localdomain |      |</span><br><span class="line">| localhost.localdomain | root |</span><br><span class="line">+-----------------------+------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; update user set host=&apos;%&apos; where user =&apos;root&apos; and host =&apos;127.0.0.1&apos;;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; delete from user where host!=&apos;%&apos;;</span><br><span class="line">Query OK, 4 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select host,user from user;</span><br><span class="line">+------+------+</span><br><span class="line">| host | user |</span><br><span class="line">+------+------+</span><br><span class="line">| %    | root |</span><br><span class="line">+------+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>
</li>
<li><p>报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost yum.repos.d]# mysql -uroot -p</span><br><span class="line">Enter password:</span><br><span class="line">ERROR 2002 (HY000): Can&apos;t connect to local MySQL server through socket &apos;/var/lib/mysql/mysql.sock&apos; (111)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>mysql进程使用了同一个socket<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost yum.repos.d]# mv /var/lib/mysql/mysql.sock /var/lib/mysql/mysql.sock.bak</span><br><span class="line">[root@localhost yum.repos.d]# service mysqld start</span><br></pre></td></tr></table></figure></p>
</blockquote>
<ol start="4">
<li>重启MySQL服务<br><code>[root@localhost ~]# service mysqld restart</code><blockquote>
<p><code>/usr/bin/mysql_secure_installation</code>进行安全性设置</p>
</blockquote>
</li>
</ol>
<h2 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h2><p><code>[root@localhost ~]# yum -y install php php-mysql</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum -y install php-gd libjpeg* php-imap php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-mcrypt php-bcmath php-mhash libmcrypt</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">[root@localhost ~]# yum -y install php-gd php-imap php-ldap php-odbc php-pear php-xml php-xmlrpc</span><br></pre></td></tr></table></figure></p>
<h2 id="配置文件路径"><a href="#配置文件路径" class="headerlink" title="配置文件路径"></a>配置文件路径</h2><p>PHP配置文件<br><code>/etc/php.ini</code><br>Apache配置文件<br><code>/etc/httpd/conf/httpd.conf</code><br>MySQL配置文件<br><code>/etc/my.cnf</code><br>若my.cnf精简可以从安装目录拷贝<br><code>[root@localhost mysql]# cp /usr/share/mysql/my-medium.cnf /etc/my.cnf</code><br>mysql解锁<code>mv /var/lib/mysql/mysql.sock /var/lib/mysql/mysql.sock.bak</code></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><blockquote>
<p>[root@localhost ~]# service httpd restart<br>[root@localhost ~]# vim /var/www/html/1.php</p>
</blockquote>
<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p>yum卸载：yum -y remove mysql*<br>rpm卸载：rpm -e mysql </p>
]]></content>
      <tags>
        <tag>LAMP</tag>
      </tags>
  </entry>
  <entry>
    <title>MAMP 安装 Memcache | redis</title>
    <url>/2015/20151116-5.html</url>
    <content><![CDATA[<h1 id="Memcache"><a href="#Memcache" class="headerlink" title="Memcache"></a>Memcache</h1><p><code>https://github.com/uiste/PHP_Class_Library/tree/master/php-memcached</code></p>
<p><a href="http://blog.sina.com.cn/s/blog_6145ed810102vqu6.html" target="_blank" rel="noopener">参考文章：</a></p>
<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><p>一.下载安装</p>
<ol>
<li>下载：<code>http://redis.io/</code></li>
<li>移动：<code>uiste:~ uiste$ cd downloads</code></li>
<li>解压：<code>uiste:local uiste$ sudo tar -zxf redis-3.2.5.tar.gz</code></li>
<li>进入：<code>uiste:local uiste$ cd redis-3.2.5</code></li>
<li>测试编译：<code>uiste:redis-3.2.5 uiste$ sudo make test</code><br><img src="http://resoure.uiste.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-16%2002.16.34.png" alt></li>
<li><p>安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uiste:redis-3.2.5 uiste$ sudo make install</span><br><span class="line">Password:</span><br><span class="line">cd src &amp;&amp; /Applications/Xcode.app/Contents/Developer/usr/bin/make install</span><br><span class="line">    INSTALL redis-sentinel</span><br><span class="line">    CC redis-cli.o</span><br><span class="line">    LINK redis-cli</span><br><span class="line">    CC redis-benchmark.o</span><br><span class="line">    LINK redis-benchmark</span><br><span class="line">    INSTALL redis-check-rdb</span><br><span class="line"></span><br><span class="line">Hint: It&apos;s a good idea to run &apos;make test&apos; ;)</span><br><span class="line"></span><br><span class="line">    INSTALL install</span><br><span class="line">    INSTALL install</span><br><span class="line">    INSTALL install</span><br><span class="line">    INSTALL install</span><br><span class="line">    INSTALL install</span><br><span class="line">uiste:redis-3.2.5 uiste$</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置文件redis.conf<br>redis解压目录里有一个配置文件redis.conf ，编辑此配置文件，找到 dir  ./  这一行。redis会将内存中的数据写入文件中，而此配置就是指定数据文件保存的路径。我本机指定的目录为：<br><code>247 dir /Users/uiste/Software/redis_data/</code></p>
</li>
</ol>
<p>编辑过后，将配置文件移动到 /usr/local/etc 目录下<br><code>uiste:redis-3.2.5 uiste$ sudo mv redis.conf /usr/local/etc</code></p>
<ol start="8">
<li><p>启动<br><code>uiste:redis-3.2.5 uiste$ /usr/local/bin/redis-server /usr/local/etc/redis.conf</code></p>
<p>服务启动成功画面：<br><img src="http://resoure.uiste.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-16%2002.33.10.png" alt></p>
</li>
<li><p>测试连通性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uiste:~ uiste$ cd /usr/local/bin</span><br><span class="line">uiste:bin uiste$ ./redis-cli</span><br><span class="line">127.0.0.1:6379&gt; set name uiste</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">&quot;uiste&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置开机自动启动redis server<br>新建plist文件<br><code>uiste:~ uiste$ sudo vi /Library/LaunchDaemons/io.redis.redis-server.plist</code><br>文件内容如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple Computer//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span><br><span class="line">&lt;plist version=&quot;1.0&quot;&gt;</span><br><span class="line">&lt;dict&gt;</span><br><span class="line">  &lt;key&gt;Label&lt;/key&gt;</span><br><span class="line">  &lt;string&gt;io.redis.redis-server&lt;/string&gt;</span><br><span class="line">  &lt;key&gt;ProgramArguments&lt;/key&gt;</span><br><span class="line">  &lt;array&gt;</span><br><span class="line">        &lt;string&gt;/usr/local/bin/redis-server&lt;/string&gt;</span><br><span class="line">        &lt;string&gt;/usr/local/etc/redis.conf&lt;/string&gt;</span><br><span class="line">  &lt;/array&gt;</span><br><span class="line">  &lt;key&gt;RunAtLoad&lt;/key&gt;&lt;true/&gt; &lt;/dict&gt;</span><br><span class="line">&lt;/plist&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>使用launchctl设置开机自动启动<br><code>uiste:~ uiste$ sudo launchctl load /Library/LaunchDaemons/io.redis.redis-server.plist</code></p>
<p>使用launchctl启动redis server<br><code>uiste:~ uiste$ sudo launchctl start io.redis.redis-server</code></p>
<p>使用launchctl停止redis server<br><code>uiste:~ uiste$ sudo launchctl stop io.redis.redis-server</code></p>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p><code>uiste:~ uiste$ redis-cli</code></p>
<p>上述方法启动redis时是以非密码形式登录的，许多操作可能会出现  (error) NOAUTH Authentication required.<br>解决此问题的方法之一就是找到 /etc/redis.conf，并将＃requirepass 前的 “＃” 去掉。由于每个人电脑不同，有可能没法在 /etc 路径下找到redis.conf， 因此可以选择采用第二种方法：<br>（1）、按照原来方式 ./redis-cli 进入redis 客户端， 输入config set requirepass XXX，其中XXX是你要设置的密码。此时会出现 “OK”；<br>（2）、之后返回bin目录下，输入 redis-cli -h 127.0.0.1 -p 6379 -a XXX， 就相当于以密码形式登录了。此后也不会再有身份验证失败问题。<br>（3）、可以使用config get requirepass 查看密码</p>
<p>四.服务器配置</p>
<p>上面只是基本的安装，如果要用到生产环境，得配置一些文件</p>
<p>1.首先把redis-cli 移动到/usr/local/bin 目录，方便执行，和JAVA_HOME 类似</p>
<p>默认install 的时候已经有了</p>
<p>2.创建你存放配置文件和数据文件的目录</p>
<p>sudo mkdir /etc/redis<br>sudo mkdir /var/redis<br>3.复制初始化脚本到/etc/init.d 目录,建议默认只有这个端口,作开机启动</p>
<p>$ sudo cp utils/redis_init_script /etc/init.d/redis_6379<br>4.进入脚本,确保你的REDISPORT 是你正在使用的</p>
<p>sudo vi /etc/init.d/redis_6379<br>5.复制redis.conf ,和脚本保持一致</p>
<p>sudo cp redis.conf /etc/redis/6379.conf<br>6.创建一个存放工作数据的目录</p>
<p>sudo mkdir /var/redis/6379<br>同时可以对redis.conf配置其他属性</p>
<p>daemonize：是否以后台daemon方式运行<br>pidfile：pid文件位置<br>port：监听的端口号<br>timeout：请求超时时间<br>loglevel：log信息级别<br>logfile：log文件位置<br>databases：开启数据库的数量<br>save <em> </em>：保存快照的频率，第一个<em>表示多长时间，第三个</em>表示执行多少次写操作。在一定时间内执行一定数量的写操作时，自动保存快照。可设置多个条件。<br>rdbcompression：是否使用压缩<br>dbfilename：数据快照文件名（只是文件名，不包括目录）<br>dir：数据快照的保存目录（这个是目录）<br>appendonly：是否开启appendonlylog，开启的话每次写操作会记一条log，这会提高数据抗风险能力，但影响效率。<br>appendfsync：appendonlylog如何同步到磁盘（三个选项，分别是每次写都强制调用fsync、每秒启用一次fsync、不调用fsync等待系统自己同步）<br>7.最后将脚本设置默认启动</p>
<p>sudo update-rc.d redis_6379 defaults<br>8.现在可以执行脚本了</p>
<p>/etc/init.d/redis_6379 start</p>
]]></content>
      <tags>
        <tag>服务器优化</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL优化</title>
    <url>/2015/20151116-4.html</url>
    <content><![CDATA[<h2 id="MySQL优化着手点"><a href="#MySQL优化着手点" class="headerlink" title="MySQL优化着手点"></a>MySQL优化着手点</h2><ol>
<li>存储层（数据）：存储引擎、列类型、范式规范（三范式与逆范式）<br>myisam查询速度快，但不支持事务</li>
<li>设计层（单台服务器）：索引、缓存、分区<br>索引：主键、唯一键、普通键、外键约束<br>缓存：表结构与表数据没有发生变化时，MySQL会将第一次查询的结果缓存到内存中<br>分区：</li>
<li><p>架构层（多台服务器）：读写分离或者分布式</p>
</li>
<li><p>语句层：更合适的sql语句<br>select 具体字段与（*），黄金索引</p>
</li>
</ol>
<h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>MySQL中的数据是通过各种不同的技术（格式）存储在文件（或者内存）中的。技术和本身的特性就称为“存储引擎”</p>
<p>每一种技术都使用不同的存储机制、索引技巧、锁定水平并且最终提供广泛的不同的功能和能力。通过选择不同的技术（格式），获取适合的效果。</p>
<p>查询存储引擎：<code>show engines</code><br>是否支持引擎：<code>Support</code>：default，默认<br>是否支持事务：<code>Transaction</code></p>
<p>MySQL默认支持8种存储引擎，默认是<code>innodb</code>引擎，<br><code>memory</code>存储引擎是将数据存储在内存中，服务器重启会导致内存中的数据丢失</p>
<h3 id="myisam引擎和innodb引擎的区别"><a href="#myisam引擎和innodb引擎的区别" class="headerlink" title="myisam引擎和innodb引擎的区别"></a>myisam引擎和innodb引擎的区别</h3><h4 id="myisam"><a href="#myisam" class="headerlink" title="myisam"></a>myisam</h4><ol>
<li>myisam数据的读写速度相对于innodb引擎会快</li>
<li>支持表锁</li>
<li>数据压缩功能</li>
<li>支持全文索引（只支持英文）搜索引擎：sphinx，solr+ik 分词器</li>
</ol>
<hr>
<p>.frm：数据表的结构<br>.MYD：数据表对应的数据<br>.MYI：表锁数据表的索引文件</p>
<hr>
<h5 id="myisam引擎特有的压缩功能"><a href="#myisam引擎特有的压缩功能" class="headerlink" title="myisam引擎特有的压缩功能"></a>myisam引擎特有的压缩功能</h5><p><strong>蠕虫复制</strong><br>insert into address select null,sheng,shi form address</p>
<p><strong>MySQL server/bin/myisampack.exe进行数据压缩</strong><br>用法：myisampack数据表的地址<br>shell&gt;&gt;myisampack.exe ‘C:\Server\mysql_data\t_myisam\t_address’</p>
<p><strong>解决索引失效的问题</strong><br>Romember to run myisa -rq on compressed tables<br>用法：myisamchk.exe -rq 表地址</p>
<blockquote>
<p>压缩后的数据是一个只读数据表，不能写入数据，如果要写入数据必须解压</p>
</blockquote>
<p><strong>解压缩数据表</strong><br>myisamchk –unpach(两个-)</p>
<p>删除多余文件：flush table 表名<br><strong>批量写入数据时，开关索引</strong><br>alter table disable(onable) keys<br><strong>典型的应用场景</strong><br>使用mysql储存日志文件信息</p>
<h4 id="innodb"><a href="#innodb" class="headerlink" title="innodb"></a>innodb</h4><ol>
<li>行锁</li>
<li>在5.6之前是不支持全文索引</li>
<li>支持事务</li>
<li>支持外键</li>
</ol>
<hr>
<p>.frm：表示数据表的结构<br>在datadir指向的目录下有一个ibdata1的文件该文件储存了innodb引擎数据表信息及索引的文件。此方式也叫共享文件存储</p>
<hr>
<p>开启innodb引擎单独文件存储<br><code></code></p>
<h3 id="数据备份还原"><a href="#数据备份还原" class="headerlink" title="数据备份还原"></a>数据备份还原</h3><ol>
<li>备份还原myisam引擎<br>myisam引擎由于数据表结构、索引、数据都是用单独的文件存储，备份还原数据只需要复制粘贴文件即可</li>
<li>备份还原innodb引擎<br>对于innodb引擎如果是使用单独文件存储依旧不能使用复制的方式备份数据，只能借助于mysql自带的根据备份<br>备份使用：mysqldump工具<br>还原使用:mysql工具<br>备份用法：<code>mysqldump -u 用户名 -p 密码 对应数据库名称 &gt; 具体存储地址</code><br>还原的用法：<code>mysql -u 用户名 -p 密码 对应数据库名称 &lt; 具体存储地址</code></li>
</ol>
<h2 id="数据类型的选择"><a href="#数据类型的选择" class="headerlink" title="数据类型的选择"></a>数据类型的选择</h2><p>decimal 金钱<br>使用char访问速度优于varchar</p>
<p>char与varchar的区别</p>
<ol>
<li>存储的最大字符数不一样，char最多能够存储255个字符，varchar以utf8编码最大长度65535/3-1</li>
<li>varchar存储多少个字符，占用多少个空间</li>
<li>对于末尾的空格处理不一样，char会过滤末尾的空格，varchar会保留空格</li>
</ol>
<p>ip与整形数据的转换<br>MySQL内置函数：<br>inet_aton(ip)<br>inet_ntoa<br>PHP内置函数<br>ip2long<br>long2ip</p>
<h2 id="数据库三范式"><a href="#数据库三范式" class="headerlink" title="数据库三范式"></a>数据库三范式</h2><p>数据表设计规范</p>
<ol>
<li>第一范式：所有的字段都是原子不可再分</li>
<li>第二范式：所有的字段都与主键有关系</li>
<li>第三范式： 所有字段必须与主键有直接关系</li>
</ol>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>索引是针对某个字段A进行了排序然后写到了一个单独的文件（myisam），innodb在共享文件中存储。以后使用该字段查询数据时，先到索引文件中查找，然后根据物理存储地址直接找到对应的数据</p>
<h3 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h3><p>主键索引：primary key ，唯一不重复，不能为空<br>唯一索引：unique key， 唯一不重复，可以为空<br>普通索引：key<br>全文索引：fulltext 只支持英文，中文使用：sphinx软件、solr+ik分词器</p>
<h2 id="索引的结构"><a href="#索引的结构" class="headerlink" title="索引的结构"></a>索引的结构</h2><p>非聚族其它索引（myisam）：主键与其他索引排序方式一样<br>簇族索引（innodb） ：二分查找法相似</p>
<blockquote>
<p>在簇族索引下主键索引在最终的叶子节点储存的数据是对应的所有数据（传值）</p>
</blockquote>
<p>其他索引<br>最终的叶子节点储存的是主键信息</p>
<h2 id="执行计划"><a href="#执行计划" class="headerlink" title="执行计划"></a>执行计划</h2><p>sql语句分析</p>
<ol>
<li>语法检查</li>
<li>执行分析</li>
<li>执行sql语句</li>
<li>返回执行结果</li>
</ol>
<blockquote>
<p><code>explain + select 语句</code><br>ID ：执行顺序<br>select_type<br>possible_keys：可能会用到的索引<br>key：实际将会使用到的索引<br>rows：受影响的行数，将要检索多少条数据<br>type：执行的类型，按照从优到差的顺序排列。system &gt; const &gt;eq_ref &gt; ref &gt; index &gt; all</p>
</blockquote>
]]></content>
      <tags>
        <tag>数据库优化</tag>
      </tags>
  </entry>
  <entry>
    <title>大型项目优化</title>
    <url>/2015/20151116-3.html</url>
    <content><![CDATA[<h2 id="问题与优化方案"><a href="#问题与优化方案" class="headerlink" title="问题与优化方案"></a>问题与优化方案</h2><h4 id="客户端与服务器之间的问题"><a href="#客户端与服务器之间的问题" class="headerlink" title="客户端与服务器之间的问题"></a>客户端与服务器之间的问题</h4><p>描述：由于客户端跟服务器之间的网络不同，导致信号传输缓慢<br>解决：使用多线路服务器（运维处理）</p>
<h4 id="Apache性能问题"><a href="#Apache性能问题" class="headerlink" title="Apache性能问题"></a>Apache性能问题</h4><p>描述：Apache在并发访问情况下，表现很一般<br>并发：在同一秒中有多少个用户在访问，一般来说并发达到100就特别到了<br>解决：使用负载均衡技术（服务器架构）</p>
<h4 id="PHP引擎性能问题"><a href="#PHP引擎性能问题" class="headerlink" title="PHP引擎性能问题"></a>PHP引擎性能问题</h4><p>描述：PHP代码整个解析效率根据引擎不一样，速度不一样<br>解决：1、代码优化    2、更换引擎</p>
<h4 id="MySQL性能问题"><a href="#MySQL性能问题" class="headerlink" title="MySQL性能问题"></a>MySQL性能问题</h4><p>描述：同样MySQL在并发请求比较高的情况下会故障，并发过高MySQL服务器会处于宕机状态。<br>工具：<code>bin/mysqlslap</code>压力测试工具<br><code>mysqlslap.exe -a -c 10 -i 10 -uroot -p123456</code><br><code>mysqlslap.exe:Error when connecting to server:1040 Too many connections</code><br>解决：由于mysql的并发请求特别高，解决该问题可以减少mysql的请求量。可以使用一个高速的存储系统储存数据，以后每次找存储系统获取数据。即使用memcache</p>
<h2 id="优化具体方法"><a href="#优化具体方法" class="headerlink" title="优化具体方法"></a>优化具体方法</h2><ol>
<li>网站开发中尽量使用较小的资源文件</li>
<li>使用压缩技术（gzip压缩）</li>
<li>使用cdn加速资源文件（负载均衡）</li>
<li>使用缓存技术（内存缓存 redis/memcache/页面静态化）</li>
<li>对数据库进行优化（索引、存储引擎、表规范、sql优化）</li>
<li>网站架构重构采用分层模式设计，面向接口（API）编程</li>
<li>使用负载均衡技术（请求分流）</li>
<li>数据库使用读写分离或者分布式技术</li>
<li>对相关软件配置进行优化</li>
<li>硬件升级</li>
<li>延迟加载</li>
</ol>
<h2 id="项目承载的并发量"><a href="#项目承载的并发量" class="headerlink" title="项目承载的并发量"></a>项目承载的并发量</h2><p>单机+nginx+memcache+文件缓存+mysql数据库测试出的并发量：300</p>
<h1 id="Memcache"><a href="#Memcache" class="headerlink" title="Memcache"></a>Memcache</h1><p>Memcache是一款基于<strong>内存</strong>的<strong>键值对</strong>的<strong>缓存系统</strong>，具备高速读写的特性，并且支持<strong>分布式存储</strong><br>Memcached是一个高性能的分布式的内存对象缓存系统，使用这个缓存项目来构建大负载的网站，来分担数据库的压力，通过在内存里维护一个统一的巨大的hash表，它能够用来存储各种格式的数据，包括图像、视频、文件以及数据库检索的结果等。简单的说就是将数据调用到内存中，然后从内存中读取，从而大大提高读取速度。</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="为什么内存中的数据读写速度快"><a href="#为什么内存中的数据读写速度快" class="headerlink" title="为什么内存中的数据读写速度快"></a>为什么内存中的数据读写速度快</h3><h4 id="计算机数据运算流程"><a href="#计算机数据运算流程" class="headerlink" title="计算机数据运算流程"></a>计算机数据运算流程</h4><p>数据运算在CPU上进行的，cpu本身不能存储数据，cpu需要运算的数据来源于内存。内存本身可以存储部分数据，也可以从其他存储介质（磁盘）上读取数据</p>
<h4 id="设计机制"><a href="#设计机制" class="headerlink" title="设计机制"></a>设计机制</h4><p>在磁盘上决定数据读写速度的是磁头定位查找数据。磁盘专属越高读写速度越快，对于MySQL优化，第一步可以将磁盘换成固态硬盘。内存是使用电流信号，所以速度特别快。</p>
<p>###缓存系统<br>只是临时存储数据的位置（非持久性数据），真实数据还是靠其他的存储介质保存。因为内存中的数据安全性不够，当由于异常服务器重启，内存中的数据会全部丢失。</p>
<h3 id="分布式存储"><a href="#分布式存储" class="headerlink" title="分布式存储"></a>分布式存储</h3><p>将数据拆分到不同的Memcache服务器上存储。能够解决单台Memcache服务器存储的上线</p>
<h2 id="Memcache安装"><a href="#Memcache安装" class="headerlink" title="Memcache安装"></a>Memcache安装</h2><h3 id="windows安装启动"><a href="#windows安装启动" class="headerlink" title="windows安装启动"></a>windows安装启动</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>方法一：一次性</p>
<p>方法二：加载到服务<br><code>memcached.exe -d install memcached.exe -d start</code></p>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>方法一：服务启动<br>方法二：<code>memcached.exe -d start</code><br>方法三：<code>net start &quot;memcached Server&quot;</code></p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>Memcache是一个基于tcp协议的第三方应用。可以使用Telnet工具操作Memcache</p>
<ol>
<li><p>开启Telnet客户端<br>控制面板-&gt;程序功能-&gt;启用或关闭windows功能-&gt;勾选Telnet</p>
</li>
<li><p>使用Telnet客户端<br>连接方式：进入cmd执行telent   ip地址  端口号</p>
<h3 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h3></li>
</ol>
<p><code>[root@localhost libevent-2.0.20-stable]# make &amp;&amp; make install</code></p>
<p>2.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost libevent-2.0.20-stable]# cd ../</span><br><span class="line">[root@localhost memcache]# tar -zxvf memcached-1.4.20.tar.gz</span><br><span class="line">[root@localhost memcached-1.4.20]# ./configure --prefix=/usr/local/memcache --with-libevent=/usr/local/bibevent</span><br><span class="line">[root@localhost memcached-1.4.20]# make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p><strong>memcache的基本命令</strong></p>
<p><img src="http://resoure.uiste.com/memcache.png" alt="memcache"></p>
<h4 id="权限问题"><a href="#权限问题" class="headerlink" title="权限问题"></a>权限问题</h4><p>在Memcache中没有账号密码，因此Memcache中的数据不太安全。<br>解决办法：</p>
<ol>
<li>将Memcache服务器置于内网中，然后使用反向代理技术访问</li>
<li>通过服务器防火墙的配置，只允许某个IP地址可以访问<br>在Linux可以使用hosts.allow跟hosts.deny文件控制访问权限，也叫黑白名单</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cd /etc/host</span><br><span class="line">host.conf hosts hosts.allow hosts.deny</span><br><span class="line">[root@localhost ~]# cd /etc/host.allow</span><br></pre></td></tr></table></figure>
<h3 id="常用操作命令"><a href="#常用操作命令" class="headerlink" title="常用操作命令"></a>常用操作命令</h3><h4 id="设置数据-set"><a href="#设置数据-set" class="headerlink" title="设置数据 | set"></a>设置数据 | set</h4><p>语法：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set keyname(键名) 0|1 (数据是否压缩处理) exprie(有效时间) length(字符长度)</span><br><span class="line">Value(具体的数据)</span><br></pre></td></tr></table></figure></p>
<p>如果数据已经存在则修改数据</p>
<blockquote>
<p>写入具体的value数据时有回车换行操作<br>对于键名的操作一般不操作250字节<br>一般情况数据不压缩，压缩会将数据的体积变小，但读取数据时需要进行解压操作，因此整个效率降低了（时间 &lt;==&gt; 空间）<br>有效时间：针对Memcache中每一个键，都可以设置一个过期时间，如果时间一到，该键数据会消失，时间采用的是秒为单位，即多少秒之后过期，0表示永不过期</p>
</blockquote>
<h4 id="获取数据-get"><a href="#获取数据-get" class="headerlink" title="获取数据 | get"></a>获取数据 | get</h4><p>配合set使用</p>
<h4 id="添加数据-add"><a href="#添加数据-add" class="headerlink" title="添加数据 | add"></a>添加数据 | add</h4><p>语法：<code>add key 0|1 失效时间  值的长度</code></p>
<blockquote>
<p>注意：在使用add时，如果键已经存在，则添加失败。</p>
</blockquote>
<h4 id="删除数据-delete"><a href="#删除数据-delete" class="headerlink" title="删除数据 | delete"></a>删除数据 | delete</h4><p>语法：<code>delete key</code></p>
<h4 id="删除所有-flush-all"><a href="#删除所有-flush-all" class="headerlink" title="删除所有 | flush_all"></a>删除所有 | flush_all</h4><p>语法：flush_all</p>
<blockquote>
<p>项目中慎用该命令</p>
</blockquote>
<h4 id="加法操作-incr"><a href="#加法操作-incr" class="headerlink" title="加法操作 | incr"></a>加法操作 | incr</h4><p>语法：<code>incr key number</code></p>
<blockquote>
<p>对数据向下取整</p>
</blockquote>
<h4 id="减法操作-decr"><a href="#减法操作-decr" class="headerlink" title="减法操作 | decr"></a>减法操作 | decr</h4><p>语法：<code>decr key number</code></p>
<blockquote>
<p>使用decr就可以模拟秒杀系统，比如一开始设置值为100 有效期为60秒</p>
</blockquote>
<h4 id="状态操作-stats"><a href="#状态操作-stats" class="headerlink" title="状态操作 | stats"></a>状态操作 | stats</h4><p>通过查看stats主要计算命中率<br><code>命中率 = get_hits/cmd_get</code>  自然是命中率越高越好，如果命中率很低，则说明缓存效率低，需要调整缓存的数据内容，一般项目命中率能够到70%-90%就算很好。如果内存不够用，先删除快过期的，再删除不常用的，由系统底层监控</p>
<p><img src="http://resoure.uiste.com/memcache_stats.png" alt="memcache_stats"></p>
<h2 id="PHP操作Memcache"><a href="#PHP操作Memcache" class="headerlink" title="PHP操作Memcache"></a>PHP操作Memcache</h2><h3 id="安装扩展"><a href="#安装扩展" class="headerlink" title="安装扩展"></a>安装扩展</h3><p>通过phpinfo查看php.ini所在位置，PHP的版本号，及Thread Safety。</p>
<blockquote>
<p>根据以上信息选择对应版本，Enable 选择使用ts版本。否则使用nts版本，</p>
</blockquote>
<p>在php.ini中通过<code>extension_dir</code>查看扩展包所在路径</p>
<blockquote>
<p>将php_memcache.dll文件拷贝到扩展目录下<br>修改php.ini加入配置项：<code>extension = php_memcache.dll</code></p>
</blockquote>
<p>重启Apache，查看phpinfo() ，是否包含Memcache扩展模块</p>
<h3 id="使用Memcache"><a href="#使用Memcache" class="headerlink" title="使用Memcache"></a>使用Memcache</h3><ol>
<li>实例化memcache对象<br><code>$mem = new Memcache();</code></li>
<li>与memcache服务器建立连接<br><code>$mem-&gt;connect(&#39;27.0.0.1&#39;,11211);</code></li>
<li>向memcache中写入数据<br><code>$mem-&gt;set(&#39;name&#39;,&#39;uiste&#39;);</code></li>
<li>查询数据<br><code>$res = $mem-&gt;get(&#39;name&#39;);</code></li>
</ol>
<h3 id="存储原理"><a href="#存储原理" class="headerlink" title="存储原理"></a>存储原理</h3><p>Memcache可以正常存储PHP的标量类型、符合类型、空类型，但不能存储资源类型。在Memcache中本身存储的是字符串，Memcache类的set方法在向Memcache写入数据时会先将数据序列化，在get获取数据后然后反序列化。</p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol>
<li>session写入Memcache中</li>
<li>作为分布式存储系统</li>
<li>作为缓存系统使用</li>
</ol>
]]></content>
      <tags>
        <tag>数据库优化</tag>
        <tag>服务器优化</tag>
      </tags>
  </entry>
  <entry>
    <title>一键安装lnmp环境</title>
    <url>/2015/20151116-2.html</url>
    <content><![CDATA[<h2 id="一键安装lnmp环境"><a href="#一键安装lnmp环境" class="headerlink" title="一键安装lnmp环境"></a>一键安装lnmp环境</h2><p>1.使用putty或类似的SSH工具登陆VPS或服务器</p>
<p>2.下载并安装LNMP一键安装包<br>安装LNMP执行:<br>wget -c <a href="http://soft.vpser.net/lnmp/lnmp1.3-full.tar.gz" target="_blank" rel="noopener">http://soft.vpser.net/lnmp/lnmp1.3-full.tar.gz</a><br>tar zxvf lnmp1.3-full.tar.gz<br>cd lnmp1.3-full<br>./install.sh lnmp<br>默认安装lnmp可不写，如需要安装LNMPA或LAMP，将./install.sh 后面的参数替换为lnmpa或lamp即可<br>按上述命令执行后，会出现如下提示<br>lnmp-1.3-install-1.png<br>需要设置MySQL的root密码（不输入直接回车将会设置为root）如果输入有错误需要删除时，可以按住Ctrl再按Backspace键进行删除。输入后回车进入下一步，如下图所示<br>lnmp-1.3-install-2.png<br>询问是否需要启用MySQL InnoDB，InnoDB引擎默认为开启，一般建议开启，直接回车或输入 y ，如果确定确实不需要该引擎可以输入 n，输入完成，回车进入下一步<br>选择MySQL版本，目前提供了较多版本的MySQL和MariaDB，需要注意的是MySQL 5.6,5.7及MariaDB 10必须在1G以上内存的更高配置上才能选择<br>lnmp-1.3-install-3.png<br>输入对应MySQL或MariaDB版本前面的序号，回车进入下一步，选择PHP版本：<br>注意：选择PHP7等高版本时需要自行确认是否与自己的程序兼容<br>lnmp-1.3-install-4.png<br>输入要选择的PHP版本的序号，回车进入下一步，选择是否安装内存优化<br>lnmp-1.3-install-5.png<br>可以选择不安装、Jemalloc或TCmalloc，输入对应序号回车，直接回车为默认为不安装。<br>如果是LNMPA或LAMP的话还会提示“Please enter Administrator Email Address:”，需要设置管理员邮箱，该邮箱会在报错时显示在错误页面上<br>lnmp-1.3-install-6.png<br>再选择Apache版本<br>lnmp-1.3-install-7.png<br>按提示输入对应版本前面的数字序号，回车。<br>提示”Press any key to install…or Press Ctrl+c to cancel”后，按回车键确认开始安装。<br>LNMP脚本就会自动安装编译Nginx、MySQL、PHP、phpMyAdmin、Zend Optimizer这几个软件。<br>安装时间可能会几十分钟到几个小时不等，主要是机器的配置网速等原因会造成影响</p>
<p>3.安装完成<br>如果显示Nginx: OK，MySQL: OK，PHP: OK<br>lnmp-1.3-install-sucess.png<br>并且Nginx、MySQL、PHP都是running，80和3306端口都存在，并提示Install lnmp V1.3 completed! enjoy it.的话，说明已经安装成功</p>
<h2 id="LNMP状态管理命令"><a href="#LNMP状态管理命令" class="headerlink" title="LNMP状态管理命令"></a>LNMP状态管理命令</h2><p>LNMP状态管理命令：<br>LNMP 1.2状态管理: lnmp {start|stop|reload|restart|kill|status}<br>LNMP 1.2各个程序状态管理: lnmp {nginx|mysql|mariadb|php-fpm|pureftpd} {start|stop|reload|restart|kill|status}<br>LNMP 1.1状态管理： /root/lnmp {start|stop|reload|restart|kill|status}<br>Nginx状态管理：/etc/init.d/nginx {start|stop|reload|restart}<br>MySQL状态管理：/etc/init.d/mysql {start|stop|restart|reload|force-reload|status}<br>Memcached状态管理：/etc/init.d/memcached {start|stop|restart}<br>PHP-FPM状态管理：/etc/init.d/php-fpm {start|stop|quit|restart|reload|logrotate}<br>PureFTPd状态管理： /etc/init.d/pureftpd {start|stop|restart|kill|status}<br>ProFTPd状态管理： /etc/init.d/proftpd {start|stop|restart|reload}</p>
<h2 id="LNMPA状态管理命令："><a href="#LNMPA状态管理命令：" class="headerlink" title="LNMPA状态管理命令："></a>LNMPA状态管理命令：</h2><p>LNMPA 1.2状态管理: lnmp {start|stop|reload|restart|kill|status}<br>LNMPA 1.2各个程序状态管理: lnmp {httpd|mysql|mariadb|pureftpd} {start|stop|reload|restart|kill|status}<br>LNMPA1.1状态管理： /root/lnmpa {start|stop|reload|restart|kill|status}<br>Nginx状态管理：/etc/init.d/nginx {start|stop|reload|restart}<br>MySQL状态管理：/etc/init.d/mysql {start|stop|restart|reload|force-reload|status}<br>Memcached状态管理：/etc/init.d/memcached {start|stop|restart}<br>PureFTPd状态管理： /etc/init.d/pureftpd {start|stop|restart|kill|status}<br>ProFTPd状态管理： /etc/init.d/proftpd {start|stop|restart|reload}<br>Apache状态管理：/etc/init.d/httpd {start|stop|restart|graceful|graceful-stop|configtest|status}</p>
<p>LAMP状态管理命令：<br>LAMP 1.2状态管理: lnmp {start|stop|reload|restart|kill|status}<br>LAMP 1.2各个程序状态管理: lnmp {httpd|mysql|mariadb|pureftpd} {start|stop|reload|restart|kill|status}</p>
<h2 id="LNMP相关软件安装目录"><a href="#LNMP相关软件安装目录" class="headerlink" title="LNMP相关软件安装目录"></a>LNMP相关软件安装目录</h2><p>Nginx 目录: /usr/local/nginx/<br>MySQL 目录 : /usr/local/mysql/<br>MySQL数据库所在目录：/usr/local/mysql/var/<br>MariaDB 目录 : /usr/local/mariadb/<br>MariaDB数据库所在目录：/usr/local/mariadb/var/<br>PHP目录 : /usr/local/php/<br>PHPMyAdmin目录 : 0.9版本为/home/wwwroot/phpmyadmin/ 1.0及以后版本为 /home/wwwroot/default/phpmyadmin/ 强烈建议将此目录重命名为其不容易猜到的名字。phpmyadmin可自己从官网下载新版替换。<br>默认网站目录 : 0.9版本为 /home/wwwroot/ 1.0及以后版本为 /home/wwwroot/default/<br>Nginx日志目录：/home/wwwlogs/<br>/root/vhost.sh添加的虚拟主机配置文件所在目录：/usr/local/nginx/conf/vhost/<br>PureFtpd 目录：/usr/local/pureftpd/<br>PureFtpd web管理目录： 0.9版为/home/wwwroot/default/ftp/ 1.0版为 /home/wwwroot/default/ftp/<br>Proftpd 目录：/usr/local/proftpd/<br>Redis 目录：/usr/local/redis/</p>
<h2 id="LNMP相关配置文件位置"><a href="#LNMP相关配置文件位置" class="headerlink" title="LNMP相关配置文件位置"></a>LNMP相关配置文件位置</h2><p>Nginx主配置(默认虚拟主机)文件：/usr/local/nginx/conf/nginx.conf<br>添加的虚拟主机配置文件：/usr/local/nginx/conf/vhost/域名.conf<br>MySQL配置文件：/etc/my.cnf<br>PHP配置文件：/usr/local/php/etc/php.ini<br>php-fpm配置文件：/usr/local/php/etc/php-fpm.conf<br>PureFtpd配置文件：/usr/local/pureftpd/pure-ftpd.conf<br>PureFtpd MySQL配置文件：/usr/local/pureftpd/pureftpd-mysql.conf<br>Proftpd配置文件：/usr/local/proftpd/etc/proftpd.conf 1.2及之前版本为/usr/local/proftpd/proftpd.conf<br>Proftpd 用户配置文件：/usr/local/proftpd/etc/vhost/用户名.conf<br>Redis 配置文件：/usr/local/redis/etc/redis.conf</p>
<p>##LNMPA相关目录文件位置<br>Apache目录：/usr/local/apache/<br>Apache配置文件：/usr/local/apache/conf/httpd.conf<br>Apache虚拟主机配置文件目录：/usr/local/apache/conf/vhost/<br>Apache默认虚拟主机配置文件：/usr/local/apache/conf/extra/httpd-vhosts.conf<br>虚拟主机配置文件名称：/usr/local/apache/conf/vhost/域名.conf</p>
]]></content>
      <tags>
        <tag>lnmp</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac上使用brew安装MongoDB</title>
    <url>/2015/20151116-1.html</url>
    <content><![CDATA[<h1 id="Mac上使用brew安装MongoDB"><a href="#Mac上使用brew安装MongoDB" class="headerlink" title="Mac上使用brew安装MongoDB"></a>Mac上使用brew安装MongoDB</h1><p>MongoDB的安装有好多种安装方法，有直接使用HomeBrew方式，也有源码编译方式。这里使用最简单的HomeBrew。</p>
<ol>
<li><p>使用brew安装MongoDB,首先需要确保你的电脑上安装过了HomeBrew,在终端输入如下命令:<br>ruby -e “$(curl -fsSkL raw.github.com/mxcl/homebrew/go)”<br>安装HomeBrew。(如果已经安装过了HomeBrew,可以跳过这一步)</p>
</li>
<li><p>安装完brew后先更新一下:<br><code>uiste:~ uiste$ brew update</code></p>
</li>
<li><p>然后就是安装MongoDB:<br><code>uiste:~ uiste$ brew install mongodb</code><br>等待几分钟,如果终端显示以下提示,说明MongoDB安装成功。<br><img src="http://resoure.uiste.com/mongodb_success.png" alt="mongodb_success"></p>
</li>
<li><p>启动MongoDB,在命令行界面输入:<br><code>uiste:~ uiste$ mongod --config /usr/local/etc/mongod.conf</code><br>如果没有报错,说明mongod服务已经成功启动</p>
</li>
<li><p>使用mongo命令连接数据库,打开一个新的命令行窗口,然后输入mongo:<br><code>uiste:~ uiste$ mongo</code></p>
</li>
</ol>
<p>至此,MongoDB数据库安装和连接就成功了.<br><img src="http://resoure.uiste.com/mongodb_login.png" alt="mongodb_login"></p>
]]></content>
      <tags>
        <tag>数据库优化</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel 开发记录2</title>
    <url>/2015/20151115-1.html</url>
    <content><![CDATA[<h2 id="Migrations数据迁移创建数据表"><a href="#Migrations数据迁移创建数据表" class="headerlink" title="Migrations数据迁移创建数据表"></a>Migrations数据迁移创建数据表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uiste:blog uiste$ php artisan make:migration create_links_table</span><br><span class="line">Created Migration: 2015_11_15_033430_create_links_table</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">public function up()</span><br><span class="line">&#123;</span><br><span class="line">    Schema::create(&apos;links&apos;, function (Blueprint $table) &#123;</span><br><span class="line">        $table-&gt;engine = &apos;MyISAM&apos;;</span><br><span class="line">        $table-&gt;increments(&apos;link_id&apos;);</span><br><span class="line">        $table-&gt;string(&apos;link_name&apos;)-&gt;default(&apos;&apos;)-&gt;comment(&apos;名称&apos;);</span><br><span class="line">        $table-&gt;string(&apos;link_title&apos;)-&gt;default(&apos;&apos;)-&gt;comment(&apos;标题&apos;);</span><br><span class="line">        $table-&gt;string(&apos;link_url&apos;)-&gt;default(&apos;&apos;)-&gt;comment(&apos;链接&apos;);</span><br><span class="line">        $table-&gt;integer(&apos;link_order&apos;)-&gt;default(10)-&gt;comment(&apos;排序&apos;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">Migration table created successfully.</span><br><span class="line">Migrated: 2015_11_15_033430_create_links_table</span><br></pre></td></tr></table></figure>
<h2 id="数据填充"><a href="#数据填充" class="headerlink" title="数据填充"></a>数据填充</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uiste:blog uiste$ php artisan make:seeder LinksTableSeeder</span><br><span class="line">Seeder created successfully.</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">public function run()</span><br><span class="line">&#123;</span><br><span class="line">    $data = [</span><br><span class="line">        [</span><br><span class="line">            &apos;link_name&apos; =&gt; &apos;uiste技术博客&apos;,</span><br><span class="line">            &apos;link_title&apos;=&gt; &apos;专注于技术分享，实战经验总结&apos;,</span><br><span class="line">            &apos;link_url&apos;  =&gt; &apos;http://blog.uiste.com&apos;,</span><br><span class="line">            &apos;link_order&apos;=&gt; 1,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            &apos;link_name&apos; =&gt; &apos;uiste生活博客&apos;,</span><br><span class="line">            &apos;link_title&apos;=&gt; &apos;分享生活，欣赏一切美好的事物&apos;,</span><br><span class="line">            &apos;link_url&apos;  =&gt; &apos;http://www.uiste.com&apos;,</span><br><span class="line">            &apos;link_order&apos;=&gt; 2,</span><br><span class="line">        ]</span><br><span class="line">    ];</span><br><span class="line">    DB::table(&apos;links&apos;) -&gt; insert($data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">public function run()</span><br><span class="line">&#123;</span><br><span class="line">    $this-&gt;call(LinksTableSeeder::class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">uiste:blog uiste$ php artisan db:seed</span><br><span class="line">Seeded: LinksTableSeeder</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel 开发记录1</title>
    <url>/2015/20151112-3.html</url>
    <content><![CDATA[<h2 id="phpstrom快捷键："><a href="#phpstrom快捷键：" class="headerlink" title="phpstrom快捷键："></a>phpstrom快捷键：</h2><ul>
<li>command + E                 查看最近打开的文件或项目</li>
<li>command + shift + V         选择粘贴最近的剪切板内容</li>
<li>command + D                 复制粘贴选中的文本</li>
<li>command + 1                 切换窗口</li>
<li>alt       + 上下方向键        调到上下函数</li>
<li>alt       + 左右方向键         导航标签切换</li>
<li>command + shift + N         根据文件名查找</li>
<li>command + shift + alt + N 根据函数名查找</li>
<li>/**       + Enter            自动生成注释</li>
<li>command + alt   + L         格式化代码</li>
<li>command + R                 替换</li>
<li>command + shift + R         全局替换</li>
<li>shift      + Enter            智能跳到下一行</li>
<li>command + shift + U         大小写</li>
</ul>
<h2 id="表单提交相关"><a href="#表单提交相关" class="headerlink" title="表单提交相关"></a>表单提交相关</h2><p>视图引入静态资源文件：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123;asset(&apos;resources/views/admin/style/css/ch-ui.admin.css&apos;)&#125;&#125;&quot;&gt;</span><br></pre></td></tr></table></figure></p>
<p>控制器分配视图：<code>return view(&#39;admin.login&#39;);</code><br>控制器跳转：<code>return redirect(&#39;admin/index&#39;);</code></p>
<p>在使用验证码、QQ登录、七牛存储、支付宝等第三方接口的时候，用到原生session的时候，由于laravel自有session的封装，无办法正常调用<br>解决方法：在入口文件开启session<br><code>session_start();</code></p>
<p>模板文件调用控制器方法：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;url(&apos;admin/code&apos;)&#125;&#125;</span><br></pre></td></tr></table></figure></p>
<p>验证表单是否有数据提交：<code>Input::all()</code> 等价于 ThinkPHP中的 <code>IS_POST</code><br>打印并终止程序继续运行：<code>dd();</code>             等价于 ThinkPHP中的 <code>dump();exit;</code></p>
<p><strong>csrf防护</strong><br>报错：<br><code>TokenMismatchException in VerifyCsrfToken.php line 67:</code></p>
<p>解决：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;csrf _ field()&#125;&#125;</span><br></pre></td></tr></table></figure></p>
<p>登录成功session保存用户信息：<code>session([&#39;user&#39;=&gt;$user]);</code></p>
<h2 id="数据验证"><a href="#数据验证" class="headerlink" title="数据验证"></a>数据验证</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义验证规则</span></span><br><span class="line">$rules = [</span><br><span class="line">    <span class="string">'password'</span> =&gt; <span class="string">'required|between:6,20|confirmed'</span>,</span><br><span class="line">];</span><br><span class="line"><span class="comment">// 提示信息</span></span><br><span class="line">$message = [</span><br><span class="line">    <span class="string">'password.required'</span> =&gt; <span class="string">'新密码不能为空'</span>,</span><br><span class="line">    <span class="string">'password.between'</span>  =&gt; <span class="string">'新密码必须在6-20位之间'</span>,</span><br><span class="line">    <span class="string">'password.confirmed'</span>=&gt; <span class="string">'新密码和确认密码不一致'</span>,</span><br><span class="line">];</span><br><span class="line">$validator = Validator::make($input,$rules,$message);</span><br><span class="line"><span class="keyword">if</span>($validator-&gt;passes())&#123;<span class="comment">//验证规则通过</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'ok!'</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $validator-&gt;errors()-&gt;all();<span class="comment">//测试打印错误信息</span></span><br><span class="line">    <span class="keyword">return</span> back()-&gt;withErrors($validator);</span><br><span class="line">&#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure>
<p>{<code>{csrf_field()}</code>}<br>@if(count($errors))<br>    @foreach($errors-&gt;all() as $error)<br>        <br>    @endforeach<br>@endif</p>
<p><tr><br>    <th><i class="require">*</i>新密码：</th><br>    <td><br>        <input type="password" name="password"> 新密码6-20位<br>    </td><br></tr></p>
<p><tr><br>    <th><i class="require">*</i>确认密码：</th><br>    <td><br>        <input type="password" name="password_confirmation"> 再次输入密码<br>    </td><br></tr><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## AJAX实现分类排序</span><br><span class="line">弹出窗插件：`layer.layui.com`</span><br><span class="line">文本编辑器：ueditor</span><br><span class="line">上传组件：  `www.uploadify.com`</span><br><span class="line"></span><br><span class="line">树形分类（Model）</span><br><span class="line">```php</span><br><span class="line">// 树形分类</span><br><span class="line">public function getTree($data,$field_name,$field_id=&apos;id&apos;,$field_pid=&apos;pid&apos;,$pid=0)&#123;</span><br><span class="line">    $tree = array();</span><br><span class="line">    foreach($data as $k =&gt; $v)&#123;</span><br><span class="line">        if($v-&gt;$field_pid == $pid)&#123;</span><br><span class="line">            $tree[] = $data[$k];</span><br><span class="line">            $data[$k][&apos;_&apos;.$field_name] = $data[$k][$field_name];</span><br><span class="line">            foreach($data as $m =&gt; $n)&#123;</span><br><span class="line">                if($n-&gt;$field_pid == $v-&gt;$field_id)&#123;</span><br><span class="line">                    $data[$m][&apos;_&apos;.$field_name] = &apos;┣━ &apos;.$data[$m][$field_name];</span><br><span class="line">                    $tree[] = $data[$m];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return $tree;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>更新分类排序（view）<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">onchange</span>=<span class="string">"changeOrder(this,&#123;&#123;$v-&gt;cate_id&#125;&#125;)"</span> <span class="attr">name</span>=<span class="string">"ord[]"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;$v-&gt;cate_order&#125;&#125;"</span>&gt;</span></span><br><span class="line"> //ajax</span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">changeOrder</span>(<span class="params">obj,cate_id</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> cate_order = $(obj).val();</span></span><br><span class="line"><span class="javascript">        $.post(<span class="string">"&#123;&#123;url('admin/cate/changeorder')&#125;&#125;"</span>,&#123;<span class="string">'_token'</span>:<span class="string">'&#123;&#123;csrf_token()&#125;&#125;'</span>,<span class="string">'cate_id'</span>:cate_id,<span class="string">'cate_order'</span>:cate_order&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line">            if(data.status == 0)&#123;</span><br><span class="line">                layer.msg(data.msg,&#123;icon:6&#125;);</span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line">                layer.msg(data.msg,&#123;icon:5&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>更新分类排序（Controller）<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">changeOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $input = Input::all();</span><br><span class="line">    $cate = Category::find($input[<span class="string">'cate_id'</span>]);</span><br><span class="line">    $cate-&gt;cate_order = $input[<span class="string">'cate_order'</span>];</span><br><span class="line">    <span class="keyword">if</span>($cate-&gt;update())&#123;</span><br><span class="line">        $data = [</span><br><span class="line">            <span class="string">'status'</span> =&gt; <span class="number">0</span>,</span><br><span class="line">            <span class="string">'msg'</span>    =&gt; <span class="string">'分类排序更新成功'</span>,</span><br><span class="line">        ];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $data = [</span><br><span class="line">            <span class="string">'status'</span>    =&gt; <span class="number">1</span>,</span><br><span class="line">            <span class="string">'msg'</span>       =&gt; <span class="string">'分类排序更新失败,请稍后重试...'</span>,</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>去除不需要的字段：<code>$input = Input::except(&#39;_token&#39;)</code><br><code>guarded</code> 除了什么字段，其它都是可以填充的：protected $guarded = [];<br><code>fillable</code> 可以使用create方法填充的字段</p>
</blockquote>
<h2 id="更新分类字段"><a href="#更新分类字段" class="headerlink" title="更新分类字段"></a>更新分类字段</h2><p>update 方法使用put方式接受字段<br>view代码<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;&#123;&#123;url(&apos;admin/category&apos;.$cate_info-&gt;cate_id)&#125;&#125;&quot; method=&quot;post&quot;&gt;</span><br><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;put&quot;&gt;</span><br></pre></td></tr></table></figure></p>
<p>刷新页面：<code>location.href = location.href;</code></p>
<h2 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h2><p>uploadify插件<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;asset('resources/org/uploadify/jquery.uploadify.min.js')&#125;&#125;"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"&#123;&#123;asset('resources/org/uploadify/uploadify.css')&#125;&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="php"><span class="meta">&lt;?php</span> $timestamp = time();<span class="meta">?&gt;</span></span></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#file_upload'</span>).uploadify(&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="string">'buttonText'</span>   : <span class="string">'图片上传'</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="string">'formData'</span>     : &#123;</span></span><br><span class="line"><span class="xml">                        'timestamp' : '<span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $timestamp;<span class="meta">?&gt;</span></span>',</span></span><br><span class="line"><span class="javascript">                        <span class="string">'_token'</span>     : <span class="string">'&#123;&#123;csrf_token()&#125;&#125;'</span></span></span><br><span class="line">                    &#125;,</span><br><span class="line"><span class="javascript">                    <span class="string">'swf'</span>      : <span class="string">"&#123;&#123;asset('resources/org/uploadify/uploadify.swf')&#125;&#125;"</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="string">'uploader'</span> : <span class="string">"&#123;&#123;url('admin/upload')&#125;&#125;"</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="string">'onUploadSuccess'</span> : <span class="function"><span class="keyword">function</span>(<span class="params">file,data,response</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        $(<span class="string">'input[name=art_thumb]'</span>).val(data);</span></span><br><span class="line"><span class="javascript">                        $(<span class="string">'#art_thumb_img'</span>).attr(<span class="string">'src'</span>,<span class="string">'/'</span>+data);</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .uploadify&#123;display:inline-block;&#125;</span><br><span class="line">    .uploadify-button&#123;border:none; border-radius:5px; margin-top:8px;&#125;</span><br><span class="line">    table.add_tab tr td span.uploadify-button-text&#123;color: #FFF; margin:0;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"file_upload"</span> <span class="attr">name</span>=<span class="string">"file_upload"</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">multiple</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"art_thumb_img"</span> <span class="attr">style</span>=<span class="string">"max-width: 350px;max-height: 100px;"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>图片上传<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 图片上传</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">upload</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $file = Input::file(<span class="string">'Filedata'</span>);</span><br><span class="line">    <span class="keyword">if</span>($file-&gt;isValid())&#123;</span><br><span class="line">        <span class="comment">// 上传文件的后缀</span></span><br><span class="line">        $entension = $file-&gt;getClientOriginalExtension();</span><br><span class="line">        <span class="comment">// 移动文件并重命名</span></span><br><span class="line">        $newName = date(<span class="string">'YmdHis'</span>).mt_rand(<span class="number">100</span>,<span class="number">999</span>).<span class="string">'.'</span>.$entension;</span><br><span class="line">        $path = $file-&gt;move(base_path().<span class="string">'/uploads'</span>,$newName);</span><br><span class="line">        $filepath = <span class="string">'uploads/'</span>.$newName;</span><br><span class="line">        <span class="keyword">return</span> $filepath;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$data = Article::orderBy(&apos;art_id&apos;,&apos;desc&apos;)-&gt;paginate(3);</span><br><span class="line">return view(&apos;admin.article.list&apos;,compact(&apos;data&apos;));</span><br><span class="line">&lt;div class=&quot;page_list&quot;&gt;</span><br><span class="line">    &#123;&#123;$data-&gt;render()&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel 开发前奏</title>
    <url>/2015/20151112-2.html</url>
    <content><![CDATA[<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><img src="http://resoure.uiste.com/6.laravel5.2_1.png" alt="目录结构"></p>
<h2 id="配置选项"><a href="#配置选项" class="headerlink" title="配置选项"></a>配置选项</h2><blockquote>
<p>php.ini<br><code>extension=php_openssl.dll</code><br><code>extension=php_mbstring.dll</code><br><code>extension=php_pdo_mysql.dll</code></p>
</blockquote>
<h2 id="修改默认首页"><a href="#修改默认首页" class="headerlink" title="修改默认首页"></a>修改默认首页</h2><ul>
<li>server.php =&gt; index.php</li>
<li>DirectoryIndex server.php</li>
<li>修改入口文件：<code>DocumentRoot &quot;.../public&quot;</code><blockquote>
<p>需要服务器支持修改入口文件或者子目录可以绑定域名</p>
</blockquote>
</li>
</ul>
<p>将伪静态配置文件<code>.htaccess</code>移动到项目根目录</p>
<h2 id="基础路由"><a href="#基础路由" class="headerlink" title="基础路由"></a>基础路由</h2><p>• Route::get($uri, $callback);<br>• Route::post($uri, $callback);<br>• Route::put($uri, $callback);<br>• Route::patch($uri, $callback);<br>• Route::delete($uri, $callback);<br>• Route::options($uri, $callback);<br>• Route::match([‘get’, ‘post’], ‘/‘, $callback);<br>• Route::any(‘foo’, $callback);</p>
<h3 id="参数限定"><a href="#参数限定" class="headerlink" title="参数限定"></a>参数限定</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Route::get(&apos;user/&#123;name&#125;&apos;, function($name)</span><br><span class="line">&#123;</span><br><span class="line">    //</span><br><span class="line">&#125;)</span><br><span class="line">-&gt;where(&apos;name&apos;, &apos;[A-Za-z]+&apos;);</span><br><span class="line"></span><br><span class="line">Route::get(&apos;user/&#123;id&#125;/&#123;name&#125;&apos;, function($id, $name)</span><br><span class="line">&#123;</span><br><span class="line">    //</span><br><span class="line">&#125;)</span><br><span class="line">-&gt;where([&apos;id&apos; =&gt; &apos;[0-9]+&apos;, &apos;name&apos; =&gt; &apos;[a-z]+&apos;])</span><br></pre></td></tr></table></figure>
<blockquote>
<p>postman插件<br>路由参数不能使用<code>-</code>,需要使用<code>_</code>进行替换</p>
</blockquote>
<h2 id="基础控制器"><a href="#基础控制器" class="headerlink" title="基础控制器"></a>基础控制器</h2><p>laravel 控制器没有像ThinkPHP 那种参数访问控制器的方法，所有的控制器访问都需要通过路由进行设置</p>
<ol>
<li>手动创建路由与控制器相对繁琐</li>
<li><p>使用Atrisan方法创建</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uiste:blog uiste$ php artisan make:controller HomeController</span><br><span class="line">Controller created successfully.</span><br></pre></td></tr></table></figure>
</li>
<li><p>控制器分文件夹</p>
<blockquote>
<p>命名空间<br>路由使用 <code>\</code> </p>
</blockquote>
</li>
</ol>
<h2 id="高级路由"><a href="#高级路由" class="headerlink" title="高级路由"></a>高级路由</h2><h3 id="路由命名"><a href="#路由命名" class="headerlink" title="路由命名"></a>路由命名</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Route::get(&apos;/index&apos;, [&apos;as&apos;=&gt;&apos;index&apos;,function()&#123;</span><br><span class="line">    echo route(&apos;index&apos;);</span><br><span class="line">&#125;]);</span><br><span class="line">//简单的命名方法</span><br><span class="line">---</span><br><span class="line">http://www.blog.com/index</span><br></pre></td></tr></table></figure>
<p>控制路由命名<br><code>Route::get(&#39;/index&#39;, [&#39;uses&#39;=&gt;&#39;Admin\IndexController@index&#39;,&#39;as&#39;=&gt;&#39;index&#39;]);</code><br><code>Route::get(&#39;/index&#39;, &#39;Admin\IndexController@index&#39;)-&gt;name(&#39;index&#39;);</code><br><code>return route(&#39;index&#39;);//控制器调用</code></p>
<h3 id="路由分组"><a href="#路由分组" class="headerlink" title="路由分组"></a>路由分组</h3><p>将相同的路由放在一起，便于统一的管理<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Route::get(&apos;admin/index&apos;, &apos;Admin\IndexController@index&apos;)-&gt;name(&apos;index&apos;);</span><br><span class="line">Route::get(&apos;admin/login&apos;, &apos;Admin\IndexController@login&apos;)-&gt;name(&apos;login&apos;);</span><br></pre></td></tr></table></figure></p>
<p>使用group对平台及命名空间进行分组方式如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Route::group([&apos;prefix&apos;=&gt;&apos;admin&apos;,&apos;namespace&apos;=&gt;&apos;Admin&apos;],function()&#123;</span><br><span class="line">    Route::get(&apos;index&apos;, &apos;IndexController@index&apos;)-&gt;name(&apos;index&apos;);</span><br><span class="line">    Route::get(&apos;login&apos;, &apos;IndexController@login&apos;)-&gt;name(&apos;login&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>Terminal中显示路由列表<br><code>uiste:blog uiste$ php artisan route:list</code></p>
<p>RESTfun 资源路由控制器<br>资源路由设置，优点：一条路由生成多种路由规则<br><code>Route::resource(&#39;article&#39;,&#39;ArticleController&#39;);</code></p>
<p><img src="http://resoure.uiste.com/route_resource.png" alt="route_resource"></p>
<h3 id="Middleware中间件"><a href="#Middleware中间件" class="headerlink" title="Middleware中间件"></a>Middleware中间件</h3><p>HTTP 中间件提供一个方便的机制来过滤进入应用程序的 HTTP 请求。<br>Laravel 框架已经内置一些中间件，包括维护、身份验证、CSRF 保护，等等。所有的中间件都位于 app/Http/Middleware 目录内。</p>
<p>自定义路由中间件<code>app\Htp\Kernel.php</code></p>
<ol>
<li><p>kernel.php中定义中间件名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected $routeMiddleware = [</span><br><span class="line">	&apos;admin.login&apos; =&gt; \App\Http\Middleware\AdminLogin::class,</span><br><span class="line">];</span><br><span class="line">//后台登录中间件，AdminLogin中间件名</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用Artisan创建中间件<br><code>uiste:blog uiste$ php artisan make:middleware AdminLogin</code></p>
</li>
<li><p>routes.php定义路由规则</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Route::group([&apos;middleware&apos; =&gt; [&apos;web&apos;,&apos;admin.login&apos;]], function () &#123;</span><br><span class="line">    Route::get(&apos;test&apos;,function()&#123;</span><br><span class="line">        echo &apos;test a middleware&apos;;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>书写中间件条件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public function handle($request, Closure $next)</span><br><span class="line">&#123;</span><br><span class="line">    if(session(&apos;admin&apos;))</span><br><span class="line">        return redirect(&apos;admin/login&apos;);</span><br><span class="line">    return $next($request);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>使用<code>web</code>中间件，才能使用session</p>
</blockquote>
<h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>方法一：<code>return view(&#39;greeting&#39;)-&gt;with(&#39;name&#39;, &#39;Victoria&#39;);</code></p>
<blockquote>
<p>使用：$name; 可以多个with一同使用</p>
</blockquote>
<p>方法二：<code>return = view(&#39;greeting&#39;, $data);</code></p>
<p>方法三：<code>return view(&#39;greeting&#39;,compact(&#39;data&#39;,&#39;title&#39;));</code></p>
<h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><p>blade模板引擎 基础用法<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">• &#123;&#123; $name &#125;&#125;</span><br><span class="line">• @&#123;&#123; $name &#125;&#125; 					使用@符屏蔽语法解析</span><br><span class="line">• &#123;&#123; $name or &apos;Default&apos; &#125;&#125; 		使用or设置默认值</span><br><span class="line">• &#123;&#123; isset($name) ? $name : &apos;Default&apos; &#125;&#125;</span><br><span class="line">• &#123;!! $str !!&#125; 					算感叹号代表htmlspecialchars_decode()</span><br></pre></td></tr></table></figure></p>
<h2 id="Blade模板引擎-流程控制"><a href="#Blade模板引擎-流程控制" class="headerlink" title="Blade模板引擎 流程控制"></a>Blade模板引擎 流程控制</h2><p>有开始标志就要有结束标志<br>• @if<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@if($data[&apos;score&apos;]&lt;60)</span><br><span class="line">    不及格</span><br><span class="line">    @else</span><br><span class="line">    及格</span><br><span class="line">    @endif</span><br></pre></td></tr></table></figure></p>
<p>• @unless       除非，用法同if<br>• @for<br>• @foreach<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@foreach($data[&apos;article&apos;] as $v)</span><br><span class="line">    &#123;&#123; $v &#125;&#125;</span><br><span class="line">    @endforeach</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>• @forelse      是foreach的补充<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@forelse($data[&apos;article&apos;] as $v)</span><br><span class="line">    $v</span><br><span class="line">    @empty</span><br><span class="line">    没有数据</span><br><span class="line">    @endforelse</span><br></pre></td></tr></table></figure></p>
<p>• @while<br>以上基本流程控制可以嵌套</p>
<h2 id="Blade模板引擎-子视图"><a href="#Blade模板引擎-子视图" class="headerlink" title="Blade模板引擎 子视图"></a>Blade模板引擎 子视图</h2><p>• @include(common.header)<br>• @include(common.name’, [‘some’ =&gt; ‘data’])<br>• @extends(‘layouts.master’)<br>• @yield(‘content’)<br>• @section(‘content’)<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">头文件</span><br><span class="line">@section(&apos;content&apos;)</span><br><span class="line">&lt;p&gt;父类模板文件中的内容&lt;/p&gt;</span><br><span class="line">@show</span><br><span class="line">脚文件</span><br></pre></td></tr></table></figure></p>
<p>子视图文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@extends(&apos;layouts.home&apos;)</span><br><span class="line">@section(&apos;content&apos;)</span><br><span class="line">    @parent</span><br><span class="line">    替换的内容</span><br><span class="line">    @section(&apos;content&apos;)</span><br></pre></td></tr></table></figure></p>
<h2 id="读取配置项"><a href="#读取配置项" class="headerlink" title="读取配置项"></a>读取配置项</h2><p><code>echo config(&#39;database.connections.mysql.prefix&#39;);</code><br><code>echo config(&#39;app.debug&#39;);</code></p>
<h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$pdo = DB :: connection()-&gt;getPdo();</span><br><span class="line">dd($pdo); //dd函数打印并终止程序继续运行</span><br></pre></td></tr></table></figure>
<p>数据表操作<br>• DB::table(‘user’)-&gt;get();<br>• DB::table(‘user’)-&gt;where(‘user’,1)-&gt;get();</p>
<h2 id="模型创建"><a href="#模型创建" class="headerlink" title="模型创建"></a>模型创建</h2><p>• php artisan make:model User<br>数据表操作<br>• protected $table=”user”;<br>• protected $primaryKey = ‘user_id’;<br>• public $timestamps = false;       //禁止默认时间戳</p>
]]></content>
      <tags>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 扩展工具</title>
    <url>/2015/20151112-1.html</url>
    <content><![CDATA[<h2 id="添加high一下"><a href="#添加high一下" class="headerlink" title="添加high一下"></a>添加high一下</h2><p>效果很赞，整个页面渐进式摇摆，摇摆，还有音乐</p>
<p>在 Hexo\themes\next\layout_partials\header.swig 中的 ul 标签加入如下 li 代码：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"menu-item menu-item-search"</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">title</span>=<span class="string">"把这个链接拖到你的Chrome收藏夹工具栏中"</span> <span class="attr">href</span>=<span class="string">'javascript:(function() &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">    function c() &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        var e = document.createElement("link");</span></span></span><br><span class="line"><span class="tag"><span class="string">        e.setAttribute("type", "text/css");</span></span></span><br><span class="line"><span class="tag"><span class="string">        e.setAttribute("rel", "stylesheet");</span></span></span><br><span class="line"><span class="tag"><span class="string">        e.setAttribute("href", f);</span></span></span><br><span class="line"><span class="tag"><span class="string">        e.setAttribute("class", l);</span></span></span><br><span class="line"><span class="tag"><span class="string">        document.body.appendChild(e)</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string"> </span></span></span><br><span class="line"><span class="tag"><span class="string">    function h() &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        var e = document.getElementsByClassName(l);</span></span></span><br><span class="line"><span class="tag"><span class="string">        for (var t = 0; t &lt; e.length; t++) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">            document.body.removeChild(e[t])</span></span></span><br><span class="line"><span class="tag"><span class="string">        &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string"> </span></span></span><br><span class="line"><span class="tag"><span class="string">    function p() &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        var e = document.createElement("div");</span></span></span><br><span class="line"><span class="tag"><span class="string">        e.setAttribute("class", a);</span></span></span><br><span class="line"><span class="tag"><span class="string">        document.body.appendChild(e);</span></span></span><br><span class="line"><span class="tag"><span class="string">        setTimeout(function() &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">            document.body.removeChild(e)</span></span></span><br><span class="line"><span class="tag"><span class="string">        &#125;, 100)</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string"> </span></span></span><br><span class="line"><span class="tag"><span class="string">    function d(e) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        return &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">            height : e.offsetHeight,</span></span></span><br><span class="line"><span class="tag"><span class="string">            width : e.offsetWidth</span></span></span><br><span class="line"><span class="tag"><span class="string">        &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string"> </span></span></span><br><span class="line"><span class="tag"><span class="string">    function v(i) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        var s = d(i);</span></span></span><br><span class="line"><span class="tag"><span class="string">        return s.height &gt; e &amp;&amp; s.height &lt; n &amp;&amp; s.width &gt; t &amp;&amp; s.width &lt; r</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string"> </span></span></span><br><span class="line"><span class="tag"><span class="string">    function m(e) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        var t = e;</span></span></span><br><span class="line"><span class="tag"><span class="string">        var n = 0;</span></span></span><br><span class="line"><span class="tag"><span class="string">        while (!!t) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">            n += t.offsetTop;</span></span></span><br><span class="line"><span class="tag"><span class="string">            t = t.offsetParent</span></span></span><br><span class="line"><span class="tag"><span class="string">        &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">        return n</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string"> </span></span></span><br><span class="line"><span class="tag"><span class="string">    function g() &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        var e = document.documentElement;</span></span></span><br><span class="line"><span class="tag"><span class="string">        if (!!window.innerWidth) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">            return window.innerHeight</span></span></span><br><span class="line"><span class="tag"><span class="string">        &#125; else if (e &amp;&amp; !isNaN(e.clientHeight)) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">            return e.clientHeight</span></span></span><br><span class="line"><span class="tag"><span class="string">        &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">        return 0</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string"> </span></span></span><br><span class="line"><span class="tag"><span class="string">    function y() &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        if (window.pageYOffset) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">            return window.pageYOffset</span></span></span><br><span class="line"><span class="tag"><span class="string">        &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">        return Math.max(document.documentElement.scrollTop, document.body.scrollTop)</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string"> </span></span></span><br><span class="line"><span class="tag"><span class="string">    function E(e) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        var t = m(e);</span></span></span><br><span class="line"><span class="tag"><span class="string">        return t &gt;= w &amp;&amp; t &lt;= b + w</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string"> </span></span></span><br><span class="line"><span class="tag"><span class="string">    function S() &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        var e = document.createElement("audio");</span></span></span><br><span class="line"><span class="tag"><span class="string">        e.setAttribute("class", l);</span></span></span><br><span class="line"><span class="tag"><span class="string">        e.src = i;</span></span></span><br><span class="line"><span class="tag"><span class="string">        e.loop = false;</span></span></span><br><span class="line"><span class="tag"><span class="string">        e.addEventListener("canplay", function() &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">            setTimeout(function() &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">                x(k)</span></span></span><br><span class="line"><span class="tag"><span class="string">            &#125;, 500);</span></span></span><br><span class="line"><span class="tag"><span class="string">            setTimeout(function() &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">                N();</span></span></span><br><span class="line"><span class="tag"><span class="string">                p();</span></span></span><br><span class="line"><span class="tag"><span class="string">                for (var e = 0; e &lt; O.length; e++) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">                    T(O[e])</span></span></span><br><span class="line"><span class="tag"><span class="string">                &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">            &#125;, 15500)</span></span></span><br><span class="line"><span class="tag"><span class="string">        &#125;, true);</span></span></span><br><span class="line"><span class="tag"><span class="string">        e.addEventListener("ended", function() &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">            N();</span></span></span><br><span class="line"><span class="tag"><span class="string">            h()</span></span></span><br><span class="line"><span class="tag"><span class="string">        &#125;, true);</span></span></span><br><span class="line"><span class="tag"><span class="string">        e.innerHTML = " &lt;p&gt;If you are reading this, it is because your browser does not support the audio element. We recommend that you get a new browser.&lt;/p&gt; &lt;p&gt;";</span></span></span><br><span class="line"><span class="tag"><span class="string">        document.body.appendChild(e);</span></span></span><br><span class="line"><span class="tag"><span class="string">        e.play()</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string"> </span></span></span><br><span class="line"><span class="tag"><span class="string">    function x(e) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        e.className += " " + s + " " + o</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string"> </span></span></span><br><span class="line"><span class="tag"><span class="string">    function T(e) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        e.className += " " + s + " " + u[Math.floor(Math.random() * u.length)]</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string"> </span></span></span><br><span class="line"><span class="tag"><span class="string">    function N() &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        var e = document.getElementsByClassName(s);</span></span></span><br><span class="line"><span class="tag"><span class="string">        var t = new RegExp("\\b" + s + "\\b");</span></span></span><br><span class="line"><span class="tag"><span class="string">        for (var n = 0; n &lt; e.length; ) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">            e[n].className = e[n].className.replace(t, "")</span></span></span><br><span class="line"><span class="tag"><span class="string">        &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string"> </span></span></span><br><span class="line"><span class="tag"><span class="string">    var e = 30;</span></span></span><br><span class="line"><span class="tag"><span class="string">    var t = 30;</span></span></span><br><span class="line"><span class="tag"><span class="string">    var n = 350;</span></span></span><br><span class="line"><span class="tag"><span class="string">    var r = 350;</span></span></span><br><span class="line"><span class="tag"><span class="string">    var i = "//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake.mp3";</span></span></span><br><span class="line"><span class="tag"><span class="string">    var s = "mw-harlem_shake_me";</span></span></span><br><span class="line"><span class="tag"><span class="string">    var o = "im_first";</span></span></span><br><span class="line"><span class="tag"><span class="string">    var u = ["im_drunk", "im_baked", "im_trippin", "im_blown"];</span></span></span><br><span class="line"><span class="tag"><span class="string">    var a = "mw-strobe_light";</span></span></span><br><span class="line"><span class="tag"><span class="string">    var f = "//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake-style.css";</span></span></span><br><span class="line"><span class="tag"><span class="string">    var l = "mw_added_css";</span></span></span><br><span class="line"><span class="tag"><span class="string">    var b = g();</span></span></span><br><span class="line"><span class="tag"><span class="string">    var w = y();</span></span></span><br><span class="line"><span class="tag"><span class="string">    var C = document.getElementsByTagName("*");</span></span></span><br><span class="line"><span class="tag"><span class="string">    var k = null;</span></span></span><br><span class="line"><span class="tag"><span class="string">    for (var L = 0; L &lt; C.length; L++) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        var A = C[L];</span></span></span><br><span class="line"><span class="tag"><span class="string">        if (v(A)) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">            if (E(A)) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">                k = A;</span></span></span><br><span class="line"><span class="tag"><span class="string">                break</span></span></span><br><span class="line"><span class="tag"><span class="string">            &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">        &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    if (A === null) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        console.warn("Could not find a node of the right size. Please try a different page.");</span></span></span><br><span class="line"><span class="tag"><span class="string">        return</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    c();</span></span></span><br><span class="line"><span class="tag"><span class="string">    S();</span></span></span><br><span class="line"><span class="tag"><span class="string">    var O = [];</span></span></span><br><span class="line"><span class="tag"><span class="string">    for (var L = 0; L &lt; C.length; L++) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        var A = C[L];</span></span></span><br><span class="line"><span class="tag"><span class="string">        if (v(A)) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">            O.push(A)</span></span></span><br><span class="line"><span class="tag"><span class="string">        &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">&#125;)()    '</span>&gt;</span>High<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h2>]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel 队列应用</title>
    <url>/2015/20151111-8.html</url>
    <content><![CDATA[<h2 id="Laravel常用功能-队列应用"><a href="#Laravel常用功能-队列应用" class="headerlink" title="Laravel常用功能-队列应用"></a>Laravel常用功能-队列应用</h2>]]></content>
      <tags>
        <tag>laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel 缓存使用</title>
    <url>/2015/20151111-7.html</url>
    <content><![CDATA[<h2 id="Laravel常用功能-错误与日志"><a href="#Laravel常用功能-错误与日志" class="headerlink" title="Laravel常用功能-错误与日志"></a>Laravel常用功能-错误与日志</h2>]]></content>
      <tags>
        <tag>laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel 邮件发送</title>
    <url>/2015/20151111-6.html</url>
    <content><![CDATA[<h2 id="Laravel常用功能-邮件发送"><a href="#Laravel常用功能-邮件发送" class="headerlink" title="Laravel常用功能-邮件发送"></a>Laravel常用功能-邮件发送</h2>]]></content>
      <tags>
        <tag>laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel 文件上传</title>
    <url>/2015/20151111-5.html</url>
    <content><![CDATA[<h2 id="laravel常用功能-文件上传"><a href="#laravel常用功能-文件上传" class="headerlink" title="laravel常用功能-文件上传"></a>laravel常用功能-文件上传</h2>]]></content>
      <tags>
        <tag>laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel 数据迁移与数据填充</title>
    <url>/2015/20151111-4.html</url>
    <content><![CDATA[<h2 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h2><h2 id="数据填充"><a href="#数据填充" class="headerlink" title="数据填充"></a>数据填充</h2>]]></content>
      <tags>
        <tag>laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel Artisan简介</title>
    <url>/2015/20151111-3.html</url>
    <content><![CDATA[<h2 id="Artisan简介"><a href="#Artisan简介" class="headerlink" title="Artisan简介"></a>Artisan简介</h2><p>由Symfony Console 组件驱动</p>
<h2 id="Artisan基本用法"><a href="#Artisan基本用法" class="headerlink" title="Artisan基本用法"></a>Artisan基本用法</h2><ol>
<li><p>查看所有可用的Artisan的命令（list）<br><code>php artisan</code><br><code>php artisan list</code></p>
</li>
<li><p>查看命令的帮助信息（help）<br><code>php artisan help migrate</code></p>
</li>
<li>创建Student控制器、模型、中间件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uiste:laravel uiste$  php artisan make:controller StudentController</span><br><span class="line">Controller created successfully.</span><br><span class="line">uiste:laravel uiste$  php artisan make:model Student</span><br><span class="line">Model created successfully.</span><br><span class="line">uiste:laravel uiste$ php artisan make:middleware Activity</span><br><span class="line">Middleware created successfully.</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>命名应用程序<br><code>php artisan app:name uiste</code></li>
</ul>
<p>Actisan主要作用创建好已经构建好模板的代码文件及其它高级用法</p>
<h2 id="Laravel-用户认证功能"><a href="#Laravel-用户认证功能" class="headerlink" title="Laravel 用户认证功能"></a>Laravel 用户认证功能</h2><h3 id="Laravel中生成Auth所需文件"><a href="#Laravel中生成Auth所需文件" class="headerlink" title="Laravel中生成Auth所需文件"></a>Laravel中生成Auth所需文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uiste:laravel uiste$ php artisan make:auth</span><br><span class="line">Authentication scaffolding generated successfully.</span><br></pre></td></tr></table></figure>
<ol>
<li><p>routs/web.php 文件中，生成如下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Auth::routes();</span><br><span class="line">Route::get(&apos;/home&apos;,&apos;HomeController@index&apos;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成resources/views/auth/login.blade.php &amp; register.blade.php</p>
</li>
<li><p>修改resources/views/layouts/app.blade.php文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link href=&quot;/css/app.css&quot; rel=&apos;stylesheet&apos;&gt;</span><br><span class="line">改为：&lt;link href=&quot;&#123;asset(&apos;css/app.css&apos;)&#125;&quot; rel=&apos;stylesheet&apos;&gt;</span><br><span class="line">&lt;script src=&quot;/js/app.js&#125;&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;&#123;asset(&apos;js/app.js&apos;)&#125;&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>路由文件：vendor/laravel/src/Routing/Router.php-&gt;Auth()方法中</p>
</li>
</ol>
<h3 id="生成数据库中所需要的表"><a href="#生成数据库中所需要的表" class="headerlink" title="生成数据库中所需要的表"></a>生成数据库中所需要的表</h3><p>所需文件在：database/migrations中查找<br>操作如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uiste:laravel uiste$ php artisan migrate</span><br><span class="line">Migration table created successfully.</span><br><span class="line">Migrated: 2014_10_12_000000_create_users_table</span><br><span class="line">Migrated: 2014_10_12_100000_create_password_resets_table</span><br></pre></td></tr></table></figure></p>
<p>数据库中生成：<br><code>migrations</code> 迁移表<br><code>password_resets</code> 密码重置表<br><code>users</code> 用户表</p>
<h3 id="配置选项"><a href="#配置选项" class="headerlink" title="配置选项"></a>配置选项</h3><p>.evn 文件修改数据库配置项</p>
]]></content>
      <tags>
        <tag>laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel Composer安装</title>
    <url>/2015/20151111-2.html</url>
    <content><![CDATA[<h2 id="全局安装Composer"><a href="#全局安装Composer" class="headerlink" title="全局安装Composer"></a>全局安装Composer</h2><p>1.验证环境PHP环境<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uiste:Downloads uiste$ php -v</span><br><span class="line">PHP 5.6.24 (cli) (built: Aug  8 2015 16:58:37) </span><br><span class="line">Copyright (c) 1997-2015 The PHP Group</span><br><span class="line">Zend Engine v2.6.0, Copyright (c) 1998-2015 Zend Technologies</span><br></pre></td></tr></table></figure></p>
<p>2.监测包安装文件<br><code>uiste:Downloads uiste$ php composer.phar</code><br>3.移动文件到全局目录<br><code>uiste:Downloads uiste$ sudo mv composer.phar /usr/local/bin/composer</code><br>若没有访问权限</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;uiste:Downloads uiste$ composer</span><br><span class="line">&gt;-bash: /usr/local/bin/composer: Permission denied</span><br><span class="line">&gt;uiste:Downloads uiste$ cd /usr/local/bin/</span><br><span class="line">&gt;uiste:bin uiste$ ls -l</span><br><span class="line">&gt;....</span><br><span class="line">&gt;uiste:bin uiste$ sudo chmod -R 755 composer</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>4.切换到任意目录验证<br><code>uiste:~ uiste$ composer</code></p>
<h2 id="中国全量镜像"><a href="#中国全量镜像" class="headerlink" title="中国全量镜像"></a>中国全量镜像</h2><p>查看当前的镜像地址<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uiste:~ uiste$ composer config -g repo.packagist</span><br><span class="line">&#123;&quot;type&quot;:&quot;composer&quot;,&quot;url&quot;:&quot;https:\/\/packagist.phpcomposer.com&quot;&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>uiste:~ uiste$ composer config -g repo.packagist composer https://packagist.phpcomposer.com</code></p>
<h2 id="使用Composer"><a href="#使用Composer" class="headerlink" title="使用Composer"></a>使用Composer</h2><p>主要命令<br>搜索：search<br>展示：show<br>声明依赖：require<br>安装：install<br>更新：update</p>
<p><code>uiste:test uiste$ composer search monolog</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uiste:test uiste$ vim composer.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;imooc/test&quot;,</span><br><span class="line">    &quot;description&quot;: &quot;test composer&quot;,</span><br><span class="line">    &quot;authors&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;uiste&quot;,</span><br><span class="line">            &quot;email&quot;: &quot;798407452@qq.com&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;require&quot;: &#123;</span><br><span class="line">        &quot;monolog/monolog&quot;:&quot;1.21.*&quot;,</span><br><span class="line">        &quot;symfony/http-foundation&quot;: &quot;^3.1&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">uiste:test uiste$ composer install</span><br><span class="line">uiste:test uiste$ composer require symfony/http-foundation</span><br></pre></td></tr></table></figure></p>
<h2 id="Composer安装laravel框架"><a href="#Composer安装laravel框架" class="headerlink" title="Composer安装laravel框架"></a>Composer安装laravel框架</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>通过 composer Create-Project命令安装Laravel<br><code>composer create-project laravel/laravel blog --prefer-dist[别名]</code></p>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>laravel安装器<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">composer global require &quot;laravel/installer&quot;</span><br><span class="line">laravel new blog</span><br></pre></td></tr></table></figure></p>
<p>检查安装状态<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uiste:test uiste$ laravel</span><br><span class="line">Laravel Installer version 1.3.3</span><br></pre></td></tr></table></figure></p>
<p>下载laravel<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uiste:test uiste$ laravel new blog</span><br><span class="line">Crafting application...</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux LAMP环境搭建</title>
    <url>/2015/20151111-1.html</url>
    <content><![CDATA[<h2 id="软件安装与卸载"><a href="#软件安装与卸载" class="headerlink" title="软件安装与卸载"></a>软件安装与卸载</h2><h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><ol>
<li><code>.rpm</code>格式：二进制格式，相对于window下的.exe文件</li>
<li><code>.tar.gz</code>：二进制源码包，需要借助于gcc 编译器进行源码编译安装</li>
<li><code>yum</code>：自动解决依赖问题<h3 id="安装软件查询"><a href="#安装软件查询" class="headerlink" title="安装软件查询"></a>安装软件查询</h3></li>
<li>基本语法：<code>rpm -qa</code><ol>
<li><code>-q(query)</code> 表示查询</li>
<li><code>-a(all)</code> 表示所有</li>
</ol>
</li>
<li>查询指定软件：<code>rpm -qa | grep 软件名称</code><ol>
<li><code>|</code> 管道，可以针对前面的结果进行二次筛选</li>
<li><code>grep</code> 匹配</li>
</ol>
</li>
<li>卸载软件<ol>
<li>基本语法：<code>rpm -e 软件名称 (软件名称可以只选到软件名称)</code></li>
</ol>
</li>
<li>软件安装<ol>
<li>基本语法：<code>rpm -ivh (软件名称)</code></li>
<li><code>-i</code> ：表示安装</li>
<li><code>vh</code>：显示进度条</li>
<li>注意：镜像文件被正确选中，已连接的状态</li>
<li><code>cd /media/CentOS_6.5_Final/Packages/</code> 进入媒体文件夹（存储了很多安装包）<h2 id="源码编译安装"><a href="#源码编译安装" class="headerlink" title="源码编译安装"></a>源码编译安装</h2></li>
</ol>
</li>
<li>先解压</li>
<li>进入安装目录</li>
<li>编译</li>
<li>安装<h3 id="Apache-安装"><a href="#Apache-安装" class="headerlink" title="Apache 安装"></a>Apache 安装</h3></li>
<li>进入LAMP安装目录</li>
<li>使用tar命令实现解压功能<ol>
<li><code>tar -zxvf httpd-2.2.11.tar.gz</code></li>
</ol>
</li>
<li>进入到解压目录并编译(需安装gcc)<ol>
<li><code>cd httpd-2.2.11</code></li>
<li><code>./configure --prefix=/usr/local/apache --enable-so</code></li>
</ol>
</li>
<li>安装<ol>
<li><code>make &amp;&amp; make install</code></li>
</ol>
</li>
<li>配置加载PHP<ol>
<li><code>vim /usr/local/apache/conf/httpd.conf</code></li>
<li><code>AddType application/x-httpd-php .php</code><h4 id="启动Apache，并测试Apache"><a href="#启动Apache，并测试Apache" class="headerlink" title="启动Apache，并测试Apache"></a>启动Apache，并测试Apache</h4></li>
</ol>
</li>
<li>进入到Apache的bin目录启动Apache：<code>[root@localhost usr]# cd /usr/local/apache/bin</code></li>
<li>修改Apache配置文件：<code>[root@localhost bin]# vim ../conf/httpd.conf</code><ol>
<li>开启并修改域名：<code>ServerName localhost:80</code></li>
</ol>
</li>
<li>重启Apache：</li>
<li>测试<ol>
<li>关闭防火墙：<code>service iptables stop</code>；服务器重启之后防火墙会再次开启。实际应用场景可修改编辑（/etc/sysconfig/iptables文件,开启SSH端口22，或tcp80，数据库3306可以加上如下内容：-A RH-Firewall-1-INPUT -m state –state NEW -m tcp -p tcp –dport 22 -j ACCEPT）</li>
<li>直接输入IP地址，测试</li>
<li>在命令行下使用curl工具：<code>/usr/bin/curl http:127.0.0.1</code></li>
<li>通过端口的方式：<code>netstat -tunple|grep 80</code></li>
<li>通过进程方式：<code>ps - aux | grep httpd</code></li>
</ol>
</li>
<li>报错排错：<br><img src="http://resoure.uiste.com/1apache_error.png" alt="apache_error"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost bin]# ./apachectl start</span><br><span class="line">(98)Address already in use: make_sock: could not bind to address [::]:80</span><br><span class="line">(98)Address already in use: make_sock: could not bind to address 0.0.0.0:80</span><br><span class="line">no listening sockets available, shutting down</span><br><span class="line">Unable to open logs</span><br><span class="line">[root@localhost bin]# netstat -tunple|grep 80</span><br><span class="line">tcp        0      0 :::80                       :::*                        LISTEN      0          59332      22963/httpd</span><br><span class="line">udp        0      0 :::57780                    :::*                                    29         12263      1361/rpc.statd</span><br><span class="line">udp        0      0 fe80::20c:29ff:fe04:2b3c:123 :::*                                    0          13141      1573/ntpd</span><br><span class="line">[root@localhost bin]# pkill httpd</span><br><span class="line">[root@localhost bin]# netstat -tunple|grep 80</span><br><span class="line">udp        0      0 :::57780                    :::*                                    29         12263      1361/rpc.statd</span><br><span class="line">udp        0      0 fe80::20c:29ff:fe04:2b3c:123 :::*                                    0          13141      1573/ntpd</span><br><span class="line">[root@localhost bin]# ./apachectl start</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="PHP安装"><a href="#PHP安装" class="headerlink" title="PHP安装"></a>PHP安装</h3><h4 id="安装zlib压缩库"><a href="#安装zlib压缩库" class="headerlink" title="安装zlib压缩库"></a>安装zlib压缩库</h4><ol>
<li>进入LAMP安装目录<pre><code>1. `[root@localhost home]# cd /home/LAMP`
</code></pre></li>
<li>使用tar命令实现解压功能<pre><code>1. `[root@localhost LAMP]# tar -zxvf zlib-1.2.5.tar.gz`
</code></pre></li>
<li>进入到解压目录并编译(需安装gcc)<pre><code>1. `[root@localhost LAMP]# cd zlib-1.2.5`
2. `[root@localhost zlib-1.2.5]# ./configure`
</code></pre></li>
<li>安装<pre><code>1. `[root@localhost zlib-1.2.5]# make &amp;&amp; make install`
</code></pre><h4 id="安装libxml2"><a href="#安装libxml2" class="headerlink" title="安装libxml2"></a>安装libxml2</h4></li>
<li>进入LAMP安装目录<pre><code>1. `[root@localhost home]# cd /home/LAMP`
</code></pre></li>
<li>使用tar命令实现解压功能<pre><code>1. `[root@localhost LAMP]# tar -zxvf libxml2-2.7.2.tar.gz`
</code></pre></li>
<li>进入到解压目录并编译(需安装gcc)<pre><code>1. `[root@localhost LAMP]# cd libxml2-2.7.2`
2. `[root@localhost libxml2-2.7.2]# ./configure --prefix=/usr/local/libxml2 -without-zlib`
</code></pre></li>
<li>安装<pre><code>1. `[root@localhost libxml2-2.7.2]# make &amp;&amp; make install`
</code></pre><h4 id="安装jpeg8"><a href="#安装jpeg8" class="headerlink" title="安装jpeg8"></a>安装jpeg8</h4></li>
<li>进入LAMP安装目录<pre><code>1. `[root@localhost home]# cd /home/LAMP`
</code></pre></li>
<li>使用tar命令实现解压功能<pre><code>1. `[root@localhost LAMP]# tar -zxvf jpegsrc.v8b.tar.gz`
</code></pre></li>
<li>进入到解压目录并编译(需安装gcc)<pre><code>1. `[root@localhost LAMP]# cd jpeg-8b/`
2. `[root@localhost jpeg-8b]# ./configure --prefix=/usr/local/jpeg --enable-shared --enable-static`
</code></pre></li>
<li>安装<pre><code>1. `[root@localhost jpeg-8b]# make &amp;&amp; make install`
</code></pre><h4 id="安装libpng"><a href="#安装libpng" class="headerlink" title="安装libpng"></a>安装libpng</h4></li>
<li>进入LAMP安装目录<pre><code>1. `[root@localhost home]# cd /home/LAMP`
</code></pre></li>
<li>使用tar命令实现解压功能<pre><code>1. `[root@localhost LAMP]# tar -zxvf libpng-1.4.3.tar.gz`
</code></pre></li>
<li>进入到解压目录并编译(需安装gcc)<pre><code>1. `[root@localhost LAMP]# cd libpng-1.4.3`
2. `[root@localhost libpng-1.4.3]# ./configure`
</code></pre></li>
<li>安装<pre><code>1. `[root@localhost libpng-1.4.3]# make &amp;&amp; make install`
</code></pre><h4 id="安装freetype（字体库）"><a href="#安装freetype（字体库）" class="headerlink" title="安装freetype（字体库）"></a>安装freetype（字体库）</h4></li>
<li>进入LAMP安装目录<pre><code>1. `[root@localhost home]# cd /home/LAMP`
</code></pre></li>
<li>使用tar命令实现解压功能<pre><code>1. `[root@localhost LAMP]# tar -zxvf freetype-2.4.1.tar.gz`
</code></pre></li>
<li>进入到解压目录并编译(需安装gcc)<pre><code>1. `[root@localhost LAMP]# cd freetype-2.4.1`
2. `[root@localhost freetype-2.4.1]# ./configure --prefix=/usr/local/freetype`
</code></pre></li>
<li>安装<pre><code>1. `[root@localhost freetype-2.4.1]# make &amp;&amp; make install`
</code></pre><h4 id="安装GD库"><a href="#安装GD库" class="headerlink" title="安装GD库"></a>安装GD库</h4></li>
<li>进入LAMP安装目录<pre><code>1. `[root@localhost home]# cd /home/LAMP`
</code></pre></li>
<li>使用tar命令实现解压功能<pre><code>1. `[root@localhost LAMP]# tar -zxvf gd-2.0.35.tar.gz`
</code></pre></li>
<li>进入到解压目录并编译(需安装gcc)<pre><code>1. `[root@localhost LAMP]# cd gd-2.0.35`
2. `[root@localhost gd-2.0.35]# ./configure --prefix=/usr/local/gd  --with-jpeg=/usr/local/jpeg/ --with-png --with-zlib --with-freetype=/usr/local/freetype`
</code></pre></li>
<li>安装<pre><code>1. `[root@localhost gd-2.0.35]# make &amp;&amp; make install`
</code></pre><h4 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h4></li>
<li>进入LAMP安装目录<pre><code>1. `[root@localhost home]# cd /home/LAMP`
</code></pre></li>
<li>使用tar命令实现解压功能<pre><code>1. `[root@localhost LAMP]# tar -zvxf php-5.3.28.tar.gz`
</code></pre></li>
<li>进入到解压目录并编译(需安装gcc)<pre><code>1. `[root@localhost LAMP]# cd php-5.3.28`
2. `[root@localhost php-5.3.28]#./configure --prefix=/usr/local/php --with-mysql=mysqlnd --with-pdo-mysql=mysqlnd  --with-mysqli=mysqlnd --with-freetype-dir=/usr/local/freetype --with-gd=/usr/local/gd   --with-zlib --with-libxml-dir=/usr/local/libxml2 --with-jpeg-dir=/usr/local/jpeg --with-png-dir --enable-mbstring=all --enable-mbregex --enable-shared --with-config-file-path=/usr/local/php/etc --with-curlwrappers --with-apxs2=/usr/local/apache/bin/apxs`
</code></pre></li>
<li>安装<pre><code>1. `[root@localhost php-5.3.28]# make &amp;&amp; make install`
</code></pre><h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3>MySQL使用二进制包安装，已经安装过了的（安装前终止msyqld进程：<code>pkill mysqld</code>）</li>
<li>进入LAMP安装目录<pre><code>1. `[root@localhost home]# cd /home/LAMP`
</code></pre></li>
<li>使用tar命令，使用C指定解压目录<pre><code>1. `[root@localhost LAMP]# tar -zxvf mysql-5.5.38-linux2.6-i686.tar.gz -C /usr/local`
</code></pre></li>
<li>进入到解压目录<code>/usr/local</code>下<pre><code>1. `[root@localhost LAMP]# cd /usr/local`
</code></pre></li>
<li>创建软连接<pre><code>1. `[root@localhost local]# ln -sv mysql-5.5.38-linux2.6-i686/ mysql`
2. `[root@localhost local]# cd mysql`
</code></pre> 使用<code>vim INSTALL-BINARY</code>查看安装提示</li>
<li>添加MySQL用户<pre><code>1. `[root@localhost local]# useradd mysql`
</code></pre></li>
<li>修改文件权限<pre><code>1. `[root@localhost mysql]# chown -R mysql.mysql ./`
</code></pre></li>
<li>安装MySQL<pre><code>1. `[root@localhost mysql]# ./scripts/mysql_install_db --user=mysql`
2. 成功提示：
</code></pre><img src="http://resoure.uiste.com/2.mysql_success.png" alt="Alt text"></li>
<li>再次修改权限<pre><code>1. `[root@localhost mysql]# chown -R root . `
2. `[root@localhost mysql]# chown -R mysql data`
</code></pre></li>
<li>复制配置文件<pre><code>1. `[root@localhost mysql]# cp support-files/my-medium.cnf /etc/my.cnf`
2. `cp：是否覆盖&quot;/etc/my.cnf&quot;？ y`
</code></pre></li>
<li>复制服务<pre><code>1. `[root@localhost mysql]# cp support-files/mysql.server /etc/init.d/mysqld`
</code></pre></li>
<li>将MySQL的服务添加到系统服务中<pre><code>1. `[root@localhost mysql]# chkconfig --add mysqld`
</code></pre></li>
<li>启动MySQL服务<pre><code>1. `[root@localhost mysql]# service mysqld start`
</code></pre></li>
<li>默认安装完成没有密码，修改密码<ol>
<li><code>[root@localhost mysql]# ./bin/mysqladmin -u root password &#39;newpass&#39;</code></li>
<li>如果已经设置了密码可以通过如下方式设置<ol>
<li><code>mysql&gt; set password for &#39;root&#39;@&#39;localhost&#39;=password(&#39;newpass&#39;);</code></li>
<li><code>[root@localhost mysql]# ./bin/mysqladmin -u root password oldpass &#39;newpass&#39;</code></li>
<li><code>update user set password = password(&#39;newpass&#39;) where user = &#39;root&#39;;</code></li>
</ol>
</li>
<li>如果密码丢失了，可以这样：<ol>
<li><code>mysql_safe --skip-grant-tables&amp;mysql -u root mysql</code></li>
<li><code>mysql&gt; update user set password=password(&#39;new password&#39;) where user =&#39;root&#39;;</code></li>
<li><code>mysql&gt;FLUSH PRIVILEGES;</code></li>
</ol>
</li>
</ol>
</li>
<li>打开MySQL客户端<pre><code>1. `[root@localhost mysql]# ./bin/mysql -uroot -p`
2. `Enter password:`
</code></pre></li>
<li>报错排错<br><img src="http://resoure.uiste.com/3.mysql_error1.png" alt="Alt text"><br><img src="http://resoure.uiste.com/4.mysql_error2.png" alt="Alt text"><br><img src="http://resoure.uiste.com/5.mysql_error3.png" alt="Alt text"><h4 id="设置远程登录权限"><a href="#设置远程登录权限" class="headerlink" title="设置远程登录权限"></a>设置远程登录权限</h4></li>
<li><code>mysql&gt; use mysql</code></li>
<li><code>mysql&gt; select host,user from user;</code><br><img src="http://resoure.uiste.com/6.quanxian1.png" alt="Alt text"></li>
<li><code>mysql&gt; update user set host=&#39;%&#39; where user =&#39;root&#39; and host =&#39;127.0.0.1&#39;;</code><br><img src="http://resoure.uiste.com/7.quanxian2.png" alt="Alt text"></li>
<li><code>mysql&gt; delete from user where host != &#39;%&#39;;</code><br><img src="http://resoure.uiste.com/8.quanxian3.png" alt="Alt text"></li>
<li><code>mysql&gt; FLUSH PRIVILEGES;</code></li>
<li><p>若没有关闭防火墙需要关闭防火墙 <code>ervice iptables stop</code></p>
</li>
<li><p>开启静态IP</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ONBOOT=yes</span><br><span class="line">NM_CONTROLLED=yes</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=192.168.34.100</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">NM_CONTROLLED=no</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <tags>
        <tag>LAMP环境</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 常用命令</title>
    <url>/2015/20151110-1.html</url>
    <content><![CDATA[<p>Linux命令分为两类，内部命令和外部命令。内部命令比如cd、ls等等，外部命令就是shell文件。<br>命令的格式：<code>command [-选项] 参数</code></p>
<h2 id="常用的命令"><a href="#常用的命令" class="headerlink" title="常用的命令"></a>常用的命令</h2><p><code>pwd</code> 查看当前工作目录<br><code>ls</code> 查看目录中的子文件<br><code>cd</code> 进入目录<br><code>su</code> 获取管理员权限<br><code>init</code> 改变系统运行登录<br><code>runlevel</code> 显示系统运行登录<br><code>startx</code> 启动窗口界面<br><code>passwd</code> 更改密码<br><code>clear</code> 清屏<br><code>exit</code> 退出当前工作环境或退出系统<br><code>dir</code> 查看当前目录下的文件和文件夹<br><code>whoami</code> 使用当前权限的用户<br><code>who am i</code> 查看登录的用户<br><code>halt</code>或<code>power off</code>或<code>shut down</code> 关机<br> <code>reboot</code> 重启<br><code>man 命令</code> 查看帮助    <code>命令 --help</code><br><code>du [-h] [-s]</code> 查看磁盘容量<br><code>df</code> 查看分期<br><code>ps -A</code> 查看进程<br><code>kill –9 进程号</code> 或 <code>pkill 进程名</code>杀死进程<br><code>grep 搜索字符串</code><br><code>control + U</code> 撤销非乱七八糟输入</p>
<h2 id="关于目录和文件的命令"><a href="#关于目录和文件的命令" class="headerlink" title="关于目录和文件的命令"></a>关于目录和文件的命令</h2><h3 id="cd-改变工作目录"><a href="#cd-改变工作目录" class="headerlink" title="cd 改变工作目录"></a>cd 改变工作目录</h3><p><code>cd</code>和<code>cd ~</code>  进入主目录<br><code>cd ../</code> 相对路径<br><code>cd /../..</code> 绝对路径</p>
<h3 id="mkdir-创建目录"><a href="#mkdir-创建目录" class="headerlink" title="mkdir 创建目录"></a>mkdir 创建目录</h3><p><code>mkdir dir</code> 创建目录<br><code>mkdir dir1/dir2</code> 在<code>dir1</code>目录下创建<code>dir2</code>(<code>dir1</code>必须存在)<br><code>mkdir -p dir1/dir2</code> 递归创建目录（dir1不存在）<br><code>mkdir dir1 dir2 dir3</code> 创建多个目录<br><code>rmdir 删除目录</code><br><code>rm –rf 文件/目录</code> 删除文件或文件夹</p>
<h3 id="cp-复制文件或目录"><a href="#cp-复制文件或目录" class="headerlink" title="cp 复制文件或目录"></a>cp 复制文件或目录</h3><p><code>cp file dir</code> 将file复制到dir中<br><code>cp file1 dir/file2</code> 将file1复制到dir中并改名为file2<br><code>cp file1 ./file2</code> 将file1复制一份，并改名为file2</p>
<h3 id="mv-移动文件或文件夹"><a href="#mv-移动文件或文件夹" class="headerlink" title="mv 移动文件或文件夹"></a>mv 移动文件或文件夹</h3><p><code>mv file1 file2</code> 将file1改名为file2<br><code>mv file1 dir1</code> 将file1移动发哦dir1下<br><code>mv dir1 dir2</code> 如果dir2不存在就是将dir1改名为dir2，如果dir2存在将dir1移动到dir2下。<br><code>mv dir1 dir2/dir3</code> dir3不存在就是将dir1移动到dir2中并改名为dir3。</p>
<h3 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h3><p><code>cat file</code> 将file文件内容全部显示<br><code>tac file</code> 将file文件内容反向查看<br><code>cat file1 file2 &gt; file3</code> 将file1和file3的内容合并到file3中<br><code>more file</code> 分屏显示，按回车键显示 不能上翻<br><code>less file</code> 分屏显示，可以上下翻<br><code>head –n file</code> 显示前n行<br><code>tail -n file</code> 显示后n行动态查看：<code>tail -n 5 /etc/group</code><br><code>wc file</code> 显示文件的行数，句数  字符数</p>
<h3 id="创建和向文件中添加内容"><a href="#创建和向文件中添加内容" class="headerlink" title="创建和向文件中添加内容"></a>创建和向文件中添加内容</h3><p><code>touch file</code> 创建文件，可以一次创建多个<br><code>echo 内容 &gt; 文件</code>将内容清空写入文件<br><code>echo 内容 &gt;&gt; 文件</code>将内容追加写入文件<br><code>cat file1 &gt; file2</code>将file1的内容清空写入到file2<br><code>cat file1 &gt;&gt; file2</code>将file1的内容追加写到file2中</p>
<p>##用户和组的操作</p>
<h3 id="useradd-添加用户"><a href="#useradd-添加用户" class="headerlink" title="useradd 添加用户"></a>useradd 添加用户</h3><p><code>useradd uiste</code>添加用户同时创建同名的组<br><code>useradd -g group_name uiste</code>添加用户指定所属组<br><code>useradd -d home_path uiste</code>添加用户指定家目录</p>
<h3 id="uesrmod-修改用户"><a href="#uesrmod-修改用户" class="headerlink" title="uesrmod 修改用户"></a>uesrmod 修改用户</h3><p><code>-c comment</code>修改备注信息<br><code>-l login_name</code>修改登录名称<br><code>-d home_dir</code>修改用户的家目录<br><code>-g group_name</code>修改用户所属组</p>
<h3 id="userdel-删除用户"><a href="#userdel-删除用户" class="headerlink" title="userdel 删除用户"></a>userdel 删除用户</h3><p><code>-r</code>同时删除用户的家目录</p>
<h3 id="增加组"><a href="#增加组" class="headerlink" title="增加组"></a>增加组</h3><p><code>groupadd</code>添加组<br><code>groupadd -g 组编号 itcast2</code></p>
<h3 id="修改组"><a href="#修改组" class="headerlink" title="修改组"></a>修改组</h3><p><code>groupmod -n myitcast itcast</code>修改组名称<br><code>groupmod -g 504 myitcast</code> 修改组编号</p>
<h3 id="删除组"><a href="#删除组" class="headerlink" title="删除组"></a>删除组</h3><p><code>groupdel 组名称</code> 删除组</p>
<h3 id="查看组"><a href="#查看组" class="headerlink" title="查看组"></a>查看组</h3><p><code>tail -n 5 /etc/group</code>查看最后五条信息</p>
<h2 id="组"><a href="#组" class="headerlink" title="组"></a>组</h2><h3 id="文件：-etc-group-组信息"><a href="#文件：-etc-group-组信息" class="headerlink" title="文件：/etc/group 组信息"></a>文件：/etc/group 组信息</h3><h4 id="组名称"><a href="#组名称" class="headerlink" title="组名称"></a>组名称</h4><ol start="2">
<li>组密码（X占位符）</li>
<li>组编号（超级管理员0，1-499默认给系统使用，500+自定义用户组）</li>
<li>组内用户<h3 id="组密码：-etc-gshadow-目前组密码没有使用"><a href="#组密码：-etc-gshadow-目前组密码没有使用" class="headerlink" title="组密码：/etc/gshadow 目前组密码没有使用"></a>组密码：/etc/gshadow 目前组密码没有使用</h3></li>
<li>组名称</li>
<li>组密码（！没有密码）<h2 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h2><h3 id="文件：-etcpasswd"><a href="#文件：-etcpasswd" class="headerlink" title="文件：/etcpasswd"></a>文件：/etcpasswd</h3></li>
<li>用户名</li>
<li>密码占位符</li>
<li>用户编号</li>
<li>用户所属组编号</li>
<li>用户全名（备注）</li>
<li>用户家目录</li>
<li>用户能够使用的指令（bin/bash用户表示可以登录到操作系统中，bin/nologin表示用户不能够登录到系统）<h3 id="密码：-etc-shadow"><a href="#密码：-etc-shadow" class="headerlink" title="密码：/etc/shadow"></a>密码：/etc/shadow</h3></li>
<li>用户名</li>
<li>用户密码，散列算法加密密码。使用！！表示用户没有密码的用户不能登录到系统<h3 id="设置用户口令-passwd"><a href="#设置用户口令-passwd" class="headerlink" title="设置用户口令 passwd"></a>设置用户口令 passwd</h3><code>passwd uiste</code> (设置密码注意，检验过程)<br><code>-S： status</code>查看某个用户的状态<br><code>-l： lock</code>锁定某个用户，不能正常登录<br><code>-u： unlock</code>解除锁<br><code>-d：delete</code>清空用户密码<h3 id="禁止普通用户登录"><a href="#禁止普通用户登录" class="headerlink" title="禁止普通用户登录"></a>禁止普通用户登录</h3></li>
<li>锁定</li>
<li>删除密码</li>
<li>修改用户密码文件直接在前面加上 !!<ol>
<li><code>vim /etc/shadow</code></li>
<li>对应用户密码前面增加两个感叹号</li>
</ol>
</li>
<li>禁止所有普通用户登录<ol>
<li>在etc目录下创建一个空文件 nologin</li>
<li><code>touch nologin</code></li>
</ol>
</li>
<li>用户相关的其他命令<ol>
<li><code>su</code> : 切换用户</li>
<li><code>whoami</code>：我是谁</li>
<li><code>id</code>：用户信息</li>
<li><code>groups</code>：用户所属组</li>
</ol>
</li>
<li>用户资料信息<ol>
<li><code>chfn 用户名</code>：添加备注信息</li>
<li><code>finger 用户名</code>：查看用户信息<pre><code>1. `cd /bin`与`cd /sbin`找不该命令
2. 安装
</code></pre></li>
</ol>
</li>
<li>赋予用户特殊权限<ol>
<li>直接编辑 <code>/etc/sudoers</code></li>
<li><code>visudo</code> 修改文件</li>
<li>操作步骤<ol>
<li><code>useradd dumin</code>创建用户</li>
<li><code>passwd dumin</code>创建密码</li>
<li><code>whereis useradd</code>查询某个命令所在位置</li>
<li>修改<code>/etc/sudoers</code>文件给某个普通用户赋予权限<pre><code>1) `dumin localhost = /user/sbin/useradd`
</code></pre></li>
<li>切换用户执行命令<pre><code>1)` su dumin`
2) `sudo -l `显示拥有权限 
</code></pre></li>
</ol>
</li>
</ol>
</li>
<li>date 查看或设置系统日期时间</li>
<li>| 管道运行符<h2 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h2></li>
<li>第一列：代表文件权限信息</li>
<li>第二列：文件节点数</li>
<li>第三列：文件所有者（用户）</li>
<li>第四列：文件所属组（组）<h3 id="字母含义"><a href="#字母含义" class="headerlink" title="字母含义"></a>字母含义</h3></li>
<li>第一个字母表示文件类型，-表示普通文件，d表示文件夹</li>
<li>后面九个字母，每三个为一组</li>
<li>第一组：所有者的权限</li>
<li>第二组：所有组的权限（所有组所在的组其他用户对文件的权限）</li>
<li>第三组：组外用户的权限</li>
<li>最后一个点，表示文件具备selinux安全<h3 id="文件权限数字转换，777，755，644"><a href="#文件权限数字转换，777，755，644" class="headerlink" title="文件权限数字转换，777，755，644"></a>文件权限数字转换，777，755，644</h3>§ r可读权限，使用数字4表示<br>§ w写入权限，使用数字2表示<br>§ x执行权限，使用数字1表示<br>§ 0代表没有权限<br>§ 777分别对应了所有者，组内用户，组外用户<h4 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h4><h5 id="chmod修改权限"><a href="#chmod修改权限" class="headerlink" title="chmod修改权限"></a>chmod修改权限</h5><code>[uiste@localhost ~]$ chmod -R 777 1.php</code><br><code>-R</code>参数表示递归<h5 id="chown修改文件拥有者"><a href="#chown修改文件拥有者" class="headerlink" title="chown修改文件拥有者"></a>chown修改文件拥有者</h5><code>chown -R uiste 1.php</code><br><code>chown -R uiste.uiste  1.php</code><h4 id="chgrp修改所属组"><a href="#chgrp修改所属组" class="headerlink" title="chgrp修改所属组"></a>chgrp修改所属组</h4><code>chgrp -R root 1.php</code><br>基本语法：<code>ln  -sn  源文件地址  目标地址</code><h4 id="创建软连接"><a href="#创建软连接" class="headerlink" title="创建软连接"></a>创建软连接</h4>相当于windows下的快捷方式<h2 id="vim-vi"><a href="#vim-vi" class="headerlink" title="vim(vi)"></a>vim(vi)</h2></li>
<li>查看vim是否存在</li>
<li><code>vi file</code>   file存在就打开，不存在就新建后打开</li>
<li><code>vi + filename /vi + n + filename</code>  打开文件定位到指定行数</li>
<li><code>vi + string filename</code>打开文件并定位到string</li>
<li>vi有三种模式命令模式、末行模式、编辑模式</li>
<li>末行模式<ol>
<li><code>：</code>进入末行模式</li>
<li><code>:w</code>保存</li>
<li><code>:w!</code>强制保存</li>
<li><code>:q</code>退出</li>
<li><code>:q!</code>强制退出</li>
<li><code>:wq</code> 保存退出   :x</li>
<li><code>:wq!</code>强制保存退出</li>
<li><code>set number</code>或<code>set nu</code> 设置行号</li>
<li><code>set nonumber</code> 或<code>set nonu</code> 取消行号</li>
<li><code>:n</code> 跳转到第n行</li>
<li><code>/str</code> 向下查找    n下一个  N上一个</li>
<li><code>?str</code> 向上查找                                                                                          </li>
<li><code>/xx/yy</code> 将当前的xx改为yy</li>
<li><code>s/xx/yy/g</code> 将当前行的xx改为yy</li>
<li><code>%s/xx/yy/g</code> 将整个页面的xx改成yy</li>
<li><code>u</code> 撤销前一条指令</li>
<li><code>.</code> 继续上一条指令</li>
<li><code>J</code>连接上下两行</li>
<li><code>r+指定字符</code> 用指定字符替换当前字符</li>
</ol>
</li>
<li>编辑模式：按<code>i、o 、a、s</code>进入编辑模式，退出esc退出编辑模式</li>
<li>命令模式<ol>
<li>光标的移动</li>
<li>单词级别操作</li>
<li>行级操作<ol>
<li><code>$</code> 行尾</li>
<li><code>0</code> 行首</li>
</ol>
</li>
<li>段级<ol>
<li><code>{</code> 段的开始</li>
<li><code>}</code> 段的结束</li>
</ol>
</li>
<li>屏幕的级别<ol>
<li><code>H</code>：head   屏幕的首部</li>
<li><code>L</code>：tail 屏幕的尾部</li>
</ol>
</li>
<li>文档级<ol>
<li><code>G</code> 移动到文档的尾部</li>
<li><code>3G</code> 移动的文本的第3行</li>
</ol>
</li>
</ol>
</li>
<li>删除操作<ol>
<li><code>dd</code> 删除当前行</li>
<li><code>x</code> 删除当前字符</li>
<li><code>d+光标的区域</code> 删除当前字符到光标达到的区域</li>
</ol>
</li>
<li>复制<ol>
<li><code>yy</code> 复制当前行</li>
<li><code>p</code> 粘贴</li>
</ol>
</li>
</ol>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>AJAX跨域请求与AJAX浏览器缓存处理</title>
    <url>/2015/20151106-1.html</url>
    <content><![CDATA[<h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><h2 id="原生post-提交"><a href="#原生post-提交" class="headerlink" title="原生post 提交"></a>原生post 提交</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">window.onload=function()&#123;</span><br><span class="line">	document.getElementById(&apos;username&apos;).onblur=function()&#123;</span><br><span class="line">		var username=document.getElementById(&apos;username&apos;).value;</span><br><span class="line">		username=encodeURIComponent(username);	//字符编码，防止与URL关键字相混淆</span><br><span class="line">		var req=new XMLHttpRequest();</span><br><span class="line">		req.open(&apos;post&apos;,&apos;./5-demo.php&apos;);	//创建连接</span><br><span class="line">		req.onreadystatechange=function()&#123;	//当状态发生变化</span><br><span class="line">			if(req.readyState==4 &amp;&amp; req.status==200)&#123;</span><br><span class="line">				var result=req.responseText;	//接受返回的信息</span><br><span class="line">				alert(result);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		req.setRequestHeader(&apos;Content-Type&apos;,&apos;application/x-www-form-urlencoded&apos;); //设置请求头</span><br><span class="line">		req.send(&apos;username=&apos;+username);	//post提交数据</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;&quot; id=&quot;username&quot;&gt;</span><br></pre></td></tr></table></figure>
<h2 id="解决浏览器缓存"><a href="#解决浏览器缓存" class="headerlink" title="解决浏览器缓存"></a>解决浏览器缓存</h2><ol>
<li>方法一：添加一个随机数，使得URL地址变得唯一<br><code>req.open(&#39;open&#39;,&#39;./1.php?&#39;+Math.random());</code></li>
<li>方法二：告知浏览器不要缓存页面<br><code>header(&quot;Cache-Control:no-cache&quot;);</code><br><code>header(&quot;Pragma:no-cache&quot;);</code></li>
<li>方法三：当浏览器接受到相应的时候，缓存就已经过期<br><code>header(&quot;Expires:-1&quot;);</code></li>
<li>方法四：<br>设置请求头：<code>req.setRequestHeader(&#39;If-Modified-Since&#39;,&#39;0&#39;);</code><br>客户端通过If-Modified-Since头将服务器端最后发过来的页面时间戳发送回去，服务器端通过时间戳判断客户端的页面是否是最新的，如果不是最新的则返回新的内容，如果是最新的，则返回304重定向到客户端缓存中的页面。</li>
</ol>
<h2 id="跨域请求"><a href="#跨域请求" class="headerlink" title="跨域请求"></a>跨域请求</h2><p>背景：浏览器为了安全考虑，不允许跨域请求。<br>同源策略：一个域名下的JS只能请求同一个域名下的文件，不能跨域请求<br>解决方法：</p>
<ol>
<li><p>HTML标记的src属性没有同源限制<br><code>&lt;script src=&quot;http://www.uiste.com/test.js&quot;&gt;&lt;/script&gt;</code></p>
</li>
<li><p>PHP同域代理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">文件一：&lt;?php echo file_get_contents(&apos;http://www.uiste.com/test.php&apos;); ?&gt;</span><br><span class="line">文件二：&lt;script&gt;req.open(&apos;open&apos;,&apos;6-demo.php&apos;)&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置响应头</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">header(&quot;Access-Control-Allow-Origin: http://a.com&quot;); // 允许a.com发起的跨域请求  </span><br><span class="line">//如果需要设置允许所有域名发起的跨域请求，可以使用通配符 *  </span><br><span class="line">header(&quot;Access-Control-Allow-Origin: *&quot;); // 允许任意域名发起的跨域请求  </span><br><span class="line">header(&apos;Access-Control-Allow-Headers: X-Requested-With,X_Requested_With&apos;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>jsonp<br>JSONP是客户端用get的方式传递一个回调函数的名字给服务器，服务器返回拼接好的调用函数字符串给客户端，然后客户端用js生成script标记，用script标记的src属性引入服务器生成的js代码，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PHP文件一：</span><br><span class="line">$stu = array(&apos;tom&apos;,&apos;berry&apos;);</span><br><span class="line">$stu = json_encode($stu);</span><br><span class="line">$fn = $_GET[&apos;fn&apos;];</span><br><span class="line">echo &quot;$fn($stu)&quot;;</span><br><span class="line">HTML文件二：</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">function show(msg)&#123;alert(msg);&#125;</span><br><span class="line">window.onload=function()&#123;</span><br><span class="line">	document.getElementById(&apos;btn&apos;).onclick=function()&#123;</span><br><span class="line">		var script=document.createElement(&apos;script&apos;);</span><br><span class="line">		script.src=&quot;http://www.uiste.com/test.php?fn=show&quot;;</span><br><span class="line">		var body=document.getElementByTagName(&apos;body&apos;)[0];</span><br><span class="line">		body.appendChild(script);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;点击&quot; id=&quot;btn&quot;&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>jsonp案例</p>
</blockquote>
<p>实例1<br>test.html<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;test&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;jquery-1.5.2.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;ajax.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"> </span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>
<p>ajax.js<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type : &quot;post&quot;,</span><br><span class="line">    url : &quot;ajax.php&quot;,</span><br><span class="line">    dataType : &quot;jsonp&quot;,</span><br><span class="line">    jsonp: &quot;callback&quot;,//传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(默认为:callback)</span><br><span class="line">    jsonpCallback:&quot;success_jsonpCallback&quot;,//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名</span><br><span class="line">    success : function(json)&#123;</span><br><span class="line">        alert(&apos;success&apos;);</span><br><span class="line">    &#125;,</span><br><span class="line">    error:function()&#123;</span><br><span class="line">        alert(&apos;fail&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>ajax.php<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> </span><br><span class="line">$data = &quot;.......&quot;;</span><br><span class="line">$callback = $_GET[&apos;callback&apos;];</span><br><span class="line">echo $callback.&apos;(&apos;.json_encode($data).&apos;)&apos;;</span><br><span class="line">exit;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>jquery-1.5.2.min.js<br>当使用jsonp时，使用 JSONP 形式调用函数时，如 “myurl?callback=?” jQuery 将自动替换 ? 为正确的函数名，以执行回调函数。</p>
</blockquote>
<p>实例2<br>test.html<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;test&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;jquery-1.5.2.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;ajax.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"> </span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form name=&quot;form&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;sex&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;age&quot;&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; id=&quot;btn&quot; value=&quot;button&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>
<p>ajax.js<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(document).ready(function()&#123;</span><br><span class="line"> </span><br><span class="line">    $(&quot;#btn&quot;).click(function(k) &#123;</span><br><span class="line">        //...</span><br><span class="line">        var j = $(&quot;form&quot;).serializeArray();//序列化name/value</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: &apos;GET&apos;,  //这里用GET</span><br><span class="line">            url: &apos;ajax.php&apos;,</span><br><span class="line">            dataType: &apos;jsonp&apos;,  //类型</span><br><span class="line">            data: j,</span><br><span class="line">            jsonp: &apos;callback&apos;, //jsonp回调参数，必需</span><br><span class="line">            async: false,</span><br><span class="line">            success: function(result) &#123;//返回的json数据</span><br><span class="line">                alert(result.message); //回调输出</span><br><span class="line">                 </span><br><span class="line">                result = result || &#123;&#125;;</span><br><span class="line">                if (result.msg==&apos;err&apos;)&#123;</span><br><span class="line">                    alert(result.info);</span><br><span class="line">                &#125;else if (result.msg==&quot;ok&quot;)&#123;</span><br><span class="line">                    alert(&apos;提交成功&apos;);</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    alert(&apos;提交失败&apos;);</span><br><span class="line">                &#125;</span><br><span class="line">                 </span><br><span class="line">            &#125;,</span><br><span class="line">            timeout: 3000</span><br><span class="line">        &#125;)</span><br><span class="line">        //...</span><br><span class="line">    &#125;);</span><br><span class="line">     </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>ajax.php<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$callback = isset($_GET[&apos;callback&apos;]) ? trim($_GET[&apos;callback&apos;]) : &apos;&apos;; //jsonp回调参数，必需</span><br><span class="line">$date = array(&quot;age&quot;=&gt;$_GET[&apos;age&apos;], &quot;message&quot;=&gt;$_GET[&apos;age&apos;]);</span><br><span class="line">$date[&quot;msg&quot;]=&quot;err&quot;;</span><br><span class="line">$date[&quot;info&quot;]=&quot;因人品问题，发送失败&quot;;</span><br><span class="line">$tmp= json_encode($date); //json 数据</span><br><span class="line">echo $callback . &apos;(&apos; . $tmp .&apos;)&apos;;  //返回格式，必需</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>AJAX</tag>
      </tags>
  </entry>
  <entry>
    <title>Role-Based Access Control</title>
    <url>/2015/20151101-1.html</url>
    <content><![CDATA[<h1 id="RBAC"><a href="#RBAC" class="headerlink" title="RBAC"></a>RBAC</h1><p>基于角色的访问控制 (Role-Based Access Control)</p>
<h2 id="表设计"><a href="#表设计" class="headerlink" title="表设计"></a>表设计</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建后台管理员表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> ugo_admin;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ugo_admin(</span><br><span class="line">	admin_id <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span> auto_increment PRIMARY <span class="keyword">KEY</span> <span class="keyword">COMMENT</span> <span class="string">'管理员id'</span> ,</span><br><span class="line">	admin_name <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户名'</span> ,</span><br><span class="line">	admin_pwd <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span> ,</span><br><span class="line">	admin_role_id <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'角色编号'</span></span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">INNODB</span> <span class="keyword">charset</span> = utf8 <span class="keyword">COMMENT</span> <span class="string">'管理员表'</span>;</span><br><span class="line"><span class="comment"># 超级管理员测试数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_admin <span class="keyword">values</span> (<span class="literal">null</span>,<span class="string">'aa'</span>,<span class="string">'aa'</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建后台权限表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> ugo_authority;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ugo_authority(</span><br><span class="line">	auth_id <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> auto_increment PRIMARY <span class="keyword">KEY</span> <span class="keyword">COMMENT</span> <span class="string">'auth_id'</span> ,</span><br><span class="line">	auth_name <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'权限名称'</span> ,</span><br><span class="line">	auth_pid <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'权限父级id'</span> ,</span><br><span class="line">	auth_c <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'控制器名'</span> ,</span><br><span class="line">	auth_a <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'方法名'</span> ,</span><br><span class="line">	auth_path <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'全路径,格式:父级id-子级id'</span> ,</span><br><span class="line">	is_show <span class="built_in">TINYINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span> <span class="keyword">COMMENT</span> <span class="string">'是否显示在导航栏上'</span></span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">INNODB</span> <span class="keyword">charset</span> = utf8 <span class="keyword">COMMENT</span> <span class="string">'权限表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建后台角色表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> ugo_role;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> ugo_role(</span><br><span class="line">	role_id <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span> auto_increment PRIMARY <span class="keyword">KEY</span> <span class="keyword">COMMENT</span> <span class="string">'role_id'</span> ,</span><br><span class="line">	role_name <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'角色名称'</span> ,</span><br><span class="line">	role_auth_ids <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'角色具有权限id的集合，格式1,2,5'</span> ,</span><br><span class="line">	role_auth_ac <span class="built_in">text</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'控制器和方法的组合，格式：控制器-方法名'</span></span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">INNODB</span> <span class="keyword">charset</span> = utf8 <span class="keyword">COMMENT</span> <span class="string">'角色表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># *********************************************************** #</span></span><br><span class="line"><span class="comment">-- 插入测试数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_authority <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">'商品管理'</span>,<span class="number">0</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_authority <span class="keyword">values</span> (<span class="number">2</span>,<span class="string">'会员管理'</span>,<span class="number">0</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_authority <span class="keyword">values</span> (<span class="number">3</span>,<span class="string">'权限管理'</span>,<span class="number">0</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="number">3</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_authority <span class="keyword">values</span> (<span class="number">4</span>,<span class="string">'商品列表'</span>,<span class="number">1</span>,<span class="string">'Goods'</span>,<span class="string">'show'</span>,<span class="string">'1-4'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_authority <span class="keyword">values</span> (<span class="number">5</span>,<span class="string">'添加商品'</span>,<span class="number">1</span>,<span class="string">'Goods'</span>,<span class="string">'add'</span>,<span class="string">'1-5'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_authority <span class="keyword">values</span> (<span class="number">6</span>,<span class="string">'修改商品'</span>,<span class="number">1</span>,<span class="string">'Goods'</span>,<span class="string">'edit'</span>,<span class="string">'1-6'</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_authority <span class="keyword">values</span> (<span class="number">7</span>,<span class="string">'删除商品'</span>,<span class="number">1</span>,<span class="string">'Goods'</span>,<span class="string">'del'</span>,<span class="string">'1-7'</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_authority <span class="keyword">values</span> (<span class="number">8</span>,<span class="string">'会员列表'</span>,<span class="number">2</span>,<span class="string">'Role'</span>,<span class="string">'show'</span>,<span class="string">'2-12'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_authority <span class="keyword">values</span> (<span class="number">9</span>,<span class="string">'添加会员'</span>,<span class="number">2</span>,<span class="string">'Role'</span>,<span class="string">'add'</span>,<span class="string">'2-13'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_authority <span class="keyword">values</span> (<span class="number">10</span>,<span class="string">'修改会员'</span>,<span class="number">2</span>,<span class="string">'Role'</span>,<span class="string">'edit'</span>,<span class="string">'2-14'</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_authority <span class="keyword">values</span> (<span class="number">11</span>,<span class="string">'删除会员'</span>,<span class="number">2</span>,<span class="string">'Role'</span>,<span class="string">'del'</span>,<span class="string">'2-15'</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_authority <span class="keyword">values</span> (<span class="number">12</span>,<span class="string">'权限列表'</span>,<span class="number">3</span>,<span class="string">'Authority'</span>,<span class="string">'show'</span>,<span class="string">'3-8'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_authority <span class="keyword">values</span> (<span class="number">13</span>,<span class="string">'添加权限'</span>,<span class="number">3</span>,<span class="string">'Authority'</span>,<span class="string">'add'</span>,<span class="string">'3-9'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_authority <span class="keyword">values</span> (<span class="number">14</span>,<span class="string">'修改权限'</span>,<span class="number">3</span>,<span class="string">'Authority'</span>,<span class="string">'edit'</span>,<span class="string">'3-10'</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_authority <span class="keyword">values</span> (<span class="number">15</span>,<span class="string">'删除权限'</span>,<span class="number">3</span>,<span class="string">'Authority'</span>,<span class="string">'del'</span>,<span class="string">'3-11'</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_role <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">'经理'</span>,<span class="string">'1,4,5'</span>,<span class="string">'Goods-show,Goods-add'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_role <span class="keyword">values</span> (<span class="number">2</span>,<span class="string">'主管'</span>,<span class="string">'1,4'</span>,<span class="string">'Goods-show'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_admin <span class="keyword">values</span> (<span class="literal">null</span>,<span class="string">'aa'</span>,<span class="string">'aa'</span>,<span class="number">0</span>)</span><br><span class="line"><span class="comment"># *********************************************************** #</span></span><br></pre></td></tr></table></figure>
<h2 id="菜单后台"><a href="#菜单后台" class="headerlink" title="菜单后台"></a>菜单后台</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">menu</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $admin = session(<span class="string">'admin'</span>);</span><br><span class="line">        $role_id = $admin[<span class="string">'admin_role_id'</span>];</span><br><span class="line">        <span class="keyword">if</span> ($role_id==<span class="number">0</span>) &#123; <span class="comment">//超级管理员</span></span><br><span class="line">            $auth_info1 = M(<span class="string">'authority'</span>)-&gt;where(<span class="string">'auth_pid = 0 and is_show = 1'</span>)-&gt;select();<span class="comment">//父级</span></span><br><span class="line">            $auth_info2 = M(<span class="string">'authority'</span>)-&gt;where(<span class="string">'auth_pid &gt; 0 and is_show = 1'</span>)-&gt;select();<span class="comment">//子级</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $role = M(<span class="string">'role'</span>)-&gt;find($role_id); <span class="comment">//通过管理员角色id找到角色信息</span></span><br><span class="line">            $role_auth_ids = $role[<span class="string">'role_auth_ids'</span>];<span class="comment">//获取该角色的权限信息</span></span><br><span class="line">            $auth_info1 = M(<span class="string">'authority'</span>)-&gt;where(<span class="string">"auth_pid = 0 and is_show =1 and auth_id in ($role_auth_ids)"</span>)-&gt;select();</span><br><span class="line">            $auth_info2 = M(<span class="string">'authority'</span>)-&gt;where(<span class="string">"auth_pid &gt; 0 and is_show =1 and auth_id in ($role_auth_ids)"</span>)-&gt;select();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assign(<span class="string">'menu_list'</span>,<span class="keyword">array</span>(</span><br><span class="line">                <span class="string">'auth_info1'</span> =&gt; $auth_info1,</span><br><span class="line">                <span class="string">'auth_info2'</span> =&gt; $auth_info2</span><br><span class="line">            ));</span><br><span class="line">    	<span class="keyword">$this</span>-&gt;display();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="菜单前台"><a href="#菜单前台" class="headerlink" title="菜单前台"></a>菜单前台</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;volist name=<span class="string">"menu_list.auth_info1"</span> id=<span class="string">"vo1"</span>&gt;</span><br><span class="line">  &lt;li class="collapse" key="&#123;$i&#125;_&#123;$vo1.auth_c&#125;" name="menu"&gt; &#123;$vo1.auth_name&#125;        </span><br><span class="line">    &lt;ul style=<span class="string">"display: none;"</span>&gt;</span><br><span class="line">      &lt;volist name=<span class="string">"menu_list.auth_info2"</span> id=<span class="string">"vo2"</span>&gt;</span><br><span class="line">        &lt;li class="menu-item"&gt;</span><br><span class="line">	        &lt;a href=<span class="string">"/index.php/Admin/&#123;$vo2.auth_c&#125;/&#123;$vo2.auth_a&#125;"</span> target=<span class="string">"main-frame"</span>&gt;&lt;<span class="keyword">if</span> condition=<span class="string">"$vo1.auth_id eq $vo2.auth_pid "</span>&gt;&#123;$vo2.auth_name&#125;&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">	        &lt;/a&gt;</span><br><span class="line">	    &lt;/li&gt;</span><br><span class="line">      &lt;/volist&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/volist&gt;</span><br></pre></td></tr></table></figure>
<h2 id="防翻墙与越权访问"><a href="#防翻墙与越权访问" class="headerlink" title="防翻墙与越权访问"></a>防翻墙与越权访问</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">parent</span>::__construct();</span><br><span class="line">		<span class="keyword">$this</span>-&gt;chenkLogin();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 防翻墙</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">chenkLogin</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (strtoupper(CONTROLLER_NAME)==<span class="string">'LOGIN'</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		$info = session(<span class="string">'admin'</span>);</span><br><span class="line">		<span class="keyword">if</span> (!$info) &#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">'&lt;script type="text/javascript"&gt;'</span>;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">"parent.location.href='/index.php/Admin/Public/login'"</span>;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">'&lt;/script&gt;'</span>;</span><br><span class="line">			<span class="keyword">exit</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//放置越权访问</span></span><br><span class="line">		<span class="keyword">if</span> ($info[<span class="string">'admin_role_id'</span>]==<span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//非管理员验证是否具有访问权限(防止越权方法)</span></span><br><span class="line">		$allow_controller_array = <span class="keyword">array</span>(<span class="string">'INDEX'</span>);<span class="comment">//所有权限都可以访问Index控制器</span></span><br><span class="line">		$controller_name = strtoupper(CONTROLLER_NAME);<span class="comment">//将当前控制器名转大写</span></span><br><span class="line">		<span class="keyword">if</span> (!in_array($controller_name, $allow_controller_array)) &#123;</span><br><span class="line">			$role = M(<span class="string">'role'</span>)-&gt;find($info[<span class="string">'admin_role_id'</span>]);</span><br><span class="line">			$allow_auth_ac = $role[<span class="string">'role_auth_ac'</span>];<span class="comment">//当前角色允许的权限</span></span><br><span class="line">			$now_auth_ac = CONTROLLER_NAME . <span class="string">'-'</span> . ACTION_NAME; <span class="comment">//当前角色访问权限</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">FALSE</span> === stripos($allow_auth_ac, $now_auth_ac)) &#123;</span><br><span class="line">				<span class="keyword">$this</span>-&gt;error(<span class="string">'您没有此访问权限'</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="五张表"><a href="#五张表" class="headerlink" title="五张表"></a>五张表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RBAC建表</span><br><span class="line">三张主表</span><br><span class="line">管理员表(it_admin)    角色表(it_role)     权限表(it_privilege)</span><br><span class="line">两张中间表</span><br><span class="line">角色表与权限表的关系（多对多）it_role_privilege</span><br><span class="line">一个角色，拥有多个权限</span><br><span class="line">一个权限，所属多个角色</span><br><span class="line">管理员表与角色表的关系（多对多）it_admin_role</span><br><span class="line">一个角色拥有多个管理员</span><br><span class="line">一个管理员也可以属于多个角色</span><br><span class="line"></span><br><span class="line">#创建一个管理员表</span><br><span class="line"> create table it_admin(</span><br><span class="line">	id int unsigned primary key auto_increment,</span><br><span class="line">	admin_name  varchar(32) not null comment &apos;管理员名称&apos;,</span><br><span class="line">	password char(32) not null comment &apos;管理员密码&apos;,</span><br><span class="line">	salt  char(6)  not null comment &apos;密码的密钥&apos;</span><br><span class="line">)engine myisam charset utf8;</span><br><span class="line"></span><br><span class="line">密码的加密方式是这样的，md5(md5(password).salt)</span><br><span class="line">#在建管理员表时，要手工创建一个超级管理员</span><br><span class="line">密码:&apos;admin&apos;</span><br><span class="line">salt: df8trr</span><br><span class="line">insert into it_admin(admin_name,password,salt) values(&apos;admin&apos;,&apos;a2040d1137c482b2b5379efb11909db5&apos;,&apos;df8trr&apos;);</span><br><span class="line">#创建一个角色表</span><br><span class="line"> create table it_role(</span><br><span class="line">	id int unsigned primary key auto_increment,</span><br><span class="line">	role_name  varchar(32) not null comment &apos;角色名称&apos;	</span><br><span class="line">)engine myisam charset utf8;</span><br><span class="line">#创建一个权限表(节点，按钮)    权限就是按钮</span><br><span class="line"> create table it_privilege(</span><br><span class="line">	id int unsigned primary key auto_increment,</span><br><span class="line">	priv_name  varchar(32) not null comment &apos;权限名称&apos;,</span><br><span class="line">	parent_id  int not null default 0 comment &apos;权限的父权限&apos;,</span><br><span class="line">	module_name varchar(32) not null comment &apos;权限对应模块的名称&apos;,</span><br><span class="line">	controller_name varchar(32) not null comment &apos;权限对应控制器的名称&apos;,</span><br><span class="line">	action_name varchar(32) not null comment &apos;权限对应方法的名称&apos;</span><br><span class="line">)engine myisam charset utf8;</span><br><span class="line">#创建一个角色与权限的中间表</span><br><span class="line"> create table it_role_privilege(</span><br><span class="line">	role_id int not null comment &apos;角色的id&apos;,</span><br><span class="line">	priv_id int not null comment &apos;权限的id&apos;</span><br><span class="line">)engine myisam charset utf8;</span><br><span class="line">#创建一个管理员与角色的中间表</span><br><span class="line"> create table it_admin_role(</span><br><span class="line">        admin_id int not null comment &apos;管理员的id&apos;,</span><br><span class="line">	role_id int not null comment &apos;角色的id&apos;</span><br><span class="line">)engine myisam charset utf8;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>RBAC</tag>
      </tags>
  </entry>
  <entry>
    <title>命名空间</title>
    <url>/2015/20151018-2.html</url>
    <content><![CDATA[<p>学编程就像学开车，老司机带你装逼，带你飞 …···</p>
<h1 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>背景：如果一个项目很大，有很多文件，很可能有同名的文件。这时候如果组织这些文件就成了大问题。</p>
<p>命名空间通过<code>namespace</code>声明:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">namespace China;</span><br><span class="line">function getInfo()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">namespace USA;</span><br><span class="line">function getInfo()&#123;</span><br><span class="line">&#125;</span><br><span class="line">getInfo();//访问USA的getInfo</span><br></pre></td></tr></table></figure></p>
<p>命名空间是一种封装事物的方法<br>命名空间用来解决在编写类库或应用程序时创建可重用的代码如类或函数时碰到的两类问题：</p>
<ol>
<li>用户编写的代码与PHP内部的类/函数/常量或第三方类/函数/常量之间的名字冲突。</li>
<li>为很长的标识符名称(通常是为了缓解第一类问题而定义的)创建一个别名（或简短）的名称，提高源代码的可读性。</li>
</ol>
<h2 id="定义命名空间"><a href="#定义命名空间" class="headerlink" title="定义命名空间"></a>定义命名空间</h2><p>受命名空间影响的是：类（包括抽象类和traits）、接口、函数和常量。<br>语法：<code>namespace MyProject</code></p>
<blockquote>
<p>必须在其它所有代码之前声明命名空间，命名空间必须是程序脚本的第一条语句。除了一个以外：declare关键字</p>
</blockquote>
<h2 id="定义子命名空间"><a href="#定义子命名空间" class="headerlink" title="定义子命名空间"></a>定义子命名空间</h2><p>命名空间的名字可以使用分层次的方式定义<br>Example #1 声明分层次的单个命名空间<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace MyProject\Sub\Level;</span><br><span class="line">const CONNECT_OK = 1;</span><br><span class="line">class Connection &#123; /* ... */ &#125;</span><br><span class="line">function connect() &#123; /* ... */  &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>可以使用文件的路径来做命名空间。在自动加载类的时候可以通过命名空间的路径来加载类</p>
</blockquote>
<h2 id="访问空间的三种方法"><a href="#访问空间的三种方法" class="headerlink" title="访问空间的三种方法"></a>访问空间的三种方法</h2><ol>
<li>非限定名称访问</li>
<li>完全限定名称访问</li>
<li>[部分]限定名称访问</li>
</ol>
<h2 id="引入命名空间"><a href="#引入命名空间" class="headerlink" title="引入命名空间"></a>引入命名空间</h2><p>完全限定名称访问不方便书写，可以在当前的命名空间下引入其他的命名空间，然后再使用其他命名空间的元素<br>通过<code>use</code>关键字来引入命名空间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">namespace China\Shanghai\PuDong;</span><br><span class="line">function getInfo()&#123;</span><br><span class="line">    echo &apos;aaa&apos;;</span><br><span class="line">&#125;</span><br><span class="line">namespace USA\Washington;</span><br><span class="line">function getInfo()&#123;</span><br><span class="line">    echo &apos;bb&apos;;</span><br><span class="line">&#125;</span><br><span class="line">use China\Shanghai\PuDong;</span><br><span class="line">getInfo();  //bb</span><br><span class="line">PuDong\getInfo(); //aa</span><br></pre></td></tr></table></figure>
<h2 id="引入类-use"><a href="#引入类-use" class="headerlink" title="引入类(use)"></a>引入类(use)</h2><p> 引入与当前控制器同名的类会报错<br> 解决方法：给类取别名<br> 使用as 关键字给命名空间取别名<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use China\Shanghai\PuDong\Person as ChinaPerson;</span><br><span class="line">$person = new ChinaPerson();</span><br><span class="line">echo $person-&gt;name;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>引入命名空间和引入类都是用的use,他们的区分就看引入的是不是类，如果不是类就是命名空间</p>
</blockquote>
<h2 id="公共的命名空间"><a href="#公共的命名空间" class="headerlink" title="公共的命名空间"></a>公共的命名空间</h2><p>如果一个PHP文件中没有<code>namespace</code>关键字声明，则文件中的元素默认存在于公共的空间下。</p>
<blockquote>
<p>在一个页面中，包含另一个文件，不会影响当前页面的命名空间</p>
</blockquote>
<h2 id="命名空间的注意事项"><a href="#命名空间的注意事项" class="headerlink" title="命名空间的注意事项"></a>命名空间的注意事项</h2><ol>
<li>命名空间中可以存放：函数、类、const常量，不能存放define常量。</li>
<li>第一个namespace之前不能有任何代码，header()也不行</li>
<li>包含文件不会改变当前的命名空间</li>
</ol>
<p>##　namespace关键字和<code>__NAMESPACE__</code>常量<br>(PHP 5 &gt;= 5.3.0, PHP 7)<br>PHP支持两种抽象的访问当前命名空间内部元素的方法，<code>__NAMESPACE__</code> 魔术常量和namespace关键字</p>
<p>常量<code>__NAMESPACE__</code>的值是包含当前命名空间名称的字符串。在全局的，不包括在任何命名空间中的代码，它包含一个空的字符串。</p>
<blockquote>
<p><code>__NAMESPACE__</code> 示例, 在命名空间中的代码<br>全局代码</p>
</blockquote>
<p>常量 <code>__NAMESPACE__</code> 在动态创建名称时很有用<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace MyProject;</span><br><span class="line"></span><br><span class="line">function get($classname)</span><br><span class="line">&#123;</span><br><span class="line">    $a = __NAMESPACE__ . &apos;\\&apos; . $classname;</span><br><span class="line">    return new $a;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p>
<p>允许通过别名引用或导入外部的完全限定名称，是命名空间的一个重要特征。这有点类似于在类 unix 文件系统中可以创建对其它的文件或目录的符号连接。</p>
<p>所有支持命名空间的PHP版本支持三种别名或导入方式：为类名称使用别名、为接口使用别名或为命名空间名称使用别名。PHP 5.6开始允许导入函数或常量或者为它们设置别名。</p>
<p>在PHP中，别名是通过操作符 use 来实现的. 下面是一个使用所有可能的五种导入方式的例子：</p>
<p>Example #1 使用use操作符导入/使用别名<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace foo;</span><br><span class="line">use My\Full\Classname as Another;</span><br><span class="line"></span><br><span class="line">// 下面的例子与 use My\Full\NSname as NSname 相同</span><br><span class="line">use My\Full\NSname;</span><br><span class="line"></span><br><span class="line">// 导入一个全局类</span><br><span class="line">use ArrayObject;</span><br><span class="line"></span><br><span class="line">// importing a function (PHP 5.6+)</span><br><span class="line">use function My\Full\functionName;</span><br><span class="line"></span><br><span class="line">// aliasing a function (PHP 5.6+)</span><br><span class="line">use function My\Full\functionName as func;</span><br><span class="line"></span><br><span class="line">// importing a constant (PHP 5.6+)</span><br><span class="line">use const My\Full\CONSTANT;</span><br><span class="line"></span><br><span class="line">$obj = new namespace\Another; // 实例化 foo\Another 对象</span><br><span class="line">$obj = new Another; // 实例化 My\Full\Classname　对象</span><br><span class="line">NSname\subns\func(); // 调用函数 My\Full\NSname\subns\func</span><br><span class="line">$a = new ArrayObject(array(1)); // 实例化 ArrayObject 对象</span><br><span class="line">// 如果不使用 &quot;use \ArrayObject&quot; ，则实例化一个 foo\ArrayObject 对象</span><br><span class="line">func(); // calls function My\Full\functionName</span><br><span class="line">echo CONSTANT; // echoes the value of My\Full\CONSTANT</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p>
<p>通过use操作符导入/使用别名，一行中包含多个use语句<br><code>use My\Full\Classname as Another, My\Full\NSname;</code></p>
<h2 id="名称解析示例"><a href="#名称解析示例" class="headerlink" title="名称解析示例"></a>名称解析示例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace A;</span><br><span class="line">use B\D, C\E as F;</span><br><span class="line">// 函数调用</span><br><span class="line">foo();      // 首先尝试调用定义在命名空间&quot;A&quot;中的函数foo()</span><br><span class="line">            // 再尝试调用全局函数 &quot;foo&quot;</span><br><span class="line">\foo();     // 调用全局空间函数 &quot;foo&quot; </span><br><span class="line">my\foo();   // 调用定义在命名空间&quot;A\my&quot;中函数 &quot;foo&quot; </span><br><span class="line">F();        // 首先尝试调用定义在命名空间&quot;A&quot;中的函数 &quot;F&quot; </span><br><span class="line">            // 再尝试调用全局函数 &quot;F&quot;</span><br><span class="line">// 类引用</span><br><span class="line">new B();    // 创建命名空间 &quot;A&quot; 中定义的类 &quot;B&quot; 的一个对象</span><br><span class="line">            // 如果未找到，则尝试自动装载类 &quot;A\B&quot;</span><br><span class="line">new D();    // 使用导入规则，创建命名空间 &quot;B&quot; 中定义的类 &quot;D&quot; 的一个对象</span><br><span class="line">            // 如果未找到，则尝试自动装载类 &quot;B\D&quot;</span><br><span class="line">new F();    // 使用导入规则，创建命名空间 &quot;C&quot; 中定义的类 &quot;E&quot; 的一个对象</span><br><span class="line">            // 如果未找到，则尝试自动装载类 &quot;C\E&quot;</span><br><span class="line">new \B();   // 创建定义在全局空间中的类 &quot;B&quot; 的一个对象</span><br><span class="line">            // 如果未发现，则尝试自动装载类 &quot;B&quot;</span><br><span class="line">new \D();   // 创建定义在全局空间中的类 &quot;D&quot; 的一个对象</span><br><span class="line">            // 如果未发现，则尝试自动装载类 &quot;D&quot;</span><br><span class="line">new \F();   // 创建定义在全局空间中的类 &quot;F&quot; 的一个对象</span><br><span class="line">            // 如果未发现，则尝试自动装载类 &quot;F&quot;</span><br><span class="line">// 调用另一个命名空间中的静态方法或命名空间函数</span><br><span class="line">B\foo();    // 调用命名空间 &quot;A\B&quot; 中函数 &quot;foo&quot;</span><br><span class="line">B::foo();   // 调用命名空间 &quot;A&quot; 中定义的类 &quot;B&quot; 的 &quot;foo&quot; 方法</span><br><span class="line">            // 如果未找到类 &quot;A\B&quot; ，则尝试自动装载类 &quot;A\B&quot;</span><br><span class="line">D::foo();   // 使用导入规则，调用命名空间 &quot;B&quot; 中定义的类 &quot;D&quot; 的 &quot;foo&quot; 方法</span><br><span class="line">            // 如果类 &quot;B\D&quot; 未找到，则尝试自动装载类 &quot;B\D&quot;</span><br><span class="line">\B\foo();   // 调用命名空间 &quot;B&quot; 中的函数 &quot;foo&quot; </span><br><span class="line">\B::foo();  // 调用全局空间中的类 &quot;B&quot; 的 &quot;foo&quot; 方法</span><br><span class="line">            // 如果类 &quot;B&quot; 未找到，则尝试自动装载类 &quot;B&quot;</span><br><span class="line">// 当前命名空间中的静态方法或函数</span><br><span class="line">A\B::foo();   // 调用命名空间 &quot;A\A&quot; 中定义的类 &quot;B&quot; 的 &quot;foo&quot; 方法</span><br><span class="line">              // 如果类 &quot;A\A\B&quot; 未找到，则尝试自动装载类 &quot;A\A\B&quot;</span><br><span class="line">\A\B::foo();  // 调用命名空间 &quot;A\B&quot; 中定义的类 &quot;B&quot; 的 &quot;foo&quot; 方法</span><br><span class="line">              // 如果类 &quot;A\B&quot; 未找到，则尝试自动装载类 &quot;A\B&quot;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>命名空间</tag>
      </tags>
  </entry>
  <entry>
    <title>反射 | PDO</title>
    <url>/2015/20151018-1.html</url>
    <content><![CDATA[<h1 id="反射、PDO"><a href="#反射、PDO" class="headerlink" title="反射、PDO"></a>反射、PDO</h1><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>反射是指获取类、方法、属性、参数、注释等封闭信息的方法。<br>主要用来了解类方法、等内部的代码，反射是通过一系列的类实现的。<br>反射：Reflection</p>
<blockquote>
<p>ReflectionClass 报告类中的信息<br>ReflectionFunction 报告函数的信息<br>RefectionException 报告异常类<br>RefectionMethod 报告方法中的信息</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;pre&gt;'</span>;</span><br><span class="line">ReflectionClass::export(<span class="string">'Exception'</span>);</span><br><span class="line"></span><br><span class="line">ReflectionClass::export(<span class="string">'stdClass'</span>); <span class="comment">//所有类的父类</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="通过反射获取类中的属性、方法、常量"><a href="#通过反射获取类中的属性、方法、常量" class="headerlink" title="通过反射获取类中的属性、方法、常量"></a>通过反射获取类中的属性、方法、常量</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Student&#123;</span><br><span class="line">	const PI=3.14;</span><br><span class="line">	private $name;</span><br><span class="line">	public static $national=&apos;中国&apos;：</span><br><span class="line">	public function show()&#123;</span><br><span class="line">		echo &apos;aa&apos;;</span><br><span class="line">	&#125;</span><br><span class="line">	public static function test()&#123;</span><br><span class="line">		echo &apos;bb&apos;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//通过反射获取类的信息</span><br><span class="line">//实例化反射对象</span><br><span class="line">$reflection new ReflectionClass(&apos;Student&apos;);//反射Student类的信息</span><br><span class="line">$consts = $reflection-&gt;getConstants();//获取所有常量</span><br><span class="line">$props = $reflection-&gt;getProperties();//获取所有属性</span><br><span class="line">$methods = $reflection-&gt;getMethods();//获取所有方法</span><br></pre></td></tr></table></figure>
<blockquote>
<p>自定义修改的类，方便修改</p>
</blockquote>
<h2 id="通过反射获取代理类的对象"><a href="#通过反射获取代理类的对象" class="headerlink" title="通过反射获取代理类的对象"></a>通过反射获取代理类的对象</h2><p>通过调用反射类的newInstance()对象，返回反射</p>
<p><code>$reflection = new ReflectionClass(&#39;Student&#39;);</code><br><code>$str $reflection-&gt;newInstance();</code>  //返回类的实例</p>
<h2 id="反射可以通过反向代理来调用方法"><a href="#反射可以通过反向代理来调用方法" class="headerlink" title="反射可以通过反向代理来调用方法"></a>反射可以通过<code>反向代理</code>来调用方法</h2><h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><p>在运行过程中，如果感知到代理服务器存在就是正向代理。（比如：从局域网进入到外网）</p>
<h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>在运行过程中，不能感受到代理服务器存在。（比如京东、淘宝，服务器的请求分发我们是不知道的）</p>
<ol>
<li>通过ReflectionMethod的invoke()反向调用</li>
<li>如果反向调用的是静态方法，invoke()参数为null<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> $name;</span><br><span class="line">	<span class="keyword">public</span>  __construct($name)&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;name,<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'i am a boy!&lt;br&gt;'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">$reflection = <span class="keyword">new</span> ReflectionClass(<span class="string">'Student'</span>);<span class="comment">//反射Student类的信息</span></span><br><span class="line">$stu = $reflection-&gt;new Instance(<span class="string">'tom'</span>);<span class="comment">//实例化Student对象，并传递参数</span></span><br><span class="line">$method = <span class="keyword">new</span> ReflectionMethod(<span class="string">'Student'</span>,<span class="string">'show'</span>);<span class="comment">//获取关于show()方法的信息</span></span><br><span class="line">$method-&gt;invoke($stu);<span class="comment">//方向代理调用</span></span><br><span class="line">$method = <span class="keyword">new</span> Reflection(<span class="string">'Student'</span>,<span class="string">'test'</span>);</span><br><span class="line">$method-&gt;invoke(<span class="keyword">NULL</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>反射是为了了解系统类或不知道内部结构的类而使用</p>
</blockquote>
<h1 id="PDO"><a href="#PDO" class="headerlink" title="PDO"></a>PDO</h1><h2 id="连接MySQL的方法"><a href="#连接MySQL的方法" class="headerlink" title="连接MySQL的方法"></a>连接MySQL的方法</h2><p>方法一：<code>mysql_*组</code> 开启<code>extension = php_mysql.dll</code>扩展<br><code>mysql_connect(&#39;localhost&#39;,&#39;root&#39;,&#39;aa&#39;);</code>  //链接<br>方法二：<code>mysqli_*组</code>开启<code>extension = php_mysqli.dll</code>扩展<br><code>$link = mysqli_connect(&#39;localhost&#39;,&#39;root&#39;,&#39;aa&#39;,&#39;data&#39;);</code></p>
<blockquote>
<p>mysqli是mysql的升级版</p>
</blockquote>
<h2 id="PDO简介"><a href="#PDO简介" class="headerlink" title="PDO简介"></a>PDO简介</h2><p>PDO（PHP data object） PHP数据对象,PDO也是PHP内置的一组类（有三个），在与PDO相关的三个类中提供了一组访问数据库的轻量级，一致性的接口，无论使用什么数据库，都可以通过一致性的接口。操作数据库。<br>PDO是PHP5以上才支持的特性<br>开启相应拓展<code>extension =  php_pdo_xxx.dll</code></p>
<h2 id="PDO的核心类：PDO、PDOStatement、PDOException"><a href="#PDO的核心类：PDO、PDOStatement、PDOException" class="headerlink" title="PDO的核心类：PDO、PDOStatement、PDOException"></a>PDO的核心类：PDO、PDOStatement、PDOException</h2><ol>
<li>PDO：表示PHP程序和数据库直接的一个连接</li>
<li>PDOStatement：表示一条SQL处理语句，在该语句执行完成时，会返回执行结果</li>
<li>PDOException：表示PDO产生的异常<h2 id="实例化PDO对象"><a href="#实例化PDO对象" class="headerlink" title="实例化PDO对象"></a>实例化PDO对象</h2><h3 id="dsn-data-source-name-数据源名称"><a href="#dsn-data-source-name-数据源名称" class="headerlink" title="(dsn data source name) 数据源名称"></a>(dsn data source name) 数据源名称</h3>dsn 的组成结构：<code>$dsn = 数据库类型:host=主机地址;port=端口号;dbname=数据库;charset=字符编码;</code><br>语法：<code>$pdo = new PDO($dsn,数据库用户名,数据库密码);</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$dsn = &apos;mysql:host=127.0.0.1;port=3306;dbname=php6;charset=utf8&apos;;</span><br><span class="line">$pdo = new PDO($dsn,&apos;root&apos;,&apos;aa&apos;);</span><br><span class="line">var_dump($pdo);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>本地主机可以省略，端口号是默认值时可以省略，dbname也是可以省略的，如果dbname省略，表示连接上服务器当时没有选择数据库。<br>但是数据库类型(<code>mysql:</code>)不可以省略<br><strong><em>数据库类型必须小写</em></strong></p>
</blockquote>
<h2 id="使用PDO对象"><a href="#使用PDO对象" class="headerlink" title="使用PDO对象"></a>使用PDO对象</h2><p>$pdo-&gt;exec();执行数据操作语句，执行成功返回受影响的记录数，否则返回false；<br>$pdo-&gt;query();//数据查询语句，返回PDOStatement对象</p>
<h3 id="操作数据"><a href="#操作数据" class="headerlink" title="操作数据"></a>操作数据</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$dsn = <span class="string">"mysql:host=127.0.0.1;port=3306;dbname=php06;charset=utf8"</span>;</span><br><span class="line">$pdo = <span class="keyword">new</span> PDO($dsn,<span class="string">'root'</span>,<span class="string">'aa'</span>);</span><br><span class="line">$sql = <span class="string">"insert into admin values(2,'aa','aa',0,0)"</span>;</span><br><span class="line">$rs = $pdo-&gt;exec($sql);</span><br><span class="line"><span class="keyword">if</span>($rs)</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'插入成功&lt;br&gt;生成的编号是：'</span>.$pdo-&gt;lastInsertId();</span><br><span class="line"><span class="keyword">elseif</span>($rs===<span class="number">0</span>)</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'没有数据变化'</span>;</span><br><span class="line"><span class="keyword">elseif</span>($rs===<span class="keyword">false</span>)&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'SQL语句执行失败'</span>;</span><br><span class="line">	$error = $pdo-&gt;errorInfo();</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'错误码：'</span>.$pdo-&gt;errorCode(),<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'错误信息：'</span>.$error[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$dsn = <span class="string">'mysqy:host=127.0.0.1;port=3306;dbname=php06;charset=utf8'</span>;</span><br><span class="line">$pdo = <span class="keyword">new</span> PDO($dsn,<span class="string">'root'</span>,<span class="string">'aa'</span>);</span><br><span class="line">$sql = <span class="string">"select * from admin"</span>;</span><br><span class="line">$stmt = $pdo-&gt;query($sql);<span class="comment">//返回PDOStatement对象</span></span><br><span class="line"><span class="comment">//数据输出,array();</span></span><br><span class="line">$rows = $stmt-&gt;fetch();</span><br><span class="line">$rows = $stmt-&gt;fetch(PDO::FETCH_BOTH);<span class="comment">//同上</span></span><br><span class="line">$rows = $stmt-&gt;fetch(PDO::FETCH_ASSOC);<span class="comment">//匹配成关联数组</span></span><br><span class="line">$rows = $stmt-&gt;fetch(PDO::FETCH_NUM);<span class="comment">//匹配成索引数组</span></span><br><span class="line">$rows = $stmt-&gt;fetch(PDO::FETCH_OBJ);<span class="comment">//匹配成对象</span></span><br><span class="line"><span class="comment">/*************************************/</span></span><br><span class="line">$rs = $stmt-&gt;fetchALL();<span class="comment">//匹配所有数据</span></span><br><span class="line">$rs = $stmt-&gt;fetchALL(PDO::FETCH_ASSOC);<span class="comment">//匹配所有数据为关联数组</span></span><br><span class="line"><span class="comment">/*************************************/</span></span><br><span class="line"><span class="keyword">echo</span> $stmt-&gt;rowCount(),<span class="string">'&lt;br&gt;'</span>;<span class="comment">//获取总行数</span></span><br><span class="line"><span class="keyword">echo</span> $stmt-&gt;columnCount(),<span class="string">'&lt;br&gt;'</span>;<span class="comment">//获取总列数</span></span><br><span class="line"><span class="comment">/*************************************/</span></span><br><span class="line"><span class="comment">//获取一条数据，匹配成类的对象</span></span><br><span class="line">$obj = $stmt-&gt;fetchObject();</span><br><span class="line">var_dump($obj);<span class="comment">//PHP顶级父类stdClass类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;&#125;</span><br><span class="line">$obj = $stmt-&gt;fetchObject(<span class="string">'Person'</span>);</span><br><span class="line"><span class="comment">/*************************************/</span></span><br><span class="line">$col = $stmt-&gt;fetchColumn();<span class="comment">//匹配某一行的第0列</span></span><br><span class="line">$col = $stmt-&gt;fetchCOlumn(<span class="number">1</span>);<span class="comment">//匹配某一行的第1列</span></span><br><span class="line"><span class="comment">/*************************************/</span></span><br><span class="line"><span class="comment">//将列绑定到变量上，绑定列的时候，列的编号是从1开始</span></span><br><span class="line">$stmt-&gt;bindColumn(<span class="number">1</span>,$id);<span class="comment">//将第一列绑定到$id变量上</span></span><br><span class="line">$stmt-&gt;bindColumn(<span class="number">2</span>,$admin);<span class="comment">//bindColumn('admin',$admin);将admin列绑定到$admin变量上</span></span><br><span class="line">$stmt-&gt;fetch();</span><br><span class="line"><span class="keyword">echo</span> $id,<span class="string">'-'</span>,$admin;</span><br><span class="line">$stmt-&gt;fetch();</span><br><span class="line"><span class="keyword">echo</span> $id,<span class="string">'-'</span>,$admin;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>以上测试，均为单行或单模块测试。其它位注释状态</p>
</blockquote>
<p>脚下留心</p>
<blockquote>
<p>可以通过列的索引和列的名称来绑定到变量上<br>绑定列和变量的时候，列的索引从1开始</p>
</blockquote>
<h3 id="取出全部数据"><a href="#取出全部数据" class="headerlink" title="取出全部数据"></a>取出全部数据</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//通过循环获取所以数据</span></span><br><span class="line"><span class="keyword">while</span>($rows = $stmt-&gt;fetch(PDO::FETCH_ASSOC))&#123;</span><br><span class="line">	<span class="keyword">echo</span> $rows[<span class="string">'id'</span>],<span class="string">'-'</span>,$rows[<span class="string">'admin'</span>],<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过内置迭代器遍历</span></span><br><span class="line"><span class="keyword">foreach</span>($stmt <span class="keyword">as</span> $rows)&#123;</span><br><span class="line">	<span class="keyword">echo</span> $rows[<span class="string">'id'</span>],<span class="string">'-'</span>,$rows[<span class="string">'admin'</span>],<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="PDO事物处理"><a href="#PDO事物处理" class="headerlink" title="PDO事物处理"></a>PDO事物处理</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$pdo-&gt;beginTransaction();<span class="comment">//开启事务模式</span></span><br><span class="line"><span class="keyword">echo</span> $pdo-&gt;exec(<span class="string">"insert into admin values(null,'11','11',0,0)"</span>);</span><br><span class="line"><span class="keyword">echo</span> $pdo-&gt;lastInsertId();</span><br><span class="line">$pdo-&gt;rollBack(); <span class="comment">//回滚事务</span></span><br><span class="line">$pdo-&gt;commit();<span class="comment">//提交事务</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="预处理语句"><a href="#预处理语句" class="headerlink" title="预处理语句"></a>预处理语句</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$sql = <span class="string">"insert into admin values(null,?,?,0,0)"</span>;<span class="comment">//?是占位符</span></span><br><span class="line">$stmt = $pdo-&gt;prepare($sql);<span class="comment">//返回PDOStatement对象</span></span><br><span class="line"><span class="comment">//执行预处理语句</span></span><br><span class="line">$stu = <span class="keyword">array</span>(</span><br><span class="line">	<span class="keyword">array</span>(<span class="string">'aa'</span>,<span class="string">'aa'</span>),</span><br><span class="line">	<span class="keyword">array</span>(<span class="string">'bb'</span>,<span class="string">'bb'</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">/**********************************/</span></span><br><span class="line"><span class="comment">//绑定参数并执行（方法一）</span></span><br><span class="line"><span class="keyword">foreach</span>($stu <span class="keyword">as</span> $s)&#123;</span><br><span class="line">	$stmt-&gt;bindValue(<span class="number">1</span>,$s[<span class="number">0</span>]);</span><br><span class="line">	$stmt-&gt;bindValue(<span class="number">2</span>,$s[<span class="number">1</span>]);</span><br><span class="line">	$stmt-&gt;execute();<span class="comment">//返回bool值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**********************************/</span></span><br><span class="line"><span class="comment">//绑定参数并执行（方法二）</span></span><br><span class="line"><span class="keyword">foreach</span>($stu <span class="keyword">as</span> $s)&#123;</span><br><span class="line">	$stmt-&gt;bindParam(<span class="number">1</span>,$s[<span class="number">0</span>]);</span><br><span class="line">	$stmt-&gt;bindParam(<span class="number">2</span>,$s[<span class="number">1</span>]);</span><br><span class="line">	$stmt-&gt;execute();<span class="comment">//返回bool值</span></span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**********************************/</span></span><br><span class="line"><span class="comment">//绑定参数并执行（方法三）</span></span><br><span class="line"><span class="keyword">foreach</span>($stu <span class="keyword">as</span> $s)&#123;</span><br><span class="line">	$stmt-&gt;execute($s);<span class="comment">//返回bool值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>词法分析—&gt;语法分析-&gt;编译-&gt;执行<br>如果一个sql语句要被多次执行，词法分析、语法分析、编译会多次执行，这样效率低下。<br>使用预处理语句，对预处理语句编译后传递不同的参数即可。</p>
</blockquote>
<p>bindParam 与 bindValue 的区别</p>
<blockquote>
<p>bindParam第二个参数是取地址，所以只能传递变量<br>bindValue第二个参数可以传递值也可以传递变量</p>
</blockquote>
<p>直接给预处理传递数组的时候要注意</p>
<blockquote>
<p>数组中值的个数和顺序要和占位符的顺序一致</p>
</blockquote>
<h3 id="参数占位符"><a href="#参数占位符" class="headerlink" title="参数占位符"></a>参数占位符</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$sql = <span class="string">"insert into admin values(null,:p1,:p2,0,0)"</span>;<span class="comment">//参数占位符</span></span><br><span class="line">$stmt-&gt;$pdo-&gt;prepare($sql)<span class="comment">//预处理语句</span></span><br><span class="line"><span class="comment">//执行预处理语句</span></span><br><span class="line">$stu = <span class="keyword">array</span>(</span><br><span class="line">	<span class="keyword">array</span>(<span class="string">'aa'</span>,<span class="string">'aa'</span>),</span><br><span class="line">	<span class="keyword">array</span>(<span class="string">'bb'</span>,<span class="string">'bb'</span>)<span class="number">8</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">foreach</span>($stu <span class="keyword">as</span> $s)&#123;</span><br><span class="line">	$stmt-&gt;bindParam(<span class="string">':p1'</span>,$s[<span class="number">0</span>]);</span><br><span class="line">	$stmt-&gt;bindParam(<span class="string">':p2'</span>,$s[<span class="number">1</span>]);</span><br><span class="line">	$stmt-&gt;execute();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="PDO-属性"><a href="#PDO-属性" class="headerlink" title="PDO 属性"></a>PDO 属性</h3><p><code>$pdo-&gt;setAttribute(键,值)；//设置PDO属性</code><br><code>$pdo-&gt;getAttribute(键,值)；//获取PDO属性</code><br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$dsn = <span class="string">'mysql:dbname=php6'</span>;</span><br><span class="line">$pdo = <span class="keyword">new</span> PDO($dsn,<span class="string">'root'</span>,<span class="string">'aa'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $pdo-&gt;getAttribute(PDO::ATTR_AUTOCOMMIT);<span class="comment">//自动提交 </span></span><br><span class="line">$pdo-&gt;setAttribute(PDO::ATTR_CASE,PDO::CASE::UPPER);<span class="comment">//强制将列明转换为大写</span></span><br><span class="line">$pdo-&gt;setAttribute(PDO::ATTR_ERRORMODE,PDO::ERRMODE_WARNING);<span class="comment">//错误报告为警告模式</span></span><br><span class="line"></span><br><span class="line">$stmt = $pdo-&gt;query(<span class="string">'select * from admin'</span>);</span><br><span class="line">$rows = $stmt-&gt;fetch(PDO::FETCH_ASSOC);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;pre&gt;'</span>;</span><br><span class="line">var_dump($rows);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="PDO异常抛出"><a href="#PDO异常抛出" class="headerlink" title="PDO异常抛出"></a>PDO异常抛出</h3><p>PDO 会自动抛出异常<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">	$dsn = <span class="string">'mysql:dbname=php6'</span>;</span><br><span class="line">	$pdo = <span class="keyword">new</span> PDO($dsn,<span class="string">'root'</span>,<span class="string">'aa'</span>);<span class="comment">//PDO会自动抛出异常</span></span><br><span class="line">	$pdo -&gt; setAttribute(PDO::ATTR_ERRMODE,PDO::ERRMODE_EXCEPTION);<span class="comment">//有错误就抛出异常</span></span><br><span class="line">	$stmt = $pdo-&gt;query(<span class="string">'select * from admin'</span>);</span><br><span class="line">	var_dump($Stmt-fetch());</span><br><span class="line">	$age =<span class="number">60</span>;</span><br><span class="line">	<span class="keyword">if</span>($age&gt;<span class="number">30</span>)</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> PDOException(<span class="string">'年龄不能超过30'</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(PDOException $e)&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'错误信息：'</span>.$e-&gt;getmessage(),<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'错误行号：'</span>.$e-&gt;getLine(),<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="单例模式实现MyPDO类的封装"><a href="#单例模式实现MyPDO类的封装" class="headerlink" title="单例模式实现MyPDO类的封装"></a>单例模式实现MyPDO类的封装</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPDO</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $type;<span class="comment">//数据库类型</span></span><br><span class="line">    <span class="keyword">private</span> $host;<span class="comment">//主机地址</span></span><br><span class="line">    <span class="keyword">private</span> $port;<span class="comment">//端口号</span></span><br><span class="line">    <span class="keyword">private</span> $dbname;<span class="comment">//数据库名</span></span><br><span class="line">    <span class="keyword">private</span> $charset;<span class="comment">//字符编码</span></span><br><span class="line">    <span class="keyword">private</span> $user;<span class="comment">//数据库用户名</span></span><br><span class="line">    <span class="keyword">private</span> $pwd;<span class="comment">//数据库密码</span></span><br><span class="line">    <span class="keyword">private</span> $pdo;<span class="comment">//PDO对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> $instance;<span class="comment">//当前类的实例</span></span><br><span class="line">    <span class="comment">//使用的构造函数用来阻止在类的外部实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($param)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;initParam($param);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;initPDO();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//私有的__clone()用来阻止在类的外部克隆对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//公有的静态方法用来获取当前类的实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span><span class="params">($param=array<span class="params">()</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">self</span>::$instance <span class="keyword">instanceof</span> <span class="keyword">self</span>)</span><br><span class="line">            <span class="keyword">self</span>::$instance = <span class="keyword">new</span> <span class="keyword">self</span>($param);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>::$instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">initParam</span><span class="params">($param)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;type = <span class="keyword">isset</span>($param[<span class="string">'type'</span>])?$param[<span class="string">'type'</span>]:<span class="string">'mysql'</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;host = <span class="keyword">isset</span>($param[<span class="string">'host'</span>])?$param[<span class="string">'host'</span>]:<span class="string">'localhost'</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;port = <span class="keyword">isset</span>($param[<span class="string">'port'</span>])?$param[<span class="string">'port'</span>]:<span class="string">'3306'</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;dbname = <span class="keyword">isset</span>($param[<span class="string">'dbname'</span>])?$param[<span class="string">'dbname'</span>]:<span class="string">'uiste'</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;charset = <span class="keyword">isset</span>($param[<span class="string">'charset'</span>])?$param[<span class="string">'charset'</span>]:<span class="string">'utf8'</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;user = <span class="keyword">isset</span>($param[<span class="string">'user'</span>])?$param[<span class="string">'user'</span>]:<span class="string">'root'</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;pwd = <span class="keyword">isset</span>($param[<span class="string">'pwd'</span>])?$param[<span class="string">'pwd'</span>]:<span class="string">'123456'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建PDO对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">initPDO</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $dsn = <span class="string">"&#123;$this-&gt;type&#125;:host=&#123;$this-&gt;host&#125;;port=&#123;$this-&gt;port&#125;;dbname=&#123;$this-&gt;dbname&#125;;charset=&#123;$this-&gt;charset&#125;"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;pdo = <span class="keyword">new</span> PDO($dsn,<span class="keyword">$this</span>-&gt;user,<span class="keyword">$this</span>-&gt;pwd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//执行sql语句,返回PDOStatement对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">getPDOStatement</span><span class="params">($sql)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;pdo-&gt;query($sql);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断匹配的类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">getFetchType</span><span class="params">($type)</span></span>&#123;</span><br><span class="line">        $allow_type = <span class="keyword">array</span>(<span class="string">'assoc'</span>,<span class="string">'num'</span>,<span class="string">'both'</span>);</span><br><span class="line">        <span class="keyword">if</span>(!in_array($type,$allow_type))</span><br><span class="line">            $type=<span class="string">'assoc'</span>;</span><br><span class="line">        <span class="keyword">switch</span>($type)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'assoc'</span>:</span><br><span class="line">                <span class="keyword">return</span> PDO::FETCH_ASSOC;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'num'</span>:</span><br><span class="line">                <span class="keyword">return</span> PDO::FETCH_NUM;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'both'</span>:</span><br><span class="line">                <span class="keyword">return</span> PDO::FETCH_BOTH;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取所有记录，返回二位数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAll</span><span class="params">($sql,$type=<span class="string">'assoc'</span>)</span></span>&#123;</span><br><span class="line">        $stmt = <span class="keyword">$this</span>-&gt;getPDOStatement($sql);</span><br><span class="line">        $fetch_type = <span class="keyword">$this</span>-&gt;getFetchType($type);</span><br><span class="line">        <span class="keyword">return</span> $stmt-&gt;fetchAll($fetch_type);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getOne</span><span class="params">($sql,$type=<span class="string">'assoc'</span>)</span></span>&#123;</span><br><span class="line">        $stmt = <span class="keyword">$this</span>-&gt;getPDOStatement($sql);</span><br><span class="line">        $fetch_type = <span class="keyword">$this</span>-&gt;getFetchType($type);</span><br><span class="line">        <span class="keyword">return</span> $stmt-&gt;fetchAll($fetch_type);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getColumn</span><span class="params">($sql)</span></span>&#123;</span><br><span class="line">        $stmt = <span class="keyword">$this</span>-&gt;getPDOStatement($sql);</span><br><span class="line">        <span class="keyword">return</span> $stmt-&gt;fetColumn();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//数据库增、删、改,返回受影响的行数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">exec</span><span class="params">($sql)</span></span>&#123;</span><br><span class="line">        $result = <span class="keyword">$this</span>-&gt;pdo-&gt;exec($sql);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">false</span>!==$result)</span><br><span class="line">            <span class="keyword">return</span> $result;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        	$errorinfo_arr = <span class="keyword">$this</span>-&gt;pdo-&gt;errorInfo();</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'SQL 语句执行失败&lt;br&gt;'</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'Error SQL：'</span>.$sql.<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'SQLSTATE error code：'</span>.$errorinfo_arr[<span class="number">0</span>].<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'Driver-specific error code：'</span>.$errorinfo_arr[<span class="number">1</span>].<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'Driver-specific error message：'</span>.$errorinfo_arr[<span class="number">2</span>].<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<ol>
<li>PDO的作用<br>PHP数据对象，内置的一组类（有三个），在与PDO相关的三个类中提供了一组访问数据库的轻量级，一致性的接口，无论使用什么数据库，都可以通过一致性的接口，操作数据库。</li>
<li>PDO的加载<br>PDO是PHP5以上才支持的特性<br>需要开启相应拓展<code>extension =  php_pdo_xxx.dll</code></li>
<li>PDO技术中的PDO对象<br>dsn 的组成结构：<code>$dsn = 数据库类型:host=主机地址;port=端口号;dbname=数据库;charset=字符编码;</code><br>语法：<code>$pdo = new PDO($dsn,数据库用户名,数据库密码);</code></li>
<li>PDO技术中的PDOStatement对象<br>代表一条预处理语句，并在该语句被执行后代表一个相关的结果集。<br><code>PDOStatement::bindColumn</code> — 绑定一列到一个 PHP 变量<br><code>PDOStatement::bindParam</code> — 绑定一个参数到指定的变量名<br><code>PDOStatement::bindValue</code> — 把一个值绑定到一个参数<br><code>PDOStatement::closeCursor</code> — 关闭游标，使语句能再次被执行。<br><code>PDOStatement::columnCount</code> — 返回结果集中的列数<br><code>PDOStatement::debugDumpParams</code> — 打印一条 SQL 预处理命令<br><code>PDOStatement::errorCode</code> — 获取跟上一次语句句柄操作相关的 SQLSTATE<br><code>PDOStatement::errorInfo</code> — 获取跟上一次语句句柄操作相关的扩展错误信息<br><code>PDOStatement::execute</code> — 执行一条预处理语句<br><code>PDOStatement::fetch</code> — 从结果集中获取下一行<br><code>PDOStatement::fetchAll</code> — 返回一个包含结果集中所有行的数组<br><code>PDOStatement::fetchColumn</code> — 从结果集中的下一行返回单独的一列。<br><code>PDOStatement::fetchObject</code> — 获取下一行并作为一个对象返回。<br><code>PDOStatement::getAttribute</code> — 检索一个语句属性<br><code>PDOStatement::getColumnMeta</code> — 返回结果集中一列的元数据<br><code>PDOStatement::nextRowset</code> — 在一个多行集语句句柄中推进到下一个行集<br><code>PDOStatement::rowCount</code> — 返回受上一个 SQL 语句影响的行数<br><code>PDOStatement::setAttribute</code> — 设置一个语句属性<br><code>PDOStatement::setFetchMode</code> — 为语句设置默认的获取模式。</li>
<li>PDO技术中的PDOException对象<br>代表一个由 PDO 产生的错误。在自己的代码不应抛出一个 PDOException 异常</li>
<li>PDO的操作——插入操作<br>$pdo-&gt;exec();   //执行数据操作语句，执行成功返回受影响的记录数，否则返回false。</li>
<li>掌握PDO的操作——写操作<br>？？？</li>
<li>掌握PDO的操作——查询操作<br>$pdo-&gt;query();  //数据查询语句，返回PDOStatement对象</li>
<li>掌握PDO的事务操作<br>$pdo-&gt;beginTransaction(); //开启事务<br>$pdo-&gt;rollBack(); //回滚事务<br>$pdo-&gt;commit();//提交事务</li>
<li>掌握PDO的预处理</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$dsn=<span class="string">'mysql:host=localhost;port=3306;dbname=php6;charset=utf8'</span>;</span><br><span class="line">$pdo=<span class="keyword">new</span> PDO($dsn,<span class="string">'root'</span>,<span class="string">'aa'</span>);</span><br><span class="line"><span class="comment">//预处理语句</span></span><br><span class="line">$sql=<span class="string">"insert into admin values (null,?,?,0,0)"</span>; <span class="comment">//?是占位符</span></span><br><span class="line">$stmt=$pdo-&gt;prepare($sql);  <span class="comment">//返回PDOStatement对象</span></span><br><span class="line"><span class="comment">//执行预处理语句</span></span><br><span class="line">$stu=<span class="keyword">array</span>(</span><br><span class="line">    <span class="keyword">array</span>(<span class="string">'aa'</span>,<span class="string">'aa'</span>),</span><br><span class="line">    <span class="keyword">array</span>(<span class="string">'bb'</span>,<span class="string">'bb'</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">//绑定参数并执行（方法一）</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">foreach($stu as $s)&#123;</span></span><br><span class="line"><span class="comment">    $stmt-&gt;bindValue(1, $s[0]);</span></span><br><span class="line"><span class="comment">    $stmt-&gt;bindValue(2, $s[1]);</span></span><br><span class="line"><span class="comment">    $stmt-&gt;execute();   //返回bool值</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//绑定参数并执行（方法二）</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">foreach($stu as $s)&#123;</span></span><br><span class="line"><span class="comment">    $stmt-&gt;bindParam(1, $s[0]);</span></span><br><span class="line"><span class="comment">    $stmt-&gt;bindParam(2, $s[1]);</span></span><br><span class="line"><span class="comment">    $stmt-&gt;execute();   //返回bool值</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//绑定参数并执行（方法三）,直接传递数组</span></span><br><span class="line"><span class="keyword">foreach</span>($stu <span class="keyword">as</span> $s)&#123;</span><br><span class="line">    $stmt-&gt;execute($s);   <span class="comment">//返回bool值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$sql=<span class="string">"insert into admin values (null,:p1,:p2,0,0)"</span>; <span class="comment">//参数占位符</span></span><br><span class="line"><span class="keyword">foreach</span> ($stu <span class="keyword">as</span> $s)&#123;</span><br><span class="line">    $stmt-&gt;bindParam(<span class="string">':p1'</span>, $s[<span class="number">0</span>]); <span class="comment">//绑定参数</span></span><br><span class="line">    $stmt-&gt;bindParam(<span class="string">':p2'</span>, $s[<span class="number">1</span>]);</span><br><span class="line">    $stmt-&gt;execute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="11">
<li>PDO的属性操作<br>$pdo-&gt;getAttribute(键)：获取PDO属性<br>$pdo-&gt;getAttribute(键)：获取PDO属性</li>
<li>PDO的异常处理机制<br>PDO会自动抛出异常，其他的地方不能自动抛出<br>$pdo-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);设置为自动抛出异常</li>
</ol>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>反射：获取类中方法、属性、参数、注释等封闭信息的方法<br>发射的父类（reflection）<br>ReflectionClass:export()：反射出类的内部结构<br>getMethods()：获取所有方法、getProterties()：获取所有属性<br>getConstants()：获取常量<br>通过反射类可以创建代理类的对象  newInstance()<br>发射通过反向代理调用对象的方法<br>PDO（PHP data object）提供了一组一致性的接口，用来访问不同的数据库。<br>要使用pdo之前必须开启pdo扩展<br>PDO核心类<br>PDO：表示PHP和数据库的链接对象<br>PDOStatement类，PDO执行sql语句返回的结果<br>PDOException：PDO异常<br>实例化PDO:<br>$dsn=’mysql:host=主机;port=端口号;dbname=数据库名;charset=字符编码’<br>PDO($dsn,用户名,密码)<br>脚下留心：数据类型要小写<br>使用PDO<br>$pdo-&gt;exec()：执行数据操作语句，返回的受影响的记录数或false<br>$pdo-&gt;query()：执行数据查询语句，返回的是PDOStatement对象<br>$pdo-&gt;lastInsertId()：获取生成的id编号<br>获取PDOStatement对象中的数据<br>$pdo-&gt;fetch()：获取一条数据<br>$pdo-&gt;fetchAll()：获取所有数据<br>$pdo-&gt;fetchColumn()：获取列<br>$pdo-&gt;fetchObject()：获取一行数据，并匹配成对象<br>$pdo-&gt;rowCount()：总行数<br>$pdo-&gt;columnCount()：总列数<br>$pdo-&gt;bindColumn()：将列绑定到变量上<br>匹配的类型：<br>PDO::FETCH_BOTH<br>PDO::FETCH_ASSOC<br>PDO::FETCH_NUM<br>PDO事务<br>$pdo-&gt;beginTransaction()<br>$pdo-&gt;rollback()<br>$pdo-&gt;commit()<br>预处理<br>$pdo-&gt;prepare()<br>位置占位符（？）<br>参数占位符（:参数名）<br>绑定参数<br>bindValue()<br>bindParam()<br>操作数据<br>$pdo-&gt;getAttribute()<br>$pdo-&gt;setAttribute()<br>异常处理<br>默认情况下，如果有错误就报错，不会抛出异常，设置如下语句使得自动抛出异常：$pdo-&gt;setAttribute(PDO::ERRMODE,PDO::ERRMODE_EXCEPTION)</p>
]]></content>
      <tags>
        <tag>反射</tag>
        <tag>PDO</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库设计-商城购物系统</title>
    <url>/2015/20151017-3.html</url>
    <content><![CDATA[<h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Navicat Premium Data Transfer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Source Server         : uiste</span></span><br><span class="line"><span class="comment"> Source Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Source Server Version : 50542</span></span><br><span class="line"><span class="comment"> Source Host           : localhost</span></span><br><span class="line"><span class="comment"> Source Database       : ugo</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Target Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Target Server Version : 50542</span></span><br><span class="line"><span class="comment"> File Encoding         : utf-8</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Date: 10/16/2015 14:27:21 PM</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建数据库</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> ugo <span class="keyword">charset</span> utf8;</span><br><span class="line"><span class="comment">#选择数据库</span></span><br><span class="line"><span class="keyword">use</span> ugou;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*------------------------------------商品模块---------------------------------------*/</span></span><br><span class="line"><span class="comment">#创建商品类别表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`ugo_category`</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> ugo_category(</span><br><span class="line">	cat_id <span class="built_in">smallint</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment primary <span class="keyword">key</span> <span class="keyword">comment</span> <span class="string">'商品类别ID'</span>,</span><br><span class="line">	cat_name <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'商品类别名称'</span>,</span><br><span class="line">	cat_parent_id <span class="built_in">smallint</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'商品类别父ID'</span>,</span><br><span class="line">	cat_desc <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'商品类别描述'</span>,</span><br><span class="line">	sort_order <span class="built_in">tinyint</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">50</span> <span class="keyword">comment</span> <span class="string">'排序依据'</span>,</span><br><span class="line">	unit <span class="built_in">varchar</span>(<span class="number">15</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'单位'</span>,</span><br><span class="line">	is_show <span class="built_in">tinyint</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">1</span> <span class="keyword">comment</span> <span class="string">'是否显示，默认显示'</span>,</span><br><span class="line">	<span class="keyword">index</span> pid(cat_parent_id)</span><br><span class="line">)<span class="keyword">engine</span>=MyISAM <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建商品国家表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`ugo_country`</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> ugo_country(</span><br><span class="line">	country_id <span class="built_in">smallint</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment primary <span class="keyword">key</span> <span class="keyword">comment</span> <span class="string">'国家ID'</span>,</span><br><span class="line">	country_name <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'国家名称'</span>,</span><br><span class="line">	country_parent_name enum(<span class="string">'亚洲'</span>,<span class="string">'欧洲'</span>,<span class="string">'北美洲'</span>,<span class="string">'南美洲'</span>,<span class="string">'非洲'</span>,<span class="string">'大洋洲'</span>,<span class="string">'南极洲'</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">'亚洲'</span> <span class="keyword">comment</span> <span class="string">'国家所属区域'</span>,</span><br><span class="line">	sort_order <span class="built_in">tinyint</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">50</span> <span class="keyword">comment</span> <span class="string">'排序依据'</span>,</span><br><span class="line">	is_show <span class="built_in">tinyint</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">1</span> <span class="keyword">comment</span> <span class="string">'是否显示，默认显示'</span>,</span><br><span class="line">	<span class="keyword">index</span> pid(country_parent_name)</span><br><span class="line">)<span class="keyword">engine</span>=MyISAM <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建商品品牌表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`ugo_brand`</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> ugo_brand(</span><br><span class="line">	brand_id <span class="built_in">smallint</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment primary <span class="keyword">key</span> <span class="keyword">comment</span> <span class="string">'商品品牌ID'</span>,</span><br><span class="line">	brand_name <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'商品品牌名称'</span>,</span><br><span class="line">	brand_desc <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'商品品牌描述'</span>,</span><br><span class="line">	<span class="keyword">url</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'商品品牌网址'</span>,</span><br><span class="line">	logo <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'品牌logo'</span>,</span><br><span class="line">	sort_order <span class="built_in">tinyint</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">50</span> <span class="keyword">comment</span> <span class="string">'商品品牌排序依据'</span>,</span><br><span class="line">	is_show <span class="built_in">tinyint</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">1</span> <span class="keyword">comment</span> <span class="string">'是否显示，默认显示'</span>,</span><br><span class="line">	country_id <span class="built_in">smallint</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'商品品牌所属国家ID'</span></span><br><span class="line">)<span class="keyword">engine</span>=MyISAM <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建商品类型表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`ugo_attrtype`</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> ugo_attrtype(</span><br><span class="line">	type_id <span class="built_in">smallint</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment primary <span class="keyword">key</span> <span class="keyword">comment</span> <span class="string">'商品类型ID'</span>,</span><br><span class="line">	type_name <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'商品类型名称'</span></span><br><span class="line">)<span class="keyword">engine</span>=MyISAM <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建商品属性表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`ugo_attribute`</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> ugo_attribute(</span><br><span class="line">	attr_id <span class="built_in">smallint</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment primary <span class="keyword">key</span> <span class="keyword">comment</span> <span class="string">'商品属性ID'</span>,</span><br><span class="line">	attr_name <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'商品属性名称'</span>,</span><br><span class="line">	type_id <span class="built_in">smallint</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'商品属性所属类型ID'</span>,</span><br><span class="line">	attr_input_type <span class="built_in">tinyint</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">1</span> <span class="keyword">comment</span> <span class="string">'属性录入方式 0为手工录入，1为从列表中选择，2为文本域'</span>,</span><br><span class="line">	attr_input_value <span class="built_in">text</span> <span class="keyword">comment</span> <span class="string">'属性的值'</span>,</span><br><span class="line">	<span class="keyword">index</span> type_id(type_id)</span><br><span class="line">)<span class="keyword">engine</span>=MyISAM <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建商品表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`ugo_goods`</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> ugo_goods(</span><br><span class="line">	goods_id <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment primary <span class="keyword">key</span> <span class="keyword">comment</span> <span class="string">'商品ID'</span>,</span><br><span class="line">	goods_sn <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'商品货号'</span>,</span><br><span class="line">	goods_name <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'商品名称'</span>,</span><br><span class="line">	goods_brief <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'商品简单描述'</span>,</span><br><span class="line">	goods_slogan <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'商品宣传语'</span>,</span><br><span class="line">	goods_desc <span class="built_in">text</span> <span class="keyword">comment</span> <span class="string">'商品详情'</span>,</span><br><span class="line">	cat_id <span class="built_in">smallint</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'商品所属类别ID'</span>,</span><br><span class="line">	brand_id <span class="built_in">smallint</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'商品所属品牌ID'</span>,</span><br><span class="line">	market_price <span class="built_in">decimal</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'市场价格'</span>,</span><br><span class="line">	promote_price <span class="built_in">decimal</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'促销价格'</span>,</span><br><span class="line">	promote_start_time <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'促销起始时间'</span>,</span><br><span class="line">	promote_end_time <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'促销截止时间'</span>,</span><br><span class="line">	goods_img <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'商品图片'</span>,</span><br><span class="line">	goods_thumb <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'商品缩略图'</span>,</span><br><span class="line">	goods_number <span class="built_in">smallint</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'商品库存'</span>,</span><br><span class="line">	click_count <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'点击次数'</span>,</span><br><span class="line">	type_id <span class="built_in">smallint</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'商品类型ID'</span>,</span><br><span class="line">	is_promote <span class="built_in">tinyint</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'是否促销，默认为0不促销'</span>,</span><br><span class="line">	is_best <span class="built_in">tinyint</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'是否精品,默认为0'</span>,</span><br><span class="line">	is_new <span class="built_in">tinyint</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'是否新品，默认为0'</span>,</span><br><span class="line">	is_hot <span class="built_in">tinyint</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'是否热卖,默认为0'</span>,</span><br><span class="line">	is_onsale <span class="built_in">tinyint</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">1</span> <span class="keyword">comment</span> <span class="string">'是否上架,默认为1'</span>,</span><br><span class="line">	add_time <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'添加时间'</span>,</span><br><span class="line">	<span class="keyword">index</span> cat_id(cat_id),</span><br><span class="line">	<span class="keyword">index</span> brand_id(brand_id),</span><br><span class="line">	<span class="keyword">index</span> type_id(type_id)</span><br><span class="line">)<span class="keyword">engine</span>=MyISAM <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建商品属性对应表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`ugo_goods_attr`</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> ugo_goods_attr(</span><br><span class="line">	goods_attr_id <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment primary <span class="keyword">key</span> <span class="keyword">comment</span> <span class="string">'编号ID'</span>,</span><br><span class="line">	goods_id <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'商品ID'</span>,</span><br><span class="line">	attr_id <span class="built_in">smallint</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'属性ID'</span>,</span><br><span class="line">	attr_value <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'属性值'</span>,</span><br><span class="line">	attr_price <span class="built_in">decimal</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'属性价格'</span>,</span><br><span class="line">	<span class="keyword">index</span> goods_id(goods_id),</span><br><span class="line">	<span class="keyword">index</span> attr_id(attr_id)</span><br><span class="line">)<span class="keyword">engine</span>=MyISAM <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建商品相册表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`ugo_gallery`</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> ugo_gallery(</span><br><span class="line">	img_id <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment primary <span class="keyword">key</span> <span class="keyword">comment</span> <span class="string">'图片编号'</span>,</span><br><span class="line">	goods_id <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'商品ID'</span>,</span><br><span class="line">	img_url <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'图片URL'</span>,</span><br><span class="line">	thumb_url <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'缩略图URL'</span>,</span><br><span class="line">	img_desc <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'图片描述'</span>,</span><br><span class="line">	<span class="keyword">index</span> goods_id(goods_id)</span><br><span class="line">)<span class="keyword">engine</span>=MyISAM <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*------------------------------------商品模块 end-----------------------------------*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*------------------------------------用户模块---------------------------------------*/</span></span><br><span class="line"><span class="comment">#创建用户表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`ugo_user`</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> ugo_user(</span><br><span class="line">	user_id <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment primary <span class="keyword">key</span> <span class="keyword">comment</span> <span class="string">'用户编号'</span>,</span><br><span class="line">	user_name <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'用户名'</span>,</span><br><span class="line">	tel <span class="built_in">char</span>(<span class="number">12</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'手机号码'</span>,</span><br><span class="line">	email <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'电子邮箱'</span>,</span><br><span class="line">	<span class="keyword">password</span> <span class="built_in">char</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'用户密码,md5加密'</span>,</span><br><span class="line">	reg_time <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'用户注册时间'</span></span><br><span class="line">)<span class="keyword">engine</span>=MyISAM <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建用户收货地址表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`ugo_address`</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> ugo_address(</span><br><span class="line">	address_id <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment primary <span class="keyword">key</span> <span class="keyword">comment</span> <span class="string">'地址编号'</span>,</span><br><span class="line">	user_id <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'地址所属用户ID'</span>,</span><br><span class="line">	consignee <span class="built_in">varchar</span>(<span class="number">60</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'收货人姓名'</span>,</span><br><span class="line">	province <span class="built_in">smallint</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'省份，保存是ID'</span>,</span><br><span class="line">	city <span class="built_in">smallint</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'市'</span>,</span><br><span class="line">	district <span class="built_in">smallint</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'区'</span>,</span><br><span class="line">	street <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'街道地址'</span>,</span><br><span class="line">	zipcode <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'邮政编码'</span>,</span><br><span class="line">	telephone <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'电话'</span>,</span><br><span class="line">	mobile <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'移动电话'</span>,</span><br><span class="line">	<span class="keyword">index</span> user_id(user_id)</span><br><span class="line">)<span class="keyword">engine</span>=MyISAM <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建地区表，包括省市区三级</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`ugo_region`</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> ugo_region(</span><br><span class="line">	region_id <span class="built_in">smallint</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment primary <span class="keyword">key</span> <span class="keyword">comment</span> <span class="string">'地区ID'</span>,</span><br><span class="line">	parent_id <span class="built_in">smallint</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'父ID'</span>,</span><br><span class="line">	region_name <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'地区名称'</span>,</span><br><span class="line">	region_type <span class="built_in">tinyint</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">1</span> <span class="keyword">comment</span> <span class="string">'地区类型 1 省份 2 市 3 区(县)'</span></span><br><span class="line">)<span class="keyword">engine</span>=MyISAM <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建购物车表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`ugo_cart`</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> ugo_cart(</span><br><span class="line">	cart_id <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment primary <span class="keyword">key</span> <span class="keyword">comment</span> <span class="string">'购物车ID'</span>,</span><br><span class="line">	user_id <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'用户ID'</span>,</span><br><span class="line">	goods_id <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'商品ID'</span>,</span><br><span class="line">	goods_name <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'商品名称'</span>,</span><br><span class="line">	goods_img <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'商品图片'</span>,</span><br><span class="line">	goods_attr <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'商品属性'</span>,</span><br><span class="line">	goods_number <span class="built_in">smallint</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">1</span> <span class="keyword">comment</span> <span class="string">'商品数量'</span>,</span><br><span class="line">	market_price <span class="built_in">decimal</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'市场价格'</span>,</span><br><span class="line">	goods_price <span class="built_in">decimal</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'成交价格'</span>,</span><br><span class="line">	subtotal <span class="built_in">decimal</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'小计'</span></span><br><span class="line">)<span class="keyword">engine</span>=MyISAM <span class="keyword">charset</span>=utf8;</span><br><span class="line"><span class="comment">/*------------------------------------用户模块 end-----------------------------------*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*------------------------------------订单模块---------------------------------------*/</span></span><br><span class="line"><span class="comment">#创建送货方式表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`ugo_shipping`</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> ugo_shipping(</span><br><span class="line">	shipping_id <span class="built_in">tinyint</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment primary <span class="keyword">key</span> <span class="keyword">comment</span> <span class="string">'编号'</span>,</span><br><span class="line">	shipping_name <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'送货方式名称'</span>,</span><br><span class="line">	shipping_desc <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'送货方式描述'</span>,</span><br><span class="line">	shipping_fee <span class="built_in">decimal</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'送货费用'</span>,</span><br><span class="line">	enabled <span class="built_in">tinyint</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">1</span> <span class="keyword">comment</span> <span class="string">'是否启用，默认启用'</span></span><br><span class="line">)<span class="keyword">engine</span>=MyISAM <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建支付方式表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`ugo_payment`</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> ugo_payment(</span><br><span class="line">	pay_id <span class="built_in">tinyint</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment primary <span class="keyword">key</span> <span class="keyword">comment</span> <span class="string">'支付方式ID'</span>,</span><br><span class="line">	pay_name <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'支付方式名称'</span>,</span><br><span class="line">	pay_desc <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'支付方式描述'</span>,</span><br><span class="line">	enabled <span class="built_in">tinyint</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">1</span> <span class="keyword">comment</span> <span class="string">'是否启用，默认启用'</span></span><br><span class="line">)<span class="keyword">engine</span>=MyISAM <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建订单表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`ugo_order`</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> ugo_order(</span><br><span class="line">	order_id <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment primary <span class="keyword">key</span> <span class="keyword">comment</span> <span class="string">'订单ID'</span>,</span><br><span class="line">	order_sn <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'订单号'</span>,</span><br><span class="line">	user_id <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'用户ID'</span>,</span><br><span class="line">	address_id <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'收货地址id'</span>,</span><br><span class="line">	order_status <span class="built_in">tinyint</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'订单状态 1 待付款 2 待发货 3 已发货 4 已完成'</span>,</span><br><span class="line">	postscripts <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'订单附言'</span>,</span><br><span class="line">	shipping_id <span class="built_in">tinyint</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'送货方式ID'</span>,</span><br><span class="line">	pay_id <span class="built_in">tinyint</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'支付方式ID'</span>,</span><br><span class="line">	goods_amount <span class="built_in">decimal</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'商品总金额'</span>,</span><br><span class="line">	order_amount <span class="built_in">decimal</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'订单总金额'</span>,</span><br><span class="line">	order_time <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'下单时间'</span>,</span><br><span class="line">	<span class="keyword">index</span> user_id(user_id),</span><br><span class="line">	<span class="keyword">index</span> address_id(address_id),</span><br><span class="line">	<span class="keyword">index</span> pay_id(pay_id),</span><br><span class="line">	<span class="keyword">index</span> shipping_id(shipping_id)</span><br><span class="line">)<span class="keyword">engine</span>=MyISAM <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建订单明细表,即商品订单关系表（多对多）</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`ugo_order_goods`</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> ugo_order_goods(</span><br><span class="line">	rec_id <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment primary <span class="keyword">key</span> <span class="keyword">comment</span> <span class="string">'编号'</span>,</span><br><span class="line">	order_id <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'订单ID'</span>,</span><br><span class="line">	goods_id <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'商品ID'</span>,</span><br><span class="line">	goods_name <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'商品名称'</span>,</span><br><span class="line">	goods_img <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'商品图片'</span>,</span><br><span class="line">	shop_price <span class="built_in">decimal</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'商品价格'</span>,</span><br><span class="line">	goods_price <span class="built_in">decimal</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'成交价格'</span>,</span><br><span class="line">	goods_number <span class="built_in">smallint</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">1</span> <span class="keyword">comment</span> <span class="string">'购买数量'</span>,</span><br><span class="line">	goods_attr <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'商品属性'</span>,</span><br><span class="line">	subtotal <span class="built_in">decimal</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'商品小计'</span></span><br><span class="line">)<span class="keyword">engine</span>=MyISAM <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*------------------------------------订单模块 end-----------------------------------*/</span></span><br><span class="line"><span class="comment">#创建后台管理员表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> ugo_admin;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ugo_admin(</span><br><span class="line">	admin_id <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span> auto_increment PRIMARY <span class="keyword">KEY</span> <span class="keyword">COMMENT</span> <span class="string">'管理员id'</span> ,</span><br><span class="line">	admin_name <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户名'</span> ,</span><br><span class="line">	admin_pwd <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span> ,</span><br><span class="line">	admin_role_id <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'角色编号'</span></span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">INNODB</span> <span class="keyword">charset</span> = utf8 <span class="keyword">COMMENT</span> <span class="string">'管理员表'</span>;</span><br><span class="line"><span class="comment"># 超级管理员测试数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_admin <span class="keyword">values</span> (<span class="literal">null</span>,<span class="string">'aa'</span>,<span class="string">'aa'</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建后台权限表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> ugo_authority;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ugo_authority(</span><br><span class="line">	auth_id <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> auto_increment PRIMARY <span class="keyword">KEY</span> <span class="keyword">COMMENT</span> <span class="string">'auth_id'</span> ,</span><br><span class="line">	auth_name <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'权限名称'</span> ,</span><br><span class="line">	auth_pid <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'权限父级id'</span> ,</span><br><span class="line">	auth_c <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'控制器名'</span> ,</span><br><span class="line">	auth_a <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'方法名'</span> ,</span><br><span class="line">	auth_path <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'全路径,格式:父级id-子级id'</span> ,</span><br><span class="line">	is_show <span class="built_in">TINYINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span> <span class="keyword">COMMENT</span> <span class="string">'是否显示在导航栏上'</span></span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">INNODB</span> <span class="keyword">charset</span> = utf8 <span class="keyword">COMMENT</span> <span class="string">'权限表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建后台角色表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> ugo_role;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> ugo_role(</span><br><span class="line">	role_id <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span> auto_increment PRIMARY <span class="keyword">KEY</span> <span class="keyword">COMMENT</span> <span class="string">'role_id'</span> ,</span><br><span class="line">	role_name <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'角色名称'</span> ,</span><br><span class="line">	role_auth_ids <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'角色具有权限id的集合，格式1,2,5'</span> ,</span><br><span class="line">	role_auth_ac <span class="built_in">text</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'控制器和方法的组合，格式：控制器-方法名'</span></span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">INNODB</span> <span class="keyword">charset</span> = utf8 <span class="keyword">COMMENT</span> <span class="string">'角色表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># *********************************************************** #</span></span><br><span class="line"><span class="comment">-- 插入测试数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_authority <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">'商品管理'</span>,<span class="number">0</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_authority <span class="keyword">values</span> (<span class="number">2</span>,<span class="string">'会员管理'</span>,<span class="number">0</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_authority <span class="keyword">values</span> (<span class="number">3</span>,<span class="string">'权限管理'</span>,<span class="number">0</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="number">3</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_authority <span class="keyword">values</span> (<span class="number">4</span>,<span class="string">'商品列表'</span>,<span class="number">1</span>,<span class="string">'Goods'</span>,<span class="string">'show'</span>,<span class="string">'1-4'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_authority <span class="keyword">values</span> (<span class="number">5</span>,<span class="string">'添加商品'</span>,<span class="number">1</span>,<span class="string">'Goods'</span>,<span class="string">'add'</span>,<span class="string">'1-5'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_authority <span class="keyword">values</span> (<span class="number">6</span>,<span class="string">'修改商品'</span>,<span class="number">1</span>,<span class="string">'Goods'</span>,<span class="string">'edit'</span>,<span class="string">'1-6'</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_authority <span class="keyword">values</span> (<span class="number">7</span>,<span class="string">'删除商品'</span>,<span class="number">1</span>,<span class="string">'Goods'</span>,<span class="string">'del'</span>,<span class="string">'1-7'</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_authority <span class="keyword">values</span> (<span class="number">8</span>,<span class="string">'会员列表'</span>,<span class="number">2</span>,<span class="string">'Role'</span>,<span class="string">'show'</span>,<span class="string">'2-12'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_authority <span class="keyword">values</span> (<span class="number">9</span>,<span class="string">'添加会员'</span>,<span class="number">2</span>,<span class="string">'Role'</span>,<span class="string">'add'</span>,<span class="string">'2-13'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_authority <span class="keyword">values</span> (<span class="number">10</span>,<span class="string">'修改会员'</span>,<span class="number">2</span>,<span class="string">'Role'</span>,<span class="string">'edit'</span>,<span class="string">'2-14'</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_authority <span class="keyword">values</span> (<span class="number">11</span>,<span class="string">'删除会员'</span>,<span class="number">2</span>,<span class="string">'Role'</span>,<span class="string">'del'</span>,<span class="string">'2-15'</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_authority <span class="keyword">values</span> (<span class="number">12</span>,<span class="string">'权限列表'</span>,<span class="number">3</span>,<span class="string">'Authority'</span>,<span class="string">'show'</span>,<span class="string">'3-8'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_authority <span class="keyword">values</span> (<span class="number">13</span>,<span class="string">'添加权限'</span>,<span class="number">3</span>,<span class="string">'Authority'</span>,<span class="string">'add'</span>,<span class="string">'3-9'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_authority <span class="keyword">values</span> (<span class="number">14</span>,<span class="string">'修改权限'</span>,<span class="number">3</span>,<span class="string">'Authority'</span>,<span class="string">'edit'</span>,<span class="string">'3-10'</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_authority <span class="keyword">values</span> (<span class="number">15</span>,<span class="string">'删除权限'</span>,<span class="number">3</span>,<span class="string">'Authority'</span>,<span class="string">'del'</span>,<span class="string">'3-11'</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_role <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">'经理'</span>,<span class="string">'1,4,5'</span>,<span class="string">'Goods-show,Goods-add'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_role <span class="keyword">values</span> (<span class="number">2</span>,<span class="string">'主管'</span>,<span class="string">'1,4'</span>,<span class="string">'Goods-show'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ugo_admin <span class="keyword">values</span> (<span class="literal">null</span>,<span class="string">'aa'</span>,<span class="string">'aa'</span>,<span class="number">0</span>)</span><br><span class="line"><span class="comment"># *********************************************************** #</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>数据库设计</tag>
      </tags>
  </entry>
  <entry>
    <title>模板引擎</title>
    <url>/2015/20151017-2.html</url>
    <content><![CDATA[<h1 id="前台页面实现、Smarty"><a href="#前台页面实现、Smarty" class="headerlink" title="前台页面实现、Smarty"></a>前台页面实现、Smarty</h1><h3 id="static-和-GLOBALS的区别"><a href="#static-和-GLOBALS的区别" class="headerlink" title="static 和 GLOBALS的区别"></a>static 和 GLOBALS的区别</h3><p>相同点：生命周期是一样的，声明的时候产生，页面执行完毕销毁。<br>不同点：</p>
<blockquote>
<p>超全局变量在所有的地方都能使用<br>静态变量只能在自己的作用域中访问<br>如果一个函数内没有区别，两个函数只能GLOBALS作用域不同</p>
</blockquote>
<h3 id="前台显示"><a href="#前台显示" class="headerlink" title="前台显示"></a>前台显示</h3><p>实现方法：<br>1、递归<br>2、三重循环</p>
<blockquote>
<p>在开发的时候能不用递归就不用递归，因为递归消耗资源比较多；如果确定就显示三级就用三重循环来实现</p>
</blockquote>
<p>方法一：通过模糊查询<br><code>select * from goods where `goods_status` like &#39;%hot%&#39;;</code></p>
<blockquote>
<p>模糊查询，以<code>%</code>百分号开头的查询无法使用索引，只能是全表扫描。效率低下</p>
</blockquote>
<p>方法二：使用find_in_set(值，集合)<br><code>select * from goods where find_in_set(&#39;best&#39;,`goods_status`);</code></p>
<blockquote>
<p>优化了方法一，效率提高了。但<code>find_in_set()</code>函数本身是个全表扫描的函数</p>
</blockquote>
<p>方法三：使用位运算符<br>查找best：<br><code>select * from goods where goods_status &amp; 1;</code><br>查找既有best又有hot同时存在：<br><code>select * from goods where goods_status &amp; 1 and goods_status &amp; 4</code> </p>
<blockquote>
<p>集合和枚举一样，在计算机内部都是通过数值管理的。<br>要想看有没有那个参数，就与上那个参数就可以了。<code>&amp;</code><br>best =&gt; 001<br>new =&gt; 010<br>hot   =&gt; 100<br>测试：select goods_status,goods_status+0 from goods;<br>best,new       3<br>best,new,hot 7<br>new,hot         6</p>
</blockquote>
<blockquote>
<p>best+hot<br>  101<br>&amp;001<br>  001</p>
</blockquote>
<p><strong>已知集合占用8个字节，一个字节8个位，8个直接64个位，所有集合最多可以保存64个选项</strong></p>
<h1 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h1><p>引擎和框架是有区别的。<br>我们现在开发的项目，前段代码和服务器端代码同在一个页面中。这样前端和服务器端看起来都不方便。为了让所有的项目开发人员。只关注自己的业务，我们将表现（HTML）和内容（PHP）相分离。</p>
<h2 id="模板引擎-推导"><a href="#模板引擎-推导" class="headerlink" title="模板引擎 推导"></a>模板引擎 推导</h2><p>简而言之，界定符的优化。将输出变量更改一下形式<br>光说不练假把式<br>将替换的结果当成字符串输出了。</p>
<h3 id="模板引擎的思想四步法："><a href="#模板引擎的思想四步法：" class="headerlink" title="模板引擎的思想四步法："></a>模板引擎的思想四步法：</h3><p><code>file_get_contents();</code> 获取表现内容<br><code>str_replace();</code>  定义左右定界符<br><code>file_put_contents();</code> 输出混编文件<br><code>require();</code> 引入混编文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$str = file_get_contents(<span class="string">'demo.html'</span>);</span><br><span class="line">$str = str_replace(<span class="string">'&#123;'</span>,<span class="string">'&lt;?php echo '</span>,$str);</span><br><span class="line">$str = str_replace(<span class="string">'&#125;'</span>,<span class="string">";?&gt;"</span>,$str);</span><br><span class="line">file_put_contents(<span class="string">'./demo.html.php'</span>,$str);</span><br><span class="line"><span class="keyword">require</span> <span class="string">'./demo.html.php'</span>;</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="模板引擎封装"><a href="#模板引擎封装" class="headerlink" title="模板引擎封装"></a>模板引擎封装</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Smarty</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> $tpl_var=<span class="keyword">array</span>();</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">assign</span><span class="params">($key,$value)</span></span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;tpl_var[$Key]=$value;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//@param string $tpl HTML页面的地址</span></span><br><span class="line">	pulic <span class="function"><span class="keyword">function</span> <span class="title">compile</span><span class="params">($tpl)</span></span>&#123;</span><br><span class="line">		$com_file = $tpl.<span class="string">'.php'</span>;<span class="comment">//混编文件名complicated</span></span><br><span class="line">		<span class="keyword">if</span>(file_exists($com_file) &amp;&amp; filemtime($tpl)&lt;filetime($com_file))&#123;</span><br><span class="line">			<span class="keyword">require</span> $com_file;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		$str = file_get_contents(<span class="string">'demo.html'</span>);</span><br><span class="line">		$str = str_replace(<span class="string">'&#123;'</span>,<span class="string">'&lt;?php echo $this-&gt;tpl_var[\''</span>,$str);</span><br><span class="line">		$str = str_replace(<span class="string">'&#125;'</span>,<span class="string">"\'];?&gt;"</span>,$str);</span><br><span class="line">		file_put_contents(<span class="string">'./demo.html.php'</span>,$str);</span><br><span class="line">		<span class="keyword">require</span> $com_file;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">$smarty = <span class="keyword">new</span> Smarty();</span><br><span class="line">$smarty-&gt;assign(<span class="string">'title'</span>,$title);</span><br><span class="line">$smarty-&gt;compile(demo.html);</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>输出：<br><code>&lt;?php echo $this-&gt;tpl_var[$key]?&gt;</code></p>
<p>外部调用<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">require &apos;./Smarty.class.php&apos;; //加载类文件</span><br><span class="line">$smarty = new Smarty(); //实例化对象</span><br><span class="line">$smarty-&gt;assgin(&apos;title&apos;,$title); //赋值操作</span><br><span class="line">$smarty-&gt;compile(); //编译输出文件</span><br></pre></td></tr></table></figure></p>
<p>如何判断混编文件不是最新的?</p>
<blockquote>
<p>模板的创建时间在混编文件之前<code>int filemtime ( string $filename )</code></p>
</blockquote>
<p>将模板文件和混编文件分开存储</p>
<ul>
<li>templates</li>
<li>templates_c</li>
</ul>
<p>一般来说，关键性代码都是私有，通过公有的方法来调用它；</p>
<ul>
<li>将complie() 方法用private来修饰，用一个公有的方法来调用display()调用</li>
</ul>
]]></content>
      <tags>
        <tag>模板引擎</tag>
      </tags>
  </entry>
  <entry>
    <title>Smarty2 模板引擎</title>
    <url>/2015/20151017-1.html</url>
    <content><![CDATA[<h1 id="Smarty-模板引擎"><a href="#Smarty-模板引擎" class="headerlink" title="Smarty 模板引擎"></a>Smarty 模板引擎</h1><h2 id="Smarty作用"><a href="#Smarty作用" class="headerlink" title="Smarty作用"></a>Smarty作用</h2><p>Smarty 是一个成熟的引擎，用来实现表现和内容相分离。<br><a href="www.smarty.net">Smarty官网</a></p>
<blockquote>
<p>文件目录</p>
<ul>
<li><code>plugins</code> 存放Smarty插件，即扩展类文件</li>
<li><code>sysplugins</code> 存放系统系统函数的目录</li>
<li><code>Smarty.class.php</code> Smarty 的入口文件，引入此文件即可</li>
<li><code>SmartyBC.class.php</code> 兼容版</li>
</ul>
</blockquote>
<blockquote>
<p>Smarty.class.php -构造函数</p>
<ul>
<li>setTemplateDir(): 设置模板文件夹</li>
<li>setCompileDir(): 设置混编文件夹</li>
<li>setCacheDir(): 设置缓存文件夹</li>
<li>setConfigsDir(): 设置配置文件夹</li>
</ul>
</blockquote>
<h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><p>拷贝核心文件libs 到站点下。并更名为Smarty<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">require &apos;./Smarty/Smarty.class.php&apos;;</span><br><span class="line">$smarty = new Smarty();</span><br><span class="line">$smarty-&gt;assign(&apos;name&apos;,&apos;uiste&apos;);</span><br><span class="line">$smarty-&gt;display(&apos;demo1.html&apos;);</span><br></pre></td></tr></table></figure></p>
<p>界定符：<code>$left_delimiter = &#39;{&#39;</code><br>修改界定符：<code>$smarty-&gt;left_delimiter = &#39;&lt;{&#39;;</code><br>更改模板文件：<code>$smarty-&gt;setTemplateDir(&#39;./views/&#39;);</code><br>更改混编文件夹：<code>$smarty-&gt;setCompileDir(&#39;./view_c/&#39;);</code></p>
<p>注释：<code>{*这是Smarty的注释*}</code><br>多学一招：Smarty和HTML注释内容的区别。Smarty注释在网页源代码中不显示。</p>
<blockquote>
<p>如果Smarty的定界符是<code>{*</code> <code>*}</code>那么注释的语法是?<br>答：<code>{** 注释 **}</code></p>
</blockquote>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="普通变量"><a href="#普通变量" class="headerlink" title="普通变量"></a>普通变量</h3><p>自定义变量。<br>语法一：<br>在PHP文件中，$smarty-&gt;assign(‘变量名’,’变量值’);<br>在模板文件中，<code>{$name}</code><br>语法二：<br>在模板文件中，使用{assign} 标签,定义变量<br><code>{assign var=&#39;name&#39; value=&#39;berry&#39;}</code><br><code>{$name}</code></p>
<h3 id="保留变量"><a href="#保留变量" class="headerlink" title="保留变量"></a>保留变量</h3><p>Smarty 中有一个特殊的变量 <code>$smarty</code> ，不能作为自定义变量名，他是一个保留变量（内置变量）。该变量用来获取用户的请求、系统变量、常量。</p>
<blockquote>
<p>例题</p>
<ul>
<li>模板文件中：<code>{$smarty.get.name}</code> 获取<code>GET</code>、<code>POST</code>、<code>REQUEST</code>提交的值</li>
<li>模板文件中：<code>{$smarty.const.PI}</code> 获取<code>define</code>定义常量</li>
<li>PHP文件中：<code>$_SESSION[&#39;name&#39;] = &#39;root&#39;</code> ；模板文件中：<code>$smarty.session.admin</code> 获取会话的值，<code>$smarty.cookies.admin</code> 获取cookie的值</li>
<li>模板文件中：<code>{$smarty.server.DOCUMENT_ROOT}</code> 获取根目录</li>
<li>模板文件中：<code>{$smarty.now}</code> 获取时间戳</li>
<li>模板文件中：<code>{$smarty.ldelim}</code>，<code>{$smarty.rdelim}</code> 获取左右界定符</li>
<li>模板文件中：<code>{$smarty.version}</code> 获取版本号</li>
</ul>
</blockquote>
<h3 id="配置变量"><a href="#配置变量" class="headerlink" title="配置变量"></a>配置变量</h3><p>将变量保存在配置文件，然后再Smarty模板中引入</p>
<blockquote>
<ol>
<li>新建<code>configs</code>文件夹</li>
<li>创建<code>smarty.conf</code>文件，参数设置如下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;HOST          = 127.0.0.1</span><br><span class="line">&gt;USERNAME =  ROOT</span><br><span class="line">&gt;PWD            =  aa</span><br><span class="line">&gt;[style1]</span><br><span class="line">&gt;COLOR        =   #FF0000</span><br><span class="line">&gt;[style2]</span><br><span class="line">&gt;COLOR        =   #00FF00</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
<blockquote>
<p>配置文件中<strong>节</strong>，用<code>[]</code>中括号来声明，通过<code>config_load</code> 的 <code>section</code> 属性来引入配置文件中的节，没有经过<code>[]</code>设置为节的为<strong>全局</strong>配置文件</p>
<ol start="3">
<li>模板文件中：<code>{config_load file = &#39;smarty.conf&#39; section=&#39;&#39;}</code> //只需要写配置文件名，不需要写路径</li>
<li>模板文件中，获取数据<br>语法a) ：<br>主机名 用户名</li>
</ol>
</blockquote>
<p>自定义不同情况下的颜色<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">	color:&#123;##COLOR&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="在Smarty中对数组的操作有两种方法"><a href="#在Smarty中对数组的操作有两种方法" class="headerlink" title="在Smarty中对数组的操作有两种方法"></a>在Smarty中对数组的操作有两种方法</h3><p>方法一：{数组[下标]}<br>方法二：{数组.下标}</p>
<h3 id="foreach-循环遍历数组"><a href="#foreach-循环遍历数组" class="headerlink" title="foreach 循环遍历数组"></a>foreach 循环遍历数组</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;foreach 数组 as 键=&gt;值&#125;</span><br><span class="line">//循环体</span><br><span class="line">&#123;foreachelse&#125;</span><br><span class="line">//没有数组输出，foreachelse可以省略</span><br><span class="line">&#123;/foreach&#125;</span><br></pre></td></tr></table></figure>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><p>语法：<code>{值变量@属性}</code><br><code>{$value@iteration}</code> 从1开始的编号<br><code>{$value@index}</code> 从0开始的索引<br><code>{$value@first}</code> 是否是第一个元素<br><code>{$value@last}</code> 是否是最后一个元素<br><code>{$value@show}</code> 数组中是否有元素显示<br><code>{$value@total}</code> 一共有多少个元素</p>
<h3 id="section-循环遍历数组"><a href="#section-循环遍历数组" class="headerlink" title="section 循环遍历数组"></a>section 循环遍历数组</h3><p>只能遍历索引数组，不能遍历关联数组</p>
<h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><p><code>{section name = 自定义变量(key)  loop=数组($week)}</code><br>{$week[key]}//循环体<br>{sectionelse}<br>//没有数组输出<br>{/section}</p>
<h4 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h4><p><code>{$smarty.section.自定义变量名.iteration}</code> 从1增长的编号<br><code>{$smarty.section.自定义变量名.index}</code> 从0增长的索引<br><code>{$smarty.section.自定义变量名.first}</code> 是否是第一个元素<br><code>{$smarty.section.自定义变量名.last}</code> 是否是最后一个元素</p>
<h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2><p>语法：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;if $score&gt;=90&#125;</span><br><span class="line">优秀</span><br><span class="line">&#123;elseif $score&gt;=80&#125;</span><br><span class="line">良好</span><br><span class="line">&#123;else $score&gt;=70&#125;</span><br><span class="line">满意</span><br><span class="line">&#123;/if&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;for 变量=初始值 to 结束值 [step 步长]&#125;</span><br><span class="line">//循环体</span><br><span class="line">&#123;/for&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;for $i=1 to 10 step 2&#125;</span><br><span class="line">	&#123;$i&#125;:锄禾日当午</span><br><span class="line">&#123;/for&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>步长默认是1，step 自定义步长</p>
</blockquote>
<h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;while 条件&#125;</span><br><span class="line">	//循环体</span><br><span class="line">&#123;/while&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;assign var=&apos;n&apos; value=1&#125;</span><br><span class="line">&#123;while $n&lt;=10&#125;</span><br><span class="line">	&#123;$n++&#125;:汗滴禾下土</span><br><span class="line">&#123;/while&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><h3 id="html-checkboxes-复选框"><a href="#html-checkboxes-复选框" class="headerlink" title="{html_checkboxes} 复选框"></a>{html_checkboxes} 复选框</h3><p>模板文件中：<br>方法一：<code>{html_checkboxes output=$output values=$values selected=$selected}</code><br>方法二：<code>{html_checkboxes options=$options selected=$selected}</code><br>PHP文件中：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$smarty-&gt;assign(&apos;output&apos;,array(&apos;ff&apos;,&apos;bb&apos;,&apos;cc&apos;,&apos;dd&apos;,&apos;ee&apos;));</span><br><span class="line">$smarty-&gt;assign(&apos;value&apos;,array(&apos;1&apos;,&apos;2&apos;,&apos;3&apos;,&apos;4&apos;,&apos;5&apos;));</span><br><span class="line">$smarty-&gt;assign(&apos;selected&apos;,array(&apos;1&apos;,&apos;4&apos;));</span><br></pre></td></tr></table></figure></p>
<p>模板文件中<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;html_checkboxes output=$output values=$value selected=$selected&#125;</span><br><span class="line">&#123;html_options output=$output values=$value name=&apos;hobby&apos; selected=$selected2&#125;</span><br><span class="line">&#123;html_radios output=$output values=$value selected=$selected2&#125;</span><br><span class="line">&#123;html_select_date month_format=&apos;%m&apos; field_order=&apos;YMD&apos;&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="html-options-下拉菜单"><a href="#html-options-下拉菜单" class="headerlink" title="{html_options} 下拉菜单"></a>{html_options} 下拉菜单</h3><p>模板文件中：<br><code>{html_options options=$options name=&#39;hobby&#39; selected=$selected}</code><br>PHP文件中：</p>
<h3 id="html-radios-单选按钮"><a href="#html-radios-单选按钮" class="headerlink" title="{html_radios}单选按钮"></a>{html_radios}单选按钮</h3><p>模板文件中：<br><code>{html_radios options=$options selected=$selected}</code></p>
<h3 id="html-select-date-显示日期"><a href="#html-select-date-显示日期" class="headerlink" title="{html_select_date}显示日期"></a>{html_select_date}显示日期</h3><p><code>{html_select_date month_format=&#39;%m&#39; field_order=&#39;YMD&#39;}</code></p>
<h2 id="变量修饰器"><a href="#变量修饰器" class="headerlink" title="变量修饰器"></a>变量修饰器</h2><p>要使用变量修饰器，我们需要管道运算符( | )</p>
<p>在默认情况下，<code>truncate</code>是按字节截取的，但是中文属于多字节字符，在UTF-8下一个字符占用3个字节显示，这样会出现乱码；如果开启了多字节处理，<code>truncate</code>就会自动按多字符处理了。</p>
<blockquote>
<p><code>extension=php_mbstring.dll</code></p>
</blockquote>
<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="Smarty-缓存就是生成静态页面"><a href="#Smarty-缓存就是生成静态页面" class="headerlink" title="Smarty 缓存就是生成静态页面"></a>Smarty 缓存就是生成静态页面</h3><p>开启：<code>$smarty-&gt;caching = 1;</code>  开启缓存<br>更新缓存：<br>方法一：删除对应的缓存，系统会更新<br>方法二：更改对应的模板文件，包括配置文件，包含文件，布局文件缓存都会自动更新<br>方法三：缓存文件的有效时间过期，会自动更新<br>方法四：<code>$smarty-&gt;force_cache = true;</code> 强制更新缓存</p>
<h3 id="缓存的生命周期"><a href="#缓存的生命周期" class="headerlink" title="缓存的生命周期"></a>缓存的生命周期</h3><p>默认情况下，缓存的生命周期是3600秒。<br><code>$smarty-&gt;cache_lifetime = -1 | 0 | N;</code></p>
<ul>
<li>N：表示缓存文件生命周期是N秒</li>
<li>0：缓存文件立即失效</li>
<li>-1：永远不失效</li>
</ul>
<h3 id="单模板，多缓存【缓存分页】"><a href="#单模板，多缓存【缓存分页】" class="headerlink" title="单模板，多缓存【缓存分页】"></a>单模板，多缓存【缓存分页】</h3><p>php文件：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">require &apos;./Smarty/Smarty.class.php&apos;;</span><br><span class="line">$smarty = new Smarty();</span><br><span class="line">$smarty-&gt;caching = 1; //开启缓存</span><br><span class="line">$smarty-&gt;display(&apos;demo17.html&apos;,$_GET[&apos;pageno&apos;])</span><br></pre></td></tr></table></figure></p>
<p>模板文件：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当前是第&#123;$smarty.get.pageno&#125;页</span><br></pre></td></tr></table></figure></p>
<h3 id="缓存集合"><a href="#缓存集合" class="headerlink" title="缓存集合"></a>缓存集合</h3><p>PHP代码：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">require &apos;./Smarty/Smarty.class.php&apos;;</span><br><span class="line">$smarty = new Smarty();</span><br><span class="line">$smarty-&gt;caching = 1; //开启缓存</span><br><span class="line">$color = $_GET[&apos;color&apos;];</span><br><span class="line">$size = $_GET[&apos;size&apos;]</span><br><span class="line">$smarty-&gt;display(&apos;demo18.html&apos;,&quot;$color|$size&quot;);</span><br></pre></td></tr></table></figure></p>
<p>模板文件：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">颜色：&#123;$smarty.get.color&#125;</span><br><span class="line">大小：&#123;$samrty.get.size&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>邓东旭语：厉害了我的哥</p>
</blockquote>
<h3 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h3><p>$smarty-&gt;clearCache(模板，识别id)<br>$smarty-&gt;clearAllCache();  //清楚所有缓存</p>
<p><code>$smarty-&gt;clearCache(&#39;demo18.html&#39;,&#39;red|4&#39;);</code>清除有demeo18.html 模板生成的red 和 4组合的缓存<br>2、$smarty-&gt;clearCache(‘demo18.html’,’red’) : 清除demo18.html 模板生成的带有red的缓存<br>3、$smarty-&gt;clearCache(null,’red’); //清楚所有模板中带有red 的缓存</p>
<p>局部缓存</p>
<p>方法一：如果只有一个变量不缓存使用nocache属性<br>模板文件<code>{$smarty.now nocache}</code></p>
<p>方法二：如果有很多内容不缓存，使用<code>{nocache}</code>标签<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;nocache&#125;</span><br><span class="line">一大堆什么鬼东西，是会被动态加载的</span><br><span class="line">&#123;/nocache&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="money"><a href="#money" class="headerlink" title="money"></a>money</h3><p>PHP文件：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">require &apos;./Smarty/Smarty.class.php&apos;;</span><br><span class="line">$smarty = new Smarty();</span><br><span class="line">$smarty-&gt;caching = 1; //开启缓存</span><br><span class="line">$smarty-&gt;display(&apos;demo17.html&apos;,$_GET[&apos;pageno&apos;])</span><br></pre></td></tr></table></figure></p>
<p>模板文件：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style type=&apos;text/css&apos;&gt;</span><br><span class="line">.aa&#123;</span><br><span class="line">	color:red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&apos;aa&apos;&gt;锄禾日当午&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>报错问题：源于大括号<code>{}</code>，Smarty将CSS中大括号当成了Smarty的定界符</p>
</blockquote>
<p>解决方法：<br>方法一：更改定界符<br>方法二：在CSS和JS的大括号后面加上一个空格<br>方法三：使用{literal}标签，在literal标签内的大括号不会被解析</p>
<h3 id="Smarty的优点与缺点"><a href="#Smarty的优点与缺点" class="headerlink" title="Smarty的优点与缺点"></a>Smarty的优点与缺点</h3><ol>
<li>因为可以生产缓存，所有速度快</li>
<li>如果要实时更新的内容很多的情况，不适合使用Smarty（比如，股票），如果一个小项目，不适合用</li>
</ol>
]]></content>
      <tags>
        <tag>Smarty</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP字符串函数大汇总</title>
    <url>/2015/20151012-Library-php-str-fun.html</url>
    <content><![CDATA[<ol>
<li>查找字符位置函数</li>
</ol>
<p>strpos($str,search,[int]):   查找search在$str中的第一次位置从int开始</p>
<p>stripos($str,search,[int]):  函数返回字符串在另一个字符串中第一次出现的位置</p>
<p>strrpos($str,search,[int]):  查找search在$str中的最后一次出现的位置从int</p>
<ol start="2">
<li>提取子字符函数（双字节）</li>
</ol>
<p>submit($str,int start[,int length]):  从$str中strat位置开始提取[length长度的字符串]。</p>
<p>strstr($str1,$str2):   从$str1(第一个的位置)搜索$str2并从它开始截取到结束字符串;若没有则返回FALSE。</p>
<p>stristr()    功能同strstr，只是不区分大小写。</p>
<p>strrchr()    从最后一次搜索到的字符处返回；用处：取路径中文件名</p>
<ol start="3">
<li>替换字符串的PHP字符串函数</li>
</ol>
<p>str_replace(search,replace,$str):    从$str中查找search用replace来替换</p>
<p>str_irreplace(search,replace,$str):</p>
<p>strtr($str,search,replace):   这个函数中replace不能为””;</p>
<p>substr_replace($Str,$rep,$start[,length])  $str原始字符串,$rep替换后的新字符串,$start起始位置,$length替换的长度，该项可选</p>
<ol start="4">
<li>字符长度</li>
</ol>
<p>int strlen($str)</p>
<ol start="5">
<li>比较字符函数</li>
</ol>
<p>int strcmp($str1,$str2):     $str1&gt;=&lt;$str2分别为正1,0,-1（字符串比较）</p>
<p>strcasecmp()         同上（不分大小写）</p>
<p>strnatcmp(“4″,”14″)     按自然排序比较字符串</p>
<p>strnatcasecmp()       同上，（区分大小写）</p>
<ol start="6">
<li>分割成数组的PHP字符串函数</li>
</ol>
<p>str_split($str,len):      把$str按len长度进行分割返回数组</p>
<p>split(search,$str[,int]):     把$str按search字符进行分割返回数组int是分割几次，后面的将不分割</p>
<p>expload(search,$str[,int])</p>
<ol start="7">
<li>去除空格</li>
</ol>
<p>ltrim、rtrim、trim</p>
<ol start="8">
<li>HTML代码有关函数</li>
</ol>
<p>nl2br()：     使n转换为<br>。<br>strip_tags($str[,’’])：    去除HTML和PHP标记.在$str中所有HTML和PHP代码将被去除，可选参数为html和PHP代码作用是将保留</p>
<p>如：echo strip_tags($text, ”);</p>
<p>htmlspecialchars($str[,参数]):页面正常输出HTML代码参数是转换方式</p>
<ol start="9">
<li>字符大小写转换的PHP字符串函数</li>
</ol>
<p>strtolower($str):    字符串转换为小写</p>
<p>strtoupper($str):     字符串转换为大写</p>
<p>ucfirst($str):    将函数的第一个字符转换为大写</p>
<p>ucwords($str):    将每个单词的首字母转换为大写</p>
<p>附：</p>
<p>PHP字符串函数库，收集了51个PHP处理字符串的函数。包括计算字符串长度、分割字符串、查找字符串等等各个方面。</p>
<p>AddSlashes:                 字符串加入斜线。<br>bin2hex:                    二进位转成十六进位。<br>Chop:                       去除连续空白。<br>Chr:                        返回序数值的字符。<br>chunk_split:                将字符串分成小段。<br>convert_cyr_string:         转换成其它字符串。<br>crypt:                      将字符串用 DES 编码加密。<br>echo:                       输出字符串。<br>explode:                    切开字符串。<br>flush:                      清出输出缓冲区。<br>get_meta_tags:              抽出文件所有 meta 标记的资料。<br>htmlspecialchars:           将特殊字符转成 HTML 格式。<br>htmlentities:               将所有的字符都转成 HTML 字符串。<br>implode:                    将数组变成字符串。<br>join:                       将数组变成字符串。<br>ltrim:                      去除连续空白。<br>md5:                        计算字符串的 MD5 哈稀。<br>nl2br:                      将换行字符转成。<br>Ord:                        返回字符的序数值。<br>parse_str:                  解析 query 字符串成变量。<br>print:                      输出字符串。<br>printf:                     输出格式化字符串。<br>quoted_printable_decode     将 qp 编码字符串转成 8 位字符串。<br>QuoteMeta:                  加入引用符号。<br>rawurldecode:               从 URL 专用格式字符串还原成普通字符串。<br>rawurlencode:               将字符串编码成 URL 专用格式。<br>setlocale:                  配置地域化信息。<br>similar_text:               计算字符串相似度。<br>soundex:                    计算字符串的读音值<br>sprintf:                    将字符串格式化。<br>strchr:                     寻找第一个出现的字符。<br>strcmp:                     字符串比较。<br>strcspn:                    不同字符串的长度。<br>strip_tags:                 去掉 HTML 及 PHP 的标记。<br>StripSlashes:               去掉反斜线字符。<br>strlen:                     取得字符串长度。<br>strrpos:                    寻找字符串中某字符最后出现处。<br>strpos:                     寻找字符串中某字符最先出现处。<br>strrchr:                    取得某字符最后出现处起的字符串。<br>strrev:                     颠倒字符串。<br>strspn:                     找出某字符串落在另一字符串遮罩的数目。<br>strstr:                     返回字符串中某字符串开始处至结束的字符串。<br>strtok:                     切开字符串。<br>strtolower:                 字符串全转为小写。<br>strtoupper:                 字符串全转为大写。<br>str_replace:                字符串取代。<br>strtr:                      转换某些字符。<br>substr:                     取部份字符串。<br>trim:                       截去字符串首尾的空格。<br>ucfirst:                    将字符串第一个字符改大写。<br>ucwords:                    将字符串每个字第一个字母改大写。</p>
]]></content>
      <tags>
        <tag>PHP函数</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP - 速度提升小技巧</title>
    <url>/2015/20151011-Library-php-skill.html</url>
    <content><![CDATA[<h1 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h1><h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2><p>由于session没有长久保存的必要，所以建议sess表使用memory引擎，此引擎执行效率高。</p>
<h2 id="数据insert"><a href="#数据insert" class="headerlink" title="数据insert"></a>数据insert</h2><h2 id="数据delete"><a href="#数据delete" class="headerlink" title="数据delete"></a>数据delete</h2><h2 id="数据update"><a href="#数据update" class="headerlink" title="数据update"></a>数据update</h2><h2 id="数据select"><a href="#数据select" class="headerlink" title="数据select"></a>数据select</h2><h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><h2 id="C-S-R-F-保护"><a href="#C-S-R-F-保护" class="headerlink" title="C-S-R-F 保护"></a><em>C-S-R-F</em> 保护</h2><p><em>C-S-R-F</em> (跨网站请求伪造) 攻击，跨网站请求伪造是一种恶意的攻击，借以代表经过身份验证的用户执行未经授权的命令。</p>
<p>Laravel解决方案：</p>
<blockquote>
<p>Laravel 会自动在每一位用户的 session 中放置随机的 token ，这个 token 将被用来确保经过验证的用户是实际发出请求至应用程序的用户</p>
</blockquote>
<p>插入 <em>C-S-R-F</em> Token 到表单<br><figure class="highlight plain"><figcaption><span>type</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">当然也可以在Blade模板引擎使用：</span><br><span class="line">```&lt;input type=&quot;hidden&quot; name=&quot;_token&quot; value=&quot;&#123;&#123; csrf_token() &#125;&#125;&quot;&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="Composer安装laravel框架"><a href="#Composer安装laravel框架" class="headerlink" title="Composer安装laravel框架"></a>Composer安装laravel框架</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>通过 composer Create-Project命令安装Laravel<br><code>composer create-project laravel/laravel --prefer-dist[别名]</code></p>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>laravel安装器<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">composer global require &quot;laravel/installer&quot;</span><br><span class="line">laravel new blog</span><br></pre></td></tr></table></figure></p>
<p>检查安装状态<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uiste:test uiste$ laravel</span><br><span class="line">Laravel Installer version 1.3.3</span><br></pre></td></tr></table></figure></p>
<p>下载laravel<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uiste:test uiste$ laravel new blog</span><br><span class="line">Crafting application...</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>PHP小技巧</tag>
        <tag>PHP加载速度</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP常见错误提示</title>
    <url>/2015/20151011-1.html</url>
    <content><![CDATA[<h1 id="Fatal-error-Call-to-undefined-function……"><a href="#Fatal-error-Call-to-undefined-function……" class="headerlink" title="Fatal error: Call to undefined function……"></a>Fatal error: Call to undefined function……</h1><p>函数不存在，可能的原因：<br>1、系统不存在这个函数且你也没自定义<br>2、因为环境不同，这个函数在本环境配置文件没开，百度函数名字，就能查到函数属于哪个dll，在<code>php.ini</code>里开启</p>
<h1 id="syntax-error-unexpected-T-STRING-expecting……"><a href="#syntax-error-unexpected-T-STRING-expecting……" class="headerlink" title="syntax error, unexpected T_STRING, expecting……"></a>syntax error, unexpected T_STRING, expecting……</h1><p>严重语法错误，<br>例如<code>syntax error, unexpected T_STRING, expecting &#39;,&#39; or &#39;;&#39; in F:\phpnow\htdocs\index.php on line 4</code><br>后边标着行号，去检查那一行的标点就行<br>如果是 第三行 echo 1 后边没加;，报错会报 on line 4 </p>
<h1 id="Parse-error-syntax-error-unexpected-T-VARIABLE-in-XXX-php-on-line-XXX"><a href="#Parse-error-syntax-error-unexpected-T-VARIABLE-in-XXX-php-on-line-XXX" class="headerlink" title="Parse error: syntax error, unexpected T_VARIABLE in XXX.php on line XXX"></a>Parse error: syntax error, unexpected T_VARIABLE in XXX.php on line XXX</h1><p>这条语句是PHP常见的报错，一般是在XXX行的上一行，或者是XXX行，缺少分号。或者在双引号中使用双引号，且没有转义等等。<br>解决方法：找到XXX.php的XXX行，按照上面的分析，找到自己的错误，改正即可。</p>
<h1 id="Parse-error-syntax-error-unexpected-‘X’-in-XXX-php-on-line-XXX"><a href="#Parse-error-syntax-error-unexpected-‘X’-in-XXX-php-on-line-XXX" class="headerlink" title="Parse error: syntax error, unexpected ‘X’ in XXX.php on line XXX"></a>Parse error: syntax error, unexpected ‘X’ in XXX.php on line XXX</h1><p>这条语句依然是PHP常见的报错，报错原因是在XXX.php的XXX行，出现了PHP无法识别的字符。常常是因为function，if等需要‘{’、‘}’的地方没有闭合，或者在编程的时候，不小心在‘;’的后面误打了几个字符。<br>解决方法：找到XXX.php的XXX行，删除多出的字符，添加缺少的字符即可。</p>
<h1 id="syntax-error-unexpected-end"><a href="#syntax-error-unexpected-end" class="headerlink" title="syntax error, unexpected $end"></a>syntax error, unexpected $end</h1><p>逻辑忘了闭合  这个报错还有个特征，他会提示你最后一行代码报错，譬如你一共30行，他就告诉你 on line 30，这时候你别检查第三十行，你要把30行挨个，检查一遍，看看哪个标签没闭合。<br>一共3000行，他就告诉你 on line 3000，这时候你别检查这3000行了，如果你程序排版很乱，在3000行里找哪个括号是个很麻烦的事……我教你一招：<br>ctrl+a ctrl+d alt+f4<br>好了，你现在可以重写了。</p>
<h1 id="Notice-Undefined-varialbe-……"><a href="#Notice-Undefined-varialbe-……" class="headerlink" title="Notice:Undefined varialbe:……"></a>Notice:Undefined varialbe:……</h1><p>这是一个比较常见的警告性提示，解决方法：error_reporting调整错误级别，不会调整，那就百度下</p>
]]></content>
      <tags>
        <tag>PHP错误</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP - MySQL 两表联查 | 显示不同类型</title>
    <url>/2015/20151009-1.html</url>
    <content><![CDATA[<h1 id="两表联查"><a href="#两表联查" class="headerlink" title="两表联查"></a>两表联查</h1><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>不同商品的属性扩展<br>如：</p>
<blockquote>
<p>音乐：中文片名、英文片名、商品别名、介质/格式、国家地区、导演/指挥、主唱、长度、歌词<br>书：作者、出版社、图书书号、出版日期、图书页数、字数、所属分类<br>等…</p>
</blockquote>
<h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p>通过对产品类型划分，使用属性类别<code>(attr_type)</code>表作为中间表，对属性<code>(attribute)</code>扩展连接。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取attr_type表数据</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAttrTypeList</span><span class="params">()</span></span>&#123;</span><br><span class="line">       $sql=<span class="string">'select attr_type_name,count(attr_name) as `count` from attr_type natural left join attribute group by attr_type_id'</span>;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;db-&gt;fetchAll($sql);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h1 id="显示不同类型"><a href="#显示不同类型" class="headerlink" title="显示不同类型"></a>显示不同类型</h1><p>controller<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//显示属性</span></span><br><span class="line">$attr_type_id=<span class="keyword">isset</span>($_GET[<span class="string">'attr_type_id'</span>])?(int)$_GET[<span class="string">'attr_type_id'</span>]:<span class="number">0</span>;</span><br><span class="line">$attr_model=<span class="keyword">new</span> AttributeModel();</span><br><span class="line">$attr_list=$attr_model-&gt;getAttrByTypeId($attr_type_id);</span><br></pre></td></tr></table></figure></p>
<p>model<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过属性类别id获取属性</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAttrByTypeId</span><span class="params">($attr_type_id)</span></span>&#123;</span><br><span class="line">       $sql=<span class="string">"select * from attribute natural join attr_type where 1"</span>;</span><br><span class="line">       <span class="keyword">if</span>($attr_type_id&gt;<span class="number">0</span>)</span><br><span class="line">           $sql.=<span class="string">" and attr_type_id=$attr_type_id"</span>;</span><br><span class="line">       $sql.=<span class="string">' order by attr_type_id'</span>;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;db-&gt;fetchAll($sql);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<p>view<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-div"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">"searchForm"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/Application/View/Admin/images/icon_search.gif"</span> <span class="attr">width</span>=<span class="string">"26"</span> <span class="attr">height</span>=<span class="string">"22"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">alt</span>=<span class="string">"SEARCH"</span>&gt;</span></span><br><span class="line">    按商品类型显示：<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"goods_type"</span> <span class="attr">onchange</span>=<span class="string">"location.href='index.php?p=Admin&amp;c=Attribute&amp;a=list&amp;attr_type_id='+this.value"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>所有商品类型<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="php"><span class="meta">&lt;?php</span> <span class="keyword">foreach</span>($attr_type_list <span class="keyword">as</span> $rows):<span class="meta">?&gt;</span></span></span><br><span class="line">    	&lt;option value="&lt;?php echo $rows['attr_type_id']?&gt;" &lt;?php echo $rows['attr_type_id']==$attr_type_id?'selected':''?&gt;&gt;&lt;?php echo $rows['attr_type_name']?&gt;&lt;/option&gt;</span><br><span class="line">    <span class="php"><span class="meta">&lt;?php</span> <span class="keyword">endforeach</span>;<span class="meta">?&gt;</span></span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="切换选项禁用状态"><a href="#切换选项禁用状态" class="headerlink" title="切换选项禁用状态"></a>切换选项禁用状态</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">name</span>=<span class="string">"theForm"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">id</span>=<span class="string">"general-table"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"label"</span>&gt;</span>该属性值的录入方式：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"attr_input_type"</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">checked</span>=<span class="string">"true"</span> <span class="attr">onclick</span>=<span class="string">"radioClicked(0)"</span>&gt;</span></span><br><span class="line">      手工录入</span><br><span class="line">      &lt;input type="radio" name="attr_input_type" value="1" onclick="radioClicked(1)" &lt;?php echo $info['attr_input_type']==1?'checked':''?&gt;&gt;从下面的列表中选择（一行代表一个可选值）</span><br><span class="line">      &lt;input type="radio" name="attr_input_type" value="2" onclick="radioClicked(0)" &lt;?php echo $info['attr_input_type']==2?'checked':''?&gt;&gt;多行文本框</span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">/**</span><br><span class="line"> * 点击类型按钮时切换选项的禁用状态</span><br><span class="line"> */</span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">radioClicked</span>(<span class="params">n</span>)</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.forms[<span class="string">'theForm'</span>].elements[<span class="string">"attr_input_value"</span>].disabled = n &gt; <span class="number">0</span> ? <span class="literal">false</span> : <span class="literal">true</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>MySQL多表联查</tag>
        <tag>显示不同类型</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP - 错误处理 | 异常处理</title>
    <url>/2015/20151008-2.html</url>
    <content><![CDATA[<h1 id="错误处理简介"><a href="#错误处理简介" class="headerlink" title="错误处理简介"></a>错误处理简介</h1><p><strong>PHP独有的处理</strong><br>默认情况下，当错误发生的时候在浏览器上显示错误报告。<br>可以使用操作符（@）来屏蔽语句生成的错误报告，注意@符号只对函数有用，对echo语句不起作用</p>
<h3 id="错误级别"><a href="#错误级别" class="headerlink" title="错误级别"></a>错误级别</h3><p>按照错误的严重程度将错误划分为3种<br>Notice：提示性错误<br>Warning：警告性错误<br>Fatal error：致命性错误</p>
<blockquote>
<p>notice和warning级别错误后继续执行，error级别错误后终止执行</p>
</blockquote>
<h3 id="处理方式"><a href="#处理方式" class="headerlink" title="处理方式"></a>处理方式</h3><p>显示错误报告【默认】<br>记录错误日志<br>错误发生后交个自定义脚本去完成【比如，错误发生后发一个电子邮件】</p>
<h3 id="错误触发"><a href="#错误触发" class="headerlink" title="错误触发"></a>错误触发</h3><p>PHP程序触发：PHP在运行的过程中，发现并触发错误。比如include、require等等。<br>由用户触发，通过trigger_error()来触发错误。<br>eg:定义年龄不能超过30，超过30即报错<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$age = 30;</span><br><span class="line">if($age&gt;30)</span><br><span class="line">	trigger_error(&quot;age cannot over 30&quot;,E_USER_ERROR);</span><br></pre></td></tr></table></figure></p>
<p>用户错误的级别，他们是常量,默认触发notice错误。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;E_USER_ERROR	- user-generated error message</span><br><span class="line">;E_USER_WARNING - user-generated warning message</span><br><span class="line">;E_USER_NOTICE  - user-generated notice message</span><br></pre></td></tr></table></figure></p>
<h3 id="实现错误处理"><a href="#实现错误处理" class="headerlink" title="实现错误处理"></a>实现错误处理</h3><h4 id="更改php配置有3种方法"><a href="#更改php配置有3种方法" class="headerlink" title="更改php配置有3种方法"></a>更改php配置有3种方法</h4><h5 id="在php-ini中更改"><a href="#在php-ini中更改" class="headerlink" title="在php.ini中更改"></a>在php.ini中更改</h5><p>所有的虚拟目录中有效</p>
<h5 id="htaccess分布式部署文件"><a href="#htaccess分布式部署文件" class="headerlink" title=".htaccess分布式部署文件"></a>.htaccess分布式部署文件</h5><p>.htaccess通过php_flag和php_value 在某个虚拟目录，或某个目录有效.</p>
<h5 id="ini-set-：某一个页面有效"><a href="#ini-set-：某一个页面有效" class="headerlink" title="ini_set()：某一个页面有效"></a>ini_set()：某一个页面有效</h5><p><code>ini_set(&#39;display_errors&#39;:&#39;on&#39;)</code> 开启错误显示<br><code>ini_set(&#39;display_errors&#39;:&#39;off&#39;)</code> 关闭错误显示</p>
<h4 id="在浏览器上显示错误报告"><a href="#在浏览器上显示错误报告" class="headerlink" title="在浏览器上显示错误报告"></a>在浏览器上显示错误报告</h4><p><code>display_errors = On</code></p>
<h4 id="在日志中显示错误报告"><a href="#在日志中显示错误报告" class="headerlink" title="在日志中显示错误报告"></a>在日志中显示错误报告</h4><p><code>log_errors = On</code><br>错误日志保存的地址<br><code>error_log = php_errors.log</code></p>
<h4 id="用户自定义错误处理"><a href="#用户自定义错误处理" class="headerlink" title="用户自定义错误处理"></a>用户自定义错误处理</h4><p>默认情况下，一旦定义了错误处理函数，则错误报告和错误日志不再执行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'这是自定义错误'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注册错误处理函数</span></span><br><span class="line">set_error_handler(<span class="string">'error'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>在自定义错误处理函数中添加return false，则自定义错误处理后再交个PHP处理。</p>
</blockquote>
<p>应用：不同的级别使用不同错误处理<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*<span class="doctag">@param</span> $level 错误级别</span></span><br><span class="line"><span class="comment">*<span class="doctag">@param</span> $msg	错误信息</span></span><br><span class="line"><span class="comment">*<span class="doctag">@param</span> $file	错误文件</span></span><br><span class="line"><span class="comment">*<span class="doctag">@param</span> $line	错误行号</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span><span class="params">($level,$msg,$file,$line)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">switch</span>($level) &#123;</span><br><span class="line">		<span class="keyword">case</span> E_NOTICE:</span><br><span class="line">		<span class="keyword">case</span> E_USER_NOTICE:</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">'将错误信息屏蔽掉&lt;br&gt;'</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> E_WARNING :</span><br><span class="line">		<span class="keyword">case</span> E_USER_WARNING:</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">'将错误信息记录到日志中&lt;br&gt;'</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> E_ERROR:</span><br><span class="line">		<span class="keyword">case</span> E_USER_ERROR:</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">'给管理员发邮件&lt;br&gt;'</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"错误信息：&#123;$msg&#125;&lt;br&gt;"</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"错误文件：&#123;$file&#125;&lt;br&gt;"</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"错误行号：&#123;$line&#125;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">set_error_handler(<span class="string">'error'</span>);	<span class="comment">//注册错误处理函数</span></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line"><span class="keyword">echo</span> $aa,<span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">'./aa.php'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="指定显示错误级别"><a href="#指定显示错误级别" class="headerlink" title="指定显示错误级别"></a>指定显示错误级别</h3><p><code>;Error Level Constants:</code><br><code>error_reporting = E_ALL | E_STRICT</code><br>思考：为什么在php5.3中显示所有错误是E_ALL | E_STRICT？<br>答：在php5.3中，E_ALL不是表示所有错误，E_ALL | E_STRICT也表示所有错误。<br>在php5.4以上版本，E_ALL的错误都会报的。</p>
<p>E_ALL:   111011111111111<br>E_STRICT:000100000000000</p>
<p>例题：<br>只有PHP的notice才报错<br><code>ini_set(&#39;error_reporting&#39;,E_NOTICE);</code><br>只报PHP的notice和用户的notice<br><code>ini_set(&#39;error_reporting&#39;,E_NOTICE | E_USER_NOTICE);</code><br>系统的notice不报，其他全报<br><code>ini_set(&#39;error_reporting&#39;,(E_ALL | E_STRICT) &amp; ~E_NOTICE);</code></p>
<blockquote>
<p>~是按位取非，0变成1,1变成0。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义错误处理函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  int $level 错误级别</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  string $msg   错误信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  string $file  错误文件名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  int $line  错误行号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Bool        错误处理情况</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span><span class="params">($level,$msg,$file,$line)</span></span>&#123;</span><br><span class="line">	<span class="keyword">switch</span> ($level) &#123;</span><br><span class="line">		<span class="keyword">case</span> E_NOTICE:</span><br><span class="line">		<span class="keyword">case</span> E_USER_NOTICE:</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">'将错误屏蔽'</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> E_WARNING:</span><br><span class="line">		<span class="keyword">case</span> E_USER_WARNING:</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">'将错误记录在日志中&lt;br&gt;'</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="comment">// case E_ERROR: //一般不设置，若报了该错误，程序将终止运行</span></span><br><span class="line">		<span class="keyword">case</span> E_USER_ERROR:</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">'将错误发送给管理员&lt;br&gt;'</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'错误信息：'</span>.$msg,<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'错误文件：'</span>.$file.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'错误行号：'</span>.$line,<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">	<span class="comment">// return false 自定义错误处理完毕后，交给计算机继续处理</span></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注册错误函数</span></span><br><span class="line">set_error_handler(<span class="string">'error'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="项目中的错误处理"><a href="#项目中的错误处理" class="headerlink" title="项目中的错误处理"></a>项目中的错误处理</h1><p>项目开发的时候错误显示在浏览器上，不用记录在日志中<br>项目运行的时候错误记录在日志中，不显示在浏览器上</p>
<ul>
<li>php.ini  log_errors = on 开启错误日志</li>
<li>php.ini  error_log = $log_path.$error_log;</li>
</ul>
<p>将项目的运行模式分为“开发模式（调试模式）”和“运行模式”</p>
<ul>
<li>在配置文件中，添加一个配置用来保存开发的模式</li>
<li>在Application文件夹下新建Log文件夹，用来保存日志</li>
<li>在Framework类中添加定义Log文件夹的路径常量</li>
<li>在Framework类中定义错误处理的方法<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">initError</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ini_set(<span class="string">'error_reporting'</span>, E_ALL | E_STRICT); <span class="comment">//报所有错误</span></span><br><span class="line">	<span class="keyword">if</span>($GLOBALS[<span class="string">'config'</span>][<span class="string">'app'</span>][<span class="string">'app_dubeg'</span>])&#123;<span class="comment">//开发模式</span></span><br><span class="line">		ini_set(<span class="string">'display_errors'</span>,<span class="string">'on'</span>); <span class="comment">//浏览器显示错误</span></span><br><span class="line">		ini_set(<span class="string">'log_errors'</span>,<span class="string">'off'</span>); <span class="comment">//不记录日志</span></span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		ini_set(<span class="string">'display_errors'</span>,<span class="string">'off'</span>); <span class="comment">//浏览器不显示错误</span></span><br><span class="line">		ini_set(<span class="string">'log_errors'</span>,<span class="string">'on'</span>); <span class="comment">//记录日志</span></span><br><span class="line">		$error_log = date(<span class="string">'Y-m-d'</span>).<span class="string">'.log'</span>;</span><br><span class="line">		ini_set(<span class="string">'error_log'</span>,LOG_PATH.$error_log);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>异常处理使用关键字：try、catch、throw</p>
<ol>
<li>try:用来监测代码</li>
<li>thr ow：用来抛出异常</li>
<li>catch：用来捕获异常</li>
<li>Exception：PHP内置的异常类,是所有异常类的父类</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">	&lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	<span class="meta">&lt;?php</span> </span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'button'</span>]))&#123;</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				$age = $_POST[<span class="string">'age'</span>];</span><br><span class="line">				<span class="keyword">if</span> ($age&lt;<span class="number">20</span> || $age&gt;<span class="number">30</span>) &#123;</span><br><span class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'年龄必须在20到30之间'</span>);<span class="comment">//抛出异常类</span></span><br><span class="line">					<span class="keyword">echo</span> <span class="string">'错误抛出后这里不会再执行了'</span>;</span><br><span class="line">				&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">					<span class="keyword">echo</span> <span class="string">'青春年少，用行动做一辈子不能被注定的事！'</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;<span class="keyword">catch</span>(<span class="keyword">Exception</span> $e)&#123;  <span class="comment">//数据类型约束，只能是Exception</span></span><br><span class="line">				<span class="comment">//catch 用来捕获错误</span></span><br><span class="line">				<span class="keyword">echo</span> <span class="string">'错误信息：'</span>.$e-&gt;getMessage().<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">				<span class="keyword">echo</span> <span class="string">'异常码：'</span>.$e-&gt;getCode().<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">				<span class="keyword">echo</span> <span class="string">'当前文件：'</span>.$e-&gt;getFile().<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">				<span class="keyword">echo</span> <span class="string">'异常行号：'</span>.$e-&gt;getLine().<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	 <span class="meta">?&gt;</span></span><br><span class="line">	 &lt;form action=<span class="string">""</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">	 	请输入年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span>&gt;&lt;br&gt;</span><br><span class="line">	 	&lt;input type=<span class="string">"submit"</span> name=<span class="string">"button"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">	 &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>PHP错误</tag>
        <tag>PHP异常</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP - 文件上传 | 缩略图</title>
    <url>/2015/20151008-1.html</url>
    <content><![CDATA[<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><hr>
<h3 id="表单的enctype属性："><a href="#表单的enctype属性：" class="headerlink" title="表单的enctype属性："></a>表单的enctype属性：</h3><ul>
<li><code>application/x-www-fomr-urlencoded</code> ：表示表单先服务器传输的文件数据。这是默认格式。(将表单的数据转成XML格式向服务器传输)</li>
<li><code>multipart/form-data</code> ：符合数据，告知浏览器表单中是符合数据（字符串，二进制文件）</li>
<li><code>text/plain</code>：用于向服务器传输大量文本，效率高，但时安全性低，用于发送邮件<br>表示表单传输的数据类型</li>
</ul>
<p><strong>表单文件域</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"上传"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="超全局变量"><a href="#超全局变量" class="headerlink" title="超全局变量"></a><strong>超全局变量</strong></h3><p><code>$_FILES</code><br><code>$_FILES[][&#39;name&#39;]</code> ：上传文件名<br><code>$_FILES[][&#39;size&#39;]</code>    ：文件上传的大小</p>
<p><strong><code>$_FILES[][&#39;error&#39;]</code>    ：文件上传的错误号 0，1，2，3，4，6，7</strong></p>
<blockquote>
<p>UPLOAD_ERR_OK：值为 0，没有错误发生，文件上传成功。<br><code>UPLOAD_ERR_INI_SIZE</code> ： 值为 1，上传的文件超过了 php.ini 中 <code>upload_max_filesize</code> 选项限制的值。<br><code>UPLOAD_ERR_FORM_SIZE</code>：值为 2，上传文件的大小超过了 HTML 表单中 <code>MAX_FILE_SIZE</code> 选项指定的值。<code>&lt;input type=&#39;hidden&#39; name=&#39;MAX_FILE_SIZE&#39; value=&#39;2&#39;&gt;</code>,隐藏域必须在文件域前面才起作用。<br><code>UPLOAD_ERR_PARTIAL</code>：值为 3，文件只有部分被上传。<br><code>UPLOAD_ERR_NO_FILE</code>：值为 4，没有文件被上传。<br><code>UPLOAD_ERR_NO_TMP_DIR</code>：值为 6，找不到临时文件夹。PHP 4.3.10 和 PHP 5.0.3 引进。<br><code>UPLOAD_ERR_CANT_WRITE</code>：值为 7，文件写入失败。PHP 5.1.0 引进。</p>
</blockquote>
<p>补充：</p>
<blockquote>
<p>表单允许POST传输的最大值：<br><code>post_max_size = 8M</code></p>
</blockquote>
<p><strong><code>$_FILES[][&#39;type&#39;]</code>    ：上传文件格式，返回MIMIE格式 语法：类型/格式</strong><br><strong><code>$_FILES[][&#39;tmp&#39;]</code>    ：文件上传的临时目录</strong> </p>
<blockquote>
<p><code>upload_tmp_dir=&#39;F:\wamp\tmp&#39;</code>  临时目录地址</p>
</blockquote>
<p>php.ini 配置文件<br><code>file_uploads = On</code> 是否允许文件上传<br><code>max_file_uploads = 20</code> 同时最多允许上传20个文件</p>
<h3 id="move-uploaded-file-移动上传文件"><a href="#move-uploaded-file-移动上传文件" class="headerlink" title="move_uploaded_file()移动上传文件"></a><strong>move_uploaded_file()移动上传文件</strong></h3><p><code>bool move_uploaded_file ( string $filename , string $destination )</code><br><code>$filename</code>：上传的文件的文件名。<br><code>$destination</code>：移动文件到这个位置。</p>
<p><strong>常用函数</strong><br><code>bool is_uploaded_file ( string $filename )</code> — 判断文件是否是通过 HTTP POST 上传的<br><code>is_uploaded_file($_FILES[&#39;userfile&#39;][&#39;tmp_name&#39;])</code>：用来确保恶意的用户无法欺骗脚本去访问本不能访问的文件，例如 /etc/passwd</p>
<p><strong>文件名截取</strong><br>方法一：<code>strrchr($filename,&#39;.&#39;);</code> 从最后出现的点截取到末尾<br>方法二：pathinfo($filename); 通过文件路径返回文件信息</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$path_parts = pathinfo(<span class="string">'/www/htdocs/inc/lib.inc.php'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $path_parts[<span class="string">'dirname'</span>], <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> $path_parts[<span class="string">'basename'</span>], <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> $path_parts[<span class="string">'extension'</span>], <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> $path_parts[<span class="string">'filename'</span>], <span class="string">"\n"</span>; <span class="comment">// since PHP 5.2.0</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">/www/htdocs/inc</span><br><span class="line">lib.inc.php</span><br><span class="line">php</span><br><span class="line">lib.inc</span><br></pre></td></tr></table></figure>
<blockquote>
<p>以上两种方法方法可以被伪装（强制修改文件扩展名）</p>
</blockquote>
<p>方法三：开启<code>fileinfo</code>扩展<code>extension_fileinfo.dll</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$finfo = finfo_open(FILEINFO_MIME); //创建finfo对象，用来匹配文件</span><br><span class="line">$info = finfo_file($finfo,&apos;F:/image.jpg&apos;);//通过对象匹配文件</span><br><span class="line">var_dump($info);//显示文件信息</span><br></pre></td></tr></table></figure>
<p>文件上传注意事项：</p>
<blockquote>
<p>上传文件的大小限制（文件上传<code>upload_max_filesize</code>、post大小<code>post_max_size</code>、表单隐藏域<code>&lt;input type=&#39;hidden&#39; name=&#39;MAX_FILE_SIZE&#39; value=&#39;2&#39;&gt;</code>,文件域之前）<br>文件格式验证的三种方法：<br>路径截取、pathinfo、fileinfo</p>
</blockquote>
<h3 id="生成唯一文件名"><a href="#生成唯一文件名" class="headerlink" title="生成唯一文件名"></a>生成唯一文件名</h3><p>time().rand(100,999).strrchr($path,’.’);</p>
<p>uniqid().strrchar($path,’.’);</p>
<blockquote>
<p><code>string uniqid ([ string $prefix = &quot;&quot; [, bool $more_entropy = false ]] )</code>,可选前缀<code>prefix</code>、基于当前时间微秒数的唯一ID。设置第二个参数<code>more_entropy</code>为<code>TRUE</code>，返回唯一ID更具唯一性。</p>
</blockquote>
<h3 id="优化文件上传"><a href="#优化文件上传" class="headerlink" title="优化文件上传"></a>优化文件上传</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">** +-------------------------------------------</span></span><br><span class="line"><span class="comment">** | Author: uiste [ JUST DO IT ]</span></span><br><span class="line"><span class="comment">** +-------------------------------------------</span></span><br><span class="line"><span class="comment">** | Date: 2015/10/8 Time: 19:50 </span></span><br><span class="line"><span class="comment">** +-------------------------------------------</span></span><br><span class="line"><span class="comment">** | Connection: &lt;blog.uiste.com&gt;</span></span><br><span class="line"><span class="comment">** +-------------------------------------------</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class UploadLib 文件上传类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UploadLib</span></span>&#123;</span><br><span class="line">    <span class="comment">//保存操作获取的错误信息</span></span><br><span class="line">    <span class="keyword">private</span> $error;</span><br><span class="line">    <span class="comment">//外部调用文件上传的错误信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getError</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;error;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传优化类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  array $file 文件上传获取的数组信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string       上传文件的路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">upload</span><span class="params">($file)</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 验证错误信息，保存到私有属性中</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> ($file[<span class="string">'error'</span>]!==<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">switch</span> ($file[<span class="string">'error'</span>]) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">$this</span>-&gt;error = <span class="string">"上传文件超过了配置文件中允许的最大值"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">$this</span>-&gt;error = <span class="string">"上传文件超过了表单允许的最大值"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    <span class="keyword">$this</span>-&gt;error = <span class="string">"只有部分文件上传，没有完全上传"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    <span class="keyword">$this</span>-&gt;error = <span class="string">"没有文件被上传"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                    <span class="keyword">$this</span>-&gt;error = <span class="string">"找不到临时文件"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                    <span class="keyword">$this</span>-&gt;error = <span class="string">"文件写入失败"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">$this</span>-&gt;error = <span class="string">"其它未知错误"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 验证文件类型</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> array $allow_types 允许上传的文件类型</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> resource $finfo MIME资源，用于finfo_file匹配需求</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> string $info 文件类型与编码信息的字符串</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> array $type_mime 截取mime文件类型</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        $allow_types = <span class="keyword">array</span>(<span class="string">"image/jpeg"</span>,<span class="string">"image/png"</span>,<span class="string">"image/gif"</span>);</span><br><span class="line">        $finfo = finfo_open(FILEINFO_MIME);</span><br><span class="line">        $info = finfo_file($finfo, $file[<span class="string">'tmp_name'</span>]);</span><br><span class="line">        $info_array = explode(<span class="string">';'</span>,$info);</span><br><span class="line">        $type_mime = $info_array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (!in_array($type_mime,$allow_types)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;error = <span class="string">"文件类型错误，不能上传"</span>.$type_mime.<span class="string">"类型的文件"</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 验证文件类型</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> byte $file['size'] 上传文件的大小</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> byte $GLOBALS['config']['file']['allow_size'] 网站允许上传的文件大小</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> ($file[<span class="string">'size'</span>]&gt;$GLOBALS[<span class="string">'config'</span>][<span class="string">'file'</span>][<span class="string">'allow_size'</span>]) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;error = <span class="string">"上传文件大小是:"</span>.number_format($file[<span class="string">'size'</span>]/<span class="number">1024</span>/<span class="number">1024</span>,<span class="number">2</span>).<span class="string">"M;超过了网站允许的最大值:"</span>.number_format($GLOBALS[<span class="string">'config'</span>][<span class="string">'file'</span>][<span class="string">'allow_size'</span>]/<span class="number">1024</span>/<span class="number">1024</span>,<span class="number">2</span>).<span class="string">"M"</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 验证文件是否通过HTTP POST上传</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (!is_uploaded_file($file[<span class="string">'tmp_name'</span>])) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;error = <span class="string">"非法上传文件，必须通过HTTP上传"</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 创建上传文件夹</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> array $type 拆分MIME类型文件类型与文件格式</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> string $folder_set 定义级联文件夹</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> string $folder_path 网站配置上传文件路径与级联路径后的全路径</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> string $file_name 上传文件重新生成的唯一文件名</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> string $file_path 文件全路径，包含文件名</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        $type = explode(<span class="string">'/'</span>, $type_mime);<span class="comment">//获取的文件类型与文件格式两个值</span></span><br><span class="line">        $folder_set = $type[<span class="number">0</span>].DS.$type[<span class="number">1</span>].DS.date(<span class="string">'Ym'</span>).DS;</span><br><span class="line">        $folder_path = $GLOBALS[<span class="string">'config'</span>][<span class="string">'file'</span>][<span class="string">'upload_path'</span>].DS.$folder_set;</span><br><span class="line">        $file_name = uniqid(<span class="string">''</span>,<span class="keyword">true</span>).<span class="string">'.'</span>.$type[<span class="number">1</span>];</span><br><span class="line">        $file_path = $folder_path.$file_name;</span><br><span class="line">        <span class="keyword">if</span> (!file_exists($folder_path)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mkdir($folder_path,<span class="number">0777</span>,<span class="keyword">true</span>)) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;error = <span class="string">"上传文件夹创建失败"</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//上传文件</span></span><br><span class="line">        <span class="keyword">if</span> (move_uploaded_file($file[<span class="string">'tmp_name'</span>], $file_path)) &#123;</span><br><span class="line">            <span class="keyword">return</span> $folder_set.$file_name;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;error = <span class="string">"文件上传失败"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h3><p>表单命名以数组的形式，接收到的数据，按相同的<strong>属性</strong>组成一个索引数组</p>
<h1 id="缩略图"><a href="#缩略图" class="headerlink" title="缩略图"></a>缩略图</h1><hr>
<p><code>bool imagecopyresampled ( resource $dst_image , resource $src_image , int $dst_x , int $dst_y , int $src_x , int $src_y , int $dst_w , int $dst_h , int $src_w , int $src_h )</code><br>重采样拷贝部分图像并调整大小</p>
<blockquote>
<p>dst_image：目标图象连接资源。<br>src_image：源图象连接资源。<br>dst_x：目标 X 坐标点。<br>dst_y：目标 Y 坐标点。<br>src_x：源的 X 坐标点。<br>src_y：源的 Y 坐标点。<br>dst_w：目标宽度。<br>dst_h：目标高度。<br>src_w：源图象的宽度。<br>src_h：源图象的高度</p>
</blockquote>
<h1 id="等比缩略图"><a href="#等比缩略图" class="headerlink" title="等比缩略图"></a>等比缩略图</h1><hr>
<p>思想：按图的长宽比例进行比较，源图的比例大的为标准，短边进行等比压缩。</p>
<blockquote>
<p>压缩目标图边的长度=源图缩放边的长度*目标图标准边长度/源图标准边的长度</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">** +-------------------------------------------</span></span><br><span class="line"><span class="comment">** | Author: uiste [ JUST DO IT ]</span></span><br><span class="line"><span class="comment">** +-------------------------------------------</span></span><br><span class="line"><span class="comment">** | Date: 2015/10/8 Time: 19:50 </span></span><br><span class="line"><span class="comment">** +-------------------------------------------</span></span><br><span class="line"><span class="comment">** | Connection: &lt;blog.uiste.com&gt;</span></span><br><span class="line"><span class="comment">** +-------------------------------------------</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class ThumbLib 生成缩略图</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThumbLib</span></span>&#123;</span><br><span class="line">    <span class="comment">//保存操作获取的错误信息</span></span><br><span class="line">    <span class="keyword">private</span> $error;</span><br><span class="line">    <span class="comment">//外部调用文件上传的错误信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getError</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;error;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成缩略图</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $src_path 源图路径资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $max_w 缩略图的最大宽度，若调用时不传递就直接使用配置文件的大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $max_h 缩略图的最大高度，同上</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bool $is_ration 是否等比缩放</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $prefix 缩略图文件名前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string 返回缩略图路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">thumb</span><span class="params">($src_path,$max_w=<span class="string">''</span>,$max_h=<span class="string">''</span>,$is_ratio=true,$prefix=<span class="string">'small_'</span>)</span></span>&#123;</span><br><span class="line">        $max_w = $max_w!=<span class="string">''</span> ? $max_w : $GLOBALS[<span class="string">'config'</span>][<span class="string">'file'</span>][<span class="string">'thumb_w'</span>] ;</span><br><span class="line">        $max_h = $max_h!=<span class="string">''</span>	? $max_h : $GLOBALS[<span class="string">'config'</span>][<span class="string">'file'</span>][<span class="string">'thumb_h'</span>] ;</span><br><span class="line">        $ext = strtolower(strrchr($src_path,<span class="string">'.'</span>));<span class="comment">//获取文件的后缀</span></span><br><span class="line">        $type = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">switch</span> ($ext) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'.jpg'</span>:</span><br><span class="line">                $type = <span class="string">'jpeg'</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'.jpeg'</span>:</span><br><span class="line">                $type = <span class="string">'jpeg'</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'.png'</span>:</span><br><span class="line">                $type = <span class="string">'png'</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'.gif'</span>:</span><br><span class="line">                $type = <span class="string">'gif'</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">$this</span>-&gt;error = <span class="string">"不支持该文件类型"</span>.$ext;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $open_fn = <span class="string">'imagecreatefrom'</span>.$type; <span class="comment">//拼接函数名</span></span><br><span class="line">        <span class="comment">// 创建缩略图画布</span></span><br><span class="line">        $dst_img = imagecreatetruecolor($max_w, $max_h);</span><br><span class="line">        <span class="comment">// 打开源图片资源</span></span><br><span class="line">        $src_path_all = $GLOBALS[<span class="string">'config'</span>][<span class="string">'file'</span>][<span class="string">'upload_path'</span>].DS.$src_path;</span><br><span class="line">        <span class="keyword">if</span>(!$src_img = $open_fn($src_path_all))&#123;</span><br><span class="line">           <span class="keyword">$this</span>-&gt;error = <span class="string">"源图路径错误或者不全"</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $src_w = imagesx($src_img);</span><br><span class="line">        $src_h = imagesy($src_img);</span><br><span class="line">        <span class="keyword">if</span> ($is_ratio) &#123;</span><br><span class="line">            <span class="keyword">if</span> ($src_w/$src_h&gt;$max_w/$max_h) &#123;</span><br><span class="line">                <span class="comment">#若源图的宽度较长，则等比缩放高度</span></span><br><span class="line">                $dst_w = $max_w;</span><br><span class="line">                $dst_h = $dst_w*$src_h/$src_w;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">#如源图的高度较长，则等比缩放宽度</span></span><br><span class="line">                $dst_h = $max_h;</span><br><span class="line">                $dst_w = $dst_h*$src_w/$src_h;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 求目标图的坐标</span></span><br><span class="line">        $dst_x = (int)(($max_w-$dst_w)/<span class="number">2</span>);</span><br><span class="line">        $dst_y = (int)(($max_h-$dst_h)/<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 生成缩略图</span></span><br><span class="line">        imagecopyresampled($dst_img, $src_img, $dst_x, $dst_y, <span class="number">0</span>, <span class="number">0</span>, $dst_w, $dst_h, $src_w, $src_h);</span><br><span class="line">        <span class="comment">// 保存缩略图</span></span><br><span class="line">        $folderpath = dirname($src_path);<span class="comment">//获取目录地址</span></span><br><span class="line">        $filename = basename($src_path); <span class="comment">//获取文件名</span></span><br><span class="line">        $small_path = $GLOBALS[<span class="string">'config'</span>][<span class="string">'file'</span>][<span class="string">'upload_path'</span>].DS.$folderpath.DS.$prefix.$filename; <span class="comment">//缩略图的全路径</span></span><br><span class="line">        $save_fn = <span class="string">'image'</span>.$type;</span><br><span class="line">        $save_fn($dst_img,$small_path);</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        imagedestroy($src_img);</span><br><span class="line">        imagedestroy($dst_img);</span><br><span class="line">        <span class="comment">// 返回缩略图保存路径</span></span><br><span class="line">        <span class="keyword">return</span> $folderpath.DS.$prefix.$filename;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>PHP思想养成</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP - 递归实现无限极联动</title>
    <url>/2015/20151007-1.html</url>
    <content><![CDATA[<h1 id="递归实现无限极联动"><a href="#递归实现无限极联动" class="headerlink" title="递归实现无限极联动"></a>递归实现无限极联动</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">mysql_connect(<span class="string">'localhost'</span>,<span class="string">'root'</span>,<span class="string">'aa'</span>);</span><br><span class="line">mysql_select_db(<span class="string">'php6'</span>);</span><br><span class="line">mysql_query(<span class="string">'set names utf8'</span>);</span><br><span class="line"><span class="comment">//获取所有类别</span></span><br><span class="line">$sql=<span class="string">'select * from category'</span>;</span><br><span class="line">$rs=mysql_query($sql);</span><br><span class="line"><span class="comment">//将资源转成二维数组</span></span><br><span class="line">$list=<span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">while</span>($rows=mysql_fetch_assoc($rs)) &#123;</span><br><span class="line">	$list[]=$rows;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*将二维数组按树形结构显示【递归】</span></span><br><span class="line"><span class="comment">*<span class="doctag">@param</span> $list array 存放所有类别的二维数组</span></span><br><span class="line"><span class="comment">*<span class="doctag">@param</span> $parentid int 在数组中查找属于某个父类的子级</span></span><br><span class="line"><span class="comment">*<span class="doctag">@param</span> $deep int 元素的缩进深度</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createTree</span><span class="params">($list,$parentid=<span class="number">0</span>,$deep=<span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> $tree=<span class="keyword">array</span>();	<span class="comment">//声明一个静态数组，这样在整个递归过程中一直存在</span></span><br><span class="line">	<span class="keyword">foreach</span>($list <span class="keyword">as</span> $rows) &#123;</span><br><span class="line">		<span class="keyword">if</span>($rows[<span class="string">'parentid'</span>]==$parentid)&#123;</span><br><span class="line">			$rows[<span class="string">'deep'</span>]=$deep;</span><br><span class="line">			$tree[]=$rows;</span><br><span class="line">			createTree($list,$rows[<span class="string">'cat_id'</span>],$deep+<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> $tree;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">$array=createTree($list);</span><br><span class="line"><span class="keyword">foreach</span>($array <span class="keyword">as</span> $rows) &#123;</span><br><span class="line">	<span class="comment">//str_repeat()：字符串重复</span></span><br><span class="line">	<span class="keyword">echo</span> str_repeat(<span class="string">'&amp;nbsp;'</span>,$rows[<span class="string">'deep'</span>]*<span class="number">20</span>),$rows[<span class="string">'cat_name'</span>],<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="二级联动"><a href="#二级联动" class="headerlink" title="二级联动"></a>二级联动</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//连接数据库</span></span><br><span class="line">mysql_connect(<span class="string">'localhost'</span>,<span class="string">'root'</span>,<span class="string">'aa'</span>);</span><br><span class="line">mysql_select_db(<span class="string">'php6'</span>);</span><br><span class="line">mysql_query(<span class="string">'set names utf8'</span>);</span><br><span class="line"><span class="comment">//获取第一级</span></span><br><span class="line">$sql=<span class="string">"select * from category where parentid=0"</span>;</span><br><span class="line">$rs1=mysql_query($sql);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;select name=<span class="string">""</span>&gt;</span><br><span class="line">	<span class="meta">&lt;?php</span></span><br><span class="line">	<span class="keyword">while</span>($rows1=mysql_fetch_assoc($rs1)):</span><br><span class="line">	<span class="meta">?&gt;</span></span><br><span class="line">		&lt;optgroup label=<span class="string">"&lt;?php echo $rows1['cat_name']?&gt;"</span>&gt;</span><br><span class="line">			<span class="meta">&lt;?php</span></span><br><span class="line">				$sql=<span class="string">"select * from category where parentid="</span>.$rows1[<span class="string">'cat_id'</span>];</span><br><span class="line">				$rs2=mysql_query($sql);</span><br><span class="line">				<span class="keyword">while</span>($rows2=mysql_fetch_assoc($rs2)):</span><br><span class="line">			<span class="meta">?&gt;</span></span><br><span class="line">				&lt;option value=<span class="string">"&lt;?php echo $rows2['cat_id']?&gt;"</span>&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> $rows2[<span class="string">'cat_name'</span>]<span class="meta">?&gt;</span>&lt;/option&gt;</span><br><span class="line">			<span class="meta">&lt;?php</span></span><br><span class="line">				<span class="keyword">endwhile</span>;</span><br><span class="line">			<span class="meta">?&gt;</span></span><br><span class="line">		&lt;/optgroup&gt;</span><br><span class="line">	<span class="meta">&lt;?php</span></span><br><span class="line">	<span class="keyword">endwhile</span>;</span><br><span class="line">	<span class="meta">?&gt;</span></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>
<h1 id="三级联动"><a href="#三级联动" class="headerlink" title="三级联动"></a>三级联动</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*<span class="doctag">@param</span> cat1 int 一级的id</span></span><br><span class="line"><span class="comment">*<span class="doctag">@param</span> cat2 int 二级的id</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jump</span><span class="params">(cat1,cat2)</span> </span>&#123;</span><br><span class="line">	location.href=<span class="string">'?cat1='</span>+cat1+<span class="string">'&amp;cat2='</span>+cat2;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	mysql_connect(<span class="string">'localhost'</span>,<span class="string">'root'</span>,<span class="string">'aa'</span>);</span><br><span class="line">	mysql_select_db(<span class="string">'php6'</span>);</span><br><span class="line">	mysql_query(<span class="string">'set names utf8'</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//获取一级和二级的编号</span></span><br><span class="line">	$cat1=<span class="keyword">isset</span>($_GET[<span class="string">'cat1'</span>])?(int)$_GET[<span class="string">'cat1'</span>]:<span class="string">''</span>;	<span class="comment">//获取传递的一级编号</span></span><br><span class="line">	$cat2=<span class="keyword">isset</span>($_GET[<span class="string">'cat2'</span>])?(int)$_GET[<span class="string">'cat2'</span>]:<span class="string">''</span>;	<span class="comment">//获取传递的二级编号</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!--一级--&gt;</span><br><span class="line">&lt;select id=<span class="string">"cat1"</span> onchange=<span class="string">'jump(this.value,"")'</span>&gt;</span><br><span class="line">&lt;option value=<span class="string">""</span>&gt;---请选择---&lt;/option&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	$sql=<span class="string">"select * from category where parentid=0"</span>;</span><br><span class="line">	$rs=mysql_query($sql);</span><br><span class="line">	<span class="keyword">while</span>($rows=mysql_fetch_assoc($rs)):</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">	&lt;option value=<span class="string">"&lt;?php echo $rows['cat_id']?&gt;"</span> <span class="meta">&lt;?php</span> <span class="keyword">echo</span> $cat1==$rows[<span class="string">'cat_id'</span>]?<span class="string">'selected'</span>:<span class="string">''</span><span class="meta">?&gt;</span>&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> $rows[<span class="string">'cat_name'</span>]<span class="meta">?&gt;</span>&lt;/option&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="keyword">endwhile</span>;</span><br><span class="line"><span class="meta">?&gt;</span>	</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;!--二级--&gt;</span><br><span class="line">&lt;select id=<span class="string">"cat2"</span> onchange=<span class="string">'jump(document.getElementById("cat1").value,this.value)'</span>&gt;</span><br><span class="line">&lt;option value=<span class="string">""</span>&gt;---请选择---&lt;/option&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'cat1'</span>])):</span><br><span class="line">		$sql=<span class="string">"select * from category where parentid=$cat1"</span>;</span><br><span class="line">		$rs=mysql_query($sql);</span><br><span class="line">		<span class="keyword">while</span>($rows=mysql_fetch_assoc($rs)):</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">		&lt;option value=<span class="string">"&lt;?php echo $rows['cat_id']?&gt;"</span> <span class="meta">&lt;?php</span> <span class="keyword">echo</span> $cat2==$rows[<span class="string">'cat_id'</span>]?<span class="string">'selected'</span>:<span class="string">''</span><span class="meta">?&gt;</span>&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> $rows[<span class="string">'cat_name'</span>]<span class="meta">?&gt;</span>&lt;/option&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">		<span class="keyword">endwhile</span>;</span><br><span class="line">	<span class="keyword">endif</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;select id=<span class="string">"cat3"</span>&gt;</span><br><span class="line">&lt;option value=<span class="string">""</span>&gt;---请选择---&lt;/option&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="keyword">if</span>(!<span class="keyword">empty</span>($_GET[<span class="string">'cat2'</span>])):</span><br><span class="line">		$sql=<span class="string">"select * from category where parentid=$cat2"</span>;</span><br><span class="line">		$rs=mysql_query($sql);</span><br><span class="line">		<span class="keyword">while</span>($rows=mysql_fetch_assoc($rs)):</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">		&lt;option value=<span class="string">"&lt;?php echo $rows['cat_id']?&gt;"</span> &gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> $rows[<span class="string">'cat_name'</span>]<span class="meta">?&gt;</span>&lt;/option&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">		<span class="keyword">endwhile</span>;</span><br><span class="line">	<span class="keyword">endif</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>PHP思想养成</tag>
      </tags>
  </entry>
  <entry>
    <title>异步的JavaScript和XML</title>
    <url>/2015/20151005-1.html</url>
    <content><![CDATA[<h1 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a>概念介绍</h1><p>AJAX的全称<br>Asynchronous JavaScript and XML<br>异步的JavaScript和XML</p>
<p>作用：在无需重新加载整个网页的情况下，能够更新部分网页的技术<br>通过少量数据交换，实现异部局部更新</p>
<p>应用：社交软件，地图</p>
<p>操作步骤：<br>1、利用html+css来实现页面，表达信息；<br>2、用XMLHttpRequest和web服务器进行数据的异步交换<br>3、运营js操作DOM，实现动态局部刷新；</p>
<p>XMLHttpRequest对象的出现分割了同步和异步。XMLHttpRequest出现之前是同步的，出现之后是异步的。<br>同步：页面请求实时传给服务器，导致必填数据没有填的时候，要回到页面上重新从头填写，耗时长、客户体验差。<br>异步：在页面必填项写上必填选项，不用通过传给服务器判断必填内容是否已经填写完整，耗时短、用户体验强。</p>
<h1 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h1><p>一个完整地HTTP请求过程，通常有7个步骤<br>1.建立TCP连接<br>2.Web浏览器向Web服务器发送请求命令<br>3.Web浏览器发送请求头信息<br>4.Web服务器应答<br>5.Web服务器发送应答头信息<br>6.Web服务器向浏览器发送数据<br>7.Web服务器关闭TCP连接</p>
<p>一个HTTP请求一般由四部分组成<br>1.HTTP请求的方法或动作，比如是GET还是POST请求<br>2.正在请求的URL，总得知道请求的地址是什么吧<br>3.请求头，包含一些客户端环境信息，身份验证信息等<br>4.请求体，也就是请求正文，请求正文中可以包含客户提交的查询字符串信息，表单信息等等</p>
<p>一个HTTP响应一般由三部分组成<br>1.一个数字和文字组成的状态码，用来显示请求是成功还是失败<br>2.响应头，响应头也和请求头一样包含许多有用的信息，例如服务器类型、日期时间、内容类型和长度等<br>3.响应体，也就是响应正文</p>
<p>GET：</p>
<ul>
<li>一般用于信息获取</li>
<li>使用URL传递参数</li>
<li>对所发送信息的数量也有限制，一般在2000个字符</li>
</ul>
<p>POST：</p>
<ul>
<li>一般用于修改服务器上的资源</li>
<li>对所发送信息的数量无限制</li>
</ul>
<h1 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h1><p>HTTP状态码由3位数字构成，其中首位数字定义了状态码的类型：<br>1XX：信息类，表示收到Web浏览器请求，正在进一步的处理中。<br>2XX：成功，表示用户请求被正确接收，理解和处理，例如：200 OK<br>3XX：重定向，表示请求没有成功，客户必须采取进一步的动作<br>4XX：客户端错误，表示客户端提交的请求有错误，例如：400 NOT FOUND 意味着请求中所引起的文档不存在<br>5XX：服务器错误，表示服务器不能完成对请求的处理：如500</p>
<h1 id="XMLHttpRequest发送请求"><a href="#XMLHttpRequest发送请求" class="headerlink" title="XMLHttpRequest发送请求"></a>XMLHttpRequest发送请求</h1><p>var request = new XMLHttpRequset();<br><code>open(method,url,async)</code><br><code>send(string)</code></p>
<p>GET 发送请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">request.open(&apos;GET&apos;,&apos;get.php?id=55&apos;,true);</span><br><span class="line">request.send();</span><br></pre></td></tr></table></figure>
<p>POST 发送请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">request.open(&quot;POST&quot;,&quot;create.php&quot;,true);</span><br><span class="line">request.setRequestHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;);</span><br><span class="line">request.send(&quot;name=uiste&amp;sex=man&quot;);</span><br></pre></td></tr></table></figure>
<h1 id="XMLHttpRequset取得响应"><a href="#XMLHttpRequset取得响应" class="headerlink" title="XMLHttpRequset取得响应"></a>XMLHttpRequset取得响应</h1><p>responseText：获得字符串形式的响应数据<br>responseXML： 获得XML形式的响应数据<br>status和statusText：以数字和文本形式返回HTTP状态码<br>getAllResponseHeader()：获取所有的响应报头<br>getResponseHeader()：查询响应中的某个字段的值</p>
<h1 id="readyState属性"><a href="#readyState属性" class="headerlink" title="readyState属性"></a>readyState属性</h1><p>0：请求未初始化，open还没有调用<br>1：服务器连接已建立，open已经调用了<br>2：请求已接收，也就是接收到头信息了<br>3：请求处理中，也就是接收到响应主体了<br>4：请求已完成，且响应已就绪，也就是响应完成了</p>
<h1 id="源码案例"><a href="#源码案例" class="headerlink" title="源码案例"></a>源码案例</h1><p><img src="http://resoure.uiste.com/AJAX.png" alt="AJAX"></p>
<hr>
<h2 id="json"><a href="#json" class="headerlink" title="json"></a>json</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"search"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">	<span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">	request.open(<span class="string">"GET"</span>, <span class="string">"serverjson.php?number="</span> + <span class="built_in">document</span>.getElementById(<span class="string">"keyword"</span>).value);</span><br><span class="line">	request.send();</span><br><span class="line">	request.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (request.readyState===<span class="number">4</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (request.status===<span class="number">200</span>) &#123; </span><br><span class="line">				<span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(request.responseText);</span><br><span class="line">				<span class="keyword">if</span> (data.success) &#123; </span><br><span class="line">					<span class="built_in">document</span>.getElementById(<span class="string">"searchResult"</span>).innerHTML = data.msg;</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="built_in">document</span>.getElementById(<span class="string">"searchResult"</span>).innerHTML = <span class="string">"出现错误："</span> + data.msg;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				alert(<span class="string">"发生错误："</span> + request.status);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"save"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">	<span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">	request.open(<span class="string">"POST"</span>, <span class="string">"serverjson.php"</span>);</span><br><span class="line">	<span class="keyword">var</span> data = <span class="string">"name="</span> + <span class="built_in">document</span>.getElementById(<span class="string">"staffName"</span>).value </span><br><span class="line">	                  + <span class="string">"&amp;number="</span> + <span class="built_in">document</span>.getElementById(<span class="string">"staffNumber"</span>).value </span><br><span class="line">	                  + <span class="string">"&amp;sex="</span> + <span class="built_in">document</span>.getElementById(<span class="string">"staffSex"</span>).value </span><br><span class="line">	                  + <span class="string">"&amp;job="</span> + <span class="built_in">document</span>.getElementById(<span class="string">"staffJob"</span>).value;</span><br><span class="line">	request.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">	request.send(data);</span><br><span class="line">	request.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (request.readyState===<span class="number">4</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (request.status===<span class="number">200</span>) &#123; </span><br><span class="line">				<span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(request.responseText);</span><br><span class="line">				<span class="keyword">if</span> (data.success) &#123; </span><br><span class="line">					<span class="built_in">document</span>.getElementById(<span class="string">"createResult"</span>).innerHTML = data.msg;</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="built_in">document</span>.getElementById(<span class="string">"createResult"</span>).innerHTML = <span class="string">"出现错误："</span> + data.msg;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				alert(<span class="string">"发生错误："</span> + request.status);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//设置页面内容是html编码格式是utf-8</span></span><br><span class="line">header(<span class="string">"Content-Type: text/plain;charset=utf-8"</span>); </span><br><span class="line"><span class="comment">//header("Content-Type: application/json;charset=utf-8"); </span></span><br><span class="line"><span class="comment">//header("Content-Type: text/xml;charset=utf-8"); </span></span><br><span class="line"><span class="comment">//header("Content-Type: text/html;charset=utf-8"); </span></span><br><span class="line"><span class="comment">//header("Content-Type: application/javascript;charset=utf-8"); </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个多维数组，包含员工的信息，每条员工信息为一个数组</span></span><br><span class="line">$staff = <span class="keyword">array</span></span><br><span class="line">	(</span><br><span class="line">		<span class="keyword">array</span>(<span class="string">"name"</span> =&gt; <span class="string">"洪七"</span>, <span class="string">"number"</span> =&gt; <span class="string">"101"</span>, <span class="string">"sex"</span> =&gt; <span class="string">"男"</span>, <span class="string">"job"</span> =&gt; <span class="string">"总经理"</span>),</span><br><span class="line">		<span class="keyword">array</span>(<span class="string">"name"</span> =&gt; <span class="string">"郭靖"</span>, <span class="string">"number"</span> =&gt; <span class="string">"102"</span>, <span class="string">"sex"</span> =&gt; <span class="string">"男"</span>, <span class="string">"job"</span> =&gt; <span class="string">"开发工程师"</span>),</span><br><span class="line">		<span class="keyword">array</span>(<span class="string">"name"</span> =&gt; <span class="string">"黄蓉"</span>, <span class="string">"number"</span> =&gt; <span class="string">"103"</span>, <span class="string">"sex"</span> =&gt; <span class="string">"女"</span>, <span class="string">"job"</span> =&gt; <span class="string">"产品经理"</span>)</span><br><span class="line">	);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断如果是get请求，则进行搜索；如果是POST请求，则进行新建</span></span><br><span class="line"><span class="comment">//$_SERVER是一个超全局变量，在一个脚本的全部作用域中都可用，不用使用global关键字</span></span><br><span class="line"><span class="comment">//$_SERVER["REQUEST_METHOD"]返回访问页面使用的请求方法</span></span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">"REQUEST_METHOD"</span>] == <span class="string">"GET"</span>) &#123;</span><br><span class="line">	search();</span><br><span class="line">&#125; <span class="keyword">elseif</span> ($_SERVER[<span class="string">"REQUEST_METHOD"</span>] == <span class="string">"POST"</span>)&#123;</span><br><span class="line">	create();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过员工编号搜索员工</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">search</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//检查是否有员工编号的参数</span></span><br><span class="line">	<span class="comment">//isset检测变量是否设置；empty判断值为否为空</span></span><br><span class="line">	<span class="comment">//超全局变量 $_GET 和 $_POST 用于收集表单数据</span></span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">isset</span>($_GET[<span class="string">"number"</span>]) || <span class="keyword">empty</span>($_GET[<span class="string">"number"</span>])) &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">'&#123;"success":false,"msg":"参数错误"&#125;'</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//函数之外声明的变量拥有 Global 作用域，只能在函数以外进行访问。</span></span><br><span class="line">	<span class="comment">//global 关键词用于访问函数内的全局变量</span></span><br><span class="line">	<span class="keyword">global</span> $staff;</span><br><span class="line">	<span class="comment">//获取number参数</span></span><br><span class="line">	$number = $_GET[<span class="string">"number"</span>];</span><br><span class="line">	$result = <span class="string">'&#123;"success":false,"msg":"没有找到员工。"&#125;'</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//遍历$staff多维数组，查找key值为number的员工是否存在，如果存在，则修改返回结果</span></span><br><span class="line">	<span class="keyword">foreach</span> ($staff <span class="keyword">as</span> $value) &#123;</span><br><span class="line">		<span class="keyword">if</span> ($value[<span class="string">"number"</span>] == $number) &#123;</span><br><span class="line">			$result = <span class="string">'&#123;"success":true,"msg":"找到员工：员工编号：'</span> . $value[<span class="string">"number"</span>] . </span><br><span class="line">							<span class="string">'，员工姓名：'</span> . $value[<span class="string">"name"</span>] . </span><br><span class="line">							<span class="string">'，员工性别：'</span> . $value[<span class="string">"sex"</span>] . </span><br><span class="line">							<span class="string">'，员工职位：'</span> . $value[<span class="string">"job"</span>] . <span class="string">'"&#125;'</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">echo</span> $result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建员工</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//判断信息是否填写完全</span></span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">isset</span>($_POST[<span class="string">"name"</span>]) || <span class="keyword">empty</span>($_POST[<span class="string">"name"</span>])</span><br><span class="line">		|| !<span class="keyword">isset</span>($_POST[<span class="string">"number"</span>]) || <span class="keyword">empty</span>($_POST[<span class="string">"number"</span>])</span><br><span class="line">		|| !<span class="keyword">isset</span>($_POST[<span class="string">"sex"</span>]) || <span class="keyword">empty</span>($_POST[<span class="string">"sex"</span>])</span><br><span class="line">		|| !<span class="keyword">isset</span>($_POST[<span class="string">"job"</span>]) || <span class="keyword">empty</span>($_POST[<span class="string">"job"</span>])) &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">'&#123;"success":false,"msg":"参数错误，员工信息填写不全"&#125;'</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//<span class="doctag">TODO:</span> 获取POST表单数据并保存到数据库</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//提示保存成功</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'&#123;"success":true,"msg":"员工：'</span> . $_POST[<span class="string">"name"</span>] . <span class="string">' 信息保存成功！"&#125;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">	$(<span class="string">"#search"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">		$.ajax(&#123; </span><br><span class="line">		    type: <span class="string">"GET"</span>, 	</span><br><span class="line">			url: <span class="string">"http://127.0.0.1:8080/ajaxdemo/serverjson2.php?number="</span> + $(<span class="string">"#keyword"</span>).val(),</span><br><span class="line">			dataType: <span class="string">"json"</span>,</span><br><span class="line">			success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">				<span class="keyword">if</span> (data.success) &#123; </span><br><span class="line">					$(<span class="string">"#searchResult"</span>).html(data.msg);</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					$(<span class="string">"#searchResult"</span>).html(<span class="string">"出现错误："</span> + data.msg);</span><br><span class="line">				&#125;  </span><br><span class="line">			&#125;,</span><br><span class="line">			error: <span class="function"><span class="keyword">function</span>(<span class="params">jqXHR</span>)</span>&#123;     </span><br><span class="line">			   alert(<span class="string">"发生错误："</span> + jqXHR.status);  </span><br><span class="line">			&#125;,     </span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;);</span><br><span class="line">	$(<span class="string">"#save"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">		$.ajax(&#123; </span><br><span class="line">		    type: <span class="string">"POST"</span>, 	</span><br><span class="line">			url: <span class="string">"serverjson.php"</span>,</span><br><span class="line">			data: &#123;</span><br><span class="line">				name: $(<span class="string">"#staffName"</span>).val(), </span><br><span class="line">				number: $(<span class="string">"#staffNumber"</span>).val(), </span><br><span class="line">				sex: $(<span class="string">"#staffSex"</span>).val(), </span><br><span class="line">				job: $(<span class="string">"#staffJob"</span>).val()</span><br><span class="line">			&#125;,</span><br><span class="line">			dataType: <span class="string">"json"</span>,</span><br><span class="line">			success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">if</span> (data.success) &#123; </span><br><span class="line">					$(<span class="string">"#createResult"</span>).html(data.msg);</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					$(<span class="string">"#createResult"</span>).html(<span class="string">"出现错误："</span> + data.msg);</span><br><span class="line">				&#125;  </span><br><span class="line">			&#125;,</span><br><span class="line">			error: <span class="function"><span class="keyword">function</span>(<span class="params">jqXHR</span>)</span>&#123;     </span><br><span class="line">			   alert(<span class="string">"发生错误："</span> + jqXHR.status);  </span><br><span class="line">			&#125;,     </span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//设置页面内容是html编码格式是utf-8</span><br><span class="line">//header(&quot;Content-Type: text/plain;charset=utf-8&quot;); </span><br><span class="line">header(&apos;Access-Control-Allow-Origin:*&apos;);</span><br><span class="line">header(&apos;Access-Control-Allow-Methods:POST,GET&apos;);</span><br><span class="line">header(&apos;Access-Control-Allow-Credentials:true&apos;); </span><br><span class="line">header(&quot;Content-Type: application/json;charset=utf-8&quot;); </span><br><span class="line">//header(&quot;Content-Type: text/xml;charset=utf-8&quot;); </span><br><span class="line">//header(&quot;Content-Type: text/html;charset=utf-8&quot;); </span><br><span class="line">//header(&quot;Content-Type: application/javascript;charset=utf-8&quot;); </span><br><span class="line"></span><br><span class="line">//定义一个多维数组，包含员工的信息，每条员工信息为一个数组</span><br><span class="line">$staff = array</span><br><span class="line">	(</span><br><span class="line">		array(&quot;name&quot; =&gt; &quot;洪七&quot;, &quot;number&quot; =&gt; &quot;101&quot;, &quot;sex&quot; =&gt; &quot;男&quot;, &quot;job&quot; =&gt; &quot;总经理&quot;),</span><br><span class="line">		array(&quot;name&quot; =&gt; &quot;郭靖&quot;, &quot;number&quot; =&gt; &quot;102&quot;, &quot;sex&quot; =&gt; &quot;男&quot;, &quot;job&quot; =&gt; &quot;开发工程师&quot;),</span><br><span class="line">		array(&quot;name&quot; =&gt; &quot;黄蓉&quot;, &quot;number&quot; =&gt; &quot;103&quot;, &quot;sex&quot; =&gt; &quot;女&quot;, &quot;job&quot; =&gt; &quot;产品经理&quot;)</span><br><span class="line">	);</span><br><span class="line"></span><br><span class="line">//判断如果是get请求，则进行搜索；如果是POST请求，则进行新建</span><br><span class="line">//$_SERVER是一个超全局变量，在一个脚本的全部作用域中都可用，不用使用global关键字</span><br><span class="line">//$_SERVER[&quot;REQUEST_METHOD&quot;]返回访问页面使用的请求方法</span><br><span class="line">if ($_SERVER[&quot;REQUEST_METHOD&quot;] == &quot;GET&quot;) &#123;</span><br><span class="line">	search();</span><br><span class="line">&#125; elseif ($_SERVER[&quot;REQUEST_METHOD&quot;] == &quot;POST&quot;)&#123;</span><br><span class="line">	create();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//通过员工编号搜索员工</span><br><span class="line">function search()&#123;</span><br><span class="line">	//检查是否有员工编号的参数</span><br><span class="line">	//isset检测变量是否设置；empty判断值为否为空</span><br><span class="line">	//超全局变量 $_GET 和 $_POST 用于收集表单数据</span><br><span class="line">	if (!isset($_GET[&quot;number&quot;]) || empty($_GET[&quot;number&quot;])) &#123;</span><br><span class="line">		echo &apos;&#123;&quot;success&quot;:false,&quot;msg&quot;:&quot;参数错误&quot;&#125;&apos;;</span><br><span class="line">		return;</span><br><span class="line">	&#125;</span><br><span class="line">	//函数之外声明的变量拥有 Global 作用域，只能在函数以外进行访问。</span><br><span class="line">	//global 关键词用于访问函数内的全局变量</span><br><span class="line">	global $staff;</span><br><span class="line">	//获取number参数</span><br><span class="line">	$number = $_GET[&quot;number&quot;];</span><br><span class="line">	$result = &apos;&#123;&quot;success&quot;:false,&quot;msg&quot;:&quot;没有找到员工。&quot;&#125;&apos;;</span><br><span class="line">	</span><br><span class="line">	//遍历$staff多维数组，查找key值为number的员工是否存在，如果存在，则修改返回结果</span><br><span class="line">	foreach ($staff as $value) &#123;</span><br><span class="line">		if ($value[&quot;number&quot;] == $number) &#123;</span><br><span class="line">			$result = &apos;&#123;&quot;success&quot;:true,&quot;msg&quot;:&quot;找到员工：员工编号：&apos; . $value[&quot;number&quot;] . </span><br><span class="line">							&apos;，员工姓名：&apos; . $value[&quot;name&quot;] . </span><br><span class="line">							&apos;，员工性别：&apos; . $value[&quot;sex&quot;] . </span><br><span class="line">							&apos;，员工职位：&apos; . $value[&quot;job&quot;] . &apos;&quot;&#125;&apos;;</span><br><span class="line">			break;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    echo $result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建员工</span><br><span class="line">function create()&#123;</span><br><span class="line">	//判断信息是否填写完全</span><br><span class="line">	if (!isset($_POST[&quot;name&quot;]) || empty($_POST[&quot;name&quot;])</span><br><span class="line">		|| !isset($_POST[&quot;number&quot;]) || empty($_POST[&quot;number&quot;])</span><br><span class="line">		|| !isset($_POST[&quot;sex&quot;]) || empty($_POST[&quot;sex&quot;])</span><br><span class="line">		|| !isset($_POST[&quot;job&quot;]) || empty($_POST[&quot;job&quot;])) &#123;</span><br><span class="line">		echo &apos;&#123;&quot;success&quot;:false,&quot;msg&quot;:&quot;参数错误，员工信息填写不全&quot;&#125;&apos;;</span><br><span class="line">		return;</span><br><span class="line">	&#125;</span><br><span class="line">	//TODO: 获取POST表单数据并保存到数据库</span><br><span class="line">	</span><br><span class="line">	//提示保存成功</span><br><span class="line">	echo &apos;&#123;&quot;success&quot;:true,&quot;msg&quot;:&quot;员工：&apos; . $_POST[&quot;name&quot;] . &apos; 信息保存成功！&quot;&#125;&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="jQuery-json"><a href="#jQuery-json" class="headerlink" title="jQuery-json"></a>jQuery-json</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">$(document).ready(function()&#123; </span><br><span class="line">	$(&quot;#search&quot;).click(function()&#123; </span><br><span class="line">		$.ajax(&#123; </span><br><span class="line">		    type: &quot;GET&quot;, 	</span><br><span class="line">			url: &quot;http://127.0.0.1:8000/ajaxdemo/serverjsonp.php?number=&quot; + $(&quot;#keyword&quot;).val(),</span><br><span class="line">			dataType: &quot;jsonp&quot;,</span><br><span class="line">			jsonp: &quot;callback&quot;,</span><br><span class="line">			success: function(data) &#123;</span><br><span class="line">				if (data.success) &#123;</span><br><span class="line">					$(&quot;#searchResult&quot;).html(data.msg);</span><br><span class="line">				&#125; else &#123;</span><br><span class="line">					$(&quot;#searchResult&quot;).html(&quot;出现错误：&quot; + data.msg);</span><br><span class="line">				&#125;  </span><br><span class="line">			&#125;,</span><br><span class="line">			error: function(jqXHR)&#123;     </span><br><span class="line">			   alert(&quot;发生错误：&quot; + jqXHR.status);  </span><br><span class="line">			&#125;,     </span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;);</span><br><span class="line">	</span><br><span class="line">	$(&quot;#save&quot;).click(function()&#123; </span><br><span class="line">		$.ajax(&#123; </span><br><span class="line">		    type: &quot;POST&quot;, 	</span><br><span class="line">			url: &quot;http://127.0.0.1:8000/ajaxdemo/serverjsonp.php&quot;,</span><br><span class="line">			data: &#123;</span><br><span class="line">				name: $(&quot;#staffName&quot;).val(), </span><br><span class="line">				number: $(&quot;#staffNumber&quot;).val(), </span><br><span class="line">				sex: $(&quot;#staffSex&quot;).val(), </span><br><span class="line">				job: $(&quot;#staffJob&quot;).val()</span><br><span class="line">			&#125;,</span><br><span class="line">			dataType: &quot;json&quot;,</span><br><span class="line">			success: function(data)&#123;</span><br><span class="line">				if (data.success) &#123; </span><br><span class="line">					$(&quot;#createResult&quot;).html(data.msg);</span><br><span class="line">				&#125; else &#123;</span><br><span class="line">					$(&quot;#createResult&quot;).html(&quot;出现错误：&quot; + data.msg);</span><br><span class="line">				&#125;  </span><br><span class="line">			&#125;,</span><br><span class="line">			error: function(jqXHR)&#123;     </span><br><span class="line">			   alert(&quot;发生错误：&quot; + jqXHR.status);  </span><br><span class="line">			&#125;,     </span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//设置页面内容是html编码格式是utf-8</span><br><span class="line">//header(&quot;Content-Type: text/plain;charset=utf-8&quot;); </span><br><span class="line">header(&quot;Content-Type: application/json;charset=utf-8&quot;); </span><br><span class="line">//header(&quot;Content-Type: text/xml;charset=utf-8&quot;); </span><br><span class="line">//header(&quot;Content-Type: text/html;charset=utf-8&quot;); </span><br><span class="line">//header(&quot;Content-Type: application/javascript;charset=utf-8&quot;); </span><br><span class="line"></span><br><span class="line">//定义一个多维数组，包含员工的信息，每条员工信息为一个数组</span><br><span class="line">$staff = array</span><br><span class="line">	(</span><br><span class="line">		array(&quot;name&quot; =&gt; &quot;洪七&quot;, &quot;number&quot; =&gt; &quot;101&quot;, &quot;sex&quot; =&gt; &quot;男&quot;, &quot;job&quot; =&gt; &quot;总经理&quot;),</span><br><span class="line">		array(&quot;name&quot; =&gt; &quot;郭靖&quot;, &quot;number&quot; =&gt; &quot;102&quot;, &quot;sex&quot; =&gt; &quot;男&quot;, &quot;job&quot; =&gt; &quot;开发工程师&quot;),</span><br><span class="line">		array(&quot;name&quot; =&gt; &quot;黄蓉&quot;, &quot;number&quot; =&gt; &quot;103&quot;, &quot;sex&quot; =&gt; &quot;女&quot;, &quot;job&quot; =&gt; &quot;产品经理&quot;)</span><br><span class="line">	);</span><br><span class="line"></span><br><span class="line">//判断如果是get请求，则进行搜索；如果是POST请求，则进行新建</span><br><span class="line">//$_SERVER是一个超全局变量，在一个脚本的全部作用域中都可用，不用使用global关键字</span><br><span class="line">//$_SERVER[&quot;REQUEST_METHOD&quot;]返回访问页面使用的请求方法</span><br><span class="line">if ($_SERVER[&quot;REQUEST_METHOD&quot;] == &quot;GET&quot;) &#123;</span><br><span class="line">	search();</span><br><span class="line">&#125; elseif ($_SERVER[&quot;REQUEST_METHOD&quot;] == &quot;POST&quot;)&#123;</span><br><span class="line">	create();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//通过员工编号搜索员工</span><br><span class="line">function search()&#123;</span><br><span class="line">	$jsonp = $_GET[&quot;callback&quot;];</span><br><span class="line">	//检查是否有员工编号的参数</span><br><span class="line">	//isset检测变量是否设置；empty判断值为否为空</span><br><span class="line">	//超全局变量 $_GET 和 $_POST 用于收集表单数据</span><br><span class="line">	if (!isset($_GET[&quot;number&quot;]) || empty($_GET[&quot;number&quot;])) &#123;</span><br><span class="line">		echo $jsonp . &apos;(&#123;&quot;success&quot;:false,&quot;msg&quot;:&quot;参数错误&quot;&#125;)&apos;;</span><br><span class="line">		return;</span><br><span class="line">	&#125;</span><br><span class="line">	//函数之外声明的变量拥有 Global 作用域，只能在函数以外进行访问。</span><br><span class="line">	//global 关键词用于访问函数内的全局变量</span><br><span class="line">	global $staff;</span><br><span class="line">	//获取number参数</span><br><span class="line">	$number = $_GET[&quot;number&quot;];</span><br><span class="line">	$result = $jsonp . &apos;(&#123;&quot;success&quot;:false,&quot;msg&quot;:&quot;没有找到员工。&quot;&#125;)&apos;;</span><br><span class="line">	</span><br><span class="line">	//遍历$staff多维数组，查找key值为number的员工是否存在，如果存在，则修改返回结果</span><br><span class="line">	foreach ($staff as $value) &#123;</span><br><span class="line">		if ($value[&quot;number&quot;] == $number) &#123;</span><br><span class="line">			$result = $jsonp . &apos;(&#123;&quot;success&quot;:true,&quot;msg&quot;:&quot;找到员工：员工编号：&apos; . $value[&quot;number&quot;] .</span><br><span class="line">							&apos;，员工姓名：&apos; . $value[&quot;name&quot;] . </span><br><span class="line">							&apos;，员工性别：&apos; . $value[&quot;sex&quot;] . </span><br><span class="line">							&apos;，员工职位：&apos; . $value[&quot;job&quot;] . &apos;&quot;&#125;)&apos;;</span><br><span class="line">			break;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    echo $result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建员工</span><br><span class="line">function create()&#123;</span><br><span class="line">	//判断信息是否填写完全</span><br><span class="line">	if (!isset($_POST[&quot;name&quot;]) || empty($_POST[&quot;name&quot;])</span><br><span class="line">		|| !isset($_POST[&quot;number&quot;]) || empty($_POST[&quot;number&quot;])</span><br><span class="line">		|| !isset($_POST[&quot;sex&quot;]) || empty($_POST[&quot;sex&quot;])</span><br><span class="line">		|| !isset($_POST[&quot;job&quot;]) || empty($_POST[&quot;job&quot;])) &#123;</span><br><span class="line">		echo &apos;&#123;&quot;success&quot;:false,&quot;msg&quot;:&quot;参数错误，员工信息填写不全&quot;&#125;&apos;;</span><br><span class="line">		return;</span><br><span class="line">	&#125;</span><br><span class="line">	//TODO: 获取POST表单数据并保存到数据库</span><br><span class="line">	</span><br><span class="line">	//提示保存成功</span><br><span class="line">	echo &apos;&#123;&quot;success&quot;:true,&quot;msg&quot;:&quot;员工：&apos; . $_POST[&quot;name&quot;] . &apos; 信息保存成功！&quot;&#125;&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>AJAX</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel - 表单操作</title>
    <url>/2015/20151001-1.html</url>
    <content><![CDATA[<h1 id="静态资源管理及模板布局"><a href="#静态资源管理及模板布局" class="headerlink" title="静态资源管理及模板布局"></a>静态资源管理及模板布局</h1><h1 id="表单列表及分页实现"><a href="#表单列表及分页实现" class="headerlink" title="表单列表及分页实现"></a>表单列表及分页实现</h1><h1 id="通过表单实现新增及操作状态提示功能"><a href="#通过表单实现新增及操作状态提示功能" class="headerlink" title="通过表单实现新增及操作状态提示功能"></a>通过表单实现新增及操作状态提示功能</h1><p>设置成功之后有提示？<br>使用session的暂存数据，也就是flash，跟上一个with即可？？？</p>
<h1 id="表单验证及数据保持详解"><a href="#表单验证及数据保持详解" class="headerlink" title="表单验证及数据保持详解"></a>表单验证及数据保持详解</h1><p>控制器验证<br>Validator<br>数据保持</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//添加学生信息</span><br><span class="line">	//接收表单提交数据-create方法</span><br><span class="line">	public function create(Request $request)&#123;</span><br><span class="line">		if($request-&gt;isMethod(&apos;POST&apos;))&#123;</span><br><span class="line">			//表单验证必填项，最小2个字符，最大20字符</span><br><span class="line">			$this-&gt;validate($request,[</span><br><span class="line">				&apos;student.name&apos;	=&gt;	&apos;required|min:2|max:20&apos;,</span><br><span class="line">				&apos;student.age&apos;	=&gt;	&apos;required|integer&apos;,</span><br><span class="line">				&apos;student.sex&apos;	=&gt;	&apos;required|integer&apos;</span><br><span class="line">			]);</span><br><span class="line">			$data = $request-&gt;input(&apos;student&apos;);</span><br><span class="line">//			保存提交数据方法一</span><br><span class="line">//			$student = new Student();</span><br><span class="line">//			$student-&gt;name = $data[&apos;name&apos;];</span><br><span class="line">//			$student-&gt;age = $data[&apos;age&apos;];</span><br><span class="line">//			$student-&gt;sex = $data[&apos;sex&apos;];</span><br><span class="line">//			if($student-&gt;save())</span><br><span class="line">			if(Student::create($data))</span><br><span class="line">				retur	n redirect(&apos;student/index&apos;)-&gt;with(&apos;success&apos;,&apos;添加成功&apos;);</span><br><span class="line">//				return redirect(&apos;student/index&apos;);</span><br><span class="line">			return redirect()-&gt;back();</span><br><span class="line">		&#125;</span><br><span class="line">		return view(&apos;student.create&apos;);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h1 id="通过模型处理性别"><a href="#通过模型处理性别" class="headerlink" title="通过模型处理性别"></a>通过模型处理性别</h1><h1 id="通过表单实现修改"><a href="#通过表单实现修改" class="headerlink" title="通过表单实现修改"></a>通过表单实现修改</h1><h1 id="表单中查看详情及删除"><a href="#表单中查看详情及删除" class="headerlink" title="表单中查看详情及删除"></a>表单中查看详情及删除</h1>]]></content>
      <tags>
        <tag>laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>laravel - 控制器基础</title>
    <url>/2015/20150930-4.html</url>
    <content><![CDATA[<p>路径：<code>app/Http/Controllers</code></p>
<h1 id="基础控制器"><a href="#基础控制器" class="headerlink" title="基础控制器"></a>基础控制器</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示所给定的用户个人数据。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  int  $id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showProfile</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> view(<span class="string">'user.profile'</span>, [<span class="string">'user'</span> =&gt; User::findOrFail($id)]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以通过如下方式引导路由至对应的控制器动作：<br><code>Route::any(&#39;test1&#39;,[&#39;uses&#39;=&gt;&#39;StudentController@test1&#39;]);</code></p>
</blockquote>
<h1 id="Controller之Request"><a href="#Controller之Request" class="headerlink" title="Controller之Request"></a>Controller之Request</h1><h1 id="Controller之Session"><a href="#Controller之Session" class="headerlink" title="Controller之Session"></a>Controller之Session</h1><h1 id="Controller之Response"><a href="#Controller之Response" class="headerlink" title="Controller之Response"></a>Controller之Response</h1><h1 id="Controller之Middleware"><a href="#Controller之Middleware" class="headerlink" title="Controller之Middleware"></a>Controller之Middleware</h1><p>laravel中间件提供一个方便的机制来过滤进入应用程序的HTTP请求</p>
<h3 id="第一步新建中间件"><a href="#第一步新建中间件" class="headerlink" title="第一步新建中间件"></a>第一步新建中间件</h3><p><code>Middleware=&gt;Activity.php</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">namespace App\Http\Middleware;</span><br><span class="line">use closure;</span><br><span class="line">class Activity&#123;</span><br><span class="line">    //新建一个固定的方法handle($request,$next);</span><br><span class="line">    //next 是一个全局的包</span><br><span class="line">    //请求执行前操作，前置操作</span><br><span class="line">    //$next($request)响应</span><br><span class="line">    public function handle($request,$next)&#123;</span><br><span class="line">        if (time()&lt;strtotime(&apos;2015-10-2&apos;)) &#123;</span><br><span class="line">            return redirect(&apos;activity0&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">        return $next($request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="第二步注册中间件"><a href="#第二步注册中间件" class="headerlink" title="第二步注册中间件"></a>第二步注册中间件</h3><p><code>Kernel.php=&gt;protected $routeMiddleware</code></p>
<p><code>&#39;activity&#39; =&gt; \App\Http\Middleware\Activity::class</code></p>
<h3 id="第三步使用中间件"><a href="#第三步使用中间件" class="headerlink" title="第三步使用中间件"></a>第三步使用中间件</h3><p><code>routes.php</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    Route::any(&apos;activity0&apos;,[&apos;uses&apos;=&gt;&apos;StudentController@activity0&apos;]);</span><br><span class="line">    //使用中间件</span><br><span class="line">    Route::group([&apos;middleware&apos;=&gt;&apos;activity&apos;],function()&#123;</span><br><span class="line">        Route::any(&apos;activity1&apos;,[&apos;uses&apos;=&gt;&apos;StudentController@activity1&apos;]);</span><br><span class="line">        Route::any(&apos;activity2&apos;,[&apos;uses&apos;=&gt;&apos;StudentController@activity2&apos;]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>补充StudentController：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public function activity0()&#123;</span><br><span class="line">        return &apos;活动快要开始了，敬请期待&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    public function activity1()&#123;</span><br><span class="line">        return &apos;活动进行中，谢谢您的参与&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    public function activity2()&#123;</span><br><span class="line">        return &apos;活动仍在进行中，谢谢参与&apos;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>laravel - 路由基础</title>
    <url>/2015/20150930-3.html</url>
    <content><![CDATA[<p>laravel框架与传统框架的不同：<br>laravel框架不同于传统的MVC，传统的MVC请求一般直接对应的是控制器，laravel中的请求对应的是路由<br>laravel中的路由简单来说就是将用户的请求转发给相应的程序进行处理<br>作用就是建立URL和程序之间的映射<br>请求类型：get、post、put、patch、delete</p>
<h1 id="基本路由"><a href="#基本路由" class="headerlink" title="基本路由"></a>基本路由</h1><p>路径：<code>app/Http/routes.php</code>中定义应用中的大多数路由<br>该文件加载了<code>App\Providers\RouteServiceProvider</code>类</p>
<h3 id="GET路由"><a href="#GET路由" class="headerlink" title="GET路由"></a>GET路由</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Route::get(&apos;/&apos;, function()</span><br><span class="line">&#123;</span><br><span class="line">    return &apos;Hello World&apos;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="其它路由"><a href="#其它路由" class="headerlink" title="其它路由"></a>其它路由</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Route::post(&apos;foo/bar&apos;, function()</span><br><span class="line">&#123;</span><br><span class="line">    return &apos;Hello World&apos;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Route::put(&apos;foo/bar&apos;, function()</span><br><span class="line">&#123;</span><br><span class="line">    //</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Route::delete(&apos;foo/bar&apos;, function()</span><br><span class="line">&#123;</span><br><span class="line">    //</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="match请求注册多路由"><a href="#match请求注册多路由" class="headerlink" title="match请求注册多路由"></a>match请求注册多路由</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Route::match([&apos;get&apos;, &apos;post&apos;], &apos;/&apos;, function()</span><br><span class="line">&#123;</span><br><span class="line">    return &apos;Hello World&apos;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="any注册路由所有http请求"><a href="#any注册路由所有http请求" class="headerlink" title="any注册路由所有http请求"></a>any注册路由所有http请求</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Route::any(&apos;foo&apos;, function()</span><br><span class="line">&#123;</span><br><span class="line">    return &apos;Hello World&apos;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>路由产生 URL，可以使用 url 辅助函数来操作：<br>$url = url(‘foo’);</p>
</blockquote>
<h1 id="路由参数"><a href="#路由参数" class="headerlink" title="路由参数"></a>路由参数</h1><h3 id="基本路由参数"><a href="#基本路由参数" class="headerlink" title="基本路由参数"></a>基本路由参数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Route::get(&apos;user/&#123;id&#125;&apos;, function($id)</span><br><span class="line">&#123;</span><br><span class="line">    return &apos;User &apos;.$id;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>路由参数不能包含 - 字符。使用下划线替代 (_)。</p>
</blockquote>
<h3 id="可选择路由参数-带默认值参数"><a href="#可选择路由参数-带默认值参数" class="headerlink" title="可选择路由参数/带默认值参数"></a>可选择路由参数/带默认值参数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Route::get(&apos;user/&#123;name?&#125;&apos;, function($name = &apos;John&apos;)</span><br><span class="line">&#123;</span><br><span class="line">    return $name;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="使用正则表达式限制参数"><a href="#使用正则表达式限制参数" class="headerlink" title="使用正则表达式限制参数"></a>使用正则表达式限制参数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Route::get(&apos;user/&#123;id&#125;/&#123;name&#125;&apos;, function($id, $name)</span><br><span class="line">&#123;</span><br><span class="line">    //</span><br><span class="line">&#125;)</span><br><span class="line">-&gt;where([&apos;id&apos; =&gt; &apos;[0-9]+&apos;, &apos;name&apos; =&gt; &apos;[a-z]+&apos;]);</span><br></pre></td></tr></table></figure>
<h1 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h1><h3 id="使用as方便产生URL"><a href="#使用as方便产生URL" class="headerlink" title="使用as方便产生URL"></a>使用as方便产生URL</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Route::get(&apos;user/profile&apos;, [&apos;as&apos; =&gt; &apos;profile&apos;, function()</span><br><span class="line">&#123;</span><br><span class="line">    return route(&apos;profile&apos;);</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure>
<h3 id="为控制器方法指定路由名称"><a href="#为控制器方法指定路由名称" class="headerlink" title="为控制器方法指定路由名称"></a>为控制器方法指定路由名称</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Route::get(&apos;user/profile&apos;, [</span><br><span class="line">    &apos;as&apos; =&gt; &apos;profile&apos;, &apos;uses&apos; =&gt; &apos;UserController@showProfile&apos;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
<h1 id="路由群组"><a href="#路由群组" class="headerlink" title="路由群组"></a>路由群组</h1><h3 id="Middleware"><a href="#Middleware" class="headerlink" title="Middleware"></a>Middleware</h3><p>在群组共享属性数组的 middleware 参数定义中间件列表，这些中间件就会应用到群组内的所有路由上。中间件将会按在列表内指定的顺序执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Route::group([&apos;middleware&apos; =&gt; [&apos;foo&apos;, &apos;bar&apos;]], function()</span><br><span class="line">&#123;</span><br><span class="line">    Route::get(&apos;/&apos;, function()</span><br><span class="line">    &#123;</span><br><span class="line">        // Has Foo And Bar Middleware</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    Route::get(&apos;user/profile&apos;, function()</span><br><span class="line">    &#123;</span><br><span class="line">        // Has Foo And Bar Middleware</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="Namespaces"><a href="#Namespaces" class="headerlink" title="Namespaces"></a>Namespaces</h3><p>可以在 group 属性数组中使用 namespace 参数，指定在这群组中控制器的命名空间：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Route::group([&apos;namespace&apos; =&gt; &apos;Admin&apos;], function()</span><br><span class="line">&#123;</span><br><span class="line">    // Controllers Within The &quot;App\Http\Controllers\Admin&quot; Namespace</span><br><span class="line"></span><br><span class="line">    Route::group([&apos;namespace&apos; =&gt; &apos;User&apos;], function()</span><br><span class="line">    &#123;</span><br><span class="line">        // Controllers Within The &quot;App\Http\Controllers\Admin\User&quot; Namespace</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在默认情况下，RouteServiceProvider 包含内置您命名空间群组的 routes.php 文件，让您不须使用完整的 App\Http\Controllers 命名空间前缀就可以注册控制器路由。</p>
</blockquote>
]]></content>
      <tags>
        <tag>laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>laravel - 安装laravel框架</title>
    <url>/2015/20150930-2.html</url>
    <content><![CDATA[<p>Composer 安装 Laravel 有两种方式：</p>
<p>第一种是通过 Composer 的 create-project 命令安装 Laravel 框架，<br>第二种是先通过 Composer 安装 Laravel 安装器，然后通过安装器安装 Laravel 框架。</p>
<p>为什么 Composer 可以安装 Laravel 框架呢？</p>
<p>其实 Laravel框架也是一个 Composer包，我们可以通过如下命令查看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uiste:~ uiste$ composer show --all laravel/laravel</span><br><span class="line">No composer.json found in the current directory, showing available packages from packagist</span><br><span class="line">name     : laravel/laravel</span><br><span class="line">descrip. : The Laravel Framework.</span><br><span class="line">keywords : framework, laravel</span><br><span class="line">versions : dev-master, v5.3.10, v5.3.0, 5.2.x-dev, v5.2.31, v5.2.29, v5.2.27, v5.2.24, v5.2.23, v5.2.15, v5.2.0, 5.1.x-dev, v5.1.33, v5.1.11, v5.1.4, v5.1.3, v5.1.1, v5.1.0, 5.0.x-dev, v5.0.22, v5.0.16, v5.0.1, v5.0.0, v4.2.11, v4.2.0, v4.1.27, v4.1.18, v4.1.0, v4.0.9, v4.0.8, v4.0.7, v4.0.6, v4.0.5, v4.0.4, v4.0.0, v4.0.0-BETA4, v4.0.0-BETA3, dev-develop</span><br><span class="line">type     : project</span><br><span class="line">license  : MIT License (MIT) (OSI approved) https://spdx.org/licenses/MIT.html#licenseText</span><br><span class="line">source   : [git] https://github.com/laravel/laravel.git f4606d2bb94dc9579488df61fa3744b17e91be62</span><br><span class="line">dist     : [zip] https://packagist.phpcomposer.com/files/laravel/laravel/f4606d2bb94dc9579488df61fa3744b17e91be62.zip f4606d2bb94dc9579488df61fa3744b17e91be62</span><br><span class="line">names    : laravel/laravel</span><br><span class="line"></span><br><span class="line">autoload</span><br><span class="line">classmap</span><br><span class="line">database</span><br><span class="line">psr-4</span><br><span class="line">App\ =&gt; app/</span><br><span class="line"></span><br><span class="line">requires</span><br><span class="line">php &gt;=5.6.4</span><br><span class="line">laravel/framework 5.3.*</span><br><span class="line"></span><br><span class="line">requires (dev)</span><br><span class="line">fzaninotto/faker ~1.4</span><br><span class="line">mockery/mockery 0.9.*</span><br><span class="line">phpunit/phpunit ~5.0</span><br><span class="line">symfony/css-selector 3.1.*</span><br><span class="line">symfony/dom-crawler 3.1.*</span><br></pre></td></tr></table></figure>
<h2 id="create-project"><a href="#create-project" class="headerlink" title="create-project"></a>create-project</h2><p>第一种通过 Composer的 create-project 命令安装 Laravel 框架，</p>
<p><code>$ composer create-project laravel/laravel --prefer-dist [别名]</code></p>
<h2 id="Laravel-安装器"><a href="#Laravel-安装器" class="headerlink" title="Laravel 安装器"></a>Laravel 安装器</h2><p>第二种是先通过 Composer 安装 Laravel 安装器，然后通过安装器安装 Laravel 框架。</p>
<ol>
<li>使用 composer 全局安装 Laravel 安装器</li>
</ol>
<p><code>$ composer global require &quot;laravel/installer&quot;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uiste:~ uiste$ composer global require &quot;laravel/installer&quot;</span><br><span class="line">Changed current directory to /Users/uiste/.composer</span><br><span class="line">Using version ^1.3 for laravel/installer</span><br><span class="line">./composer.json has been updated</span><br><span class="line">Loading composer repositories with package information</span><br><span class="line">Updating dependencies (including require-dev)</span><br><span class="line">  - Installing symfony/process (v3.1.4)</span><br><span class="line">    Downloading: 100%         </span><br><span class="line"></span><br><span class="line">  - Installing symfony/polyfill-mbstring (v1.2.0)</span><br><span class="line">    Downloading: 100%         </span><br><span class="line"></span><br><span class="line">  - Installing symfony/console (v3.1.4)</span><br><span class="line">    Downloading: 100%         </span><br><span class="line"></span><br><span class="line">  - Installing guzzlehttp/promises (1.2.0)</span><br><span class="line">    Downloading: 100%         </span><br><span class="line"></span><br><span class="line">  - Installing psr/http-message (1.0.1)</span><br><span class="line">    Downloading: 100%         </span><br><span class="line"></span><br><span class="line">  - Installing guzzlehttp/psr7 (1.3.1)</span><br><span class="line">    Downloading: 100%         </span><br><span class="line"></span><br><span class="line">  - Installing guzzlehttp/guzzle (6.2.1)</span><br><span class="line">    Downloading: 100%         </span><br><span class="line"></span><br><span class="line">  - Installing laravel/installer (v1.3.4)</span><br><span class="line">    Downloading: 100%         </span><br><span class="line"></span><br><span class="line">symfony/console suggests installing symfony/event-dispatcher ()</span><br><span class="line">symfony/console suggests installing psr/log (For using the console logger)</span><br><span class="line">Writing lock file</span><br><span class="line">Generating autoload files</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>配置PATH环境变量</li>
</ol>
<p>将 <code>~/.composer/vendor/bin</code> 添加到 PATH 环境变量中，这样可执行文件 laravel 就能被你的系统检测到了。</p>
<p>编辑 <code>~/.bash_profile</code> 文件， <code>vim ~/.bash_profile</code> 加入如下代码：</p>
<p><code>export PATH=&quot;~/.composer/vendor/bin:$PATH&quot;</code></p>
<ol start="3">
<li>检测是否配置成功</li>
</ol>
<p>新打开一个终端，输入如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uiste:~ uiste$ laravel --version</span><br><span class="line">Laravel Installer version 1.3.3</span><br></pre></td></tr></table></figure>
<p>如果出现该信息，说明安装器已安装成功。</p>
<ol start="4">
<li>安装Laravel</li>
</ol>
<p>打开终端，输入如下命令即可安装：</p>
<p>$ laravel new blog</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uiste:~ uiste$ laravel new blog</span><br><span class="line"></span><br><span class="line">                               </span><br><span class="line">  [RuntimeException]           </span><br><span class="line">  Application already exists!  </span><br><span class="line">                               </span><br><span class="line"></span><br><span class="line">new [--dev] [--5.2] [--] [&lt;name&gt;]</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>安装最新的开发版本</li>
</ol>
<p>如果童鞋们对最新的开发版本比较感兴趣，可以下载进行测试，加上 –dev 参数即可：</p>
<p>$ laravel new demo –dev</p>
<hr>
<p>报错如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uiste:~ uiste$ laravel new blog</span><br><span class="line">Crafting application...</span><br><span class="line">Loading composer repositories with package information</span><br><span class="line">Installing dependencies (including require-dev) from lock file</span><br><span class="line">Your requirements could not be resolved to an installable set of packages.</span><br><span class="line"></span><br><span class="line">  Problem 1</span><br><span class="line">    - This package requires php &gt;=5.6.4 but your PHP version (5.5.36) does not satisfy that requirement.</span><br><span class="line">  Problem 2</span><br><span class="line">    - Installation request for laravel/framework v5.3.15 -&gt; satisfiable by laravel/framework[v5.3.15].</span><br><span class="line">    - laravel/framework v5.3.15 requires php &gt;=5.6.4 -&gt; your PHP version (5.5.36) does not satisfy that requirement.</span><br><span class="line">  Problem 3</span><br><span class="line">    - Installation request for phpunit/php-code-coverage 4.0.1 -&gt; satisfiable by phpunit/php-code-coverage[4.0.1].</span><br><span class="line">    - phpunit/php-code-coverage 4.0.1 requires php ^5.6 || ^7.0 -&gt; your PHP version (5.5.36) does not satisfy that requirement.</span><br><span class="line">  Problem 4</span><br><span class="line">    - Installation request for phpunit/phpunit 5.5.5 -&gt; satisfiable by phpunit/phpunit[5.5.5].</span><br><span class="line">    - phpunit/phpunit 5.5.5 requires php ^5.6 || ^7.0 -&gt; your PHP version (5.5.36) does not satisfy that requirement.</span><br><span class="line">  Problem 5</span><br><span class="line">    - Installation request for phpunit/phpunit-mock-objects 3.2.7 -&gt; satisfiable by phpunit/phpunit-mock-objects[3.2.7].</span><br><span class="line">    - phpunit/phpunit-mock-objects 3.2.7 requires php ^5.6 || ^7.0 -&gt; your PHP version (5.5.36) does not satisfy that requirement.</span><br><span class="line">  Problem 6</span><br><span class="line">    - Installation request for sebastian/code-unit-reverse-lookup 1.0.0 -&gt; satisfiable by sebastian/code-unit-reverse-lookup[1.0.0].</span><br><span class="line">    - sebastian/code-unit-reverse-lookup 1.0.0 requires php &gt;=5.6 -&gt; your PHP version (5.5.36) does not satisfy that requirement.</span><br><span class="line">  Problem 7</span><br><span class="line">    - Installation request for sebastian/object-enumerator 1.0.0 -&gt; satisfiable by sebastian/object-enumerator[1.0.0].</span><br><span class="line">    - sebastian/object-enumerator 1.0.0 requires php &gt;=5.6 -&gt; your PHP version (5.5.36) does not satisfy that requirement.</span><br><span class="line">  Problem 8</span><br><span class="line">    - Installation request for sebastian/resource-operations 1.0.0 -&gt; satisfiable by sebastian/resource-operations[1.0.0].</span><br><span class="line">    - sebastian/resource-operations 1.0.0 requires php &gt;=5.6.0 -&gt; your PHP version (5.5.36) does not satisfy that requirement.</span><br><span class="line">  Problem 9</span><br><span class="line">    - Installation request for sebastian/version 2.0.0 -&gt; satisfiable by sebastian/version[2.0.0].</span><br><span class="line">    - sebastian/version 2.0.0 requires php &gt;=5.6 -&gt; your PHP version (5.5.36) does not satisfy that requirement.</span><br><span class="line"></span><br><span class="line">Application ready! Build something amazing.</span><br></pre></td></tr></table></figure>
<h2 id="Mac-OS-X-升级PHP版本"><a href="#Mac-OS-X-升级PHP版本" class="headerlink" title="Mac OS X 升级PHP版本"></a>Mac OS X 升级PHP版本</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><ol>
<li>查询本机PHP版本</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uiste:~ uiste$ php -v</span><br><span class="line">PHP 5.5.36 (cli) (built: May 29 2015 01:07:06) </span><br><span class="line">Copyright (c) 1997-2015 The PHP Group</span><br><span class="line">Zend Engine v2.5.0, Copyright (c) 1998-2015 Zend Technologies</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>然后我们根据实际需求去升级</li>
</ol>
<p><code>curl -s http://php-osx.liip.ch/install.sh | bash -s 5.6.4</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uiste:~ uiste$ curl -s http://php-osx.liip.ch/install.sh | bash -s 5.6.4</span><br><span class="line">Detected OS X El Capitan 10.11. All ok.</span><br><span class="line">Get packager.tgz</span><br><span class="line">Unpack packager.tgz</span><br><span class="line">Please type in your password, as we want to install this into /usr/local</span><br><span class="line"></span><br><span class="line">WARNING: Improper use of the sudo command could lead to data loss</span><br><span class="line">or the deletion of important system files. Please double-check your</span><br><span class="line">typing when using sudo. Type &quot;man sudo&quot; for more information.</span><br><span class="line"></span><br><span class="line">To proceed, enter your password, or type Ctrl-C to abort.</span><br><span class="line"></span><br><span class="line">Password:</span><br><span class="line">Start packager (may take some time)</span><br><span class="line">downloading https://s3-eu-west-1.amazonaws.com/php-osx.liip.ch/install/5.6.4-frontenddev-latest.dat</span><br><span class="line">downloading https://s3-eu-west-1.amazonaws.com/php-osx.liip.ch/&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">downloading https://s3-eu-west-1.amazonaws.com/php-osx.liip.ch/5.6.4-frontenddev.tar.bz2</span><br><span class="line">downloading https://s3-eu-west-1.amazonaws.com/php-osx.liip.ch/5.6.4-frontenddev.tar.gz</span><br><span class="line">downloading https://s3-eu-west-1.amazonaws.com/php-osx.liip.ch/5.6.4-frontenddev.tgz</span><br><span class="line">Did or could not download package: 5.6.4-frontenddev</span><br></pre></td></tr></table></figure>
<blockquote>
<p>中途会提示你输入密码，下载的 PHP 会放置到 /usr/local 下，但不会覆盖原系统 PHP<br>如上所升级的 5.5，PHP 会位于 /usr/local/php5 中，并自动链接到 /etc/apache2/ 下的配置文件<br>然后再新建一个 PHP 文件，写上 phpinfo(); 浏览器访问看看，版本已经升级。</p>
</blockquote>
]]></content>
      <tags>
        <tag>laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>laravel - Composer 安装</title>
    <url>/2015/20150930-1.html</url>
    <content><![CDATA[<h1 id="Composer-安装（一）"><a href="#Composer-安装（一）" class="headerlink" title="Composer 安装（一）"></a>Composer 安装（一）</h1><h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><p>Composer 是 PHP 用来管理依赖（dependency）关系的工具。你可以在自己的项目中声明所依赖的外部工具库（libraries），Composer 会帮你安装这些依赖的库文件。</p>
<h3 id="二、为什么要使用Composer"><a href="#二、为什么要使用Composer" class="headerlink" title="二、为什么要使用Composer"></a>二、为什么要使用Composer</h3><p>你有一个项目依赖于若干个库。<br>其中一些库依赖于其他库。<br>你声明你所依赖的东西。<br>Composer 会找出哪个版本的包需要安装，并安装它们（将它们下载到你的项目中）。</p>
<h3 id="三、安装方式"><a href="#三、安装方式" class="headerlink" title="三、安装方式"></a>三、安装方式</h3><p>通用安装方式（Win、Linux、Mac都能用），使用composer.phar文件（其实就是下载composer.phar文件，不需要翻墙）</p>
<ul>
<li><p>直接下载composer.phar文件<br><a href="https://getcomposer.org/download/" target="_blank" rel="noopener">composer下载</a></p>
</li>
<li><p>打开命令行并执行下列命令安装最新版本的 Composer</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uiste:~ uiste$ php -r &quot;readfile(&apos;https://getcomposer.org/installer&apos;);&quot; | php</span><br><span class="line">All settings correct for using Composer</span><br><span class="line">Downloading 1.2.1...</span><br><span class="line"></span><br><span class="line">Composer successfully installed to: /Users/uiste/composer.phar</span><br><span class="line">Use it: php composer.phar</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这将检查一些PHP的设置，然后下载composer.phar到当前工作目录中。这是Composer的二进制文件。这是一个PHAR 包（PHP 的归档），这是PHP的归档格式可以帮助用户在命令行中执行一些操作。</p>
</blockquote>
<ul>
<li>检测是否安装成功<br>输入如下命令，如果成功则出现以下信息：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uiste:~ uiste$ php composer.phar</span><br><span class="line">   ______</span><br><span class="line">  / ____/___  ____ ___  ____  ____  ________  _____</span><br><span class="line"> / /   / __ \/ __ `__ \/ __ \/ __ \/ ___/ _ \/ ___/</span><br><span class="line">/ /___/ /_/ / / / / / / /_/ / /_/ (__  )  __/ /</span><br><span class="line">\____/\____/_/ /_/ /_/ .___/\____/____/\___/_/</span><br><span class="line">                    /_/</span><br><span class="line">Composer version 1.2.1 2015-09-12 11:27:19</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">___</span><br></pre></td></tr></table></figure>
<h3 id="局部安装和全局安装"><a href="#局部安装和全局安装" class="headerlink" title="局部安装和全局安装"></a>局部安装和全局安装</h3><p>四、局部安装</p>
<p>上述下载Composer的过程正确执行完毕后，可以将composer.phar文件复制到任意目录（比如项目根目录下），然后通过 php composer.phar 指令即可使用Composer了！</p>
<p>五、全局安装</p>
<p>全局安装是将Composer安装到系统环境变量PATH所包含的路径下面，然后就能够在命令行窗口中直接执行composer命令了。</p>
<ol>
<li>Mac或Linux系统</li>
</ol>
<p>打开命令行窗口并执行如下命令将前面下载的composer.phar文件移动到 /usr/local/bin/ 目录下面：</p>
<p>sudo mv composer.phar /usr/local/bin/composer  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uiste:~ uiste$ sudo mv composer.phar /usr/local/bin/composer</span><br><span class="line"></span><br><span class="line">WARNING: Improper use of the sudo command could lead to data loss</span><br><span class="line">or the deletion of important system files. Please double-check your</span><br><span class="line">typing when using sudo. Type &quot;man sudo&quot; for more information.</span><br><span class="line"></span><br><span class="line">To proceed, enter your password, or type Ctrl-C to abort.</span><br><span class="line"></span><br><span class="line">Password:</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>Win系统</li>
</ol>
<p>找到并进入PHP的安装目录（和你在命令行中执行的php指令应该是同一套PHP）。<br>将 composer.phar 复制到PHP的安装目录下面，也就是和 php.exe 在同一级目录。<br>在 PHP 安装目录下新建一个 composer.bat 文件，并将下列代码保存到此文件中。<br>@php “%~dp0composer.phar” %*</p>
<ol start="3">
<li>检测全局安装是否成功</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uiste:~ uiste$ composer --version</span><br><span class="line">Composer version 1.2.1 2015-09-12 11:27:19</span><br></pre></td></tr></table></figure>
<h1 id="Composer-中国全量镜像（二）"><a href="#Composer-中国全量镜像（二）" class="headerlink" title="Composer 中国全量镜像（二）"></a>Composer 中国全量镜像（二）</h1><p>为什么要使用Composer中国全量镜像？</p>
<p>一般情况下，安装包的数据（主要是 zip 文件）是从 github.com 上下载的，安装包的元数据是从 packagist.org 上下载的。</p>
<p>然而，由于众所周知的原因，国外的网站连接速度很慢，并且随时可能被“墙”。</p>
<p>“Composer 中国全量镜像”所做的就是缓存所有安装包和元数据到国内的机房并通过国内的 CDN 进行加速，这样就不必再去向国外的网站发起请求，这样我们使用Composer时就会更加快速、稳定。</p>
<h3 id="查看当前镜像地址"><a href="#查看当前镜像地址" class="headerlink" title="查看当前镜像地址"></a>查看当前镜像地址</h3><p>在命令行输入如下命令，即可查看镜像地址：<code>composer config -l -g</code> 查看所有全局配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uiste:~ uiste$ composer config -l -g</span><br><span class="line">[repositories.packagist.type] composer</span><br><span class="line">[repositories.packagist.url] https?://packagist.org</span><br><span class="line">[repositories.packagist.allow_ssl_downgrade] true</span><br></pre></td></tr></table></figure>
<h3 id="启用中国全量镜像服务"><a href="#启用中国全量镜像服务" class="headerlink" title="启用中国全量镜像服务"></a>启用中国全量镜像服务</h3><p>启用中国全量镜像服务有两种方式，具体配置方法如下：</p>
<ol>
<li><p>系统全局配置：<br>即将配置信息添加到 Composer 的全局配置文件 config.json 中。修改composer的全局配置文件（推荐方式），打开命令行并执行如下命令：<br><code>uiste:~ uiste$ composer config -g repo.packagist composer https://packagist.phpcomposer.com</code></p>
</li>
<li><p>单个项目配置：<br>即将将配置信息添加到某个项目的 composer.json 文件中。修改当前项目的composer.json配置文件有两种方式，最后都是向文件中添加如下配置信息：</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;repositories&quot;: &#123;</span><br><span class="line">    &quot;packagist&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;composer&quot;,</span><br><span class="line">        &quot;url&quot;: &quot;https://packagist.phpcomposer.com&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.1 打开命令行并进入项目的根目录（也就是 composer.json 文件所在目录），执行如下命令：<br><code>composer config repo.packagist composer https://packagist.phpcomposer.com</code><br>该命令将会在当前项目中的 composer.json 文件的末尾自动添加镜像的配置信息<br>2.2 手动向composer.json文件中添加以上信息</p>
<h1 id="Composer-常用命令总结（三）"><a href="#Composer-常用命令总结（三）" class="headerlink" title="Composer 常用命令总结（三）"></a>Composer 常用命令总结（三）</h1><h3 id="init（初始化）"><a href="#init（初始化）" class="headerlink" title="init（初始化）"></a>init（初始化）</h3><p>该命令用于创建 composer.json 文件，并进行基础信息配置：<br><code>uiste:~ uiste$ composer init</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uiste:~ uiste$ composer init</span><br><span class="line"></span><br><span class="line">                                            </span><br><span class="line">  Welcome to the Composer config generator  </span><br><span class="line">                                            </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">This command will guide you through creating your composer.json config.</span><br><span class="line"></span><br><span class="line">Package name (&lt;vendor&gt;/&lt;name&gt;) [uiste/uiste]:</span><br></pre></td></tr></table></figure>
<p>可以配置Package name、Description、Author、Minimum、Package Type、License、dependencies 及 dev dependencies 信息。</p>
<p>完成后配置文件内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;test/test&quot;,</span><br><span class="line">    &quot;description&quot;: &quot;test init&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;library&quot;,</span><br><span class="line">    &quot;license&quot;: &quot;License Description&quot;,</span><br><span class="line">    &quot;authors&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;mayanlong&quot;,</span><br><span class="line">            &quot;email&quot;: &quot;json_vip@163.com&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;require&quot;: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="search（搜索）"><a href="#search（搜索）" class="headerlink" title="search（搜索）"></a>search（搜索）</h3><p>根据名称搜索相关的包，成功后会列出符合的相关包的信息，本处以搜索 monolog 为例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ composer search monolog </span><br><span class="line">monolog/monolog Sends your logs to files, sockets, inboxes, databases and various web services</span><br><span class="line">kdyby/monolog Integration of Monolog into Nette Framework</span><br></pre></td></tr></table></figure>
<h3 id="show（详情）"><a href="#show（详情）" class="headerlink" title="show（详情）"></a>show（详情）</h3><p>根据包的名称，列出包的相关信息，本处以查看 monolog/monolog 为例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ composer show -all monolog/monolog</span><br><span class="line">name     : monolog/monolog</span><br><span class="line">descrip. : Sends your logs to files, sockets, inboxes, databases and various web services</span><br><span class="line">keywords : log, logging, psr-3</span><br><span class="line">versions : dev-master, 2.0.x-dev, 1.x-dev, 1.21.0, 1.20.0, 1.19.0, 1.18.2, 1.18.1, 1.18.0, 1.17.2, 1.17.1, 1.17.0, 1.16.0, 1.15.0, 1.14.0, 1.13.1, 1.13.0, 1.12.0, 1.11.0, 1.10.0, 1.9.1, 1.9.0, 1.8.0, 1.7.0, 1.6.0, 1.5.0, 1.4.1, 1.4.0, 1.3.1, 1.3.0, 1.2.1, 1.2.0, 1.1.0, 1.0.2, 1.0.1, 1.0.0, 1.0.0-RC1</span><br></pre></td></tr></table></figure>
<p>想查看更多信息，就亲自将该命令复制到命令行执行吧。</p>
<h3 id="install-安装"><a href="#install-安装" class="headerlink" title="install (安装)"></a>install (安装)</h3><p>先在 composer.json 配置中添加一个 monolog/monolog 依赖库，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;test/test&quot;,</span><br><span class="line">    &quot;description&quot;: &quot;test init&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;library&quot;,</span><br><span class="line">    &quot;license&quot;: &quot;License Description&quot;,</span><br><span class="line">    &quot;authors&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;mayanlong&quot;,</span><br><span class="line">            &quot;email&quot;: &quot;json_vip@163.com&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;require&quot;: &#123;</span><br><span class="line">        &quot;monolog/monolog&quot;: &quot;1.21.*&quot;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后通过如下命令进行安装依赖</p>
<p><code>$ composer install</code></p>
<h3 id="update-（更新）"><a href="#update-（更新）" class="headerlink" title="update （更新）"></a>update （更新）</h3><p>如果我们新增或者删除了某个依赖，可以通过如下命令进行更新</p>
<p><code>$ composer update</code></p>
<h3 id="require-（申明依赖）"><a href="#require-（申明依赖）" class="headerlink" title="require （申明依赖）"></a>require （申明依赖）</h3><p>我们也可以用命令直接添加依赖，执行该命令后将自动下载，命令如下：</p>
<p><code>$ composer require symfony/http-foundation</code></p>
<p><a href="http://www.phpcomposer.com/" target="_blank" rel="noopener">composer中文网</a></p>
]]></content>
      <tags>
        <tag>laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP-验证码图片排错</title>
    <url>/2015/20150927-1.html</url>
    <content><![CDATA[<p>第一步：如果看到不显示验证码，直接输入验证码的地址来排错</p>
<p>第二步：将header()函数注释掉就可能会显示错误</p>
<p>第三步：查看图片源码<br>在图片二进制代码前不能出现任何字符，包括空白字符</p>
<p>第四步：在header()前面添加ob_clean()</p>
]]></content>
      <tags>
        <tag>PHP错误处理</tag>
      </tags>
  </entry>
  <entry>
    <title>COOKIE 和 SESSION</title>
    <url>/2015/20150926-1.html</url>
    <content><![CDATA[<blockquote>
<p>思考：A页面中如何访问B页面中的变量<br>包含文件<br>get传递或post传递<br>cookie：cookie是小的信息包。</p>
</blockquote>
<h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><h3 id="cookie的原理"><a href="#cookie的原理" class="headerlink" title="cookie的原理"></a>cookie的原理</h3><p>浏览器—-http请求（无值）——–&gt;服务器<br>浏览器&lt;—响应头中传递cookie——-服务器<br>浏览器—-再次发送http请求（有值）–&gt;服务器</p>
<ol>
<li><strong>请求头：客户端请求服务器的时候，告知服务器客户端的信息</strong></li>
<li><strong>响应头：服务器响应客户端的时候，告知客户端服务器的信息</strong></li>
</ol>
<h3 id="长连接"><a href="#长连接" class="headerlink" title="长连接"></a>长连接</h3><p>在多个http请求之间，TCP连接不断开称为长连接，默认是5秒。<br>长连接过程中，可以建立多次<em>http请求</em>与<em>http响应</em></p>
<h3 id="cookie保存在客户端"><a href="#cookie保存在客户端" class="headerlink" title="cookie保存在客户端"></a>cookie保存在客户端</h3><h3 id="设置cookie"><a href="#设置cookie" class="headerlink" title="设置cookie"></a>设置cookie</h3><p>语法：setcookie(名字,值,过期时间,有效目录,子域名)</p>
<p><code>bool setcookie ( string $name [, string $value = &quot;&quot; [, int $expire = 0 [, string $path = &quot;&quot; [, string $domain = &quot;&quot; [, bool $secure = false [, bool $httponly = false ]]]]]] )</code></p>
<h3 id="临时性cookie"><a href="#临时性cookie" class="headerlink" title="临时性cookie"></a>临时性cookie</h3><p>关闭浏览器cookie就消失</p>
<h3 id="永久性cookie"><a href="#永久性cookie" class="headerlink" title="永久性cookie"></a>永久性cookie</h3><ul>
<li>[ ] 下次自动登录    （案例）</li>
</ul>
<blockquote>
<p>在临时性cookie的基础上加上一个过期时间就成了永久性cookie，过期时间是一个时间戳<br>永久性cookie保存在浏览器上，换个浏览器就不行了</p>
</blockquote>
<h3 id="cookie保存的数据类型"><a href="#cookie保存的数据类型" class="headerlink" title="cookie保存的数据类型"></a>cookie保存的数据类型</h3><p>cookie不能存放bool型数据，true=&gt;1 false=&gt;delete<br>cookie不能存放数组和对象<br><strong>cookie中只能存放字符串</strong></p>
<h3 id="删除cookie"><a href="#删除cookie" class="headerlink" title="删除cookie"></a>删除cookie</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Set-Cookie:</span><br><span class="line">name=uiste; expires=Mon, 26-Sep-2015 12:07:11 GMT; Max-Age=100</span><br><span class="line">sex=man; expires=Mon, 26-Sep-2015 12:07:11 GMT; Max-Age=100</span><br><span class="line">age=24; expires=Mon, 26-Sep-2015 12:07:11 GMT; Max-Age=100</span><br><span class="line">name=deleted; expires=Thu, 01-Jan-1970 00:00:01 GMT; Max-Age=0</span><br><span class="line">sex=deleted; expires=Thu, 01-Jan-1970 00:00:01 GMT; Max-Age=0</span><br><span class="line">age=</span><br></pre></td></tr></table></figure>
<h3 id="cookie支持下标"><a href="#cookie支持下标" class="headerlink" title="cookie支持下标"></a>cookie支持下标</h3><p>cookie在浏览器上没有数组的概念，只是浏览器请求到服务器，PHP将同名的变量转成数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//cookie不支持数组，但是支持下标</span><br><span class="line">setcookie(&apos;stu[0]&apos;,&apos;tom&apos;);</span><br><span class="line">setcookie(&apos;stu[1]&apos;,&apos;berry&apos;);</span><br><span class="line">setcookie(&apos;stu[2]&apos;,&apos;ketty&apos;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="cookie有效目录"><a href="#cookie有效目录" class="headerlink" title="cookie有效目录"></a>cookie有效目录</h3><p>默认情况下，cookie只能在当前目录和子级目录中有效<br>如果要在整个网站中有效，就要设置有效目录，‘/’表示整站有效<br><code>setcookie(&#39;name&#39;,&#39;tom&#39;,0,&#39;/&#39;)</code></p>
<h3 id="cookie支持子域名"><a href="#cookie支持子域名" class="headerlink" title="cookie支持子域名"></a>cookie支持子域名</h3><p>默认情况下，cookie是区分子域名的。一个子域名就代替一个独立的服务器</p>
<h3 id="cookie的缺点"><a href="#cookie的缺点" class="headerlink" title="cookie的缺点"></a>cookie的缺点</h3><ol>
<li>信息保存在本地，安全性低</li>
<li>只能保存字符串，不能保存数组和对象，可控性差</li>
<li>数据保存在头信息中，增加请求时的数据负载</li>
<li>一般浏览器对cookie的要求是不能高于4K</li>
</ol>
<h1 id="session-会话"><a href="#session-会话" class="headerlink" title="session(会话)"></a>session(会话)</h1><p>将数据存储到服务器端，每个客户一个空间，通过编号访问自己的数据</p>
<ul>
<li>第一次访问服务器，服务器给客户端分配一个编号</li>
<li>通过编号来访问服务器保存的数据</li>
<li>每个客户只能访问自己的数据<br><strong>session是基于cookie的技术</strong></li>
</ul>
<h3 id="session的操作"><a href="#session的操作" class="headerlink" title="session的操作"></a>session的操作</h3><ol>
<li>要使用会话必须显示的开启会话，<code>session_start()</code>。默认情况下，会话不会自动开启。</li>
<li>要自动开启会话，在<code>php.ini</code>文件中<code>session.auto_start=1</code>，把0改为1就自动开启了</li>
<li>session_id():会话编号</li>
<li>session_name():会话名称</li>
<li>session可以保存除了资源以外的所有类型的数据</li>
<li>重复开启会话会报错，可以通过<code>@</code>来屏蔽会话</li>
</ol>
<h3 id="session执行过程"><a href="#session执行过程" class="headerlink" title="session执行过程"></a>session执行过程</h3><ol>
<li>使用<code>session_start()</code>从<code>session</code>仓库中加载已经存在的<code>session</code>变量</li>
<li>第一次请求服务器，一个唯一的会话id存储到cookie响应头中</li>
<li>在后面的请求中，会话id保存请求头中，服务器获取请求头的会话id，通过id获取会话的值</li>
<li>页面执行完毕返回到客户端之前，将会话自动保存到服务器的session库中。下次浏览网页可以加载再次使用</li>
</ol>
<h3 id="session的配置"><a href="#session的配置" class="headerlink" title="session的配置"></a>session的配置</h3><ol>
<li>session.save_path：指定session库的路径  </li>
</ol>
<hr>
<p>session.save_path = “N;/path”, N表示通过N级目录来保存会话，N等于1，就是通过会话的第一个字母创建文件夹；N等于2表示通过两级目录创建文件夹，第一级是第一个字母，第二级是第二个字母。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; 用于保存/取回数据的控制方式</span><br><span class="line">session.save_handler=files</span><br><span class="line">;     session.save_path = &quot;N;/path&quot;</span><br><span class="line">; 在 save_handler 设为文件时传给控制器的参数， 这是数据文件将保存的路径</span><br><span class="line">session.save_path=&quot;/Applications/XAMPP/xamppfiles/temp/&quot;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>session.name：设置会话名称</li>
</ol>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; Name of the session (used as cookie name).</span><br><span class="line">; http://php.net/session.name</span><br><span class="line">session.name=PHPSESSID</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>session.cookie_lifetime：保存会话编号的cookie有效时间</li>
</ol>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; Lifetime in seconds of cookie or, if 0, until browser is restarted.</span><br><span class="line">; http://php.net/session.cookie-lifetime</span><br><span class="line">session.cookie_lifetime=0</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>session.cookie_path：保存会话的cookie整站有效</li>
</ol>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; The path for which the cookie is valid.</span><br><span class="line">; http://php.net/session.cookie-path</span><br><span class="line">session.cookie_path=/</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>session.cookie_domain：当前域名有效</li>
</ol>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; The domain for which the cookie is valid.</span><br><span class="line">; http://php.net/session.cookie-domain</span><br><span class="line">session.cookie_domain=</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>session.save_handler = files：会话按文件格式保存</li>
</ol>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; Handler used to store/retrieve data.</span><br><span class="line">; http://php.net/session.save-handler</span><br><span class="line">session.save_handler=files</span><br></pre></td></tr></table></figure>
<ol start="7">
<li>session.hash_function = 0：设置session会话的算法</li>
</ol>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; Select a hash function for use in generating session ids.</span><br><span class="line">; Possible Values </span><br><span class="line">;   0  (MD5 128 bits)</span><br><span class="line">;   1  (SHA-1 160 bits)</span><br><span class="line">; http://php.net/session.hash-function</span><br><span class="line">session.hash_function=0</span><br></pre></td></tr></table></figure>
<ol start="8">
<li>session.hash_bits_per_character = 5：每个字符占用的位数</li>
</ol>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; Define how many bits are stored in each character when converting</span><br><span class="line">; the binary hash data to something readable.</span><br><span class="line">; Possible values:</span><br><span class="line">;   4  (4 bits: 0-9, a-f)</span><br><span class="line">;   5  (5 bits: 0-9, a-v)</span><br><span class="line">;   6  (6 bits: 0-9, a-z, A-Z, &quot;-&quot;, &quot;,&quot;)</span><br><span class="line">; Default Value: 4</span><br><span class="line">; Development Value: 5</span><br><span class="line">; Production Value: 5</span><br><span class="line">; http://php.net/session.hash-bits-per-character</span><br><span class="line">session.hash_bits_per_character=5</span><br></pre></td></tr></table></figure>
<ol start="9">
<li>session.gc_maxlifetime = 1440：会话过期时间</li>
</ol>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; After this number of seconds, stored data will be seen as &apos;garbage&apos; and</span><br><span class="line">; cleaned up by the garbage collection process.</span><br><span class="line">; http://php.net/session.gc-maxlifetime</span><br><span class="line">session.gc_maxlifetime=1440</span><br></pre></td></tr></table></figure>
<h3 id="session-destroy-：销毁会话"><a href="#session-destroy-：销毁会话" class="headerlink" title="session_destroy()：销毁会话"></a>session_destroy()：销毁会话</h3><ol>
<li>删除储存介质中的文件</li>
<li>执行此行，就不会执行会话写入操作了</li>
</ol>
<h1 id="session入库"><a href="#session入库" class="headerlink" title="session入库"></a>session入库</h1><h3 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop table if exists sess;</span><br><span class="line">create table sess(</span><br><span class="line">       sess_id varchar(32) primary key comment &apos;会话编号&apos;,</span><br><span class="line">       sess_value text comment &apos;会话的值&apos;,</span><br><span class="line">       sess_expires int not null comment &apos;会话产生时间&apos;</span><br><span class="line">)engine=innodb charset=utf8;</span><br></pre></td></tr></table></figure>
<h3 id="session-set-save-handler-设置用户自定义会话存储函数"><a href="#session-set-save-handler-设置用户自定义会话存储函数" class="headerlink" title="session_set_save_handler()设置用户自定义会话存储函数"></a>session_set_save_handler()设置用户自定义会话存储函数</h3><p><code>bool session_set_save_handler ( callable $open , callable $close , callable $read , callable $write , callable $destroy , callable $gc [, callable $create_sid ] )</code></p>
<ul>
<li>open:开启会话</li>
<li>close:关闭会话</li>
<li>read:读取会话</li>
<li>write:写入会话</li>
<li>destroy:销毁会话</li>
<li>gc:销毁会话</li>
</ul>
<p>执行session_destroy()的时候才调用destroy()函数</p>
<blockquote>
<p>为什么gc不执行?</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; Defines the probability that the &apos;garbage collection&apos; process is started</span><br><span class="line">; on every session initialization. The probability is calculated by using</span><br><span class="line">; gc_probability/gc_divisor. Where session.gc_probability is the numerator</span><br><span class="line">; and gc_divisor is the denominator in the equation. Setting this value to 1</span><br><span class="line">; when the session.gc_divisor value is 100 will give you approximately a 1% chance</span><br><span class="line">; the gc will run on any give request.</span><br><span class="line">; Default Value: 1</span><br><span class="line">; Development Value: 1</span><br><span class="line">; Production Value: 1</span><br><span class="line">; http://php.net/session.gc-probability</span><br><span class="line">session.gc_probability=1</span><br><span class="line"></span><br><span class="line">; Defines the probability that the &apos;garbage collection&apos; process is started on every</span><br><span class="line">; session initialization. The probability is calculated by using the following equation: </span><br><span class="line">; gc_probability/gc_divisor. Where session.gc_probability is the numerator and</span><br><span class="line">; session.gc_divisor is the denominator in the equation. Setting this value to 1</span><br><span class="line">; when the session.gc_divisor value is 100 will give you approximately a 1% chance</span><br><span class="line">; the gc will run on any give request. Increasing this value to 1000 will give you</span><br><span class="line">; a 0.1% chance the gc will run on any give request. For high volume production servers,</span><br><span class="line">; this is a more efficient approach.</span><br><span class="line">; Default Value: 100</span><br><span class="line">; Development Value: 1000</span><br><span class="line">; Production Value: 1000</span><br><span class="line">; http://php.net/session.gc-divisor</span><br><span class="line">session.gc_divisor=1000</span><br></pre></td></tr></table></figure>
<blockquote>
<p>session.gc_probability=1   概率<br>session.gc_divisor=1000    除数<br>执行垃圾回收的概率是：1/1000</p>
</blockquote>
<h3 id="session入库-1"><a href="#session入库-1" class="headerlink" title="session入库"></a>session入库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(&apos;content-type:text/html;charset=utf-8&apos;);</span><br><span class="line">//开启会话</span><br><span class="line">function open() &#123;</span><br><span class="line">	mysql_connect(&apos;localhost&apos;,&apos;root&apos;,&apos;aa&apos;);</span><br><span class="line">	mysql_query(&apos;set names utf8&apos;);</span><br><span class="line">	mysql_query(&apos;use php5&apos;);</span><br><span class="line">&#125;</span><br><span class="line">//关闭会话</span><br><span class="line">function close() &#123;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line">*读取会话</span><br><span class="line">*@param $sess_id string 会话编号</span><br><span class="line">*/</span><br><span class="line">function read($sess_id) &#123;</span><br><span class="line">	$sql=&quot;select sess_value from sess where sess_id=&apos;$sess_id&apos;&quot;;</span><br><span class="line">	$rs=mysql_query($sql);</span><br><span class="line">	if($rows=mysql_fetch_row($rs))</span><br><span class="line">		return $rows[0];</span><br><span class="line">	return &apos;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line">*写入会话</span><br><span class="line">*@param $sess_id string 会话编号</span><br><span class="line">*@param $sess_value string 会话值</span><br><span class="line">*/</span><br><span class="line">function write($sess_id,$sess_value) &#123;</span><br><span class="line">	$expires=time();</span><br><span class="line">	$sql=&quot;insert into sess values (&apos;$sess_id&apos;,&apos;$sess_value&apos;,$expires) on duplicate key update sess_value=&apos;$sess_value&apos;,sess_expires=$expires&quot;;</span><br><span class="line">	return mysql_query($sql);</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line">*销毁会话</span><br><span class="line">*/</span><br><span class="line">function destroy($sess_id) &#123;</span><br><span class="line">	$sql=&quot;delete from sess where sess_id=&apos;$sess_id&apos;&quot;;</span><br><span class="line">	return mysql_query($sql);</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line">*垃圾回收</span><br><span class="line">*超过生命周期的会话都是垃圾</span><br><span class="line">*/</span><br><span class="line">function gc($maxlifetime) &#123;</span><br><span class="line">	$time=time()-$maxlifetime;</span><br><span class="line">	$sql=&quot;delete from sess where sess_expires&lt;$time&quot;;</span><br><span class="line">	return mysql_query($sql);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//更改会话的存储</span><br><span class="line">session_set_save_handler(&apos;open&apos;,&apos;close&apos;,&apos;read&apos;,&apos;write&apos;,&apos;destroy&apos;,&apos;gc&apos;);</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[&apos;sex&apos;]=100;</span><br><span class="line">echo $_SESSION[&apos;sex&apos;];</span><br><span class="line">session_destroy();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>session_set_save_handler()必须放在session_start()前面才能起作用</p>
</blockquote>
<h1 id="COOKIE-与-SESSION的区别"><a href="#COOKIE-与-SESSION的区别" class="headerlink" title="COOKIE 与 SESSION的区别"></a>COOKIE 与 SESSION的区别</h1><p>cookie将键值存储在浏览器上<br>session将键存储在浏览器上，值存储在服务器上。</p>
<blockquote>
<p>cookie的可以被禁用的，禁用cookie，基于cookie的所有技术都无法使用。</p>
</blockquote>
<p>默认情况下，session是基于的cookie的，可以通过配置更改。</p>
<p><code>session.use_trans_sid=1</code><br><code>session.use_only_cookies=0</code></p>
<p>重启Apache会发现，会话编号不保存到cookie中，而是保存到get提交的URL中或表单的隐藏域中。</p>
<blockquote>
<p>已知session_set_save_handler()必须在session_start()前面开启，如果在php.ini中设置了session.auto_start = 1后，则session_set_save_handler()无效。如何处理？<br>在分布式部署文件中有两个指令来更改php.ini中的配置<br>php_flag：用来更改开关性质的配置<br>php_value：用来更改值性质的配置<br>php_flag session.auto_start 0<br>php_value session.gc_maxlifetime 10<br>将以上命令添置在.htaccess文件中</p>
</blockquote>
]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2015/20150924-2.html</url>
    <content><![CDATA[<h2 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h2><p>bin 和 sbin  ：存放命令的<br>/dev        ：存放外设文件<br>/etc        ：存放配置文件<br>/home       ：普通用户的家目录(主目录)<br>/root       ：超级管理员的家目录<br>/mnt        ：挂载点<br>/usr        ：安装程序<br>/var        ：相当于D、E盘，用来存储一些文件站点</p>
<h2 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h2><p>passwd    更改密码<br>ls    、ls -al *.png    查看目录中的内容<br>cd    进入目录<br>exit    退出当前工作环境<br>pwd    获取当前工作目录<br>su或su -    获取管理员权限<br>su - uiste    获取普通用户的权限<br>runlevel    获取运行级别<br>init N    改变运行等级<br>startx 和init5    启动图形化界面<br>clear    清空终端</p>
<h2 id="Linux命令格式"><a href="#Linux命令格式" class="headerlink" title="Linux命令格式"></a>Linux命令格式</h2><p>语法：名利 [-选项] 参数<br>Linux 命令是区分大小写的</p>
<h2 id="查看文件的详细信息-ls-al"><a href="#查看文件的详细信息-ls-al" class="headerlink" title="查看文件的详细信息(ls -al)"></a>查看文件的详细信息(ls -al)</h2><p>-a  显示所有文件<br>-l  显示详细信息<br><img src="media/14746901645222/14746929569559.jpg" alt><br>pwd    显示当前目录<br>ls    显示当前目录的文件<br>ls -l    列出文件的详细信息<br>ls -a    列出所有文件，包括隐藏文件<br>ls -al    后面是查询选择，查询选项是没有先后顺序的</p>
<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><p>dir             显示当前目录的所有文件<br>who am  i       显示登录的用户名<br>whoami          显示当前使用谁的权限<br>exit  、q        退出权限系统<br>halt            关闭计算机<br>power off       关闭计算机<br>reboot          重启计算机<br>man             查看帮助文档 manual<br>–help、-help    调用命令的注释帮助</p>
<h2 id="显示目录所占磁盘容量-du"><a href="#显示目录所占磁盘容量-du" class="headerlink" title="显示目录所占磁盘容量(du)"></a>显示目录所占磁盘容量(du)</h2><p>du file/dir 显示文件或文件夹的容量，单位是KB，如果是文件夹显示文件夹中每个文件额大小和总大小<br>du -s dir 显示文件夹的总大小，不显示文件夹中文件大小<br>du -h file/dir 用友好的方式显示容量</p>
<h2 id="改变工作目录-cd"><a href="#改变工作目录-cd" class="headerlink" title="改变工作目录(cd)"></a>改变工作目录(cd)</h2><p>语法：cd 目录</p>
<table>
<thead>
<tr>
<th>cd dir</th>
<th>进入dir文件夹下</th>
</tr>
</thead>
<tbody>
<tr>
<td>cd ..</td>
<td>..表示上一级</td>
</tr>
<tr>
<td>cd ../dir</td>
<td>进入上一级目录中的dir文件夹下</td>
</tr>
<tr>
<td>cd /dir</td>
<td>通过绝对路径进入到dir文件夹下</td>
</tr>
<tr>
<td>cd ~</td>
<td>进入个人主目录</td>
</tr>
<tr>
<td>cd</td>
<td>cd后面不跟参数就进入到个人主目录，和cd ~一样</td>
</tr>
</tbody>
</table>
<h2 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h2><h3 id="创建目录-mkdir"><a href="#创建目录-mkdir" class="headerlink" title="创建目录(mkdir)"></a>创建目录(mkdir)</h3><table>
<thead>
<tr>
<th>mkdir dir1</th>
<th>在当前目录下创建dir1文件夹</th>
</tr>
</thead>
<tbody>
<tr>
<td>mkdir dir1/dir2</td>
<td>在dir1目录下创建dir2目录（dir1必须存在)</td>
</tr>
<tr>
<td>mkdir -p dir1/dir2</td>
<td>如果没有dir1，先创建dir1再创建dir2. -p 可以写在后面</td>
</tr>
<tr>
<td>mk dir1 dir2 .</td>
<td>同时创建dir1、dir2、dir3…</td>
</tr>
</tbody>
</table>
<h3 id="删除目录-rmdir"><a href="#删除目录-rmdir" class="headerlink" title="删除目录(rmdir)"></a>删除目录(rmdir)</h3><table>
<thead>
<tr>
<th>rmdir dir</th>
<th>删除目录，如果目标不为空这报错，不能删除</th>
</tr>
</thead>
<tbody>
<tr>
<td>rmdir dir1 dir2</td>
<td>同时删除多个目录</td>
</tr>
</tbody>
</table>
<h3 id="既能删除文件也能删除目录-rm"><a href="#既能删除文件也能删除目录-rm" class="headerlink" title="既能删除文件也能删除目录(rm)"></a>既能删除文件也能删除目录(rm)</h3><blockquote>
<p>-r recursieve 递归<br>-f force 强制</p>
</blockquote>
<table>
<thead>
<tr>
<th>rm file</th>
<th>删除文件</th>
</tr>
</thead>
<tbody>
<tr>
<td>rm -rf file/dir</td>
<td>删除文件和文件夹</td>
</tr>
</tbody>
</table>
<h2 id="复制文件和目录-cp"><a href="#复制文件和目录-cp" class="headerlink" title="复制文件和目录(cp)"></a>复制文件和目录(cp)</h2><p>语法：cp [-r/-R] 源地址 目标地址</p>
<table>
<thead>
<tr>
<th>cp file dir</th>
<th>将file文件拷贝到dir文件夹下</th>
</tr>
</thead>
<tbody>
<tr>
<td>cp file1 dir/file2</td>
<td>将file1拷贝到dir文件夹下并改名为file2</td>
</tr>
<tr>
<td>cp file1 file2</td>
<td>将file1复制一份，重命名为file2</td>
</tr>
<tr>
<td>cp -R/-r dir1 dir2</td>
<td>将dir1文件夹递归复制到dir2文件夹下</td>
</tr>
</tbody>
</table>
<h2 id="移动文件或目录-mv"><a href="#移动文件或目录-mv" class="headerlink" title="移动文件或目录(mv)"></a>移动文件或目录(mv)</h2><table>
<thead>
<tr>
<th>mv file dir</th>
<th>将file文件移动到dir文件夹下</th>
</tr>
</thead>
<tbody>
<tr>
<td>mv dir1 dir2</td>
<td>dir2不存在就是该文件夹名字 dir2存在就是将dir1移动到dir2文件夹下</td>
</tr>
<tr>
<td>mv file1 file2</td>
<td>将file1的名字改为file2</td>
</tr>
<tr>
<td>mv dir1 dir2/dir3</td>
<td>将dir1拷贝到dir2文件夹下，并改名为dir3</td>
</tr>
</tbody>
</table>
<h2 id="文件查看"><a href="#文件查看" class="headerlink" title="文件查看"></a>文件查看</h2><table>
<thead>
<tr>
<th>cat 文件名</th>
<th>一次性查看全部内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>more 文件名</td>
<td>分屏显示，按回车向下翻，一旦下翻就不能上翻</td>
</tr>
<tr>
<td>less 文件名</td>
<td>允许上翻和下翻，按向上和向下的键</td>
</tr>
<tr>
<td>head -n 文件名</td>
<td>显示前n条记录</td>
</tr>
<tr>
<td>tail -n 文件名</td>
<td>显示后几条</td>
</tr>
<tr>
<td>wc 文件名</td>
<td>用来计算文件行数、句数、字符数</td>
</tr>
</tbody>
</table>
<h2 id="新建文件和添加内容"><a href="#新建文件和添加内容" class="headerlink" title="新建文件和添加内容"></a>新建文件和添加内容</h2><h3 id="新建文件-touch"><a href="#新建文件-touch" class="headerlink" title="新建文件(touch)"></a>新建文件(touch)</h3><table>
<thead>
<tr>
<th>touch 文件名</th>
<th>新建一个文件</th>
</tr>
</thead>
<tbody>
<tr>
<td>touch file1 file2 …</td>
<td>一次新建多个文件</td>
</tr>
<tr>
<td>touch dir/file</td>
<td>在dir文件夹下新建file文件</td>
</tr>
</tbody>
</table>
<h3 id="添加内容-echo、cat"><a href="#添加内容-echo、cat" class="headerlink" title="添加内容(echo、cat)"></a>添加内容(echo、cat)</h3><table>
<thead>
<tr>
<th>echo 内容&gt;文件</th>
<th>将内容写入到文件（清空写），如果文件不存在则创建新文件</th>
</tr>
</thead>
<tbody>
<tr>
<td>echo 内容&gt;&gt;文件</td>
<td>和上面一样，（追加内容）</td>
</tr>
<tr>
<td>cat file1&gt;file2</td>
<td>将file1的内容写到file2中（清空写）（文件不存在则创建）</td>
</tr>
<tr>
<td>cat file1&gt;&gt;file2</td>
<td>和上面一样，（追加内容）</td>
</tr>
<tr>
<td>cat file1 file2 &gt; file3</td>
<td>将file1和file2的内容合并成file3</td>
</tr>
</tbody>
</table>
<blockquote>
<p>>是清空写<br>>&gt;追加写<br>写入&gt;字符时，使用引号，或者\ 反斜杠，进行转义</p>
</blockquote>
<h2 id="组-group-的操作"><a href="#组-group-的操作" class="headerlink" title="组(group)的操作"></a>组(group)的操作</h2><table>
<thead>
<tr>
<th>groupadd 组名</th>
<th>添加组</th>
</tr>
</thead>
<tbody>
<tr>
<td>grouped -n 新组名 旧组名</td>
<td>修改组</td>
</tr>
<tr>
<td>grouped 组名</td>
<td>删除组</td>
</tr>
</tbody>
</table>
<blockquote>
<p>查看组：cat ../etc/group</p>
</blockquote>
<h2 id="用户（user）的操作"><a href="#用户（user）的操作" class="headerlink" title="用户（user）的操作"></a>用户（user）的操作</h2><blockquote>
<p>用户信息都保存在<code>/etc/passwd</code> 文件中 <code>cat ../etc/passwd</code><br><code>uiste:x:500:500::/home/uiste:/bin/bash</code><br>用户名：口令：用户id号：组的id号：注释性描述：家目录：登录shell</p>
</blockquote>
<h3 id="添加用户（useradd）"><a href="#添加用户（useradd）" class="headerlink" title="添加用户（useradd）"></a>添加用户（useradd）</h3><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>useradd 用户名</td>
<td>创建用户，在创建的时候自动创建组</td>
</tr>
<tr>
<td>useradd 用户名 -g 组编号</td>
<td>在相应的组下创建用户</td>
</tr>
<tr>
<td>useradd 用户名 -u 用户编号</td>
<td>给创建的用户指定用户编号</td>
</tr>
<tr>
<td>useradd 用户名 -d 家目录</td>
<td>给用户指定家目录</td>
</tr>
</tbody>
</table>
<h3 id="修改用户（usermod）"><a href="#修改用户（usermod）" class="headerlink" title="修改用户（usermod）"></a>修改用户（usermod）</h3><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>usermod -l 新用户名 旧用户名</td>
<td>修改用户名</td>
</tr>
<tr>
<td>usermod -u 用户编号 用户名</td>
<td>修改用户编号</td>
</tr>
<tr>
<td>usermod -g 组的编号 用户名</td>
<td>修改用户的组</td>
</tr>
<tr>
<td>usermod -d 家目录 用户名</td>
<td>修改家目录</td>
</tr>
</tbody>
</table>
<h3 id="删除用户（userdel）"><a href="#删除用户（userdel）" class="headerlink" title="删除用户（userdel）"></a>删除用户（userdel）</h3><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>userdel 用户名</td>
<td>删除用户，家目录还存在</td>
</tr>
<tr>
<td>userdel -r 用户名</td>
<td>删除用户同时删除家目录</td>
</tr>
</tbody>
</table>
<h2 id="常用指令-1"><a href="#常用指令-1" class="headerlink" title="常用指令"></a>常用指令</h2><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>grep string [file]</td>
<td>在字符串中查找</td>
</tr>
<tr>
<td>ps -A</td>
<td>（process）查询所有进程</td>
</tr>
<tr>
<td>kill —9 pid</td>
<td>杀死指定进程</td>
</tr>
<tr>
<td>df -lh</td>
<td>参看系统分区</td>
</tr>
</tbody>
</table>
<h2 id="date"><a href="#date" class="headerlink" title="date"></a>date</h2><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>date</td>
<td>显示系统时间</td>
</tr>
<tr>
<td>date -s ‘2015-11-6 11:11:11’</td>
<td>更改系统时间</td>
</tr>
</tbody>
</table>
<h2 id="管道"><a href="#管道" class="headerlink" title="管道(|)"></a>管道(|)</h2><h2 id="查找文件（find）"><a href="#查找文件（find）" class="headerlink" title="查找文件（find）"></a>查找文件（find）</h2><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>find / -name passwd</td>
<td>查找根下所有passwd的文件[区分大小写]</td>
</tr>
<tr>
<td>find / -iname passwd</td>
<td>查找根下所有passwd的文件[不区分大小写]</td>
</tr>
<tr>
<td>find / -mindepth 3 -name passwd</td>
<td>在最低3层目录下查找passwd文件</td>
</tr>
<tr>
<td>find / -maxdepth 2 -name passwd</td>
<td>在最高2层目录下查找passwd文件</td>
</tr>
<tr>
<td>find . -iname *.c</td>
<td>在当前目录下查找以.c结尾的文件，不区分大小写</td>
</tr>
<tr>
<td>find / -size +50k</td>
<td>搜索大于50K的文件</td>
</tr>
<tr>
<td>find / -size -40c</td>
<td>搜索小鱼40字节的文件char</td>
</tr>
<tr>
<td>find . -type f</td>
<td>查找当前目录下的所有文件</td>
</tr>
<tr>
<td>find . -type d</td>
<td>查找当前目录下所有的文件夹</td>
</tr>
</tbody>
</table>
<h2 id="软连接和硬连接"><a href="#软连接和硬连接" class="headerlink" title="软连接和硬连接"></a>软连接和硬连接</h2><h3 id="软连接"><a href="#软连接" class="headerlink" title="软连接"></a>软连接</h3><p>软连接就是快捷方式<br>语法：ln -s 源文件 连接文件</p>
<h3 id="硬连接"><a href="#硬连接" class="headerlink" title="硬连接"></a>硬连接</h3><p>语法：ln 源文件 连接文件<br>查看：ls -li 查看文件的索引编号</p>
<blockquote>
<p>在Linux中删除文件并不是件文件本身删除，而是删除文件的索引，文件是垃圾回收机制来删除<br>只有文件才能做硬连接</p>
</blockquote>
<h2 id="权限（rwx-）"><a href="#权限（rwx-）" class="headerlink" title="权限（rwx-）"></a>权限（rwx-）</h2><p>Linux的权限有3种：读权限（read）、写权限（write）、可执行权限（execute）<br>文件属性部分有10个字符组成，第一个字符是表示文件的类型，后面还剩下9个字符，每3个一组（每组由读、写、可执行组成），分成3组，第一组是文件所有者（user）的权限，第二组是和文件所有者同组（group）的权限，第三组其他用户（other）的权限</p>
<h3 id="常用便是文件的字符"><a href="#常用便是文件的字符" class="headerlink" title="常用便是文件的字符"></a>常用便是文件的字符</h3><table>
<thead>
<tr>
<th>b</th>
<th>系统设备文件，使用i/o与外界交互的设备，通常是磁盘</th>
</tr>
</thead>
<tbody>
<tr>
<td>d</td>
<td>表示文件夹</td>
</tr>
<tr>
<td>-</td>
<td>表示文件</td>
</tr>
<tr>
<td>l</td>
<td>连接文件</td>
</tr>
<tr>
<td>c</td>
<td>系统设备文件，利用串口设备和声音</td>
</tr>
</tbody>
</table>
<h3 id="更新权限"><a href="#更新权限" class="headerlink" title="更新权限"></a>更新权限</h3><p>语法：chmod 权限 file/dir</p>
<table>
<thead>
<tr>
<th>案例</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>chmod u+x,o+rx dir</td>
<td>用户添加可执行权限，其他用户添加读、可执行权限</td>
</tr>
<tr>
<td>chmod u+rwx,o-r file</td>
<td>用户添加读、写、可执行，其他用户去掉读权限</td>
</tr>
<tr>
<td>chmod go -rwx file</td>
<td>组和其他用户去掉读、写、可执行权限</td>
</tr>
<tr>
<td>chmod 750 file</td>
<td>通过数字来设置权限</td>
</tr>
</tbody>
</table>
<h2 id="更改文件所有者和组"><a href="#更改文件所有者和组" class="headerlink" title="更改文件所有者和组"></a>更改文件所有者和组</h2><h3 id="更改所有者（chown）"><a href="#更改所有者（chown）" class="headerlink" title="更改所有者（chown）"></a>更改所有者（chown）</h3><table>
<thead>
<tr>
<th>chown user file</th>
<th>将file改成user用户</th>
</tr>
</thead>
<tbody>
<tr>
<td>chown -R user dir</td>
<td>将dir文件中的所有文件所有者改为user</td>
</tr>
</tbody>
</table>
<h3 id="更改组（chgrp）"><a href="#更改组（chgrp）" class="headerlink" title="更改组（chgrp）"></a>更改组（chgrp）</h3><p>语法一：chgrp [-R] 新组名 file/dir<br>将file 或 dir 更改新组名<br>语法二：chown 用户名.组名 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown  user passwd        将passwd更改为user所有</span><br><span class="line">chown  .php passwd        将passwd更改为php组所有</span><br><span class="line">chown  user.php passwd    将passwd更改为php组的user所有</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim（VI）</title>
    <url>/2015/20150924-1.html</url>
    <content><![CDATA[<h1 id="Vim-VI-介绍"><a href="#Vim-VI-介绍" class="headerlink" title="Vim(VI)介绍"></a>Vim(VI)介绍</h1><p>Vim（vi）是Linux提供的一个更改文件的工具。</p>
<h2 id="Vi有3种模式："><a href="#Vi有3种模式：" class="headerlink" title="Vi有3种模式："></a>Vi有3种模式：</h2><p>命令模式、尾行模式、编辑模式<br><img src="media/14744245835193/14746880050755.jpg" alt></p>
<h2 id="尾行模式"><a href="#尾行模式" class="headerlink" title="尾行模式"></a>尾行模式</h2><table>
<thead>
<tr>
<th>:</th>
<th>进入尾行模式</th>
</tr>
</thead>
<tbody>
<tr>
<td>:w</td>
<td>保存</td>
</tr>
<tr>
<td>:w!</td>
<td>强制保存</td>
</tr>
<tr>
<td>:q</td>
<td>退出</td>
</tr>
<tr>
<td>:q!</td>
<td>强制退出</td>
</tr>
<tr>
<td>:wq</td>
<td>保存并退出</td>
</tr>
<tr>
<td>:wq!</td>
<td>强制保存并退出</td>
</tr>
<tr>
<td>set number 或 set nu</td>
<td>设置行号</td>
</tr>
<tr>
<td>set nonumber 或 set nonu</td>
<td>取消行号</td>
</tr>
<tr>
<td>u</td>
<td>撤销上一条命令</td>
</tr>
<tr>
<td>.</td>
<td>重复最后一条命令</td>
</tr>
<tr>
<td>J</td>
<td>连接上下两行</td>
</tr>
<tr>
<td>r+w</td>
<td>将当前的字母替换成w</td>
</tr>
<tr>
<td>:n</td>
<td>跳转到第n行</td>
</tr>
<tr>
<td>:/str 或 /str</td>
<td>从上往下搜索str n 下一个 N 上一个</td>
</tr>
<tr>
<td>?str</td>
<td>从下往上搜索str</td>
</tr>
<tr>
<td>:s/str/aa</td>
<td>将str替换成aa</td>
</tr>
<tr>
<td>:s/str/aa/g</td>
<td>将一行的所有str替换成aa</td>
</tr>
<tr>
<td>:%s/str/aa/g</td>
<td>将整个页面的str替换成aa</td>
</tr>
</tbody>
</table>
<h2 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h2><table>
<thead>
<tr>
<th>i</th>
<th style="text-align:left">在当前位置上插入，原来位置上字符后移</th>
</tr>
</thead>
<tbody>
<tr>
<td>a</td>
<td style="text-align:left">光标先后移动一位插入</td>
</tr>
<tr>
<td>o</td>
<td style="text-align:left">新起一个空白行插入</td>
</tr>
<tr>
<td>s</td>
<td style="text-align:left">删除光标所在字符再插入</td>
</tr>
</tbody>
</table>
<h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><h3 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h3><table>
<thead>
<tr>
<th>⬆️</th>
<th>⬇️</th>
<th>⬅️</th>
<th>➡️</th>
</tr>
</thead>
<tbody>
<tr>
<td>k</td>
<td>j</td>
<td>h</td>
<td>l</td>
</tr>
</tbody>
</table>
<h3 id="单词级别"><a href="#单词级别" class="headerlink" title="单词级别"></a>单词级别</h3><table>
<thead>
<tr>
<th>e</th>
<th>本单词的末尾，如果当前光标就在本单词末尾就跳转到下个单词的末尾</th>
</tr>
</thead>
<tbody>
<tr>
<td>b</td>
<td>本单词的首字母，如果当前光标就在本单词的首字母上就跳到上一个单词的首字母</td>
</tr>
<tr>
<td>w</td>
<td>跳转到下一个单词的首字母</td>
</tr>
</tbody>
</table>
<h3 id="行级"><a href="#行级" class="headerlink" title="行级"></a>行级</h3><table>
<thead>
<tr>
<th>$</th>
<th>调到行尾</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>调到行首</td>
</tr>
</tbody>
</table>
<h3 id="段级"><a href="#段级" class="headerlink" title="段级"></a>段级</h3><table>
<thead>
<tr>
<th>{</th>
<th>段首</th>
</tr>
</thead>
<tbody>
<tr>
<td>}</td>
<td>段尾</td>
</tr>
</tbody>
</table>
<h3 id="屏幕级"><a href="#屏幕级" class="headerlink" title="屏幕级"></a>屏幕级</h3><table>
<thead>
<tr>
<th>H</th>
<th>屏幕的首部</th>
</tr>
</thead>
<tbody>
<tr>
<td>L</td>
<td>屏幕的尾部</td>
</tr>
</tbody>
</table>
<h3 id="文档级"><a href="#文档级" class="headerlink" title="文档级"></a>文档级</h3><table>
<thead>
<tr>
<th>nG</th>
<th>跳转到第n行</th>
</tr>
</thead>
<tbody>
<tr>
<td>G</td>
<td>移动到文档尾部</td>
</tr>
</tbody>
</table>
<h2 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h2><table>
<thead>
<tr>
<th>x</th>
<th>删除当前的字符</th>
</tr>
</thead>
<tbody>
<tr>
<td>dd</td>
<td>删除当前行</td>
</tr>
<tr>
<td>3dd</td>
<td>删除3行</td>
</tr>
<tr>
<td>d+e</td>
<td>表示从光标开始删除，删除到单词末尾或下一个单词末尾</td>
</tr>
<tr>
<td>d+$</td>
<td>删除从光标开始到这行结束</td>
</tr>
</tbody>
</table>
<h2 id="复制操作"><a href="#复制操作" class="headerlink" title="复制操作"></a>复制操作</h2><table>
<thead>
<tr>
<th>yy</th>
<th>复制当前行</th>
</tr>
</thead>
<tbody>
<tr>
<td>p</td>
<td>粘贴</td>
</tr>
<tr>
<td>3yy</td>
<td>复制3行</td>
</tr>
<tr>
<td>y+e</td>
<td>从光标开始复制，复制到单词结束或下一个单词结束</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>VI</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP面向对象3</title>
    <url>/2015/20150917-1.html</url>
    <content><![CDATA[<h3 id="clone与-clone"><a href="#clone与-clone" class="headerlink" title="clone与__clone()"></a>clone与__clone()</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person&#123;</span><br><span class="line">	protected $name;</span><br><span class="line">	public function __construnt($name)&#123;</span><br><span class="line">		$this-&gt;name=$name;</span><br><span class="line">	&#125;</span><br><span class="line">	public function show()&#123;</span><br><span class="line">		echo $this-&gt;name;</span><br><span class="line">	&#125;</span><br><span class="line">	public function __clone()&#123;</span><br><span class="line">		echo &quot;对象被克隆了&lt;br&gt;&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$per1 = new Person(&apos;胡浩&apos;);</span><br><span class="line">var_dump($per1);</span><br><span class="line">echo &apos;&lt;br&gt;&apos;;</span><br><span class="line">$per2 = $per1;</span><br><span class="line">var_dump($per2);</span><br><span class="line">echo &apos;&lt;br&gt;&apos;;</span><br><span class="line">$per3 = clone $per1;</span><br><span class="line">var_dump($per3);</span><br><span class="line">?&gt;</span><br><span class="line">object(Person)#1 (1) &#123; [&quot;name&quot;:protected]=&gt; NULL &#125; </span><br><span class="line">object(Person)#1 (1) &#123; [&quot;name&quot;:protected]=&gt; NULL &#125; </span><br><span class="line">对象被克隆了</span><br><span class="line">object(Person)#2 (1) &#123; [&quot;name&quot;:protected]=&gt; NULL &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>创建新对象的方法有两个：<br>1、    实例化<br>2、    clone<br>当执行clone命令的时候，会自动调用__clone()函数</p>
</blockquote>
<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>一个类只能有一个对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//三私一公</span><br><span class="line">class Student&#123;</span><br><span class="line">	// 私有的静态属性保存当前实例</span><br><span class="line">	private static $instance;</span><br><span class="line">	// 私有的构造函数阻止在类的外部实例化</span><br><span class="line">	private function __construnct()&#123;&#125;</span><br><span class="line">	// 私有的__clone() 用来阻止在类外部clone对象</span><br><span class="line">	private function __clone()&#123;&#125;</span><br><span class="line">	// 公有的静态方法用来获取实例</span><br><span class="line">	public static function getInstance()&#123;</span><br><span class="line">		if (!self::$instance instanceof self) &#123;</span><br><span class="line">			self::$instance = new self;</span><br><span class="line">		&#125;</span><br><span class="line">		return self::$instance;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//单例模式</span><br><span class="line">$stu1 = Student::getInstance();</span><br><span class="line">$stu2 = Student::getInstance();</span><br><span class="line"></span><br><span class="line">var_dump($stu1);</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">var_dump($stu2);</span><br><span class="line">?&gt;</span><br><span class="line">object(Student)#1 (0) &#123; &#125; </span><br><span class="line">object(Student)#1 (0) &#123; &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>instanceof用来判断变量是否属于某种数据类型</p>
</blockquote>
<h4 id="项目层面的单例模式（一个项目中有一组单例模式）"><a href="#项目层面的单例模式（一个项目中有一组单例模式）" class="headerlink" title="项目层面的单例模式（一个项目中有一组单例模式）"></a>项目层面的单例模式（一个项目中有一组单例模式）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class DB1 &#123;</span><br><span class="line">	private static $instance;</span><br><span class="line">	private function __construct() &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	private function __clone() &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	public static function getInstance() &#123;</span><br><span class="line">		if(!self::$instance instanceof self)	//实例的数据类型不是Student类型的</span><br><span class="line"> 			self::$instance=new self;</span><br><span class="line"> 		return self::$instance;</span><br><span class="line"> 	&#125;</span><br><span class="line"> &#125;</span><br><span class="line">class DB2 &#123;</span><br><span class="line">	private static $instance;</span><br><span class="line">	private function __construct() &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	private function __clone() &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	public static function getInstance() &#123;</span><br><span class="line">		if(!self::$instance instanceof self)	//实例的数据类型不是Student类型的</span><br><span class="line">			self::$instance=new self;</span><br><span class="line">		return self::$instance;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">class DB3 &#123;</span><br><span class="line">	private static $instance;</span><br><span class="line">	private function __construct() &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	private function __clone() &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	public static function getInstance() &#123;</span><br><span class="line">		if(!self::$instance instanceof self)	//实例的数据类型不是Student类型的</span><br><span class="line">			self::$instance=new self;</span><br><span class="line">		return self::$instance;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">//项目层面的单例模式</span><br><span class="line">function getInstance($db_name) &#123;</span><br><span class="line">	static $array=array();</span><br><span class="line">	if(!isset($array[$db_name]))</span><br><span class="line">		$array[$db_name]=$db_name::getInstance($db_name);</span><br><span class="line">	return $array[$db_name];</span><br><span class="line">&#125;</span><br><span class="line">//测试</span><br><span class="line">$db1=getInstance(&apos;DB1&apos;);</span><br><span class="line">$db2=DB1::getInstance();</span><br><span class="line">var_dump($db1,$db2);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>object(DB1)#1 (0) { } object(DB1)#1 (0) { }</p>
</blockquote>
<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>传递不同的参数获取不同的对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">class ProductA &#123;</span><br><span class="line">	public function getProduct() &#123;</span><br><span class="line">		echo &apos;这是A商品&lt;br&gt;&apos;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">class ProductB&#123;</span><br><span class="line">	public function getProduct() &#123;</span><br><span class="line">		echo &apos;这是B商品&lt;br&gt;&apos;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">//工厂模式</span><br><span class="line">class ProductFactory &#123;</span><br><span class="line">	public static function create($num) &#123;</span><br><span class="line">		switch($num) &#123;</span><br><span class="line">			case 1:</span><br><span class="line">				return new ProductA();</span><br><span class="line">			case 2:</span><br><span class="line">				return new ProductB;</span><br><span class="line">		&#125;</span><br><span class="line">		return null;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">$objA=ProductFactory::create(1);</span><br><span class="line">$objB=ProductFactory::create(2);</span><br><span class="line">$objA-&gt;getProduct();</span><br><span class="line">$objB-&gt;getProduct();</span><br><span class="line"> ?&gt;</span><br><span class="line">这是A商品</span><br><span class="line">这是B商品</span><br></pre></td></tr></table></figure>
<h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>传递不同的参数，调用不同的方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">//策略模式</span><br><span class="line">interface IStrategy &#123;</span><br><span class="line">	function ontheway();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Walk implements IStrategy &#123;</span><br><span class="line">	public function ontheway() &#123;</span><br><span class="line">		echo &apos;走着去&lt;br&gt;&apos;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Bike implements IStrategy&#123;</span><br><span class="line">	public function ontheway() &#123;</span><br><span class="line">		echo &apos;骑车去&lt;br&gt;&apos;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Bus implements IStrategy &#123;</span><br><span class="line">	public function ontheway() &#123;</span><br><span class="line">		echo &apos;坐巴士去&lt;br&gt;&apos;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">//传递不同的参数，调用不同方法</span><br><span class="line">class Strategy &#123;</span><br><span class="line">	public function getWay(IStrategy $obj) &#123;</span><br><span class="line">		$obj-&gt;ontheway();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">$obj=new Strategy();</span><br><span class="line">$obj-&gt;getWay(new Walk);</span><br><span class="line">$obj-&gt;getWay(new Bike);</span><br><span class="line">$obj-&gt;getWay(new Bus);</span><br><span class="line"> ?&gt;</span><br><span class="line">走着去</span><br><span class="line">骑车去</span><br><span class="line">坐巴士去</span><br></pre></td></tr></table></figure>
<h3 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h3><h4 id="tostring"><a href="#tostring" class="headerlink" title="__tostring()"></a>__tostring()</h4><p>当把对象当成字符串调用时自动执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">class Student&#123;</span><br><span class="line">	//当把对象当成字符串调用时自动执行</span><br><span class="line">	public function __toString()&#123;</span><br><span class="line">		return &quot;这是一个学生对象&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$stu=new Student;</span><br><span class="line">echo $stu;</span><br><span class="line"> ?&gt;</span><br><span class="line">这是一个学生对象</span><br></pre></td></tr></table></figure>
<h4 id="invoke"><a href="#invoke" class="headerlink" title="__invoke()"></a>__invoke()</h4><p>当把对象当成函数调用的时候自动执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">class Student&#123;</span><br><span class="line">	//当把对象当成函数调用的时候自动执行</span><br><span class="line">	public function __invoke($args)&#123;</span><br><span class="line">		echo &quot;这是一个学生对象，你传递的参数是：&quot;.$args;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">$stu = new Student();</span><br><span class="line">$stu(&apos;tom&apos;)</span><br><span class="line"> ?&gt;</span><br><span class="line">这是一个学生对象，你传递的参数是：tom</span><br></pre></td></tr></table></figure>
<h4 id="set-、-get"><a href="#set-、-get" class="headerlink" title="__set()、__get()"></a><code>__set()、__get()</code></h4><p><strong>set()：当给无法访问的属性<em>赋值</em>的时候自动调用
</strong>get()：当<em>获取</em>无法访问的属性值的时候自动调用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">class Student&#123;</span><br><span class="line">	private $name;</span><br><span class="line">	// 当给无法访问的属性赋值时自动调用</span><br><span class="line">	public function __set($key,$value)&#123;</span><br><span class="line">		$this-&gt;$key=$value;</span><br><span class="line">	&#125;</span><br><span class="line">	//当获取无法访问的属性值的时候自动调用</span><br><span class="line">	public function __get($key)&#123;</span><br><span class="line">		return $this-&gt;$key;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$stu = new Student();</span><br><span class="line">$stu-&gt;name=&apos;tom&apos;;</span><br><span class="line">echo $stu-&gt;name;</span><br><span class="line"> ?&gt;</span><br><span class="line">tom</span><br></pre></td></tr></table></figure>
<h4 id="unset-、-isset"><a href="#unset-、-isset" class="headerlink" title="__unset()、__isset()"></a><code>__unset()、__isset()</code></h4><p><strong>unset():当销毁无法访问的属性的时候自动调用
</strong>isset():当判断无法访问的属性是否存在时自动调用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">class Student&#123;</span><br><span class="line">	private $name;</span><br><span class="line">	private $sex;</span><br><span class="line">	private $array=array(&apos;name&apos;,&apos;sex&apos;);</span><br><span class="line">	// 当销毁无法访问的属性的时候自动调用</span><br><span class="line">	public function __unset($key)&#123;</span><br><span class="line">		unset($this-&gt;$key);</span><br><span class="line">	&#125;</span><br><span class="line">	// 当判断无法访问的属性时自动调用</span><br><span class="line">	public function __isset($key)&#123;</span><br><span class="line">		return in_array($key,$this-&gt;array);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$stu=new Student();</span><br><span class="line">echo isset($stu-&gt;name)?&apos;yes&apos;:&apos;no&apos;;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo isset($stu-&gt;sss)?&apos;yes&apos;:&apos;no&apos;;</span><br><span class="line"> ?&gt;</span><br><span class="line">yes</span><br><span class="line">no</span><br></pre></td></tr></table></figure>
<h4 id="call-、-callstatic"><a href="#call-、-callstatic" class="headerlink" title="__call()、__callstatic()"></a><code>__call()、__callstatic()</code></h4><p><strong>call():当调用无法访问的普通方法时候自动调用
</strong>callstatic():当调用无法访问的静态方法时候自动调用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">class Student&#123;</span><br><span class="line">	/**</span><br><span class="line">	 * 当调用无法访问的方法时自动调用</span><br><span class="line">	 * @param $fn_name string 传递方法名</span><br><span class="line">	 * @param $fn_args array 传递参数数组</span><br><span class="line">	 */</span><br><span class="line">	public function __call($fn_name,$fn_args)&#123;</span><br><span class="line">		echo &quot;不能调用&quot;.$fn_name.&quot;方法&lt;br&gt;&quot;;</span><br><span class="line">		var_dump($fn_args);</span><br><span class="line">		//echo implode(&apos;,&apos;,$fn_args);</span><br><span class="line">	&#125;</span><br><span class="line">	// 当输出静态方法调用一个无法访问的方式时自动调用</span><br><span class="line">	public static function __callStatic($fn_name,$fn_args)&#123;</span><br><span class="line">		echo &quot;&lt;br&gt;不能调用静态&quot;.$fn_name.&apos;方法&lt;br&gt;&apos;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$stu = new Student();</span><br><span class="line">$stu-&gt;show(10,20);</span><br><span class="line">Student::test();</span><br><span class="line"> ?&gt;</span><br><span class="line">不能调用show方法</span><br><span class="line">array(2) &#123; [0]=&gt; int(10) [1]=&gt; int(20) &#125; </span><br><span class="line">不能调用静态test方法</span><br></pre></td></tr></table></figure>
<h3 id="Iterator（迭代器）"><a href="#Iterator（迭代器）" class="headerlink" title="Iterator（迭代器）"></a>Iterator（迭代器）</h3><p>Iterator是迭代器，是PHP内置的接口，用来遍历类中的某个属性。迭代器中有5个抽象方法</p>
<ol>
<li>Iterator::current     -返回当前元素</li>
<li>Iterator::key        -返回当前元素的键</li>
<li>Iterator::next        -向前移动到下一个元素</li>
<li>Iterator::rewind        -返回到迭代器的第一个元素</li>
<li>Iterator::valid        -检查当前位置是否有效</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">//学生类</span><br><span class="line">class Student &#123;</span><br><span class="line">private $name;</span><br><span class="line">public function __construct($name) &#123;</span><br><span class="line">	$this-&gt;name=$name;</span><br><span class="line">&#125;</span><br><span class="line">public function __get($key) &#123;</span><br><span class="line">	return $this-&gt;$key;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">//班级类</span><br><span class="line">class MyClass implements Iterator &#123;</span><br><span class="line">	private $stu_list=array();	//学生数组</span><br><span class="line">	public function addStu(Student $stu) &#123;</span><br><span class="line">		$this-&gt;stu_list[]=$stu;</span><br><span class="line">	&#125;</span><br><span class="line">	//指针复位到数组的第一个元素</span><br><span class="line">	public function rewind() &#123;</span><br><span class="line">		reset($this-&gt;stu_list);</span><br><span class="line">	&#125;</span><br><span class="line">	//检查当前指针的位置是否合法</span><br><span class="line">	public function valid() &#123;</span><br><span class="line">		return key($this-&gt;stu_list)!==null;</span><br><span class="line">	&#125;</span><br><span class="line">	//返回当前值</span><br><span class="line">	public function current() &#123;</span><br><span class="line">		return current($this-&gt;stu_list);</span><br><span class="line">	&#125;</span><br><span class="line">	//返回当前键</span><br><span class="line">	public function key() &#123;</span><br><span class="line">		return key($this-&gt;stu_list);</span><br><span class="line">	&#125;</span><br><span class="line">	//指针下移一位</span><br><span class="line">	public function next() &#123;</span><br><span class="line">		next($this-&gt;stu_list);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">//创建班级</span><br><span class="line">$class=new MyClass;</span><br><span class="line">$class-&gt;addStu(new Student(&apos;tom&apos;));</span><br><span class="line">$class-&gt;addStu(new Student(&apos;berry&apos;));</span><br><span class="line">$class-&gt;addStu(new Student(&apos;Ketty&apos;));</span><br><span class="line">//遍历班级，就是遍历学生数组</span><br><span class="line">foreach($class as $stu) &#123;</span><br><span class="line">	echo $stu-&gt;name,&apos;&lt;br&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line"> ?&gt;</span><br><span class="line">tom</span><br><span class="line">berry</span><br><span class="line">Ketty</span><br></pre></td></tr></table></figure>
<h3 id="数组的序列化（serialize）和反序列化（unserialize）"><a href="#数组的序列化（serialize）和反序列化（unserialize）" class="headerlink" title="数组的序列化（serialize）和反序列化（unserialize）"></a>数组的序列化（serialize）和反序列化（unserialize）</h3><h3 id="对象的序列化和反序列化"><a href="#对象的序列化和反序列化" class="headerlink" title="对象的序列化和反序列化"></a>对象的序列化和反序列化</h3>]]></content>
      <tags>
        <tag>PHP面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP面向对象2</title>
    <url>/2015/20150916-1.html</url>
    <content><![CDATA[<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>多态就是多种形态<br>多态分为：方法重载和方法重写，但是PHP不支持方法重载。</p>
<h4 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h4><p>子类方法和父类的方法必须同名</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">animal</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> $name=<span class="string">'动物'</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">jiao</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;name.<span class="string">"会叫&lt;br&gt;"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dog</span> <span class="keyword">extends</span> <span class="title">animal</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> $name=<span class="string">'狗'</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">jiao</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;name.<span class="string">"会叫&lt;br&gt;"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$dog = <span class="keyword">new</span> dog();</span><br><span class="line">$dog-&gt;jiao();</span><br><span class="line"></span><br><span class="line">  <span class="meta">?&gt;</span></span><br><span class="line">var_dump($obj);</span><br><span class="line">object(dog)<span class="comment">#1 (1) &#123; ["name"]=&gt; string(3) "狗" &#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>1.子类重写的方法不能比父类的方法更加严格(封装)<br>public、protected、private<br>2.子类可以拥有和父类不同个数的参数，[严格标准是不允许的]</p>
</blockquote>
<h4 id="私有属性的继承和重写"><a href="#私有属性的继承和重写" class="headerlink" title="私有属性的继承和重写"></a>私有属性的继承和重写</h4><p>私有属性可以被继承但不能被重写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">class animal&#123;</span><br><span class="line">	private $name=&apos;动物&apos;;</span><br><span class="line">	public function jiao()&#123;</span><br><span class="line">		echo $this-&gt;name.&quot;会叫&lt;br&gt;&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class dog extends animal&#123;</span><br><span class="line">	private $name=&apos;狗&apos;;</span><br><span class="line">	public function jiao()&#123;</span><br><span class="line">		echo $this-&gt;name.&quot;会叫&lt;br&gt;&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$dog = new dog();</span><br><span class="line">var_dump($dog);</span><br><span class="line">?&gt;</span><br><span class="line">object(dog)#1 (2) &#123; [&quot;name&quot;:&quot;dog&quot;:private]=&gt; string(3) &quot;狗&quot; [&quot;name&quot;:&quot;animal&quot;:private]=&gt; string(6) &quot;动物&quot; &#125;</span><br></pre></td></tr></table></figure>
<h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><p>static        静态的<br>final        最终的<br>abstract    抽象的</p>
<h4 id="static【静态的】"><a href="#static【静态的】" class="headerlink" title="static【静态的】"></a>static【静态的】</h4><p>1、    static修饰属性叫静态属性，static修饰方法叫静态方法<br>2、    当类加载的时候就分配内存空间，在内存中就一份。不用实例化可以直接访问。为所有的对象共享。<br>3、    销毁对象不会销毁静态成员，因为静态成员属于类，而不属于对象。<br>4、    当页面执行完毕的时候才销毁静态成员。<br>5、    父类的static属性子类中可以继承并重写，但不能重新定义同名普通属性。<br>6、    静态方法中不能直接访问普通属性<br>7、    被self调用的普通方法会转成静态方法，【严格标准不允许】</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">class Person&#123;</span><br><span class="line">	public static $name = &apos;人类&apos;;</span><br><span class="line">	public static function show()&#123;</span><br><span class="line">		// echo &apos;这个星球的主宰者是：&apos;.$this-&gt;name;(报错：Fatal error: Using $this when not in object context in)</span><br><span class="line">		echo &apos;这个星球的主宰者是：&apos;.Person::$name;//(正确)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo Person::$name,&quot;&lt;br&gt;&quot;;</span><br><span class="line">Person::show();</span><br><span class="line"> ?&gt;</span><br></pre></td></tr></table></figure>
<p><strong>静态成员可以被继承</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">class Person&#123;</span><br><span class="line">	public static $name = &apos;人类&apos;;</span><br><span class="line">	public static function show()&#123;</span><br><span class="line">		// echo &apos;这个星球的主宰者是：&apos;.$this-&gt;name;(报错：Fatal error: Using $this when not in object context in)</span><br><span class="line">		echo &apos;这个星球的主宰者是：&apos;.Person::$name;//(正确)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Student extends Person&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">echo Person::$name,&quot;&lt;br&gt;&quot;;</span><br><span class="line">Person::show();</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo Student::$name,&apos;&lt;br&gt;&apos;;</span><br><span class="line">Student::show();</span><br><span class="line">echo &apos;&lt;br&gt;&apos;;</span><br><span class="line"> ?&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>调用静态成员：类名::静态成员</p>
</blockquote>
<blockquote>
<p>self 表示当前类名<br>非静态方法被self调用，自动将非静态方法转成静态方法【严格标准是不允许的】</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">class Teacher&#123;</span><br><span class="line">	public function show()&#123;</span><br><span class="line">		echo &quot;stay hungry&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">	public function test()&#123;</span><br><span class="line">		$obj = new self();</span><br><span class="line">		$obj-&gt;show();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Teacher::test();</span><br><span class="line"></span><br><span class="line"> ?&gt;</span><br></pre></td></tr></table></figure>
<h4 id="确定当前对象"><a href="#确定当前对象" class="headerlink" title="确定当前对象"></a>确定当前对象</h4><p>1、$this表示当前对象的引用<br>2、self表示当前方法所在的类的类名<br>3、static表示当前对象所属的类的类名【静态延时绑定】<br>    最后一次执行类的属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person &#123;</span><br><span class="line">	public static $type=&apos;人类&apos;;</span><br><span class="line">	public function showPerson() &#123;</span><br><span class="line">		//var_dump($this);	//object(Student)#1 (0) &#123; &#125;</span><br><span class="line">		//echo self::$type;	//人类</span><br><span class="line">		echo static::$type;	//学生    静态延时绑定,表示Student</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Student extends Person &#123;</span><br><span class="line">	public static $type=&apos;学生&apos;;</span><br><span class="line">	public function showStu() &#123;</span><br><span class="line">		//var_dump($this);	//object(Student)#1 (0) &#123; &#125;</span><br><span class="line">		//echo self::$type;	//学生</span><br><span class="line">		echo static::$type;	//学生</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">//测试</span><br><span class="line">header(&apos;content-type:text/html;charset=utf-8&apos;);</span><br><span class="line">$obj=new Student;</span><br><span class="line">$obj-&gt;showPerson();</span><br><span class="line">$obj-&gt;showStu();</span><br></pre></td></tr></table></figure>
<h4 id="final-最终的"><a href="#final-最终的" class="headerlink" title="final[最终的]"></a>final[最终的]</h4><p>1、    final修饰的类不能被继承<br>2、    final修饰的方法不能被重写<br>3、    final不能修饰属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">final class animal&#123;</span><br><span class="line">	public $name=&apos;动物&apos;;</span><br><span class="line">	public function jiao()&#123;</span><br><span class="line">		echo $this-&gt;name.&quot;会叫&lt;br&gt;&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class dog extends animal&#123;</span><br><span class="line">	public $name=&apos;狗&apos;;</span><br><span class="line">	public function jiao()&#123;</span><br><span class="line">		echo $this-&gt;name.&quot;会叫&lt;br&gt;&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$dog = new dog();</span><br><span class="line">echo $dog-&gt;name,&quot;&lt;br&gt;&quot;;</span><br><span class="line">$dog-&gt;jiao();</span><br><span class="line"> ?&gt;</span><br><span class="line"></span><br><span class="line">Fatal error: Class dog may not inherit from final class (animal) in</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">class animal&#123;</span><br><span class="line">	public $name=&apos;动物&apos;;</span><br><span class="line">	final public function jiao()&#123;</span><br><span class="line">		echo $this-&gt;name.&quot;会叫&lt;br&gt;&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class dog extends animal&#123;</span><br><span class="line">	public $name=&apos;狗&apos;;</span><br><span class="line">	public function jiao()&#123;</span><br><span class="line">		echo $this-&gt;name.&quot;会叫&lt;br&gt;&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$dog = new dog();</span><br><span class="line">echo $dog-&gt;name,&quot;&lt;br&gt;&quot;;</span><br><span class="line">$dog-&gt;jiao();</span><br><span class="line"> ?&gt;</span><br><span class="line">Fatal error: Cannot override final method animal::jiao() in</span><br></pre></td></tr></table></figure>
<h4 id="abstract-抽象的"><a href="#abstract-抽象的" class="headerlink" title="abstract[抽象的]"></a>abstract[抽象的]</h4><p>1、    abstract修饰的类成为抽象类，abstract修饰的方法叫抽象方法<br>2、    抽象方法：只有方法的声明，没有方法的实现<br>3、    抽象类：类中只要有一个方法是抽象方法，这个类就是抽象类。<br>4、    抽象类不可以被实例化，必须在子类中重新实现。</p>
<blockquote>
<p>抽象类的作用：定义方法的命名规范</p>
</blockquote>
<h3 id="接口（interface）"><a href="#接口（interface）" class="headerlink" title="接口（interface）"></a>接口（interface）</h3><p>1、    如果一个类中所有的方法都是抽象方法，这个类就声明成接口。<br>2、    接口是一个特殊的抽象类<br>3、    接口中的方法只能是public的，默认是public的<br>4、    接口中的方法不能用abstract、final来修饰。<br>5、    定义过程用<code>interface</code>实现接口用的<code>implements</code>关键字</p>
<blockquote>
<p>类不能多重继承，但是接口可以多重实现</p>
</blockquote>
<h4 id="继承类的同时实现接口"><a href="#继承类的同时实现接口" class="headerlink" title="继承类的同时实现接口"></a>继承类的同时实现接口</h4><p>必须先继承类，再实现接口</p>
<p><code>class Myclass extends Class implements IPict1,IPict2</code></p>
<h3 id="类常量【const】"><a href="#类常量【const】" class="headerlink" title="类常量【const】"></a>类常量【const】</h3><p>类中可以放属性、方法、常量<br>调用类常量    类名::常量名<br>类常量属于类自身，不属于对象实例，不能通过对象实例访问<br>子类可以重写父类中的常量，可以通过(parent::)来调用父类中的常量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">class Student &#123;</span><br><span class="line">	const type=&apos;学生&apos;;	//类常量</span><br><span class="line">	public function show() &#123;</span><br><span class="line">		echo self::type,&apos;&lt;br&gt;&apos;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">//测试</span><br><span class="line">$stu=new Student;</span><br><span class="line">$stu-&gt;show();	//学生</span><br><span class="line"> ?&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>类常量也可以放在接口中</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">interface Person&#123;</span><br><span class="line">	const type=&apos;人类&apos;;</span><br><span class="line">&#125;</span><br><span class="line">echo Person::type;</span><br><span class="line"> ?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="参数约束"><a href="#参数约束" class="headerlink" title="参数约束"></a>参数约束</h3><p>1、    在PHP5.3以后才支持参数约束<br>2、    只能约束对象，不能约束基本数据类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">class Student&#123;</span><br><span class="line">&#125;</span><br><span class="line">function show(Student $obj)&#123;</span><br><span class="line">	var_dump($obj);</span><br><span class="line">&#125;</span><br><span class="line">show(10);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">Catchable fatal error: Argument 1 passed to show() must be an instance of Student, integer given, called in /Users/uiste/www/test.php on line 95 and defined in /Users/uiste/www/test.php on line 92</span><br><span class="line">只能传递Student类型的数据</span><br><span class="line"></span><br><span class="line">&lt;?php </span><br><span class="line">class Student&#123;</span><br><span class="line">&#125;</span><br><span class="line">function show(Student $obj)&#123;</span><br><span class="line">	var_dump($obj);</span><br><span class="line">&#125;</span><br><span class="line">show(new Student);</span><br><span class="line"> ?&gt;</span><br><span class="line">object(Student)#1 (0) &#123; &#125;</span><br></pre></td></tr></table></figure>
<h3 id="父类可以指向子类的引用"><a href="#父类可以指向子类的引用" class="headerlink" title="父类可以指向子类的引用"></a>父类可以指向子类的引用</h3><p>父类对象可以保存子类的地址</p>
<p>面向对象的三大特性：封装、继承、多态</p>
<h3 id="类的自动加载"><a href="#类的自动加载" class="headerlink" title="类的自动加载"></a>类的自动加载</h3><p>1、    一个文件中只能有一个类<br>2、    类文件名以.class.php结尾<br>3、    类名和文件名同名</p>
<p>Goods.class.php<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/***商品类*/</span><br><span class="line">abstract class Goods &#123;</span><br><span class="line">	protected $name;</span><br><span class="line">	//设置商品名称</span><br><span class="line">	public function setName($name) &#123;</span><br><span class="line">		$this-&gt;name=$name;</span><br><span class="line">	&#125;</span><br><span class="line">	//获取商品名称</span><br><span class="line">	abstract function getName();</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p>
<p>Books.class.php<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Books extends Goods &#123;</span><br><span class="line">	public function getName() &#123;</span><br><span class="line">		echo &quot;《&#123;$this-&gt;name&#125;》&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p>
<p>Phone.class.php<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Phone extends Goods &#123;</span><br><span class="line">	public function getName() &#123;</span><br><span class="line">		echo $this-&gt;name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p>
<p>loadClass.php<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(&apos;content-type:text/html;charset=utf-8&apos;);</span><br><span class="line">require &apos;./Goods.class.php&apos;;</span><br><span class="line">require &apos;./Books.class.php&apos;;</span><br><span class="line">require &apos;./Phone.class.php&apos;;</span><br><span class="line">$book=new 45Books();</span><br><span class="line">$phone=new Phone();</span><br><span class="line">$book-&gt;setName(&apos;PHP高级&apos;);</span><br><span class="line">$book-&gt;getName();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p>
<p>手动引入类比较麻烦，不健壮。最好能实现需要什么类就自动加载什么类。</p>
<p>####　<code>__autoload($class_name)</code><br>当页面执行的时候，PHP核心程序（Zend Engine）判断当前需要哪个类，如果没有找到该类，就自动的调用<code>__autoload()</code>函数，并且将缺少的类名作为参数传递到<code>__autoload()</code>函数中。</p>
<h4 id="通过缺少类名来加载需要的类"><a href="#通过缺少类名来加载需要的类" class="headerlink" title="通过缺少类名来加载需要的类"></a>通过缺少类名来加载需要的类</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">$book = new Books();</span><br><span class="line">$book-&gt;setname(&quot;PHP高级&quot;);</span><br><span class="line">$book-&gt;getname();</span><br><span class="line"></span><br><span class="line">function __autoload($class_name)&#123;</span><br><span class="line">	require &quot;./$class_name.class.php&quot;;</span><br><span class="line">&#125;</span><br><span class="line"> ?&gt;</span><br></pre></td></tr></table></figure>
<h4 id="将类映射到数组中"><a href="#将类映射到数组中" class="headerlink" title="将类映射到数组中"></a>将类映射到数组中</h4><p>有的时候类存放的位置不规则，将不规则的地址映射到类名，形成一个数组再加载。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">function __autoload($class_name)&#123;</span><br><span class="line">	$map = array(</span><br><span class="line">		&apos;Goods&apos; =&gt; &apos;./aa/Goods.class.php&apos;,</span><br><span class="line">		&apos;Books&apos; =&gt; &apos;./bb/Books.class.php&apos;,</span><br><span class="line">		&apos;Phone&apos; =&gt; &apos;./cc/Phone.class.php&apos;</span><br><span class="line">	);</span><br><span class="line">	if (isset($map[$class_name])) &#123;</span><br><span class="line">		require $map[$class_name];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> ?&gt;</span><br></pre></td></tr></table></figure>
<h4 id="利用命名规则加载类"><a href="#利用命名规则加载类" class="headerlink" title="利用命名规则加载类"></a>利用命名规则加载类</h4><p>同一类别的类放在同一个文件夹下，这样便于分组管理</p>
<p>将所有的类文件放到Lib文件夹下。将类名名字改为：类名+文件夹名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.常规引入方法</span><br><span class="line"> require &apos;Goods.class.php&apos;;</span><br><span class="line"> require &apos;Book.class.php&apos;;</span><br><span class="line">2.通过调用autoload自动加载类名，加载缺少类名的类</span><br><span class="line"> function __autoload($class_name)&#123;</span><br><span class="line"> 	require &quot;./&#123;$class_name&#125;.class.php&quot;;</span><br><span class="line"> &#125;</span><br><span class="line"> 3.将类名与地址映射到关联数组中去加载</span><br><span class="line"> function __autoload($class_name)&#123;</span><br><span class="line"> 	$arr = array(</span><br><span class="line"> 		&apos;Book&apos;=&gt;&apos;Book.class.php&apos;,</span><br><span class="line"> 		&apos;Phone&apos;=&gt;&apos;Phone.class.php&apos;,</span><br><span class="line"> 		&apos;Goods&apos;=&gt;&apos;Goods.class.php&apos;</span><br><span class="line"> 	);</span><br><span class="line"> 	if (isset($arr[$class_name]))</span><br><span class="line"> 		require &quot;./&#123;$arr[$class_name]&#125;&quot;;</span><br><span class="line"> &#125;</span><br><span class="line"> 4.利用命名规则加载类一个项目中会有很多类，我们会将类分类存放，类的命令规则：在Lib文件夹下的类以Lib结尾，在Model文件夹的类以Model结尾。</span><br><span class="line"> function __autoload($class_name)&#123;</span><br><span class="line"> 	if (substr($class_name,-3)==&apos;Lib&apos;)</span><br><span class="line"> 		require &quot;./Lib/&#123;$class_name&#125;.class.php&quot;;</span><br><span class="line"> 	elseif (substr($class_name,-3)==&apos;Control&apos;)</span><br><span class="line"> 		require &quot;./Control/&#123;$class_name&#125;.class.php&quot;;</span><br><span class="line"> 	elseif (substr($class_name,-3)==&apos;Model&apos;)</span><br><span class="line"> 		require &quot;./Model/&#123;$class_name&#125;.class.php&quot;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Final 和 abstract 不能修饰接口中的方法<br>参数约束只能约束对象</p>
</blockquote>
]]></content>
      <tags>
        <tag>PHP面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP面向对象1</title>
    <url>/2015/20150914-1.html</url>
    <content><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>1、    OOP：Object Oriented Programming    面向对象编程<br>2、    OOA：Object-Oriented Analysis    面向对象分析<br>3、    OOD：Object-Oriented Design        面向对象设计<br>4、    对象只能有属性、方法、和常量</p>
<blockquote>
<p>类-数据类型<br>对象-复杂的变量<br>属性-变量<br>function-方法、函数</p>
</blockquote>
<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>类名不区分大小写</p>
<p>通过new关键字类实例化对象，实例化的过程就是分配内存的过程<br><code>$stu = new Student();//实例化对象就是把对象的地址传递给$stu1变量</code> </p>
<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>a)    public：公有的            可以在类的内部和外部访问<br>b)    protected：受保护的        在整个继承链上访问<br>c)    private：私有的            只能在类的内部访问</p>
<blockquote>
<p>属性一般是私有的，通过公有的方法对私有的属性进行赋值和取值。这样做为了保证数据完整性<br>$this在类的内部使用，表示调用当前方法的对象</p>
</blockquote>
<h3 id="类、对象、属性、方法在内存中的表现"><a href="#类、对象、属性、方法在内存中的表现" class="headerlink" title="类、对象、属性、方法在内存中的表现"></a>类、对象、属性、方法在内存中的表现</h3><p>内存区域<br>静态区和常量区<br>代码区    &lt;===&gt;    类<br>堆区        &lt;===&gt;    对象<br>栈区        &lt;===&gt;    对象的变量，变量指向的是对象的地址</p>
<blockquote>
<p>调用属性直接调用对象中的对应属性即可。<br>调用方法先获取对象所在的类，然后调用类中的方法。</p>
</blockquote>
<p>类的本质是一个复杂的数据类型；对象的本质是内存中的空间，是一个复杂的变量</p>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p><code>__construct()</code><br>构造函数：在对象产生的时候自动调用<br>a)    可以传递不同的参数<br>b)    用来初始化成员变量（属性）</p>
<blockquote>
<p>跟类名同名的方法也是构造方法;PHP中推荐使用__construct()做构造函数,且优先级较高</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">class Student &#123;</span><br><span class="line">	//构造函数语法二</span><br><span class="line">	public function Student() &#123;</span><br><span class="line">		echo &apos;i am a boy!&lt;br&gt;&apos;;</span><br><span class="line">	&#125;</span><br><span class="line">	//构造函数语法一(优先级高)</span><br><span class="line">	public function __construct() &#123;</span><br><span class="line">		echo &apos;i am a student&lt;br&gt;&apos;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">//测试</span><br><span class="line">new Student;	//i am a student</span><br><span class="line">new Student;	//i am a student</span><br><span class="line"> ?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h3><p><code>__destruct()</code><br>析构函数：在对象销毁的时候自动调用<br>a)    析构函数不能有参数</p>
<h3 id="继承（extends）"><a href="#继承（extends）" class="headerlink" title="继承（extends）"></a>继承（extends）</h3><p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Class 子类 extends 父类&#123;</span><br><span class="line">	//类成员</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="私有的属性也是可以被继承的"><a href="#私有的属性也是可以被继承的" class="headerlink" title="私有的属性也是可以被继承的"></a>私有的属性也是可以被继承的</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person&#123;</span><br><span class="line">	private $name = &apos;uiste&apos;;</span><br><span class="line">	public function show()&#123;</span><br><span class="line">		echo &quot;好学生就是：&quot;.$this-&gt;name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Student extends Person&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$stu1 = new Student();</span><br><span class="line">$stu1-&gt;show();</span><br><span class="line">?&gt;</span><br><span class="line">好学生就是：uiste</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果父类private私有属性重写的时候，无论子类属性是：public、protected、private都会生成性的属性;<br>如果父类是protected受把偶的属性时，子类不可以是private私有的。只能是protected、public，且属性会被重写；<br>如果父类是public公有的属性时，子类也只能是public公有的；</p>
</blockquote>
<p>总之：父类属性不是私有状态，子类的属性就不能比父类属性的权限严格。<br>父类属性时私有状态是，子类的属性可以任何状态，重写则会被重新建立。</p>
<h4 id="子类中调用父类的属性和方法"><a href="#子类中调用父类的属性和方法" class="headerlink" title="子类中调用父类的属性和方法"></a>子类中调用父类的属性和方法</h4><p>调用父类的属性和方法用$this关键字</p>
<h4 id="调用父类的构造方法"><a href="#调用父类的构造方法" class="headerlink" title="调用父类的构造方法"></a>调用父类的构造方法</h4><p>通过parent和父类的类名来调用父类的构造函数<br>语法：<br><code>parent::__construct()</code><br><code>父类类名::__construct()</code></p>
<blockquote>
<p>如果子类有构造函数就调用子类的构造函数，如果子类没有就调用父类的构造函数</p>
</blockquote>
<p>1、    继承：extends关键字<br>2、    $this：当前对象的引用<br>3、    parent：父类的类名<br>4、    私有属性也是可以被继承的</p>
<h4 id="给父类的构造函数传递参数"><a href="#给父类的构造函数传递参数" class="headerlink" title="给父类的构造函数传递参数"></a>给父类的构造函数传递参数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">class Person&#123;</span><br><span class="line">	private $name;</span><br><span class="line">	private $sex;</span><br><span class="line">	public function __construct($name,$sex)&#123;</span><br><span class="line">		$this-&gt;name = $name;</span><br><span class="line">		$this-&gt;sex = $sex;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Student extends Person&#123;</span><br><span class="line">	private $score;</span><br><span class="line">	public function __construct($name,$sex,$score)&#123;</span><br><span class="line">		parent::__construct($name,$sex);</span><br><span class="line">		$this-&gt;score = $score;</span><br><span class="line">	&#125;</span><br><span class="line">	public function show()&#123;</span><br><span class="line">		echo $this-&gt;name.&apos;是&apos;.$this-&gt;sex.&apos;生，考了：&apos;.$this-&gt;score.&apos;分数&apos;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$stu1 = new Student(&apos;小明&apos;,&apos;男&apos;,98);</span><br><span class="line">$stu1-&gt;show();</span><br><span class="line"> ?&gt;</span><br><span class="line">Notice: Undefined property: Student::$name in /Users/uiste/www/test.php on line 135</span><br><span class="line">Notice: Undefined property: Student::$sex in /Users/uiste/www/test.php on line 135</span><br><span class="line">是生，考了：98分数</span><br><span class="line">父类是private私有的不能被继承下来；</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person&#123;</span><br><span class="line">	protected $name;</span><br><span class="line">	protected $sex;</span><br><span class="line">	public function __construct($name,$sex)&#123;</span><br><span class="line">		$this-&gt;name = $name;</span><br><span class="line">		$this-&gt;sex = $sex;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Student extends Person&#123;</span><br><span class="line">	private $score;</span><br><span class="line">	public function __construct($name,$sex,$score)&#123;</span><br><span class="line">		parent::__construct($name,$sex);</span><br><span class="line">		$this-&gt;score = $score;</span><br><span class="line">	&#125;</span><br><span class="line">	public function show()&#123;</span><br><span class="line">		echo $this-&gt;name.&apos;是&apos;.$this-&gt;sex.&apos;生，考了：&apos;.$this-&gt;score.&apos;分数&apos;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$stu1 = new Student(&apos;小明&apos;,&apos;男&apos;,98);</span><br><span class="line">$stu1-&gt;show();</span><br><span class="line">?&gt;</span><br><span class="line">小明是男生，考了：98分数</span><br></pre></td></tr></table></figure>
<blockquote>
<p>protected 修饰的成员在整个继承连上访问<br>$this 表示当前对象的引用(地址)</p>
</blockquote>
<p>A类                B类<br>private         不可访问<br>protected        不可访问<br>public            可以访问</p>
<p>父类             子类</p>
]]></content>
  </entry>
  <entry>
    <title>会话控制、cookie、sessions</title>
    <url>/2015/20150911-1.html</url>
    <content><![CDATA[<h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><p>HTTP是无状态的协议<br>HTTP协议没有内建机制来维持两个事务间的状态，无法判断在请求一个页面后再请求另外一个页面时是来自同一用户。</p>
<p>会话控制的思想是指能够在网站中根据一个会话跟踪用户。</p>
<blockquote>
<p>作用：用户登录的支持<br>根据授权级别和个人喜好显示相应的内容。<br>实现购物车功能</p>
</blockquote>
<p>实现原理：<br>通过一个唯一会话ID来驱动的。会话ID是一个加密的随机数字。由PHP生成，在会话的生命周期中都会保存在客户端。保存在用户机器里的cookie中，通过URL在网络上传递。</p>
<h3 id="经典方案"><a href="#经典方案" class="headerlink" title="经典方案"></a>经典方案</h3><p>上次登录时间<br>上次浏览信息<br>规定时间内，不用反复登录</p>
<h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p>如果没有设置时间，cookie不会保存到客户端，浏览器的会话结束，我们的cookie就失效了<br>cookie只能保存字符串 《在此电脑记住用户名》<br>对于中文，cookie会进行urlencode编码，我们可以使用urldecode解码<br>cookie保存的时间可以不一样，虽然是在一个文件内<br>cookie信息是通过http协议传递的</p>
<p>如果需要保存密码，最好使用<strong>md5</strong>加密</p>
<h3 id="增加、更新、删除"><a href="#增加、更新、删除" class="headerlink" title="增加、更新、删除"></a>增加、更新、删除</h3><p><code>setcookie(&#39;username&#39;,&#39;uiste&#39;,time()+60);</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (isset($_COOKIE[&quot;user&quot;])) &#123;</span><br><span class="line">	echo &quot;当前COOKIE是：&quot;.$_COOKIE[&quot;user&quot;];</span><br><span class="line">	echo &quot;正在清楚cookie&lt;br&gt;&quot;;</span><br><span class="line">	setcookie(&quot;user&quot;,&quot;uiste&quot;,time()-3600);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">	echo &quot;您设置的COOKIE时间已超时&lt;br&gt;&quot;;</span><br><span class="line">	echo &quot;正在创建COOKIE&lt;br&gt;&quot;;</span><br><span class="line">	setcookie(&quot;user&quot;,&quot;uiste&quot;,time()+5);</span><br><span class="line">	echo &quot;cookie 创建成功有效时间为5秒&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date_default_timezone_set(&quot;Asia/Shanghai&quot;);</span><br><span class="line">if (isset($_COOKIE[&apos;time&apos;])) &#123;</span><br><span class="line">	echo &quot;您上次登录的时间是&quot;.$_COOKIE[&apos;time&apos;];</span><br><span class="line">	setcookie(&apos;time&apos;,Date(&quot;Y-m-d H:i:s&quot;,time()));</span><br><span class="line">&#125;else&#123;</span><br><span class="line">	echo &quot;您是第一次登录，登录时间：&quot;.Date(&apos;Y-m-d H:i:s&apos;,time());</span><br><span class="line">	setcookie(&apos;time&apos;,Date(&quot;Y-m-d H:i:s&quot;,time()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><p>实现简单的会话</p>
<p>开始一个会话<br>注册会话变量<br>使用会话变量<br>注销变量并销毁会话</p>
<p>作用：</p>
<blockquote>
<p>购物车<br>用户信息<br>一个数据供同一用户不同页面使用<br>防止用户非法登录到某个页面</p>
</blockquote>
<h3 id="session可以保存的数据类型"><a href="#session可以保存的数据类型" class="headerlink" title="session可以保存的数据类型"></a>session可以保存的数据类型</h3><p>整形、浮点型、字符串、布尔、数组、对象</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>要使用session都需要初始化<br>key不能重复<br>如果要取出对象，需要事先声明类的定义<br>session文件创建是在session_start()执行后立即创建；</p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>《手册-附录-配置选项》<br>php.ini配置文件中有一组会话配置选项，可以对其进行设置。如下：<br>session.auto_start = 0 ; 在请求启动时初始化session<br>session.cache_expire = 180 ; 设置缓存中的会话文档在 n 分钟后过时<br>session.cookie_lifetime = 0 ; 设置按秒记的cookie的保存时间， 相当于设置Session的过期时间，为0时表示直到浏览器被重启<br>session.cookie_path = / ; cookie的有效路径<br>session.cookie_domain = ; cookie的有效域<br>session.name = PHPSESSID；  用在cookie里的session的名字<br>session.save_handler = files ; 用于保存/取回数据的控制方式<br>session.save_path = /tmp ; 在 save_handler 设为文件时传给控制器的参数， 这是数据文件将保存的路径.<br>session.use_cookies = 1 ; 是否使用cookies </p>
<p>需要重启Apache</p>
<blockquote>
<p>这些步骤不一定都要发生在同一个脚本中，其中</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">		用户名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>&gt;&lt;br&gt;</span><br><span class="line">		密　码: &lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span>&gt;&lt;br&gt;</span><br><span class="line">		&lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">	&lt;/form&gt;</span><br><span class="line">	<span class="meta">&lt;?php</span> </span><br><span class="line">	<span class="keyword">if</span> ($_POST) &#123;</span><br><span class="line">		$username = $_POST[<span class="string">'username'</span>];</span><br><span class="line">		$password = mysql_real_escape_string($_POST[<span class="string">'password'</span>]);</span><br><span class="line">		<span class="keyword">require</span> <span class="string">'../inc/conn.php'</span>;</span><br><span class="line">		$sql = <span class="string">"select * from cookie where username='$username' and password='$password'"</span>;</span><br><span class="line">		$res = mysql_query($sql);</span><br><span class="line">		<span class="keyword">if</span> (mysql_fetch_assoc($res)) &#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">"登录成功"</span>;</span><br><span class="line">			<span class="comment">//登录成功就设置session</span></span><br><span class="line">			session_start();</span><br><span class="line">			$_SESSION[<span class="string">'username'</span>]=$username;</span><br><span class="line">			$_SESSION[<span class="string">'password'</span>]=$password;</span><br><span class="line">			<span class="keyword">echo</span> $_SESSION[<span class="string">'username'</span>];</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">'用户名或密码错误，请重新登录'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	 <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">header(<span class="string">"content-type:text/html;charset=utf8"</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($_SESSION[<span class="string">'username'</span>])) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"你没有登录请重新登录&lt;br&gt;"</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"&lt;a href='hw1_form.php'&gt;登录&lt;/a&gt;"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"可以购物"</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"&lt;hr&gt;以下内容是退出功能的实现"</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"&lt;hr&gt;兄弟不好意思，既然成功了我就要给你清除session了&lt;br&gt;"</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'清除session一共两步&lt;br&gt;第一步：注销变量&lt;br&gt;第二步：销毁会话&lt;br&gt;'</span>;</span><br><span class="line">	<span class="keyword">unset</span>($_SESSION[<span class="string">'username'</span>]);</span><br><span class="line">	session_destroy();</span><br><span class="line">&#125;</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>session与cookie的区别<br>cookie是把用户的信息写给用户的浏览器<br>session是把用户的数据写到用户都占的<code>$_SESSION</code>中，存在服务器的某个路径文件中，只用<code>session</code>时要先初始化<code>session_start()</code>;<br>php.ini-&gt;<code>session.auto_start=1</code> 自动开启session不推荐</p>
<p>如果客户端禁用cookie怎样实现session多页面共享<br>在每个超链接上添加一个PHPSESSID=sessionid；<br>同时在每个页面加入：<br>if(isset($_GET[‘PHPSESSID’])){<br>    //设置session_id;<br>    session_id($_GET[‘PHPSESSID’]);<br>}</p>
<p>session_start();</p>
<p>使用系统内置常量：<code>SID</code>;</p>
<p>echo “<a href="a.php?".SID.""></a>“</p>
<blockquote>
<p>以上解决方案为URL重写</p>
</blockquote>
<p>解决非法登录问题<br>if($name!=’’){<br>    session_start();<br>    $_SESSION[‘username’]=$name;<br>    header(“Location:登录成功页?name=$name”);<br>}</p>
<p>if(empty($_SESSION[‘username’])){<br>    header(‘Location:login.php?error=1’);<br>}</p>
<blockquote>
<p>垃圾回收机制<br>cookie默认关闭浏览器即失效</p>
</blockquote>
<p>cookie的生命周期是固定的<br>session的生命周期是访问即重新计算</p>
]]></content>
      <tags>
        <tag>cookie</tag>
        <tag>sessions</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP - MySQL SQL注入</title>
    <url>/2015/20150910-Library-php-note.html</url>
    <content><![CDATA[<h1 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h1><p>用户名注入：<br><code>select * from admin where name=&#39;&#39; or 1=1 or &#39;&#39; and pwd = &#39;&#39;;</code><br><code>select * from admin where name=&#39;&#39; or 1=1 # &#39;&#39; and pwd = &#39;&#39;;</code><br><code>select * from admin where name=&#39;&#39; or 1=1 -- &#39;&#39; and pwd = &#39;&#39;;</code></p>
<blockquote>
<p>‘ or 1=1 or ‘’<br>‘ or 1=1 # ‘’<br>‘ or 1=1 – ‘’</p>
</blockquote>
<p>密码注入：<br><code>select * from admin where name=&#39;&#39; and pwd = &#39;&#39; OR &#39;&#39;=&#39;&#39;;</code></p>
<blockquote>
<p>‘ OR ‘’=’</p>
</blockquote>
<p>解决方法一：<br><code>mysql_real_escape_string()</code> 函数转义 SQL 语句中使用的字符串中的特殊字符。<br>下列字符受影响：<br><code>\x00</code><br><code>\n</code><br><code>\r</code><br><code>\</code><br><code>&#39;</code><br><code>&quot;</code><br><code>\x1a</code><br>如果成功，则该函数返回被转义的字符串。如果失败，则返回 false。<br>语法<br><code>mysql_real_escape_string(string,connection)</code><br>| 参数 | 描述 |<br>| — | — |<br>| string<span class="Apple-tab-span" style="white-space:pre"></span> | 必需。规定要转义的字符串。 |<br>| connection | 可选。规定 MySQL 连接。如果未规定，则使用上一个连接。 |</p>
<p>解决方法二：<code>string mysql_escape_string ( string $unescaped_string )</code></p>
<blockquote>
<p><code>mysql_escape_string()</code> 并不转义 <code>%</code> 和 <code>_</code>。 本函数和 <code>mysql_real_escape_string()</code> 完全一样，除了 <code>mysql_real_escape_string()</code> 接受的是一个连接句柄并根据当前字符集转移字符串之外。<code>mysql_escape_string()</code> 并不接受连接参数，也不管当前字符集设定。</p>
</blockquote>
<p>解决方法三：<br><code>string addslashes ( string $str )</code><br>返回字符串，该字符串为了数据库查询语句等的需要在某些字符前加上了反斜线。这些字符是单引号（’）、双引号（”）、反斜线（\）与 NUL（NULL 字符）。</p>
<p>解决方法四：<br>面向对象风格<br><code>string mysqli::escape_string ( string $escapestr )</code><br><code>string mysqli::real_escape_string ( string $escapestr )</code></p>
<p>过程化风格<br><code>string mysqli_real_escape_string ( mysqli $link , string $escapestr )</code></p>
]]></content>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP-http协议请求、防盗链</title>
    <url>/2015/20150909-1.html</url>
    <content><![CDATA[<p>HyperText Transfer Protocol  超文本传输协议（文本、图片、视频等）<br>http 是建立在 TCP/IP协议的一个应用层协议</p>
<p>内容一样浏览器只发出1次http请求！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">请求行：GET /js.php HTTP/1.1 【请求资源-协议版本】</span><br><span class="line">消息头：</span><br><span class="line">Host: www.test.com  【主机】</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0   【告诉服务器浏览器的内核、操作系统】</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8  【客户端可以接受的文件类型】</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3  【网页语言】</span><br><span class="line">Accept-Encoding: gzip, deflate   【接收什么样的数据压缩格式】</span><br><span class="line">Referer: http://www.test.com/     【代表页面是从哪儿来的】</span><br><span class="line">Connection: keep-alive   【表示不要立即断掉】</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">响应头信息</span><br><span class="line">HTTP/1.1 200 OK   【200 OK 表示客户端请求成功】</span><br><span class="line">Date: Fri, 09 Sep 2015 08:52:49 GMT  【告诉浏览器请求页面的时间】</span><br><span class="line">Server: Apache/2.4.7 (Unix) PHP/5.5.9 OpenSSL/1.0.1f mod_perl/2.0.8-dev Perl/v5.16.3  【告诉浏览器服务的情况】</span><br><span class="line">X-Powered-By: PHP/5.5.9  </span><br><span class="line">Content-Length: 1331  【表示或送的数据有多少字节】</span><br><span class="line">Keep-Alive: timeout=5, max=100</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Type: text/html   【文档类型】</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Date：告诉浏览器，请求页面的时间！（用于判断页面相应时间，根据时间反应是否可以调用缓存信息）</p>
</blockquote>
<p>一个空行：<br>消息体（实体内容）<br>xxx</p>
<h3 id="SERVER-服务器和执行环境信息"><a href="#SERVER-服务器和执行环境信息" class="headerlink" title="$_SERVER 服务器和执行环境信息"></a>$_SERVER 服务器和执行环境信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [UNIQUE_ID] =&gt; V9J4YX8AAAEAAPozd4EAAAAC</span><br><span class="line">    [HTTP_HOST] =&gt; www.test.com</span><br><span class="line">    [HTTP_USER_AGENT] =&gt; Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</span><br><span class="line">    [HTTP_ACCEPT] =&gt; text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">    [HTTP_ACCEPT_LANGUAGE] =&gt; zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span><br><span class="line">    [HTTP_ACCEPT_ENCODING] =&gt; gzip, deflate</span><br><span class="line">    [HTTP_CONNECTION] =&gt; keep-alive</span><br><span class="line">    [PATH] =&gt; /usr/bin:/bin:/usr/sbin:/sbin</span><br><span class="line">    [DYLD_LIBRARY_PATH] =&gt; /Applications/XAMPP/xamppfiles/lib</span><br><span class="line">    [SERVER_SIGNATURE] =&gt; </span><br><span class="line">    [SERVER_SOFTWARE] =&gt; Apache/2.4.7 (Unix) PHP/5.5.9 OpenSSL/1.0.1f mod_perl/2.0.8-dev Perl/v5.16.3</span><br><span class="line">    [SERVER_NAME] =&gt; www.test.com</span><br><span class="line">    [SERVER_ADDR] =&gt; 127.0.0.1</span><br><span class="line">    [SERVER_PORT] =&gt; 80</span><br><span class="line">    [REMOTE_ADDR] =&gt; 127.0.0.1</span><br><span class="line">    [DOCUMENT_ROOT] =&gt; /Users/uiste/www/</span><br><span class="line">    [REQUEST_SCHEME] =&gt; http</span><br><span class="line">    [CONTEXT_PREFIX] =&gt; </span><br><span class="line">    [CONTEXT_DOCUMENT_ROOT] =&gt; /Users/uiste/www/</span><br><span class="line">    [SERVER_ADMIN] =&gt; you@example.com</span><br><span class="line">    [SCRIPT_FILENAME] =&gt; /Users/uiste/www/test.php</span><br><span class="line">    [REMOTE_PORT] =&gt; 50802</span><br><span class="line">    [GATEWAY_INTERFACE] =&gt; CGI/1.1</span><br><span class="line">    [SERVER_PROTOCOL] =&gt; HTTP/1.1</span><br><span class="line">    [REQUEST_METHOD] =&gt; GET</span><br><span class="line">    [QUERY_STRING] =&gt; </span><br><span class="line">    [REQUEST_URI] =&gt; /test.php</span><br><span class="line">    [SCRIPT_NAME] =&gt; /test.php</span><br><span class="line">    [PHP_SELF] =&gt; /test.php</span><br><span class="line">    [REQUEST_TIME_FLOAT] =&gt; 1473411169.446</span><br><span class="line">    [REQUEST_TIME] =&gt; 1473411169</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>【PATH】：服务器端的环境变量<br>$_SERVER[‘REMOTE_ADDR’] 获取本地的IP地址；<br>REQUEST_URI  获取请求的资源名</p>
<p>DOCUMENT_ROOT 站点根目录</p>
<h3 id="Referer-：防盗链"><a href="#Referer-：防盗链" class="headerlink" title="Referer ：防盗链"></a>Referer ：防盗链</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (isset($_SERVER[&apos;HTTP_REFERER&apos;])) &#123;</span><br><span class="line">	if (strpos($_SERVER[&apos;SERVER_ADDR&apos;],$_SERVER[&apos;HTTP_REFERER&apos;])===0) &#123;</span><br><span class="line">		echo &apos;您是合法用户&apos;;</span><br><span class="line">	&#125;else&#123;</span><br><span class="line">		echo &quot;您是非法用户&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">	echo &quot;你这用户不合法&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意字符串查找返回0，0与false的比较问题</p>
</blockquote>
<h3 id="http请求有两种主要的方式"><a href="#http请求有两种主要的方式" class="headerlink" title="http请求有两种主要的方式"></a>http请求有两种主要的方式</h3><p>get/post<br>相同：都是向服务器发送数据<br>区别：<br>1、安全性get请求的数据会显示在地址栏上，post请求的数据，放在http协议的消息体上<br>2、http协议本身并没有限制数据的大小，主要是浏览器限制get请求2k+35<br>    对post请求没有限制<br>3、get提交的更利于添加到收藏夹</p>
<h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p>状态码-含义<br>100~199：表示成功接收请求，要求客户端继续提交下一次请求才能完成整个处理过程<br>200~299：表示成功接收请求并已完成整个处理过程，常用200<br>300~399：为完成请求，客户需进一步细化请求，例如，请求的资源已经移动到一个新地址，常用302，304<br>400~499：客户端的请求有错误，常用404<br>500~599：服务器端出现错误，常用500</p>
<blockquote>
<p>302:页面重定向<br>404:该页面不存在<br>304:资源已存在</p>
</blockquote>
<p>跳转<code>header(&quot;refresh:3;url=http://www.uiste.com&quot;);</code></p>
<h3 id="通过header禁用缓存-ajax"><a href="#通过header禁用缓存-ajax" class="headerlink" title="通过header禁用缓存(ajax)"></a>通过header禁用缓存(ajax)</h3><p>header(“Expires:-1”);<br>header(“Cache-Control:noch”);<br>header(“Pragma:no-cache”);</p>
<h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downfile</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">$filename = <span class="string">'xxx.jpg'</span>;</span><br><span class="line"><span class="comment">//中文转码</span></span><br><span class="line">$filename = iconv(<span class="string">'utf-8'</span>,<span class="string">'gb2312'</span>,$filename);</span><br><span class="line"><span class="comment">//绝对路径</span></span><br><span class="line">$filepath = $_SERVER[<span class="string">'DOCUMENT_ROOT'</span>].<span class="string">'down/'</span>.$filename;</span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line"><span class="keyword">if</span> (!file_exists($filepath)) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'文件不存在'</span>;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">$fp=fopen($filename,<span class="string">'r'</span>);</span><br><span class="line"><span class="comment">//获取下载文件的大小</span></span><br><span class="line">$filesize = filesize($filepath);</span><br><span class="line"><span class="comment">//返回的文件</span></span><br><span class="line">header(<span class="string">"Content-Type:application/octet-stream"</span>);</span><br><span class="line"><span class="comment">//按照字节大小返回</span></span><br><span class="line">header(<span class="string">"Accept-Ranges:bytes"</span>);</span><br><span class="line"><span class="comment">//返回文件大小</span></span><br><span class="line">header(<span class="string">"Accept-Length:$filesize"</span>);</span><br><span class="line"><span class="comment">//客户端弹出对话框，对应的文件名</span></span><br><span class="line">header(<span class="string">"Content-Disposition:attachment;filename="</span>.$filename);</span><br><span class="line"><span class="comment">//先客户端回送数据</span></span><br><span class="line">$buffer = <span class="number">1024</span>;</span><br><span class="line"><span class="comment">//读取文件</span></span><br><span class="line">$filedata = fread($fp,$buffer);</span><br><span class="line"><span class="comment">//关闭文件</span></span><br><span class="line">fclose($fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>http协议</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP-错误处理、异常处理</title>
    <url>/2015/20150907-1.html</url>
    <content><![CDATA[<h3 id="die-的应用"><a href="#die-的应用" class="headerlink" title="die 的应用"></a>die 的应用</h3><p>方式一：<br>if(条件){<br>    die(‘错误信息’);<br>}<br>方式二：<br>执行语句 or die(‘错误信息’);</p>
<h3 id="错误函数（处理器）"><a href="#错误函数（处理器）" class="headerlink" title="错误函数（处理器）"></a>错误函数（处理器）</h3><p>自定义错误处理方式</p>
<h4 id="创建自定义错误处理器"><a href="#创建自定义错误处理器" class="headerlink" title="创建自定义错误处理器"></a>创建自定义错误处理器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function customError($errno, $errstr)</span><br><span class="line"> &#123; </span><br><span class="line"> echo &quot;&lt;b&gt;Error:&lt;/b&gt; [$errno] $errstr&lt;br /&gt;&quot;;</span><br><span class="line"> echo &quot;Ending Script&quot;;</span><br><span class="line"> die();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h4 id="Set-Error-Handler"><a href="#Set-Error-Handler" class="headerlink" title="Set Error Handler"></a>Set Error Handler</h4><p><code>set_error_handler(&quot;customError&quot;);</code></p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//error handler function</span><br><span class="line">function customError($errno, $errstr)</span><br><span class="line"> &#123; </span><br><span class="line"> echo &quot;&lt;b&gt;Error:&lt;/b&gt; [$errno] $errstr&quot;;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">//set error handler</span><br><span class="line">set_error_handler(&quot;customError&quot;);</span><br><span class="line"></span><br><span class="line">//trigger error</span><br><span class="line">echo($test);</span><br><span class="line">?&gt;</span><br><span class="line">以上代码的输出应该类似这样：</span><br><span class="line">Error: [8] Undefined variable: test</span><br></pre></td></tr></table></figure>
<h3 id="错误函数（触发器）"><a href="#错误函数（触发器）" class="headerlink" title="错误函数（触发器）"></a>错误函数（触发器）</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$age = <span class="number">700</span>;</span><br><span class="line"><span class="keyword">if</span> ($age&gt;<span class="number">120</span>) &#123;</span><br><span class="line">	trigger_error(<span class="string">'输入年龄太大'</span>,E_USER_ERROR);</span><br><span class="line">	<span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>指定报错方式</p>
</blockquote>
<h3 id="错误日志"><a href="#错误日志" class="headerlink" title="错误日志"></a>错误日志</h3><p>根据php.ini中的error_log配置，PHP向服务器的错误记录系统或文件发送错误记录。通过使用error_log()函数，用户可以向指定的文件或远程目的地发送错误记录</p>
<p><code></code>bool error_log (string $message [,int$message_type=0[,string $destination [,string $extra_headers]]])</p>
<h3 id="预定义异常"><a href="#预定义异常" class="headerlink" title="预定义异常"></a>预定义异常</h3><p>exception</p>
]]></content>
      <tags>
        <tag>PHP错误处理</tag>
        <tag>PHP异常处理</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP、终端-模拟get请求</title>
    <url>/2015/20150905-2.html</url>
    <content><![CDATA[<h3 id="Mac-设置文件夹权限为777"><a href="#Mac-设置文件夹权限为777" class="headerlink" title="Mac 设置文件夹权限为777"></a>Mac 设置文件夹权限为777</h3><blockquote>
<p>1.cd 你的文件夹路径的上一级目录。<br>2.<code>sudo chmod -R 777 文件夹名</code><br>3.输入密码<br>4.成功</p>
</blockquote>
<p>fsockopen(‘主机’,’端口号’,’错误号’,’错误描述’，’连接时限’);</p>
<h3 id="使用命令行模拟get请求"><a href="#使用命令行模拟get请求" class="headerlink" title="使用命令行模拟get请求"></a>使用命令行模拟get请求</h3><ul>
<li><p>telnet <a href="http://www.test.com" target="_blank" rel="noopener">www.test.com</a> 80</p>
</li>
<li><p>ctrl + ]</p>
</li>
<li><p>enter</p>
</li>
<li><p>GET /httpget.php HTTP/1.1</p>
</li>
<li><p>Host: <a href="http://www.test.com" target="_blank" rel="noopener">www.test.com</a></p>
</li>
</ul>
<h3 id="使用PHP模拟get请求"><a href="#使用PHP模拟get请求" class="headerlink" title="使用PHP模拟get请求"></a>使用PHP模拟get请求</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">header(&apos;content-type:text/html;charset=utf8&apos;);</span><br><span class="line">$fp = fsockopen(&apos;www.test.com&apos;,80,$errno,$error,3);</span><br><span class="line">if (!$fp) &#123;</span><br><span class="line">	// 主机或者端口等定义内容写错了就会报错</span><br><span class="line">	echo &apos;错误号&apos;.$errno.&apos;&lt;br&gt;&apos;;</span><br><span class="line">	echo &apos;错误描述&apos;.$error.&apos;&lt;br&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">$str = &apos;GET /httpget.php HTTP/1.1&apos;.PHP_EOL;</span><br><span class="line">$str.= &apos;Host: www.test.com&apos;.PHP_EOL;</span><br><span class="line">$str.= PHP_EOL;</span><br><span class="line"></span><br><span class="line">// 向打开的连接资源中写入数据，就是get请求数据</span><br><span class="line">fwrite($fp,$str);</span><br><span class="line">// 读取数据</span><br><span class="line">while (!feof($fp)) &#123;</span><br><span class="line">	echo fgets($fp).&apos;&lt;br&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose($fp);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Mac命令熟记</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP闲来无事，小打小闹</title>
    <url>/2015/20150905-1.html</url>
    <content><![CDATA[<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span> (!file_exists(<span class="string">'a/b/c/d/'</span>)) &#123;</span><br><span class="line">	mkdir(<span class="string">'a/b/c/d'</span>,<span class="number">0777</span>,<span class="keyword">true</span>);</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"文件目录创建成功"</span>;</span><br><span class="line">&#125;<span class="keyword">elseif</span>(!file_exists(<span class="string">'a/b/c/d/aaa.txt'</span>))&#123;</span><br><span class="line">	$fp=fopen(<span class="string">'a/b/c/d/aaa.txt'</span>,<span class="string">'w'</span>);</span><br><span class="line">	fwrite($fp, <span class="string">'闲的无聊'</span>);</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"文件内容创建成功"</span>;</span><br><span class="line">&#125;<span class="keyword">elseif</span>(file_exists(<span class="string">'a/b/c/d/aaa.txt'</span>))&#123;</span><br><span class="line">	unlink(<span class="string">'a/b/c/d/aaa.txt'</span>);</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"文件内容删除成功"</span>,<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">	rmdir(<span class="string">'a/b/c/d'</span>);</span><br><span class="line">	rmdir(<span class="string">'a/b/c'</span>);</span><br><span class="line">	rmdir(<span class="string">'a/b'</span>);</span><br><span class="line">	rmdir(<span class="string">'a'</span>);</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"文件目录删除成功"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="上传下载"><a href="#上传下载" class="headerlink" title="上传下载"></a>上传下载</h3><p>核心</p>
<blockquote>
<ol>
<li>设计表单时注意属性：<code>enctype=&quot;multipart/form-data&quot;；</code></li>
<li>文件接收时：<code>print_r ($_FILES[&#39;file&#39;]);</code>返回数组文件内容</li>
<li>判断文件是否上传成功：<code>is_uploaded_file($_FILES[&#39;file&#39;][&#39;tmp_name&#39;])</code></li>
<li>定义上传路径与保存路径</li>
<li>// 把文件转存到希望的文件目录<br><code>$upload_file = $_FILES[&#39;file&#39;][&#39;tmp_name&#39;];</code></li>
<li><code>file_exists</code>判断转移文件夹存在与否，通过<code>mkdir</code>新建转移文件夹</li>
<li>// 通过<code>time()</code>与<code>rand()</code>获取时间戳对文件重命名避免上传文件的重复而被覆盖<br><code>$move_file = $_SERVER[&#39;DOCUMENT_ROOT&#39;].&quot;upload/&quot;.time().rand(0,100).$_FILES[&#39;file&#39;][&#39;name&#39;];</code></li>
<li>文件路径转移函数<br><code>move_uploaded_file($upload_file,$move_file)</code></li>
<li>中文转码：<code>string iconv ( string $in_charset , string $out_charset , string $str );</code></li>
</ol>
</blockquote>
<p>前台页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"control.php"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span> &gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">style</span>=<span class="string">"font-size: 20px;"</span>&gt;</span>上传文件<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>文件分类<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"resource"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">'pic'</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">'mus'</span>&gt;</span>音乐<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">'vio'</span>&gt;</span>视频<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">'doc'</span>&gt;</span>文档<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">'txt'</span>&gt;</span>文件<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">'font-size:6px;color:#ff9955;'</span>&gt;</span>暂时只支持上传“png”与“jpg”格式的图片资源<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>文件介绍<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">name</span>=<span class="string">"describe"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>上传文件<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>点击提交<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"btn"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>控制器</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">require</span> $_SERVER[<span class="string">'DOCUMENT_ROOT'</span>].<span class="string">'inc/conn.php'</span>;</span><br><span class="line"><span class="comment">// 判断是否提交数据</span></span><br><span class="line"><span class="keyword">if</span> ($_POST[<span class="string">'btn'</span>]) &#123;</span><br><span class="line">	<span class="comment">// 接收提交内容</span></span><br><span class="line">	$resource = $_POST[<span class="string">'resource'</span>];</span><br><span class="line">	$describe = $_POST[<span class="string">'describe'</span>];</span><br><span class="line">	<span class="comment">// 显示FILES全局变量的信息</span></span><br><span class="line">	<span class="comment">// echo "&lt;pre&gt;";</span></span><br><span class="line">	<span class="comment">// print_r ($_FILES['file']);</span></span><br><span class="line">	<span class="comment">// echo "&lt;/pre&gt;";</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//判断文件大小，限制在10M以内</span></span><br><span class="line">	<span class="keyword">if</span> ($_FILES[<span class="string">'file'</span>][<span class="string">'size'</span>]&gt;<span class="number">10</span>*<span class="number">1024</span>*<span class="number">1024</span>) &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"上传文件太大，请重新上传，页面正在跳转"</span>;</span><br><span class="line">		header(<span class="string">'refresh:10;url=upload.php'</span>);</span><br><span class="line">		<span class="keyword">exit</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//判断上传文件格式是否满足条件(暂未完善暂时只支持png与jpg格式图片)</span></span><br><span class="line">	$type = $_FILES[<span class="string">'file'</span>][<span class="string">'type'</span>];</span><br><span class="line">	<span class="comment">//echo $type;//通过该输出确认文件格式；</span></span><br><span class="line">	<span class="keyword">if</span> ($type!=<span class="string">'image/jpeg'</span>&amp;&amp;$type!=<span class="string">'image/png'</span>) &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"上传格式不对，请重新上传，页面正在跳转"</span>;</span><br><span class="line">		header(<span class="string">'refresh:3;url=upload.php'</span>);</span><br><span class="line">		<span class="keyword">exit</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 判断文件是否上传成功$_FILES['file']['tmp_name']代表临时文件 </span></span><br><span class="line">	<span class="keyword">if</span> (is_uploaded_file($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>])) &#123;</span><br><span class="line">		<span class="comment">// 把文件转存到希望的文件目录</span></span><br><span class="line">		$upload_file = $_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">		<span class="comment">//根据分类创建对应文件夹（应用于根据用户创建对应文件夹）</span></span><br><span class="line">		$user_path = $_SERVER[<span class="string">'DOCUMENT_ROOT'</span>].<span class="string">"upload/"</span>.$resource;</span><br><span class="line">		<span class="keyword">if</span> (!file_exists($user_path)) &#123;</span><br><span class="line">			mkdir($user_path,<span class="number">0777</span>,<span class="keyword">true</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 通过time()与rand()获取时间戳对文件重命名避免上传文件的重复而被覆盖</span></span><br><span class="line">		$move_file = $user_path.<span class="string">"/"</span>.time().rand(<span class="number">0</span>,<span class="number">100</span>).$_FILES[<span class="string">'file'</span>][<span class="string">'name'</span>];</span><br><span class="line">		<span class="comment">// 测试路径地址正确与否</span></span><br><span class="line">		<span class="comment">// echo $upload_file,'&lt;br&gt;';</span></span><br><span class="line">		<span class="comment">// echo $move_file;</span></span><br><span class="line">		<span class="comment">// 中文出错时转码函数iconv ('utf-8','gb2312',$move_file);</span></span><br><span class="line">		<span class="keyword">if</span> (move_uploaded_file($upload_file,$move_file)) &#123;</span><br><span class="line">			$sql = <span class="string">"insert into resource values(null,'$resource','$describe','$move_file')"</span>;</span><br><span class="line">			<span class="keyword">if</span> (mysql_query($sql)) &#123;</span><br><span class="line">				<span class="keyword">echo</span> <span class="string">'文件上传成功，正在跳转到下载页面...'</span>;</span><br><span class="line">				header(<span class="string">'refresh:3;url=download.php'</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				mysql_query($sql) <span class="keyword">or</span> <span class="keyword">die</span>(mysql_error());</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">"文件上传失败,请上传文件..."</span>;</span><br><span class="line">			header(<span class="string">'refresh:3;url=upload.php'</span>);</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"没有文件上传,请上传文件..."</span>;</span><br><span class="line">		header(<span class="string">'refresh:3;url=upload.php'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"未进行文件上传，正在跳转到上传页面..."</span>;</span><br><span class="line">	header(<span class="string">'refresh:3;url=upload.php'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>显示页面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">require $_SERVER[&apos;DOCUMENT_ROOT&apos;].&apos;/inc/conn.php&apos;;</span><br><span class="line">$sql = &quot;select * from resource&quot;;</span><br><span class="line">$resource_content = mysql_query($sql);</span><br><span class="line"></span><br><span class="line">header(&apos;content-type:image/png&apos;);</span><br><span class="line">header(&apos;content-length:&apos;.filesize($filename));</span><br><span class="line">header(&apos;Content-Disposition: attachment; filename=&quot;1.png&quot;&apos;);</span><br><span class="line">readfile($filename);</span><br><span class="line">while ($resource = mysql_fetch_assoc($resource_content)) &#123;</span><br><span class="line">	echo &apos;&lt;h1&gt;文件分类:&apos;.$resource[&apos;resource&apos;].&apos;&lt;hr&gt;&apos;;</span><br><span class="line">	echo &apos;文件简介:&apos;.$resource[&apos;describe&apos;].&apos;&lt;br&gt;&apos;;</span><br><span class="line">	echo &apos;下载地址:&apos;.$resource[&apos;filename&apos;].&apos;&lt;br&gt;&lt;br&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>PHP思想</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP操作数据库</title>
    <url>/2015/20150904-1.html</url>
    <content><![CDATA[<h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$link=@mysql_connect(&apos;localhost:3306&apos;,&apos;root&apos;,&apos;aaa&apos;) or die(mysql_error());	//连接数据库</span><br><span class="line">mysql_query(&apos;set names utf8&apos;);	//设置字符编码</span><br><span class="line">//mysql_query(&apos;use jokedb&apos;);		//选择数据库</span><br><span class="line">mysql_select_db(&apos;jokedb&apos;);	//选择数据库</span><br></pre></td></tr></table></figure>
<h3 id="显示数据库函数"><a href="#显示数据库函数" class="headerlink" title="显示数据库函数"></a>显示数据库函数</h3><h4 id="mysql-fetch-row"><a href="#mysql-fetch-row" class="headerlink" title="mysql_fetch_row()"></a>mysql_fetch_row()</h4><p>获取资源中的一条记录，并匹配成索引数组，指针下移一条。如果匹配不到返回false</p>
<h4 id="mysql-fetch-assoc"><a href="#mysql-fetch-assoc" class="headerlink" title="mysql_fetch_assoc()"></a>mysql_fetch_assoc()</h4><p>mysql_fetch_row()<br>获取资源中的一条记录，并匹配成索引数组，指针下移一条。如果匹配不到返回false</p>
<h4 id="mysql-fetch-array"><a href="#mysql-fetch-array" class="headerlink" title="mysql_fetch_array()"></a>mysql_fetch_array()</h4><p>获取资源中的一条记录，并匹配成关联数组和索引，指针下移一条。匹配不到返回false</p>
<blockquote>
<p>数据的个数是记录的两倍，一般不使用</p>
</blockquote>
<h4 id="mysql-fetch-object"><a href="#mysql-fetch-object" class="headerlink" title="mysql_fetch_object()"></a>mysql_fetch_object()</h4><p>获取资源中的一条记录，并匹配成对象，指针下移一条。匹配不到返回false</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$rows = mysql_fetch_object($rs);</span><br><span class="line">echo $rows-&gt;ID,&apos;&lt;br&gt;&apos;.$rows-&gt;Title;</span><br></pre></td></tr></table></figure>
<h3 id="分页原理"><a href="#分页原理" class="headerlink" title="分页原理"></a>分页原理</h3><p>总页码：<code>$pagecount=ceil($recordcount/$pagesize)</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$titleid=isset($_GET[&apos;titleid&apos;])?$_GET[&apos;titleid&apos;]:1;	//笑话类别</span><br><span class="line">$pagesize=10;	//声明一页放10条记录</span><br><span class="line">//第一步：求总记录数</span><br><span class="line">$sql=&quot;select count(*) from contents where title=$titleid&quot;;</span><br><span class="line">$rs=mysql_query($sql);</span><br><span class="line">$rows=mysql_fetch_row($rs);</span><br><span class="line">$recordcount=$rows[0];	//总记录数</span><br><span class="line">//第二步：求总页数</span><br><span class="line">$pagecount=ceil($recordcount/$pagesize);	//总页数</span><br><span class="line">//第四步：获取当前页码</span><br><span class="line">$pageno=isset($_GET[&apos;pageno&apos;])?$_GET[&apos;pageno&apos;]:1;</span><br><span class="line">if($pageno&lt;1)</span><br><span class="line">	$pageno=1;</span><br><span class="line">if($pageno&gt;$pagecount)</span><br><span class="line">	$pageno=$pagecount;</span><br><span class="line">//第五步：计算起始位置</span><br><span class="line">$startno=($pageno-1)*$pagesize;</span><br><span class="line">//第六步：获取当前页面的内容</span><br><span class="line">$sql=&quot;select * from contents where title=$titleid limit $startno,$pagesize&quot;;</span><br><span class="line">$rs=mysql_query($sql,$link);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="mysql-close-关闭数据库"><a href="#mysql-close-关闭数据库" class="headerlink" title="mysql_close()关闭数据库"></a>mysql_close()关闭数据库</h3><p>如果没有的话，系统也会自动关闭的</p>
<blockquote>
<p>数据库使用原则，尽量晚创建，早释放</p>
</blockquote>
<h3 id="mysql-affected-rows-link"><a href="#mysql-affected-rows-link" class="headerlink" title="mysql_affected_rows($link)"></a>mysql_affected_rows($link)</h3><p>取得前一次操作说影响的记录数</p>
<h3 id="SqlTool工具类封装"><a href="#SqlTool工具类封装" class="headerlink" title="SqlTool工具类封装"></a>SqlTool工具类封装</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqlTool</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> $conn;</span><br><span class="line">	<span class="keyword">private</span> $host = <span class="string">"localhost"</span>;</span><br><span class="line">	<span class="keyword">private</span> $user = <span class="string">"root"</span>;</span><br><span class="line">	<span class="keyword">private</span> $password = <span class="string">"root"</span>;</span><br><span class="line">	<span class="keyword">private</span> $db = <span class="string">"test"</span>;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">SqlTool</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;conn=mysql_connect(<span class="keyword">$this</span>-&gt;host,<span class="keyword">$this</span>-&gt;user,<span class="keyword">$this</span>-&gt;password);</span><br><span class="line">		<span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;conn) &#123;</span><br><span class="line">			<span class="keyword">die</span>(<span class="string">"连接数据库失败："</span>).mysql_error();</span><br><span class="line">		&#125;</span><br><span class="line">		mysql_select_db($db);</span><br><span class="line">		mysql_query(<span class="string">'set names utf8'</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">exeute_dql</span><span class="params">($sql)</span></span>&#123;</span><br><span class="line">		$res = mysql_query($sql);</span><br><span class="line">		<span class="keyword">return</span> $res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//完成 update,delete,insert;</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">exeute_dml</span><span class="params">($sql)</span></span>&#123;</span><br><span class="line">		$b=mysql_query($sql);</span><br><span class="line">		<span class="keyword">if</span> (!$b) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//失败</span></span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (mysql_affected_rows(<span class="keyword">$this</span>-&gt;conn)&gt;<span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//表示成功</span></span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">2</span>;<span class="comment">//表示没有行数影响</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>调用类方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">require</span> <span class="string">"SqlTool.class.php"</span>;</span><br><span class="line">$sql = <span class="string">"  "</span>;</span><br><span class="line">$sqlTool = <span class="keyword">new</span> SqlTool();</span><br><span class="line">$res=$sqlTool-&gt;exeute_dml($sql);</span><br><span class="line"></span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>$res = mysql_query($sql,$conn);<br>获取行数：$rows = mysql_affected_rows();<br>获取列数：$cols = mysql_num_fields($res);</p>
<p>输出表头：<br>for($i = 0;$i&lt;$colums;$i++)    {<br>    $field_name=mysql_field_name($res,$i);<br>    echo “<th>$field_name</th>“;<br>}</p>
<p>mysql_insert_id 取得上一步insert操作产生的id号</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP核心编程</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 数据库常见查询</title>
    <url>/2015/20150903-2.html</url>
    <content><![CDATA[<h3 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h3><p><code>select 【select选项】|*|字段列表|字段名 【as】 字段别名 from 表名 【as】表别名 【where子句】【group by子句】【having子句】【order by子句】【limit子句】</code><br>说明：<br>【where子句】【group by子句】【having子句】【order by子句】【limit子句】五子句，可以随意的组合，但无论如何组合，五子句的顺序一定要按语法的顺序书写。<br><em>王狗和欧丽</em></p>
<h4 id="where子句"><a href="#where子句" class="headerlink" title="where子句"></a>where子句</h4><p>where后面跟的是条件，在数据源中进行筛选</p>
<h5 id="in-not-in"><a href="#in-not-in" class="headerlink" title="in | not in"></a>in | not in</h5><p><code>..where 字段 in(&#39;北京&#39;,&#39;上海&#39;);</code></p>
<h5 id="between…and-not-between…and"><a href="#between…and-not-between…and" class="headerlink" title="between…and|not between…and"></a>between…and|not between…and</h5><p><code>..where 字段 between 25 and 28;</code></p>
<h5 id="is-null-is-not-null"><a href="#is-null-is-not-null" class="headerlink" title="is null | is not null"></a>is null | is not null</h5><p><code>..where 字段1 is null or 字段2 is null;</code></p>
<h5 id="模糊查询（like）"><a href="#模糊查询（like）" class="headerlink" title="模糊查询（like）"></a>模糊查询（like）</h5><p><code>..where 字段 like &#39;%永%&#39;;</code><br><code>..where 字段 like &#39;character\_set\_%&#39;;</code></p>
<h4 id="group-分组查询"><a href="#group-分组查询" class="headerlink" title="group 分组查询"></a>group 分组查询</h4><h5 id="group-by-【分组查询】"><a href="#group-by-【分组查询】" class="headerlink" title="group by 【分组查询】"></a>group by 【分组查询】</h5><p><code>..group by 字段;</code></p>
<h5 id="回溯统计【with-rollup】"><a href="#回溯统计【with-rollup】" class="headerlink" title="回溯统计【with rollup】"></a>回溯统计【with rollup】</h5><p><code>..group by 字段 with rollup;</code></p>
<h4 id="having条件"><a href="#having条件" class="headerlink" title="having条件"></a>having条件</h4><p>where是对原始数据进行筛选，having是对记录集(结果集)进行筛选<br><code>select stusex,count(*) total from stu group by stusex having total&gt;3;</code></p>
<h4 id="order-by排序"><a href="#order-by排序" class="headerlink" title="order by排序"></a>order by排序</h4><p>asc：升序【默认】<br>desc：降序<br><code>..from 表名 order by 字段 desc;</code></p>
<h4 id="limit-限制"><a href="#limit-限制" class="headerlink" title="limit 限制"></a>limit 限制</h4><p>语法：limit 起始位置，显示长度<br>起始位置可以省略，默认是从0开始<br><code>..from 表名 order by 字段 desc limit 0,3;</code></p>
<h4 id="查询选项条件"><a href="#查询选项条件" class="headerlink" title="查询选项条件"></a>查询选项条件</h4><p>all：显示所有数据<br><code>select all 字段 from 表名;</code><br>distinct：去除结果集中重复的数据<br><code>select distinct 字段 from 表名;</code></p>
<h4 id="insert…select…-复制表"><a href="#insert…select…-复制表" class="headerlink" title="insert…select…(复制表)"></a>insert…select…(复制表)</h4><p>创建一个和stu一样结构的表stu1<br><code>create table stu1 like stu;</code><br>将上海的学生插入stu1表中<br><code>insert into stu1 select * from stu where stuaddress=&#39;上海&#39;;</code></p>
<h4 id="on-duplicate-key-update"><a href="#on-duplicate-key-update" class="headerlink" title="on duplicate key update"></a>on duplicate key update</h4><p>在插入数据的时候，如果插入的数据不满足主键约束或唯一约束则执行更新操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">– 创建表</span><br><span class="line">create table emp(</span><br><span class="line">id int primary key,</span><br><span class="line">name varchar(20) unique</span><br><span class="line">);</span><br><span class="line">– 插入测试数据</span><br><span class="line">insert into emp values (1,&apos;tom&apos;);</span><br><span class="line">- 测试数据</span><br><span class="line">mysql&gt;insert into emp values (1,&apos;berry&apos;) on duplicate key update name=&apos;berry&apos;;</span><br><span class="line">mysql&gt;insert into emp values (2,&apos;berry&apos;) on duplicate key update id=2;</span><br><span class="line">mysql&gt;insert into emp values (2,&apos;tom&apos;) on duplicate key update id=2,name=&apos;tom&apos;;</span><br></pre></td></tr></table></figure>
<h3 id="几个关键词"><a href="#几个关键词" class="headerlink" title="几个关键词"></a>几个关键词</h3><p>distinct：去除select结果集中重复的数据<br>engine=innodb或myisam 存储引擎<br>    innodb：5.5版本以上，引擎支持事务安全（提供：commit、rollback功能），且支持外键<br>    在data目录创建一个<code>.frm</code>的表结构文件，数据文件与索引文件，被保存在data目录的ibdata1文件中<br>    myisam引擎中：<code>.frm</code>结构文件 <code>.MYD</code>数据文件 <code>.MYI</code>索引文件<br>charset :字符集<br>collate :校对集<br>with rollup :回溯统计<br>dual :表（伪表）-&gt;from dual </p>
<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>select 嵌套 select 子句必须使用括号括起来，同时起个别名</p>
<h3 id="union-纵向联合"><a href="#union-纵向联合" class="headerlink" title="union 纵向联合"></a>union 纵向联合</h3><p>作用：将多个select语句结果集纵向联合起来<br>语法：select 语句 union [选项] select 语句 union [选项] select 语句<br><code>select stuname from stu union [all | distinct] select stuname from stu1;</code></p>
<blockquote>
<p>小常识大问题，字段相关用反斜线 <code></code> ，属性内容相关用引号 ‘’;</p>
</blockquote>
<h3 id="主键删除"><a href="#主键删除" class="headerlink" title="主键删除"></a>主键删除</h3><p>auto_increment一定是一个int系列的主键或唯一键</p>
<p>修改主键是不需要增加primary key<br><code>alter table 表名 modify id int auo_increment;</code><br>不是<code>alter table 表名 modify id int auo_increment primary key;</code></p>
<p>由于unique是一种索引，删除时使用固定语法<br><code>alter table 表名 drop index 唯一键名</code></p>
<blockquote>
<p>唯一键名默认是字段名</p>
</blockquote>
<h3 id="MySQL约束"><a href="#MySQL约束" class="headerlink" title="MySQL约束"></a>MySQL约束</h3><p>MySQL约束存在<code>information_schema</code> 数据库的<code>table_constraints</code> 中，可以通过该表查询约束信息；<br>约束主要完成对数据的检验，保证数据库数据的完整；如果有相互依赖数据，保证该数据不被删除。</p>
<p>常用五类约束：<br>not null：非空约束，指定某列不能为空<br>unique：唯一 约束，指定某列和几列组合的数据不能重复<br>primary key：主键约束，指定某列的数据不能重复唯一<br>foreign key：外键，指定该列记录属于主表中的一条记录，参照另一条数据<br>check：检查，指定一个表达式，用于检验指定数据（MySQL不支持check约束，但可以使用，没有任何效果）</p>
<blockquote>
<p>虽然唯一约束不允许出现重复的值，但是可以为多个null，同一个表可以有多个唯一约束，多个列组合的约束</p>
</blockquote>
<p>MySQL会给唯一约束的列上默认创建一个唯一索引。<br>MySQL中 auto_increment 必须是主键，但主键不一定是自动增长的</p>
<h3 id="Mac-使用XAMPP配置SQL-model"><a href="#Mac-使用XAMPP配置SQL-model" class="headerlink" title="Mac 使用XAMPP配置SQL-model"></a>Mac 使用XAMPP配置SQL-model</h3><p>松散模式与严格模式</p>
<p>问题：使用枚举类型，可以插入未列举选项为空字符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table test(</span><br><span class="line">    -&gt; id int auto_increment primary key,</span><br><span class="line">    -&gt; sex enum(&apos;M&apos;,&apos;W&apos;,&apos;no&apos;)</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into test values (1,&apos;A&apos;);</span><br><span class="line">Query OK, 1 row affected, 1 warning (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from test;</span><br><span class="line">+----+------+</span><br><span class="line">| id | sex  |</span><br><span class="line">+----+------+</span><br><span class="line">|  1 |      |</span><br><span class="line">+----+------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure>
<p>进程解决方案如下(单次解决)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &apos;%sql%%&apos;;</span><br><span class="line">+---------------------------+------------------------+</span><br><span class="line">| Variable_name             | Value                  |</span><br><span class="line">+---------------------------+------------------------+</span><br><span class="line">| slave_sql_verify_checksum | ON                     |</span><br><span class="line">| sql_auto_is_null          | OFF                    |</span><br><span class="line">| sql_big_selects           | ON                     |</span><br><span class="line">| sql_buffer_result         | OFF                    |</span><br><span class="line">| sql_log_bin               | ON                     |</span><br><span class="line">| sql_log_off               | OFF                    |</span><br><span class="line">| sql_mode                  | NO_ENGINE_SUBSTITUTION |</span><br><span class="line">| sql_notes                 | ON                     |</span><br><span class="line">| sql_quote_show_create     | ON                     |</span><br><span class="line">| sql_safe_updates          | OFF                    |</span><br><span class="line">| sql_select_limit          | 18446744073709551615   |</span><br><span class="line">| sql_slave_skip_counter    | 0                      |</span><br><span class="line">| sql_warnings              | OFF                    |</span><br><span class="line">+---------------------------+------------------------+</span><br><span class="line">13 rows in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; set sql_mode=&apos;STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&apos;;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &apos;%sql%%&apos;;</span><br><span class="line">+---------------------------+----------------------------------------------------------------+</span><br><span class="line">| Variable_name             | Value                                                          |</span><br><span class="line">+---------------------------+----------------------------------------------------------------+</span><br><span class="line">| slave_sql_verify_checksum | ON                                                             |</span><br><span class="line">| sql_auto_is_null          | OFF                                                            |</span><br><span class="line">| sql_big_selects           | ON                                                             |</span><br><span class="line">| sql_buffer_result         | OFF                                                            |</span><br><span class="line">| sql_log_bin               | ON                                                             |</span><br><span class="line">| sql_log_off               | OFF                                                            |</span><br><span class="line">| sql_mode                  | STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |</span><br><span class="line">| sql_notes                 | ON                                                             |</span><br><span class="line">| sql_quote_show_create     | ON                                                             |</span><br><span class="line">| sql_safe_updates          | OFF                                                            |</span><br><span class="line">| sql_select_limit          | 18446744073709551615                                           |</span><br><span class="line">| sql_slave_skip_counter    | 0                                                              |</span><br><span class="line">| sql_warnings              | OFF                                                            |</span><br><span class="line">+---------------------------+----------------------------------------------------------------+</span><br><span class="line">13 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; desc test;</span><br><span class="line">+-------+--------------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type               | Null | Key | Default | Extra          |</span><br><span class="line">+-------+--------------------+------+-----+---------+----------------+</span><br><span class="line">| id    | int(11)            | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| sex   | enum(&apos;M&apos;,&apos;W&apos;,&apos;no&apos;) | YES  |     | NULL    |                |</span><br><span class="line">+-------+--------------------+------+-----+---------+----------------+</span><br><span class="line">2 rows in set (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into test value (null,&apos;k&apos;);</span><br><span class="line">ERROR 1265 (01000): Data truncated for column &apos;sex&apos; at row 1</span><br></pre></td></tr></table></figure>
<hr>
<p>补充优化知识：</p>
<h3 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h3><p>字段创建<br>索引<br>引擎-事物回滚-innodb:金融</p>
<h3 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h3><p>语句优化 使用较少的条件过滤结果</p>
<h3 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h3><p>分区</p>
<h3 id="第四部分"><a href="#第四部分" class="headerlink" title="第四部分"></a>第四部分</h3><p>mysql 事物、视图</p>
<h3 id="第五部分"><a href="#第五部分" class="headerlink" title="第五部分"></a>第五部分</h3><p>PDO数据层</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 多表查询、备份、账户权限</title>
    <url>/2015/20150902-2.html</url>
    <content><![CDATA[<h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><p>子查询：只能得到1个表的数据，另一个表只是作为一个限制条件<br>多表查询：多个表中的数据<br>  在设计数据表时，那么将现实中的一个实体设计为一个表，但在查询数据时，很多时候会将具有关系的不同实体表中的数据一同取出来。<br>语法：<br>  <code>select * from 表A,表B 【where 子句】</code><br>说明：<br>  从多个表中获取where子句的匹配条件进行获取数据<br>  如果省略where子句，那么得到的结果是一个笛卡尔积</p>
<h3 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h3><p>语法：<br>select语句A<br>union【union选项】<br>select 语句B<br>说明：<br>  【union选项】<br>  all     显示所有(包含重复记录)<br>  distinct    去复(默认)<br>作用：<br>  1、对同一个表的不同的部分进行不同的操作。<br>  2、一般用于对比较大的表进行分表存储，联合查询</p>
<h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><h4 id="交差连接"><a href="#交差连接" class="headerlink" title="交差连接"></a>交差连接</h4><p>语法：<br>  <code>select * from 表A cross join表B 【where子句】</code><br>说明：<br>  如果省略where子句，将是一个迪卡尔积<br>  如果使用where子句，则是在迪卡尔积的基础上筛选满足条件的记录</p>
<h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><p>语法：<br>  <code>select * from 表A inner join 表B【where子句】</code></p>
<h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><p>左外连接<br>语法：<br>  <code>select * from 表L left join 表R on 连接条件</code><br>  右外连接<br>语法：<br>  <code>select * from 表L right join 表R on 连接条件</code><br>说明：<br>  1、外连接，必须使用on关键字，指定连接条件<br>  2、from关键字后如果是左外连接第1个表，咱称之为主表，第2个表称之为从表<br>  3、from关键字后如果是右外连接第1个表，咱称之为从表，第2个表称之为主表</p>
<h3 id="using关键字"><a href="#using关键字" class="headerlink" title="using关键字"></a>using关键字</h3><p>当进行外连接时，如果两个表的连接字段同名，可以使用<br>：using(进行连接的同名字段)</p>
<h3 id="自然连接"><a href="#自然连接" class="headerlink" title="自然连接"></a>自然连接</h3><p>所谓的自然就是自已找连接条件，找到的依据是同名字段<br>  自然左外连接<br>语法：<br>  <code>select * from 表A natural left join 表B</code><br>  自然右外连接<br>语法：<br>  <code>select * from 表A natural right join 表B</code><br>自然左外连接就是左外连接<br>自然右外连接就是右外连接<br>注意：<br>  如果想使用自然连接代替外连接，那么作为连接的字段名子相同名，且不作为连接的字段的名子不能相同<br>  对于自然连接会只保留一个同名的字段，且放在第1列<br>  其实using关键字及自然连接就是简化left join或right join的语法</p>
<p>理解：<br>  MySQL提供很多种连接方式，不同的连接方式的区别：<br>  共同点：都是从多个表中进行记录的横向拼接<br>  不同点：拼接的方法不同</p>
<p>子查询：一个select包含另一个select<br>联合查询：selectA union select B</p>
<p>多表查询：from 表A,表B<br>交差连接：from 表A cross join表B<br>内连接：from 表A inner join表B<br>左外连接：from 表L left join 表R on<br>右外连接：from 表L right join 表R on</p>
<p>外连接与其他连接<br>1、其他连接与外连接，当匹配条件成立时结果完成一样<br>2、外连接会包含，匹配不成功的记录。<br>3、匹配不成功时，究竟包含什么样的不成功记录，要看使用的left join还是right join<br>如果是left join保留的是左表的没有匹配成功的记录<br>如果是right join保留的是右表的没有匹配成功的记录</p>
<h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><h4 id="物理备份（冷备）"><a href="#物理备份（冷备）" class="headerlink" title="物理备份（冷备）"></a>物理备份（冷备）</h4><p>备份表或数据库的物理文件</p>
<p>对于myisam存储引擎，需要备份 <code>.frm</code> <code>.myd</code> <code>myi</code><br>对于innodb 存储引擎，需要备份 <code>.frm</code> <code>data/ibdata1</code> 或 <code>.ibd</code></p>
<h4 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h4><p>只备份数据表中的数据，并没有表结构</p>
<p>备份语法：<br>  <code>select * from 表名 into outfile ‘备份的文件的文件路径’</code>【fields选项】【lines选项】<br>说明：<br>  fields选项是以fields开头的：<br>  terminated by字符   设置字段的结束符      默认是\t<br>  enclosed by字符   设置字段的包含符      默认是’’<br>  escaped by  字符    设置字符null值使用什么字符代替  默认\N</p>
<p>  lines选项是以lines开头的：<br>  terminated by字符   设置行的结束符     默认是\t<br>  starting by 字符    设置行的开始符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from stu into outfile &apos;/Users/uiste/www/back.sql&apos;;</span><br><span class="line">Query OK, 9 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">备份文件内容如下：</span><br><span class="line">1 it001 zhangsan  1 20  1</span><br><span class="line">2 it002 lisi  1 26  2</span><br><span class="line">3 it003 wangwu  1 23  2</span><br><span class="line">4 it004 zhaoliu 1 30  3</span><br><span class="line">5 it005 tianqi  0 28  1</span><br><span class="line">6 it006 wangwang  1 20  1</span><br><span class="line">7 it007 songjiu 1 18  2</span><br><span class="line">8 it008 张三  女 19  2</span><br><span class="line">9 it009 zhener  1 23  1</span><br></pre></td></tr></table></figure>
<p>增加参数的示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from stu into outfile &apos;/Users/uiste/www/back2.sql&apos;</span><br><span class="line">    -&gt; fields</span><br><span class="line">    -&gt; terminated by &apos;&apos;</span><br><span class="line">    -&gt; enclosed by &apos;#&apos;</span><br><span class="line">    -&gt; lines</span><br><span class="line">    -&gt; starting by &apos;BEGIN&apos;;</span><br><span class="line">Query OK, 9 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">备份文件内容如下：</span><br><span class="line">BEGIN#1##it001##zhangsan##1##20##1#</span><br><span class="line">BEGIN#2##it002##lisi##1##26##2#</span><br><span class="line">BEGIN#3##it003##wangwu##1##23##2#</span><br><span class="line">BEGIN#4##it004##zhaoliu##1##30##3#</span><br><span class="line">BEGIN#5##it005##tianqi##0##28##1#</span><br><span class="line">BEGIN#6##it006##wangwang##1##20##1#</span><br><span class="line">BEGIN#7##it007##songjiu##1##18##2#</span><br><span class="line">BEGIN#8##it008##张三##女##19##2#</span><br><span class="line">BEGIN#9##it009##zhener##1##23##1#</span><br></pre></td></tr></table></figure>
<h4 id="数据还原"><a href="#数据还原" class="headerlink" title="数据还原"></a>数据还原</h4><p>load data local infile ‘备份的文件的路径’ into table ‘表名’ [files选项][lines选项]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; delete from stu;</span><br><span class="line">Query OK, 9 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from stu;</span><br><span class="line">Empty set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; load data local infile &apos;/Users/uiste/www/back.sql&apos; into table stu;</span><br><span class="line">Query OK, 9 rows affected (0.02 sec)</span><br><span class="line">Records: 9  Deleted: 0  Skipped: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from stu;</span><br><span class="line">+----+-------+----------+------+------+------+</span><br><span class="line">| id | s_num | s_name   | sex  | age  | c_id |</span><br><span class="line">+----+-------+----------+------+------+------+</span><br><span class="line">|  1 | it001 | zhangsan | 1    |   20 |    1 |</span><br><span class="line">|  2 | it002 | lisi     | 1    |   26 |    2 |</span><br><span class="line">|  3 | it003 | wangwu   | 1    |   23 |    2 |</span><br><span class="line">|  4 | it004 | zhaoliu  | 1    |   30 |    3 |</span><br><span class="line">|  5 | it005 | tianqi   | 0    |   28 |    1 |</span><br><span class="line">|  6 | it006 | wangwang | 1    |   20 |    1 |</span><br><span class="line">|  7 | it007 | songjiu  | 1    |   18 |    2 |</span><br><span class="line">|  8 | it008 | 张三     | 女   |   19 |    2 |</span><br><span class="line">|  9 | it009 | zhener   | 1    |   23 |    1 |</span><br><span class="line">+----+-------+----------+------+------+------+</span><br><span class="line">9 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>
<p>第二种方法根据备份内容将限定选项一起加入即可</p>
<h4 id="SQL备份"><a href="#SQL备份" class="headerlink" title="SQL备份"></a>SQL备份</h4><p>备份的是sql(包含数据)<br>语法：<br>  需要在mysql之外(cmd命令行使用)mysqldump工具<br>  mysqldump –uroot –p 数据库名【数据表名】 &gt; 位置</p>
<p>还原：<br>语法1：在mysql之外<br>  mysql –uroot –p 数据库名 &lt;位置</p>
<p>语法2：在mysql中<br>  source 需要还原的文件</p>
<p><code>不加引号</code></p>
<h4 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h4><p>创建用户：<br>语法：<br>  create user ‘用户名’@’主机’ identified by ‘密码’;<br>说明：<br>  主机    表示用户所能登陆的位置<br>  取值：<br>    IP    192.168.10.1    只允许该用户此ip地址上登陆<br>    域名  localhost     只允许该用户在本机上登陆<br>    %   对该用户的登陆位置没有任何限制<br>  密码必须使用引号</p>
<p>查看MYSQL的用户<br>1、进入到MySQL数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create user &apos;xiaoqiang&apos;@&apos;localhost&apos; identified by &apos;123&apos;;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; select host,user,password from user;</span><br><span class="line">+-----------+-----------+-------------------------------------------+</span><br><span class="line">| host      | user      | password                                  |</span><br><span class="line">+-----------+-----------+-------------------------------------------+</span><br><span class="line">| localhost | root      | *7C31BA29248E9330208F65C47A673D863961B220 |</span><br><span class="line">| linux     | root      |                                           |</span><br><span class="line">| localhost |           |                                           |</span><br><span class="line">| linux     |           |                                           |</span><br><span class="line">| localhost | pma       |                                           |</span><br><span class="line">| localhost | xiaoqiang | *7C31BA29248E9330208F65C47A673D863961B220 |</span><br><span class="line">+-----------+-----------+-------------------------------------------+</span><br><span class="line">6 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>
<p>2、MySQL用户被保存在user表中</p>
<p>授权<br>语法：<br><code>grant 权限|all privileges on 数据库名.数据表名 to ‘user’@‘主机名’</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; grant all privileges on uiste.* to &apos;xiaoqiang&apos;@&apos;localhost&apos;;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>
<p>查看权限：<br>语法：<br>  <code>show grants</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show grants;</span><br><span class="line">+----------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Grants for root@localhost                                                                                                              |</span><br><span class="line">+----------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY PASSWORD &apos;*7C31BA29248E9330208F65C47A673D863961B220&apos; WITH GRANT OPTION |</span><br><span class="line">| GRANT PROXY ON &apos;&apos;@&apos;&apos; TO &apos;root&apos;@&apos;localhost&apos; WITH GRANT OPTION                                                                           |</span><br><span class="line">+----------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>
<p>收权限<br>语法：<br><code>revoke 权限|all privileges on 数据库名.数据表名 from ‘user’@‘主机名’</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; revoke all privileges on uiste.* from &apos;xiaoqiang&apos;@&apos;localhost&apos;;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>
<p>更改用户密码：<br>语法：<br>  <code>set password for ‘user’@’host’=password(‘密码’);</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; set password for &apos;xiaoqiang&apos;@&apos;localhost&apos;=password(&apos;&apos;);</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>
<p>重置管理员密码<br>1、先停止mysql服务</p>
<p>2、跳过授权表来，启动mysql<br>语法：<br>  mysqld –skip-grant-tables<br>说明：<br>  当执行此语句后，窗口会处于挂起状态，不接收用户的任何输入(但不要关闭此窗口)</p>
<p>3、重新开启一个cmd窗口，直接使用mysql登陆(不需要加任何参数)<br>示例：</p>
<p>4、更改mysql数据库的user数据表中的root用户的密码</p>
<p>5、关闭第2步中的窗口，并在任何管理器中结束mysqld服务</p>
<p>6、正常启动mysql，使用新用户密码登陆</p>
<p>–if判断<br>drop procedure if exists proc;<br>create procedure proc(in num int)<br>begin<br>if num=1 then<br>   select ‘金牌会员’ as ‘等级’ from dual;<br>elseif num=2 then<br>   select ‘普通会员’ as ‘等级’ from dual;<br>elseif num=3 then<br>   select ‘游客’ as ‘等级’ from dual;<br>else<br>    select ‘输入有误’ from dual;<br>end if;<br>end //</p>
<p>–case语句（一）<br>drop procedure if exists proc;<br>create procedure proc(in season int)<br>begin<br>     case season<br>     when 1 then select ‘春天’ as ‘季节’ from dual;<br>     when 2 then select ‘夏天’ as ‘季节’ from dual;<br>     when 3 then select ‘秋天’ as ‘季节’ from dual;<br>     when 4 then select ‘冬天’ as ‘季节’ from dual;<br>     else select ‘输入不正确’ as ‘季节’ from dual;<br>     end case;<br>end //</p>
<p>–case语句（二）<br>select stuno,stuname,stusex,writtenexam,case<br>   when writtenexam&gt;=90 then ‘等级A’<br>   when writtenexam&gt;=80 then ‘等级B’<br>   when writtenexam&gt;=70 then ‘等级C’<br>   when writtenexam&gt;=60 then ‘等级D’<br>   when writtenexam is null then ‘缺考’<br>   else ‘等级E’<br>end as ‘等级’ from stuinfo natural left join stumarks;</p>
<p>–loop循环<br>drop procedure if exists proc;<br>create procedure proc(in num int)<br>begin<br>     declare total int default 0;<br>     declare i int default 1;<br>     aa:loop<br>            set total=total+i;<br>            set i=i+1;<br>            if(i&gt;num) then<br>               leave aa;<br>            end if;<br>     end loop;<br>     select total as ‘结果’ from dual;<br>end //</p>
<p>–while循环<br>drop procedure if exists proc;<br>create procedure proc(in num int)<br>begin<br>     declare total int default 0;<br>     declare i int default 1;<br>     while i&lt;=num do<br>           set total=total+i;<br>           set i=i+1;<br>     end while;<br>     select total as ‘结果’ from dual;<br>end //</p>
<p>– repeat循环<br>drop procedure if exists proc;<br>create procedure proc(in num int)<br>begin<br>     declare total int default 0;<br>     declare i int default 1;<br>     repeat<br>     set total=total+i;<br>     set i=i+1;<br>     until i&gt;num end repeat;<br>     select total as ‘结果’ from dual;<br>end //</p>
<p>– leave、iterate<br>drop procedure if exists proc;<br>create procedure proc()<br>begin<br>     declare i int default 0;<br>     aa:while i&lt;=5 do<br>     set i=i+1;<br>     if(i=3) then<br>             leave aa;     –类似于break;<br>             iterate aa;   –类似于continue<br>     end if;<br>     select i;<br>     end while;<br>end //</p>
<p>–coalesce<br>select stuname,coalesce(writtenexam,’缺考’),coalesce(labexam,’缺考’) from stuinfo natural left join stumarks//</p>
<p>–获取当前时间<br>select year(now()) ‘年’,month(now()) ‘月’,day(now()) ‘日’,hour(now()) ‘小时’,minute(now()) ‘分钟’,second(now()) ‘秒’//</p>
<p>–</p>
<p>select ADDDATE(now(),INTERVAL 12 day) as ‘日期’</p>
<p>select datediff(now(),’2017-1-1’) as ‘还有几天过年’;</p>
<p>–函数<br>create function fun() returns varchar(20)<br>begin<br>     return ‘锄禾日当午’;<br>end //</p>
<p>drop function if exists fun;<br>create function fun(num1 int,num2 int)returns int<br>begin<br>     declare num int default 0;<br>     set num=num1+num2;<br>     return num;<br>end //</p>
<p>–insert触发器<br>create table t1(num int);<br>create table t2(num int);</p>
<p>create trigger trig1<br>after insert on t1 for each row<br>begin<br>     insert into t2 set num=new.num*new.num;<br>end //</p>
<p>–insert触发器<br>drop table transinfo,bank;<br>create table bank(<br>       cardid char(4) primary key,<br>       name varchar(20) not null,<br>       money int not null<br>);<br>create table transinfo(<br>       id int auto_increment primary key,<br>       cardid char(4) not null,<br>       type char(2) not null,<br>       money int not null,<br>       transdate datetime<br>);<br>insert into bank values (‘1001’,’tom’,1000),(‘1002’,’berry’,1) //</p>
<p>create trigger trig_transinfo_insert<br>before insert on transinfo for each row<br>begin<br>     declare mytype,mycardid char(4);<br>     declare mymoney int;<br>     set mytype=new.type;<br>     set mycardid=new.cardid;<br>     set mymoney=new.money;<br>     if mytype=’支取’ then<br>        update bank set money=money-mymoney where cardid=mycardid;<br>     else<br>         update bank set money=money+mymoney where cardid=mycardid;<br>     end if;<br>end //</p>
<p>–delete触发器<br>create table temp like transinfo//<br>create trigger trig_transinfo_delete<br>after delete on transinfo for each row<br>begin<br>     insert into temp values (null,old.cardid,old.type,old.money,old.transdate);<br>end //</p>
<p>–upate触发器<br>drop table if exists stuinfo1,stumarks1;<br>create table stuinfo1(<br>       id int auto_increment primary key,<br>       name varchar(20) not null,<br>       sex char(1) not null,<br>       grade varchar(10) not null<br>);<br>insert into stuinfo1 values (null,’tom’,’男’,’未知’);<br>create table stumarks1(<br>       id int primary key,<br>       ch int,<br>       math int<br>);<br>insert into stumarks1 values (1,77,88) //</p>
<p>create trigger trig_stumarks1_update<br>after update on stumarks1 for each row<br>begin<br>     declare ch,math int;<br>     declare avgscore decimal(3,1);<br>     declare sid int;<br>     set ch=new.ch;<br>     set math=new.math;<br>     set sid=new.id;<br>     set avgscore=(ch+math)/2;<br>     update stuinfo1 set grade=case<br>            when avgscore&gt;=90 then ‘优秀’<br>            when avgscore&gt;=80 then ‘良好’<br>            when avgscore&gt;=70 then ‘一般’<br>            when avgscore&gt;=60 then ‘及格’<br>            else ‘不及格’<br>     end where id=sid;<br>end //</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 多表查询、视图、事物、索引</title>
    <url>/2015/20150902-1.html</url>
    <content><![CDATA[<h3 id="多表查询分类"><a href="#多表查询分类" class="headerlink" title="多表查询分类"></a>多表查询分类</h3><p>需求：在设计数据表时，那么将现实中的一个实体设计为一个表，但在查询数据时，很多时候会将具有关系的不同实体表中的数据一同取出来。<br>语法：<br>    <code>select * from 表A,表B 【where 子句】</code><br>说明：<br>    从多个表中获取where子句的匹配条件进行获取数据<br>    如果省略where子句，那么得到的结果是一个笛卡尔积<br>笛卡尔积：<br>    得到的结果集的记录数是：两个表的记录数的乘积<br>    字段数：两个表的字段数的和</p>
<h4 id="union联合查询"><a href="#union联合查询" class="headerlink" title="union联合查询"></a>union联合查询</h4><p>注意：</p>
<blockquote>
<p>对同一个表的不同的部分进行不同的操作<br>一般用于对比较大的表进行分表存储，联合查询</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; (select * from stu where sex=1 order by age limit 999)union(select * from stu where sex=0 order by age desc limit 999);</span><br><span class="line">+----+--------+----------+------+------+------+</span><br><span class="line">| id | s_num  | s_name   | sex  | age  | c_id |</span><br><span class="line">+----+--------+----------+------+------+------+</span><br><span class="line">|  7 | it007  | songjiu  | 1    |   18 |    2 |</span><br><span class="line">|  1 | it001  | zhangsan | 1    |   20 |    1 |</span><br><span class="line">|  6 | it006  | wangwang | 1    |   20 |    1 |</span><br><span class="line">|  9 | it009  | zhener   | 1    |   23 |    1 |</span><br><span class="line">| 11 | it0011 | wu       | 1    |   23 |    3 |</span><br><span class="line">|  2 | it002  | lisi     | 1    |   26 |    2 |</span><br><span class="line">| 10 | it0010 | qianqian | 1    |   26 |    1 |</span><br><span class="line">|  4 | it004  | zhaoliu  | 1    |   30 |    3 |</span><br><span class="line">| 13 | it0013 | deng     | 0    |   34 |    5 |</span><br><span class="line">|  5 | it005  | tianqi   | 0    |   28 |    1 |</span><br><span class="line">| 12 | it0012 | chen     | 0    |   26 |    3 |</span><br><span class="line">|  3 | it003  | wangwu   | 0    |   22 |    2 |</span><br><span class="line">|  8 | it008  | zhousan  | 0    |   19 |    2 |</span><br><span class="line">+----+--------+----------+------+------+------+</span><br><span class="line">13 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h4 id="内连接【inner-join】"><a href="#内连接【inner-join】" class="headerlink" title="内连接【inner join】"></a>内连接【inner join】</h4><p>语法一：<code>select 列名 from 表1 inner join 表2 on 表1.公共字段=表2.公共字段</code></p>
<blockquote>
<p>inner是可以省略的</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from stuinfo inner join stuMarks on stuinfo.stuNo=stuMarks.stuNo;</span><br><span class="line">+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+</span><br><span class="line">| stuNo  | stuName      | stuSex | stuAge | stuSeat | stuAddress | examNo  | stuNo  | writtenExam | labExam |</span><br><span class="line">+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+</span><br><span class="line">| s25303 | 李斯文       | 女     |     22 |       2 | 北京       | s271811 | s25303 |          80 |      58 |</span><br><span class="line">| s25302 | 李文才       | 男     |     31 |       3 | 上海       | s271813 | s25302 |          50 |      90 |</span><br><span class="line">| s25304 | 欧阳俊雄     | 男     |     28 |       4 | 天津       | s271815 | s25304 |          65 |      50 |</span><br><span class="line">| s25301 | 张秋丽       | 男     |     18 |       1 | 北京       | s271816 | s25301 |          77 |      82 |</span><br><span class="line">| s25318 | 争青小子     | 男     |     26 |       6 | 天津       | s271819 | s25318 |          56 |      48 |</span><br><span class="line">+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>语法二：<code>select 列名 from 表1,表2 where 表1.公共字段=表2.公共字段</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from stuinfo,stuMarks where stuinfo.stuNo=stuMarks.stuNo;</span><br><span class="line">+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+</span><br><span class="line">| stuNo  | stuName      | stuSex | stuAge | stuSeat | stuAddress | examNo  | stuNo  | writtenExam | labExam |</span><br><span class="line">+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+</span><br><span class="line">| s25303 | 李斯文       | 女     |     22 |       2 | 北京       | s271811 | s25303 |          80 |      58 |</span><br><span class="line">| s25302 | 李文才       | 男     |     31 |       3 | 上海       | s271813 | s25302 |          50 |      90 |</span><br><span class="line">| s25304 | 欧阳俊雄     | 男     |     28 |       4 | 天津       | s271815 | s25304 |          65 |      50 |</span><br><span class="line">| s25301 | 张秋丽       | 男     |     18 |       1 | 北京       | s271816 | s25301 |          77 |      82 |</span><br><span class="line">| s25318 | 争青小子     | 男     |     26 |       6 | 天津       | s271819 | s25318 |          56 |      48 |</span><br><span class="line">+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>select <em> from 表1 inner join 表2 on 表1.公共字段=表2.公共字段和select </em> from 表2 inner join 表1 on 表1.公共字段=表2.公共字段是否一样？<br>答：一样的，因为内连接显示的是两个表的公共记录。</p>
</blockquote>
<blockquote>
<p>三个表的内连接如何实现？<br>答：select 列名 from 表1 inner join 表2 on 表1.公共字段=表2.公共字段 inner join 表3 on 表2.公共字段=表3.公共字段</p>
</blockquote>
<h4 id="左外连接【left-join】"><a href="#左外连接【left-join】" class="headerlink" title="左外连接【left join】"></a>左外连接【left join】</h4><p>以左边的表为标准，如果右边的表没有对应的记录，用NULL填充。<br>语法：<code>select 列名 from 表1 left join 表2 on 表1.公共字段=表2.公共字段</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from stuinfo left join stuMarks on stuinfo.stuNo=stuMarks.stuNo;</span><br><span class="line">+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+</span><br><span class="line">| stuNo  | stuName      | stuSex | stuAge | stuSeat | stuAddress | examNo  | stuNo  | writtenExam | labExam |</span><br><span class="line">+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+</span><br><span class="line">| s25303 | 李斯文       | 女     |     22 |       2 | 北京       | s271811 | s25303 |          80 |      58 |</span><br><span class="line">| s25302 | 李文才       | 男     |     31 |       3 | 上海       | s271813 | s25302 |          50 |      90 |</span><br><span class="line">| s25304 | 欧阳俊雄     | 男     |     28 |       4 | 天津       | s271815 | s25304 |          65 |      50 |</span><br><span class="line">| s25301 | 张秋丽       | 男     |     18 |       1 | 北京       | s271816 | s25301 |          77 |      82 |</span><br><span class="line">| s25318 | 争青小子     | 男     |     26 |       6 | 天津       | s271819 | s25318 |          56 |      48 |</span><br><span class="line">| s25305 | 诸葛丽丽     | 女     |     23 |       7 | 河南       | NULL    | NULL   |        NULL |    NULL |</span><br><span class="line">| s25319 | 梅超风       | 女     |     23 |       5 | 河北       | NULL    | NULL   |        NULL |    NULL |</span><br><span class="line">+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>select <em> from 表1 left join 表2 on 表1.公共字段=表2.公共字段和select </em> from 表2 left join 表1 on 表1.公共字段=表2.公共字段是否一样？<br>答：不一样，第一个SQL语句以表1为准，第二个SQL语句以表2为准</p>
</blockquote>
<h4 id="右外连接【right-join】"><a href="#右外连接【right-join】" class="headerlink" title="右外连接【right join】"></a>右外连接【right join】</h4><p>以右边的表为标准，如果右边的表没有对应的记录，用NULL填充。<br>语法：<code>select 列名 from 表1 right join 表2 on 表1.公共字段=表2.公共字段</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from stuinfo right join stuMarks on stuinfo.stuNo=stuMarks.stuNo;</span><br><span class="line">+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+</span><br><span class="line">| stuNo  | stuName      | stuSex | stuAge | stuSeat | stuAddress | examNo  | stuNo  | writtenExam | labExam |</span><br><span class="line">+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+</span><br><span class="line">| s25303 | 李斯文       | 女     |     22 |       2 | 北京       | s271811 | s25303 |          80 |      58 |</span><br><span class="line">| s25302 | 李文才       | 男     |     31 |       3 | 上海       | s271813 | s25302 |          50 |      90 |</span><br><span class="line">| s25304 | 欧阳俊雄     | 男     |     28 |       4 | 天津       | s271815 | s25304 |          65 |      50 |</span><br><span class="line">| s25301 | 张秋丽       | 男     |     18 |       1 | 北京       | s271816 | s25301 |          77 |      82 |</span><br><span class="line">| s25318 | 争青小子     | 男     |     26 |       6 | 天津       | s271819 | s25318 |          56 |      48 |</span><br><span class="line">+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>思考：select <em> from 表1 left join 表2 on 表1.公共字段=表2.公共字段和select </em> from 表2 right join 表1 on 表1.公共字段=表2.公共字段是否一样？<br>答：一样。</p>
</blockquote>
<h4 id="交叉连接【cross-join】"><a href="#交叉连接【cross-join】" class="headerlink" title="交叉连接【cross join】"></a>交叉连接【cross join】</h4><p>1、如果没有连接表达式返回的是笛卡尔积<br><code>mysql&gt; select * from stuinfo cross join stuMarks;</code><br>等价于<br><code>mysql&gt; select * from stuinfo,stuMarks;</code><br>2、如果有连接表达式等价于内连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from stuinfo cross join stuMarks on stuinfo.stuNo=stuMarks.stuNo;</span><br><span class="line">+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+</span><br><span class="line">| stuNo  | stuName      | stuSex | stuAge | stuSeat | stuAddress | examNo  | stuNo  | writtenExam | labExam |</span><br><span class="line">+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+</span><br><span class="line">| s25303 | 李斯文       | 女     |     22 |       2 | 北京       | s271811 | s25303 |          80 |      58 |</span><br><span class="line">| s25302 | 李文才       | 男     |     31 |       3 | 上海       | s271813 | s25302 |          50 |      90 |</span><br><span class="line">| s25304 | 欧阳俊雄     | 男     |     28 |       4 | 天津       | s271815 | s25304 |          65 |      50 |</span><br><span class="line">| s25301 | 张秋丽       | 男     |     18 |       1 | 北京       | s271816 | s25301 |          77 |      82 |</span><br><span class="line">| s25318 | 争青小子     | 男     |     26 |       6 | 天津       | s271819 | s25318 |          56 |      48 |</span><br><span class="line">+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+</span><br></pre></td></tr></table></figure>
<h4 id="自然连接【natural】"><a href="#自然连接【natural】" class="headerlink" title="自然连接【natural】"></a>自然连接【natural】</h4><p>自动的判断连接条件，它是通过同名字段来判断的<br>自然连接又分为：<br>1、    自然内连接        natural join<br><code>select * from stuinfo natural join stuMarks;</code><br>2、    自然左外连接        natural left join<br><code>select * from stuinfo natural left join stuMarks;</code><br>3、    自然右外连接        natural right join<br><code>select * from stuinfo natural rigth join stuMarks;</code></p>
<blockquote>
<p>自然连接结论：<br>1、    表连接通过同名的字段来连接的<br>2、    如果没有同名的字段返回笛卡尔积<br>3、    会对结果进行整理，整理的规则如下<br>a)    连接字段保留一个<br>b)    连接字段放在最前面</p>
</blockquote>
<h4 id="using"><a href="#using" class="headerlink" title="using()"></a>using()</h4><p>1、用来指定连接字段。<br>2、using()也会对连接字段进行整理，整理方式和自然连接是一样的。<br><code>select * from stuinfo inner join stuMarks using(id);</code></p>
<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>1、    语法：select 语句 where 条件 (select … from 表)<br>2、    外面的查询称为父查询，括号中的查询称为子查询<br>3、    子查询为父查询提供查询条件</p>
<h4 id="子查询-1"><a href="#子查询-1" class="headerlink" title="=子查询"></a>=子查询</h4><p>使用表连接的方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select stuName,writtenExam from stuinfo natural join stuMarks having writtenExam&gt;60;</span><br><span class="line">+--------------+-------------+</span><br><span class="line">| stuName      | writtenExam |</span><br><span class="line">+--------------+-------------+</span><br><span class="line">| 李斯文       |          80 |</span><br><span class="line">| 欧阳俊雄     |          65 |</span><br><span class="line">| 张秋丽       |          77 |</span><br><span class="line">+--------------+-------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>使用子查询方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from stuinfo where stuNo in(select stuNo from stuMarks where writtenExam&gt;60);</span><br><span class="line">+--------+--------------+--------+--------+---------+------------+</span><br><span class="line">| stuNo  | stuName      | stuSex | stuAge | stuSeat | stuAddress |</span><br><span class="line">+--------+--------------+--------+--------+---------+------------+</span><br><span class="line">| s25303 | 李斯文       | 女     |     22 |       2 | 北京       |</span><br><span class="line">| s25304 | 欧阳俊雄     | 男     |     28 |       4 | 天津       |</span><br><span class="line">| s25301 | 张秋丽       | 男     |     18 |       1 | 北京       |</span><br><span class="line">+--------+--------------+--------+--------+---------+------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>找出最高分</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from stuinfo where stuNo=(select stuNo from stuMarks order by writtenExam desc limit 1);</span><br><span class="line">+--------+-----------+--------+--------+---------+------------+</span><br><span class="line">| stuNo  | stuName   | stuSex | stuAge | stuSeat | stuAddress |</span><br><span class="line">+--------+-----------+--------+--------+---------+------------+</span><br><span class="line">| s25303 | 李斯文    | 女     |     22 |       2 | 北京       |</span><br><span class="line">+--------+-----------+--------+--------+---------+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from stuinfo where stuNo=(select stuNo from stuMarks where writtenExam=(select max(writtenExam) from stuMarks));</span><br><span class="line">+--------+-----------+--------+--------+---------+------------+</span><br><span class="line">| stuNo  | stuName   | stuSex | stuAge | stuSeat | stuAddress |</span><br><span class="line">+--------+-----------+--------+--------+---------+------------+</span><br><span class="line">| s25303 | 李斯文    | 女     |     22 |       2 | 北京       |</span><br><span class="line">+--------+-----------+--------+--------+---------+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h4 id="in-not-in子查询"><a href="#in-not-in子查询" class="headerlink" title="in|not in子查询"></a>in|not in子查询</h4><p>用于子查询的返回结果多个值</p>
<h4 id="some-、any-、all"><a href="#some-、any-、all" class="headerlink" title="some()、any()、all()"></a>some()、any()、all()</h4><p>some:一些<br>any:一些        和some()是一样的  类似于in<br>all:全部</p>
<p>=some（=any） 等于其中任何一个<br>!=some（!=any）不等于其中任何一个就可以了<br>=all 等于其中的所有<br>!=all 不等于其中的所有</p>
<blockquote>
<p>思考：!=some()和not in一样吗？<br>答：不一样；!=some()表示父查询的记录只要不等于some中的任意一条即可。<br>!=all()才和not in一样</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from stuinfo where stuNo=some(select stuNo from stuMarks where writtenExam&gt;60);</span><br><span class="line">+--------+--------------+--------+--------+---------+------------+</span><br><span class="line">| stuNo  | stuName      | stuSex | stuAge | stuSeat | stuAddress |</span><br><span class="line">+--------+--------------+--------+--------+---------+------------+</span><br><span class="line">| s25303 | 李斯文       | 女     |     22 |       2 | 北京       |</span><br><span class="line">| s25304 | 欧阳俊雄     | 男     |     28 |       4 | 天津       |</span><br><span class="line">| s25301 | 张秋丽       | 男     |     18 |       1 | 北京       |</span><br><span class="line">+--------+--------------+--------+--------+---------+------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from stuinfo where stuNo=any(select stuNo from stuMarks where writtenExam&gt;60);</span><br><span class="line">+--------+--------------+--------+--------+---------+------------+</span><br><span class="line">| stuNo  | stuName      | stuSex | stuAge | stuSeat | stuAddress |</span><br><span class="line">+--------+--------------+--------+--------+---------+------------+</span><br><span class="line">| s25303 | 李斯文       | 女     |     22 |       2 | 北京       |</span><br><span class="line">| s25304 | 欧阳俊雄     | 男     |     28 |       4 | 天津       |</span><br><span class="line">| s25301 | 张秋丽       | 男     |     18 |       1 | 北京       |</span><br><span class="line">+--------+--------------+--------+--------+---------+------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from stuinfo where stuNo=all(select stuNo from stuMarks where writtenExam&gt;60);</span><br><span class="line">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h4 id="exists和not-exists"><a href="#exists和not-exists" class="headerlink" title="exists和not exists"></a>exists和not exists</h4><p>如果有人大于等于80分就显示所有的学生</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from stuinfo where exists (select * from stuMarks where writtenExam&gt;=80);</span><br><span class="line">+--------+--------------+--------+--------+---------+------------+</span><br><span class="line">| stuNo  | stuName      | stuSex | stuAge | stuSeat | stuAddress |</span><br><span class="line">+--------+--------------+--------+--------+---------+------------+</span><br><span class="line">| s25301 | 张秋丽       | 男     |     18 |       1 | 北京       |</span><br><span class="line">| s25302 | 李文才       | 男     |     31 |       3 | 上海       |</span><br><span class="line">| s25303 | 李斯文       | 女     |     22 |       2 | 北京       |</span><br><span class="line">| s25304 | 欧阳俊雄     | 男     |     28 |       4 | 天津       |</span><br><span class="line">| s25305 | 诸葛丽丽     | 女     |     23 |       7 | 河南       |</span><br><span class="line">| s25318 | 争青小子     | 男     |     26 |       6 | 天津       |</span><br><span class="line">| s25319 | 梅超风       | 女     |     23 |       5 | 河北       |</span><br><span class="line">+--------+--------------+--------+--------+---------+------------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>如果没有人超过80分就显示所有的学生</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from stuinfo where not exists (select * from stuMarks where writtenExam&gt;=80);</span><br><span class="line">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h4 id="子查询分类"><a href="#子查询分类" class="headerlink" title="子查询分类"></a>子查询分类</h4><p>1、    标量子查询：子查询返回的结果就一个<br>2、    列子查询：子查询返回的结果是一个列表<br>3、    行子查询：子查询返回的结果返回一行<br>4、    表子查询：子查询返回的结果当成一个表(一定要取别名)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select *,count(*) from (select * from stuinfo order by stuAge desc) as new1 group by stuSex;</span><br><span class="line">+--------+--------------+--------+--------+---------+------------+----------+</span><br><span class="line">| stuNo  | stuName      | stuSex | stuAge | stuSeat | stuAddress | count(*) |</span><br><span class="line">+--------+--------------+--------+--------+---------+------------+----------+</span><br><span class="line">| s25305 | 诸葛丽丽     | 女     |     23 |       7 | 河南       |        3 |</span><br><span class="line">| s25302 | 李文才       | 男     |     31 |       3 | 上海       |        4 |</span><br><span class="line">+--------+--------------+--------+--------+---------+------------+----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>子查询一定要取别名</p>
</blockquote>
<h3 id="视图【view】"><a href="#视图【view】" class="headerlink" title="视图【view】"></a>视图【view】</h3><p>1、    视图是一张虚拟表，它表示一张表的部分或多张表的综合的结构。<br>2、    视图仅仅是表结构，没有表数据。视图的结构和数据建立在表的基础上。</p>
<h4 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h4><p>语法</p>
<p>create [or replace] view 视图的名称<br>as<br>    select语句</p>
<p>因为视图是一个表结构，所以创建视图后，会在数据库文件夹中多一个与视图名同名的.frm文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create view vw_stu</span><br><span class="line">    -&gt; as</span><br><span class="line">    -&gt;   select * from stuinfo nutural join stumarks using(stuno);</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br></pre></td></tr></table></figure>
<h4 id="查询视图"><a href="#查询视图" class="headerlink" title="查询视图"></a>查询视图</h4><p>视图是一张虚拟表，视图的用法和表的用法一样</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from vw_stu;</span><br><span class="line">+--------+--------------+--------+--------+---------+------------+---------+-------------+---------+</span><br><span class="line">| stuNo  | stuName      | stuSex | stuAge | stuSeat | stuAddress | examNo  | writtenExam | labExam |</span><br><span class="line">+--------+--------------+--------+--------+---------+------------+---------+-------------+---------+</span><br><span class="line">| s25303 | 李斯文       | 女     |     22 |       2 | 北京       | s271811 |          80 |      58 |</span><br><span class="line">| s25302 | 李文才       | 男     |     31 |       3 | 上海       | s271813 |          50 |      90 |</span><br><span class="line">| s25304 | 欧阳俊雄     | 男     |     28 |       4 | 天津       | s271815 |          65 |      50 |</span><br><span class="line">| s25301 | 张秋丽       | 男     |     18 |       1 | 北京       | s271816 |          77 |      82 |</span><br><span class="line">| s25318 | 争青小子     | 男     |     26 |       6 | 天津       | s271819 |          56 |      48 |</span><br><span class="line">+--------+--------------+--------+--------+---------+------------+---------+-------------+---------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h4 id="查看视图的结构"><a href="#查看视图的结构" class="headerlink" title="查看视图的结构"></a>查看视图的结构</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; desc vw_stu;</span><br><span class="line">+-------------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field       | Type        | Null | Key | Default | Extra |</span><br><span class="line">+-------------+-------------+------+-----+---------+-------+</span><br><span class="line">| stuNo       | char(6)     | NO   |     | NULL    |       |</span><br><span class="line">| stuName     | varchar(10) | NO   |     | NULL    |       |</span><br><span class="line">| stuSex      | char(2)     | NO   |     | NULL    |       |</span><br><span class="line">| stuAge      | tinyint(4)  | NO   |     | NULL    |       |</span><br><span class="line">| stuSeat     | tinyint(4)  | NO   |     | NULL    |       |</span><br><span class="line">| stuAddress  | varchar(10) | NO   |     | NULL    |       |</span><br><span class="line">| examNo      | char(7)     | NO   |     | NULL    |       |</span><br><span class="line">| writtenExam | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| labExam     | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">+-------------+-------------+------+-----+---------+-------+</span><br><span class="line">9 rows in set (0.02 sec)</span><br></pre></td></tr></table></figure>
<h4 id="查看创建视图的语法"><a href="#查看创建视图的语法" class="headerlink" title="查看创建视图的语法"></a>查看创建视图的语法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show create view vw_stu \g</span><br><span class="linespan><br><span class="line">| View   | Create View                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | character_set_client | collation_connection |</span><br><span class="line">+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------+----------------------+</span><br><span class="line">| vw_stu | CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `vw_stu` AS select `nutural`.`stuNo` AS `stuNo`,`nutural`.`stuName` AS `stuName`,`nutural`.`stuSex` AS `stuSex`,`nutural`.`stuAge` AS `stuAge`,`nutural`.`stuSeat` AS `stuSeat`,`nutural`.`stuAddress` AS `stuAddress`,`stumarks`.`examNo` AS `examNo`,`stumarks`.`writtenExam` AS `writtenExam`,`stumarks`.`labExam` AS `labExam` from (`stuinfo` `nutural` join `stumarks` on((`nutural`.`stuNo` = `stumarks`.`stuNo`))) | utf8                 | utf8_general_ci      |</span><br><span class="linespan><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h4 id="显示所有视图"><a href="#显示所有视图" class="headerlink" title="显示所有视图"></a>显示所有视图</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show tables;</span><br><span class="line">+-----------------+</span><br><span class="line">| Tables_in_uiste |</span><br><span class="line">+-----------------+</span><br><span class="line">| stuMarks        |</span><br><span class="line">| stuinfo         |</span><br><span class="line">| vw_stu          |</span><br><span class="line">+-----------------+</span><br><span class="line">3 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>
<h4 id="精确查找视图"><a href="#精确查找视图" class="headerlink" title="精确查找视图"></a>精确查找视图</h4><p>方法一：information_schema中的views表保存的是视图信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select table_name from information_schema.views;</span><br><span class="line">+------------+</span><br><span class="line">| table_name |</span><br><span class="line">+------------+</span><br><span class="line">| vw_stu     |</span><br><span class="line">+------------+</span><br><span class="line">1 row in set (0.12 sec)</span><br></pre></td></tr></table></figure>
<p>方法二：show table status查看表的属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show table status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           Name: stuMarks</span><br><span class="line">         Engine: InnoDB</span><br><span class="line">        Version: 10</span><br><span class="line">     Row_format: Compact</span><br><span class="line">           Rows: 5</span><br><span class="line"> Avg_row_length: 3276</span><br><span class="line">    Data_length: 16384</span><br><span class="line">Max_data_length: 0</span><br><span class="line">   Index_length: 0</span><br><span class="line">      Data_free: 0</span><br><span class="line"> Auto_increment: NULL</span><br><span class="line">    Create_time: 2015-08-31 17:18:54</span><br><span class="line">    Update_time: NULL</span><br><span class="line">     Check_time: NULL</span><br><span class="line">      Collation: utf8_general_ci</span><br><span class="line">       Checksum: NULL</span><br><span class="line"> Create_options: </span><br><span class="line">        Comment: </span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">           Name: stuinfo</span><br><span class="line">         Engine: InnoDB</span><br><span class="line">        Version: 10</span><br><span class="line">     Row_format: Compact</span><br><span class="line">           Rows: 7</span><br><span class="line"> Avg_row_length: 2340</span><br><span class="line">    Data_length: 16384</span><br><span class="line">Max_data_length: 0</span><br><span class="line">   Index_length: 0</span><br><span class="line">      Data_free: 0</span><br><span class="line"> Auto_increment: NULL</span><br><span class="line">    Create_time: 2015-08-31 17:18:54</span><br><span class="line">    Update_time: NULL</span><br><span class="line">     Check_time: NULL</span><br><span class="line">      Collation: utf8_general_ci</span><br><span class="line">       Checksum: NULL</span><br><span class="line"> Create_options: </span><br><span class="line">        Comment: </span><br><span class="line">*************************** 3. row ***************************</span><br><span class="line">           Name: vw_stu</span><br><span class="line">         Engine: NULL</span><br><span class="line">        Version: NULL</span><br><span class="line">     Row_format: NULL</span><br><span class="line">           Rows: NULL</span><br><span class="line"> Avg_row_length: NULL</span><br><span class="line">    Data_length: NULL</span><br><span class="line">Max_data_length: NULL</span><br><span class="line">   Index_length: NULL</span><br><span class="line">      Data_free: NULL</span><br><span class="line"> Auto_increment: NULL</span><br><span class="line">    Create_time: NULL</span><br><span class="line">    Update_time: NULL</span><br><span class="line">     Check_time: NULL</span><br><span class="line">      Collation: NULL</span><br><span class="line">       Checksum: NULL</span><br><span class="line"> Create_options: NULL</span><br><span class="line">        Comment: VIEW</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>显示所有视图的语法是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show table status where comment=&apos;view&apos;\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           Name: vw_stu</span><br><span class="line">         Engine: NULL</span><br><span class="line">        Version: NULL</span><br><span class="line">     Row_format: NULL</span><br><span class="line">           Rows: NULL</span><br><span class="line"> Avg_row_length: NULL</span><br><span class="line">    Data_length: NULL</span><br><span class="line">Max_data_length: NULL</span><br><span class="line">   Index_length: NULL</span><br><span class="line">      Data_free: NULL</span><br><span class="line"> Auto_increment: NULL</span><br><span class="line">    Create_time: NULL</span><br><span class="line">    Update_time: NULL</span><br><span class="line">     Check_time: NULL</span><br><span class="line">      Collation: NULL</span><br><span class="line">       Checksum: NULL</span><br><span class="line"> Create_options: NULL</span><br><span class="line">        Comment: VIEW</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h4 id="更改视图"><a href="#更改视图" class="headerlink" title="更改视图"></a>更改视图</h4><p>语法：<br>alter view 视图名<br>as<br>    select 语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter view vw_stu</span><br><span class="line">    -&gt; as</span><br><span class="line">    -&gt;  select stuaddress,count(stuaddress) from stuinfo left join stumarks using(stuno) group by stusex;         Query OK, 0 rows affected (0.02 sec)</span><br><span class="line">mysql&gt; select * from vw_stu;</span><br><span class="line">+------------+-------------------+</span><br><span class="line">| stuaddress | count(stuaddress) |</span><br><span class="line">+------------+-------------------+</span><br><span class="line">| 北京       |                 3 |</span><br><span class="line">| 上海       |                 4 |</span><br><span class="line">+------------+-------------------+</span><br><span class="line">2 rows in set (0.02 sec)</span><br></pre></td></tr></table></figure>
<h4 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h4><p>语法：<code>drop view [if exists] 视图1,视图2,…</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop view if exists vw_stu;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select table_name from information_schema.views;</span><br><span class="line">Empty set (0.03 sec)</span><br></pre></td></tr></table></figure>
<h4 id="视图的作用"><a href="#视图的作用" class="headerlink" title="视图的作用"></a>视图的作用</h4><p>1、    筛选数据，防止未经许可访问敏感数据<br>2、    增加表的兼容性<br>3、    隐藏表结构<br>4、    降低SQL语句的复杂度</p>
<h4 id="视图的算法"><a href="#视图的算法" class="headerlink" title="视图的算法"></a>视图的算法</h4><p>找出语文成绩最高的男生和女生<br>既然子查询当成一个表，我们可以用视图来代替<br>将子查询写法改为如下</p>
<blockquote>
<p>结果不正确！原因：这是因为视图的算法造成的</p>
</blockquote>
<h4 id="视图的算法-1"><a href="#视图的算法-1" class="headerlink" title="视图的算法"></a>视图的算法</h4><p>1、    merge：合并算法，将视图的语句和外层的语句合并后在执行。<br>2、    temptable：临时表算法，将视图生成一个临时表，再执行外层语句<br>3、    undefined：未定义，MySQL到底用merge还是用temptable由MySQL决<br>定，这是一个默认的算法，一般视图都会选择merge算法，因为merge效率高。</p>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>在创建视图的时候指定视图的算法<br>create view algorithm=temptable 视图名<br>as<br>    select 语句    </p>
<p>重写视图</p>
<p>重新执行查询</p>
<h3 id="事务安全【transaction】"><a href="#事务安全【transaction】" class="headerlink" title="事务安全【transaction】"></a>事务安全【transaction】</h3><p>1、    事务是一个不可分割的执行单元<br>2、    事务作为一个整体要么一起执行，要么一起回滚</p>
<h4 id="开启事务1"><a href="#开启事务1" class="headerlink" title="开启事务1"></a>开启事务1</h4><p>语法：<code>start transaction或begin [work]</code></p>
<h4 id="执行sql更新语句2"><a href="#执行sql更新语句2" class="headerlink" title="执行sql更新语句2"></a>执行sql更新语句2</h4><p><code>update 表名 set 字段名=字段内容 条件</code></p>
<h4 id="设置还原点3"><a href="#设置还原点3" class="headerlink" title="设置还原点3"></a>设置还原点3</h4><p><code>savepoint sp1</code></p>
<h4 id="执行sql更新语句4"><a href="#执行sql更新语句4" class="headerlink" title="执行sql更新语句4"></a>执行sql更新语句4</h4><h4 id="成功提交事务5"><a href="#成功提交事务5" class="headerlink" title="成功提交事务5"></a>成功提交事务5</h4><p>语法：commit</p>
<h4 id="失败回滚事务5"><a href="#失败回滚事务5" class="headerlink" title="失败回滚事务5"></a>失败回滚事务5</h4><p>语法：rollback</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; start transaction;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into t1 values (4,4);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from t1;</span><br><span class="line">+------+------+</span><br><span class="line">| id   | num1 |</span><br><span class="line">+------+------+</span><br><span class="line">|    1 |    1 |</span><br><span class="line">|    2 |    2 |</span><br><span class="line">|    3 |    3 |</span><br><span class="line">|    4 |    4 |</span><br><span class="line">+------+------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; rollback;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from t1;</span><br><span class="line">+------+------+</span><br><span class="line">| id   | num1 |</span><br><span class="line">+------+------+</span><br><span class="line">|    1 |    1 |</span><br><span class="line">|    2 |    2 |</span><br><span class="line">|    3 |    3 |</span><br><span class="line">+------+------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into t1 values (4,4);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; commit;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from t1;</span><br><span class="line">+------+------+</span><br><span class="line">| id   | num1 |</span><br><span class="line">+------+------+</span><br><span class="line">|    1 |    1 |</span><br><span class="line">|    2 |    2 |</span><br><span class="line">|    3 |    3 |</span><br><span class="line">|    4 |    4 |</span><br><span class="line">+------+------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>思考：事务什么时候产生？什么时候结束？<br>答：开启的时候产生，提交事务或回滚事务都结束<br>脚下留心：只有innodb和BDB才支持事务，myisam不支持事务。</p>
</blockquote>
<h4 id="事务的特性（ACID）"><a href="#事务的特性（ACID）" class="headerlink" title="事务的特性（ACID）"></a>事务的特性（ACID）</h4><p>1、    原子性（Atomicity）：事务是一个整体，不可以再分，要么一起执行，要么一起不执行。<br>2、    一致性（Consistency）：事务完成时，数据必须处于一致的状态。<br>3、    隔离性（Isolation）：每个事务都是相互隔离的<br>4、    永久性（Durability）：事务完成后，对数据的修改是永久性的。</p>
<h4 id="自动提交事务"><a href="#自动提交事务" class="headerlink" title="自动提交事务"></a>自动提交事务</h4><p>默认情况下，每个独立的SQL语句都在自动提交事务的。<br>通过如下语句查看是否自动提交事务</p>
<p>可以更改自动提交事务<br>set autocommit=0 | 1；</p>
<h4 id="MySQL的锁的机制"><a href="#MySQL的锁的机制" class="headerlink" title="MySQL的锁的机制"></a>MySQL的锁的机制</h4><p>当在对数据表进行并发(同一时刻会有多个客户端操作同一条记录)操作时，就会触发MySQL的锁的机制<br>①、表锁当某个客户端对一个表进行更改操作时会锁住整个表(其他客户端只能等待)非键值<br>②、行锁–键值</p>
<h3 id="索引【index】"><a href="#索引【index】" class="headerlink" title="索引【index】"></a>索引【index】</h3><p>索引的优点：查询速度快<br>索引的缺点：<br>1、    增、删、改（数据操作语句）效率低了<br>2、    索引占用空间</p>
<h4 id="索引的类型"><a href="#索引的类型" class="headerlink" title="索引的类型"></a>索引的类型</h4><p>1、    普通索引<br>2、    唯一索引（唯一键）<br>3、    主键索引：只要主键就自动创建主键索引，不需要手动创建。<br>4、    全文索引，搜索引擎使用，MySQL不支持中文的全文索引，我们通过sphinx去解决中文的全文索引。</p>
<h4 id="创建普通索引【create-index】"><a href="#创建普通索引【create-index】" class="headerlink" title="创建普通索引【create index】"></a>创建普通索引【create index】</h4><p>语法：<code>create index 索引名 on 表名 （字段名）</code></p>
<p>创建索引<br>查看索引</p>
<h4 id="通过修改表的方式创建索引"><a href="#通过修改表的方式创建索引" class="headerlink" title="通过修改表的方式创建索引"></a>通过修改表的方式创建索引</h4><p>语法：<code>alter table 表名 add index [索引的名称] （列名）</code><br>创建索引</p>
<h4 id="创建表的时候指定索引"><a href="#创建表的时候指定索引" class="headerlink" title="创建表的时候指定索引"></a>创建表的时候指定索引</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table temp(</span><br><span class="line">    -&gt; id int,</span><br><span class="line">    -&gt; name varchar(20),</span><br><span class="line">    -&gt; age tinyint,</span><br><span class="line">    -&gt; index ix_temp_name(name),		--创建索引</span><br><span class="line">    -&gt; key(age)				--创建索引</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show create table temp\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: temp</span><br><span class="line">Create Table: CREATE TABLE `temp` (</span><br><span class="line">  `id` int(11) DEFAULT NULL,</span><br><span class="line">  `name` varchar(20) DEFAULT NULL,</span><br><span class="line">  `age` tinyint(4) DEFAULT NULL,</span><br><span class="line">  KEY `ix_temp_name` (`name`),</span><br><span class="line">  KEY `age` (`age`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h4 id="创建唯一索引"><a href="#创建唯一索引" class="headerlink" title="创建唯一索引"></a>创建唯一索引</h4><p>语法一：create unique index 索引名 on 表名 （字段名）<br>语法二：alter table 表名 add unqiue index [索引的名称] （列名）<br>语法三：创建表的时候添加唯一索引，和创建唯一键是一样的。</p>
<h4 id="创建多列组合索引"><a href="#创建多列组合索引" class="headerlink" title="创建多列组合索引"></a>创建多列组合索引</h4><h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><p>语法：<code>drop index 索引名 on 表名</code></p>
<h4 id="创建索引的指导原则"><a href="#创建索引的指导原则" class="headerlink" title="创建索引的指导原则"></a>创建索引的指导原则</h4><p>1、    该列用于频繁搜索<br>2、    改列用于排序<br>3、    公共字段要创建索引<br>4、    如果表中的数据很少，不需要创建索引。MySQL搜索索引的时间比逐条搜索数据的时间要长。<br>5、    如果一个字段上的数据只有几个不同的值，改字段不适合做索引，比如性别。</p>
<h3 id="存储过程【procedure】"><a href="#存储过程【procedure】" class="headerlink" title="存储过程【procedure】"></a>存储过程【procedure】</h3><h4 id="存储过程的优点"><a href="#存储过程的优点" class="headerlink" title="存储过程的优点"></a>存储过程的优点</h4><p>1、    存储过程可以减少网络流量<br>2、    允许模块化设计<br>3、    支持事务</p>
<h4 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h4><p>语法：<br>create procedure 存储过程名(参数)<br>begin<br>    //sql语句<br>end;</p>
<blockquote>
<p>脚下留心：由于过程中有很多SQL语句，每个语句的结束都要用（；）表示。默认情况下，分号既表示语句结束，又表示向服务器发送SQL语句。我们希望分号仅表示语句的结束，不要将SQL语句发送到服务器执行，通过delimiter来更改结束符。</p>
</blockquote>
<p><code>mysql&gt;delimiter //</code></p>
<h4 id="创建简单的存储过程"><a href="#创建简单的存储过程" class="headerlink" title="创建简单的存储过程"></a>创建简单的存储过程</h4><h4 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h4><p>语法：<code>call 存储过程名()</code></p>
<h4 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h4><p>语法：<code>drop procedure [if exists] 存储过程名</code></p>
<h4 id="创建复杂的存储过程"><a href="#创建复杂的存储过程" class="headerlink" title="创建复杂的存储过程"></a>创建复杂的存储过程</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create procedure proc(param char(6))</span><br><span class="line">    -&gt; begin</span><br><span class="line">    -&gt;      select * from stuinfo where stuno=param;</span><br><span class="line">    -&gt;      select * from stumarks where stuno=param;</span><br><span class="line">    -&gt; end //</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; call proc(&apos;s25301&apos;) //</span><br><span class="line">+--------+---------+--------+--------+---------+------------+</span><br><span class="line">| stuNo  | stuName | stuSex | stuAge | stuSeat | stuAddress |</span><br><span class="line">+--------+---------+--------+--------+---------+------------+</span><br><span class="line">| s25301 | 张秋丽        | 男       |     18 |       1 | 北京</span><br><span class="line">+--------+---------+--------+--------+---------+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">+---------+--------+-------------+---------+</span><br><span class="line">| examNo  | stuNo  | writtenExam | labExam |</span><br><span class="line">+---------+--------+-------------+---------+</span><br><span class="line">| s271816 | s25301 |          77 |      82 |</span><br><span class="line">+---------+--------+-------------+---------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure>
<h4 id="存储过程的参数"><a href="#存储过程的参数" class="headerlink" title="存储过程的参数"></a>存储过程的参数</h4><p>存储过程不能使用return返回值，要返回值只能通过“输出参数”来向外传递值。<br>存储过程的参数分为：输入参数（in）【默认】，输出参数（out），输入输出参数（inout）</p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><p>1、    通过declare关键字来声明变量<br>2、    语法：declare 变量名 数据类型 [default 默认值]<br>3、    使用set或select …into…给变量赋值</p>
<p>使用select…into…给变量赋值<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create procedure proc(in id char(6))</span><br><span class="line">    -&gt; begin</span><br><span class="line">    -&gt;      declare name varchar(20);</span><br><span class="line">    -&gt;      declare sex char(1);</span><br><span class="line">    -&gt;      select stuname,stusex into name,sex from stuinfo where stuno=id;</span><br><span class="line">    -&gt;      select name,sex from dual;</span><br><span class="line">    -&gt; end //</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; call proc(&apos;s25301&apos;)//</span><br><span class="line">+--------+------+</span><br><span class="line">| name   | sex  |</span><br><span class="line">+--------+------+</span><br><span class="line">| 张秋丽       | 男     |</span><br><span class="line">+--------+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<p>例题：查找同桌<br>例题：使用set赋值</p>
<h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><p>在变量前面加一个@，就是全局变量<br>全局变量是一个弱类型的变量，它的类型取决于付给变量的值</p>
<h4 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h4><p>只要变量名前面有两个@@的肯定是系统变量</p>
<h3 id="带输出参数的存储过程【out】"><a href="#带输出参数的存储过程【out】" class="headerlink" title="带输出参数的存储过程【out】"></a>带输出参数的存储过程【out】</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create procedure proc(num int,out result int)</span><br><span class="line">    -&gt; begin</span><br><span class="line">    -&gt;      set result=num*num;</span><br><span class="line">    -&gt; end //</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; call proc(5,@result) //</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select @result from dual //</span><br><span class="line">+---------+</span><br><span class="line">| @result |</span><br><span class="line">+---------+</span><br><span class="line">|      25 |</span><br><span class="line">+---------+</span><br></pre></td></tr></table></figure>
<h3 id="带输入输出参数的存储过程【inout】"><a href="#带输入输出参数的存储过程【inout】" class="headerlink" title="带输入输出参数的存储过程【inout】"></a>带输入输出参数的存储过程【inout】</h3><h3 id="查看存储过程的信息"><a href="#查看存储过程的信息" class="headerlink" title="查看存储过程的信息"></a>查看存储过程的信息</h3><p>—————内连接—————-<br>–语法一：<br><code>select i.stuno,stuname,writtenexam from stuinfo i inner join stumarks s on i.stuno=s.stuno;</code><br>–语法二：<br><code>select stuinfo.stuno,stuname,writtenexam from stuinfo,stumarks where stuinfo.stuno=stumarks.stuno;</code><br>–inner 可以省略<br><code>select i.stuno,stuname,writtenexam from stuinfo i join stumarks s on i.stuno=s.stuno;</code><br>————–左外连接,右外连接———-<br><code>select stuinfo.stuno,stuname,writtenexam,labexam from stuinfo left join stumarks on stuinfo.stuno=stumarks.stuno;</code></p>
<p><code>select stuinfo.stuno,stuname,writtenexam,labexam from stuinfo right join stumarks on stuinfo.stuno=stumarks.stuno;</code></p>
<p>————–自然连接—————<br>–自然内连接<br><code>select * from t1 natural join t2;</code><br>–自然左外连接<br><code>select * from t1 natural left join t2;</code><br>–自然右外连接<br><code>select * from t1 natural right join t2;</code></p>
<p>—————-using()——————-<br><code>select * from t1 inner join t2 using(id);</code><br><code>select * from t1 left join t2 using(id);</code></p>
<p>——————-子查询————————–<br>–查找80分的学生<br>–方法一<br><code>select stuname,writtenexam from stuinfo natural join stumarks where writtenexam=80;</code><br>–方法二<br><code>select * from stuinfo where stuno=(select stuno from stumarks where writtenexam=80);</code></p>
<p>–找出最高分<br><code>select * from stuinfo where stuno=(select stuno from stumarks where writtenexam=(select max(writtenexam) from stumarks));</code></p>
<p>–查找及格的学生<br><code>select * from stuinfo where stuno in (select stuno from stumarks where writtenexam&gt;=60);</code></p>
<p>–查找不及格的学生<br><code>select * from stuinfo where stuno not in (select stuno from stumarks where writtenexam&gt;=60);</code></p>
<p>–查找缺考的学生<br><code>select * from stuinfo where stuno in (select stuno)</code></p>
<p><code>select * from stuinfo where stuno in (select stuno from stuinfo natural left join stumarks where writtenexam is null);</code></p>
<p>–some</p>
<p><code>select * from stuinfo where stuno=some(select stuno from stumarks where writtenexam&gt;=60);</code></p>
<p>–exits<br><code>select * from stuinfo where exists (select * from stumarks where writtenexam&gt;=80)</code></p>
<p>–行子查询<br><code>select * from stu where (stusex,ch) in (select stusex,max(ch) from stu group by stusex);</code></p>
<p>–表子查询<br><code>select * from (select * from stu order by ch desc) as t group by stusex;</code></p>
<p>–示地区和每个地区参见考试的人数，并按人数降序排列<br><code>select stuaddress,count(writtenexam) c from stuinfo left join stumarks using(stuno) group by stuaddress order by c desc;</code></p>
<p>–显示有学生参见考试的地区<br><code>select stuaddress,count(writtenexam) c from stuinfo left join stumarks using(stuno) group by stuaddress having c&gt;0;</code></p>
<p><code>select distinct stuaddress from stuinfo natural right join stumarks where stuaddress is not null;</code></p>
<p>–显示男生和女生的人数<br><code>select stusex,count(*) from stuinfo where stusex=&#39;男&#39; union select stusex,count(*) from stuinfo where stusex=&#39;女&#39;;</code></p>
<p><code>select sum(stusex=&#39;男&#39;) 男,sum(stusex=&#39;女&#39;) 女 from stuinfo;</code></p>
<p>–显示每个地区的男生和女生，以及总人数<br><code>select stuaddress,count(*) 总人数,sum(stusex=&#39;男&#39;) 男,sum(stusex=&#39;女&#39;) 女 from stuinfo group by stuaddress;</code></p>
<p>———————–视图———————–</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create view vw_stu</span><br><span class="line">as</span><br><span class="line">  select stuname,stusex,writtenexam from stuinfo inner join stumarks using (stuno);</span><br></pre></td></tr></table></figure>
<p><code>select * from (select * from stu order by ch desc) t group by stusex;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create or replace algorithm=temptable view vw1</span><br><span class="line">as</span><br><span class="line">select * from stu order by ch desc;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--</span><br><span class="line">create table temp(</span><br><span class="line">id int,</span><br><span class="line">name varchar(20),</span><br><span class="line">age tinyint,</span><br><span class="line">index ix_temp_name(name),</span><br><span class="line">key(age)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="多表查询分类-1"><a href="#多表查询分类-1" class="headerlink" title="多表查询分类"></a>多表查询分类</h3><p>将多个表的数据横向的联合起来。<br>1、    内连接<br>2、    外连接<br>a)    左外连接<br>b)    右外连接<br>3、    交叉连接<br>4、    自然连接</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 数据库设计及步骤</title>
    <url>/2015/20150901-1.html</url>
    <content><![CDATA[<h3 id="实体和实体之间的关系"><a href="#实体和实体之间的关系" class="headerlink" title="实体和实体之间的关系"></a>实体和实体之间的关系</h3><h4 id="一对多-1：N（多对一-N：1）"><a href="#一对多-1：N（多对一-N：1）" class="headerlink" title="一对多 1：N（多对一 N：1）"></a>一对多 1：N（多对一 N：1）</h4><p>主表中的一条记录对应从表中的多条记录</p>
<p>1、    主键和非主键之间的关系就能实现一对多。<br>2、    一对多和多对一是一样的。</p>
<blockquote>
<p>问题：几个一对多的关系？<br>1、    客户和订单<br>2、    省和市的关系<br>3、    商品类别和商品</p>
</blockquote>
<h4 id="一对一（1-1）"><a href="#一对一（1-1）" class="headerlink" title="一对一（1:1）"></a>一对一（1:1）</h4><p>主表中的一条记录对应从表中的一条记录</p>
<p><strong>主键和主键建关系就能实现一对一。</strong></p>
<blockquote>
<p>思考：一对一两个表完全可以用一个表实现，为什么还要分成两个表？<br>答：在字段数量很多情况下，数据量也就很大，每次查询都需要检索大量数据，这样效率低下。我们可以将所有字段分成两个部分，“常用字段”和“不常用字段”，这样对大部分查询者来说效率提高了。【表的垂直分割】</p>
</blockquote>
<h4 id="多对多（N：M）"><a href="#多对多（N：M）" class="headerlink" title="多对多（N：M）"></a>多对多（N：M）</h4><p>班级和讲师的关系<br>科目和学生的关系</p>
<blockquote>
<p>只要是多对多，必须有第三张关系表来保存关系</p>
</blockquote>
<h3 id="数据库设计的步骤"><a href="#数据库设计的步骤" class="headerlink" title="数据库设计的步骤"></a>数据库设计的步骤</h3><p>目的：<br>数据冗余、空间浪费—》节省数据的存储空间<br>内存空间浪费、数据不完整–》保证数据的完整性<br>数据更新与插入异常–》方便进行数据库应用系统的开发</p>
<p><strong>需求分析=&gt;建模=&gt;模型转换=&gt;规范化</strong></p>
<p>需求分析阶段：分析客户的业务和数据处理需求;<br>概要设计阶段：设计数据库的<strong>E-R模型图</strong>，确认需求信息的正确和完整;<br>详细设计阶段：将E-R图转换为多张表，进行逻辑设计，并应用数据库设计的三大范式进行审核;<br>代码编写阶段：选择具体数据库进行物理实现，并编写代码实现前端应用;<br>软件测试阶段：……<br>安装部署：……</p>
<h4 id="数据库设计具体步骤"><a href="#数据库设计具体步骤" class="headerlink" title="数据库设计具体步骤"></a>数据库设计具体步骤</h4><p>1、    收集信息：与该系统有关人员进行交流、坐谈，充分理解数据库需要完成的任务<br>2、    标识对象（实体－Entity）标识数据库要管理的关键对象或实体<br>3、    标识每个实体的属性（Attribute）<br>4、    标识对象之间的关系（Relationship）</p>
<p><strong>项目需求</strong><br>BBS论坛的基本功能：<br>1、<strong>用户</strong>注册和登录，后台数据库需要存放用户的注册信息和在线状态信息；<br>2、用户<strong>发贴</strong>，后台数据库需要存放贴子相关信息，如贴子内容、标题等；<br>3、用户可以对发帖进行回复【<strong>跟帖</strong>】；<br>4、论坛<strong>版块</strong>管理：后台数据库需要存放各个版块信息，如版主、版块名称、贴子数等；</p>
<p><strong>标识实体</strong><br>实体一般是名词：<br><strong>用户</strong>：论坛普通用户、各版块的版主。<br>用户发的<strong>主贴</strong><br>用户发的<strong>跟贴</strong>（回贴）<br><strong>版块</strong>：论坛的各个版块信息</p>
<p><strong>标识实体的属性</strong><br>论坛用户：<br>昵称、密码、邮件、生日、性别、等级、备注、注册日期、状态、积分<br>主贴：<br>发帖人、发帖表情、回复数量、标题、正文、发帖时间、点击数、状态<br>回帖：<br>帖子编号、回帖人、表情、标题、正文、回帖时间、点击数<br>板块：<br>板块名称、版主、本版格言、点击率、发帖数</p>
<p><strong>标识实体和实体之间的关系</strong><br>一个版块有多个主贴<br>一个主贴有多个跟帖<br>一个用户可以管理多个版块<br>一个用户可以发多个主贴<br>一个用户可以回复多个跟帖</p>
<h4 id="绘制E-R图"><a href="#绘制E-R图" class="headerlink" title="绘制E-R图"></a>绘制E-R图</h4><p>E-R（Entity－Relationship）实体关系图 </p>
<p>E-R图的语法<br>方形：实体，一般是名词<br>椭圆：属性，一般是名词<br>菱形：关系，一般是动词</p>
<p>将E-R图转成表<br>1、    实体转成表，属性转成字段<br>2、    如果没有合适的字段做主键，给表添加一个自动增长列做主键。</p>
<h3 id="数据规范化"><a href="#数据规范化" class="headerlink" title="数据规范化"></a>数据规范化</h3><p>Codd博士定义了6个范式来规范化数据库，范式由小到大来约束，范式越高冗余越小，但表的个数也越多。实验证明，三范式是性价比最高的</p>
<h4 id="第一范式确保每个字段不可再分"><a href="#第一范式确保每个字段不可再分" class="headerlink" title="第一范式确保每个字段不可再分"></a>第一范式确保每个字段不可再分</h4><p>说明：Address由country和city构成，将Address分成country和city。</p>
<blockquote>
<p>思考：地址包含省、市、县、地区是否需要拆分？<br>答：如果仅仅起地址的作用，不需要统计，可以不拆分；如果有按地区统计的功能需要拆分。<br>在实际项目中拆分!</p>
</blockquote>
<h4 id="第二范式：非键字段必须依赖于键字段"><a href="#第二范式：非键字段必须依赖于键字段" class="headerlink" title="第二范式：非键字段必须依赖于键字段"></a>第二范式：非键字段必须依赖于键字段</h4><p>一个表只能描述一件事<br>非键字段必须依赖于键字段</p>
<h4 id="第三范式：消除传递依赖"><a href="#第三范式：消除传递依赖" class="headerlink" title="第三范式：消除传递依赖"></a>第三范式：消除传递依赖</h4><p>在所有的非键字段中，不能有传递依赖</p>
<blockquote>
<p>例如在非主键中，“学号”和”姓名“有依赖，将”姓名“删除<br>例如顾客编号依赖于顾客姓名<br>总分数依赖于语文和数学的分数<br>在非主键字段中，要消除传递依赖</p>
</blockquote>
<blockquote>
<p>上面的设计不满足第三范式，但是高考分数表就是这样设计的，为什么？<br>答：高考分数峰值访问量非常大，这时候就是性能更重要。当性能和规范化冲突的时候，我们首选性能。这就是“反三范式”。</p>
</blockquote>
<h3 id="例题演练"><a href="#例题演练" class="headerlink" title="例题演练"></a>例题演练</h3><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>假设某建筑公司要设计一个数据库。公司的业务规则概括说明如下：<br>1、公司承担多个工程项目，每一项工程有：工程号、工程名称、施工人员等<br>2、公司有多名职工，每一名职工有：职工号、姓名、性别、职务（工程师、技术员）等<br>3、公司按照工时和小时工资率支付工资，小时工资率由职工的职务决定（例如，技术员的小时工资率与工程师不同）</p>
<h4 id="设计异常"><a href="#设计异常" class="headerlink" title="设计异常"></a>设计异常</h4><p>1、    插入异常：一个职工入职，由于“工程名称”不能为空，所以必须虚拟一个工程名称。<br>2、    更新异常：“李思岐”从“技术员”升级“工程师”，结果“小时工资率”没有从60调整到65。<br>3、    删除异常：“李思岐”和“葛宇洪”离职，将二人删除，结果把“临江饭店”这个工程也删除了。</p>
<h4 id="优化表结构"><a href="#优化表结构" class="headerlink" title="优化表结构"></a>优化表结构</h4><p>工程表：工程号、项目名称<br>员工表：职工号、姓名、职务<br>职务表：职务、小时工资<br>工时表：工程号、职工号、工时</p>
<h3 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h3><p>语法：<code>select [选项] 字段名 from 表名 [where 条件] [group by 分组] [having 条件] [order by 排序] [limit 限制]</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table student(</span><br><span class="line">    -&gt; id int auto_increment primary key,</span><br><span class="line">    -&gt; name char(16) not null,</span><br><span class="line">    -&gt; `语文` int(5),</span><br><span class="line">    -&gt; `数学` int(5)</span><br><span class="line">    -&gt; )charset=utf8;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into student values(null,&apos;张宝&apos;,56,67),(null,&apos;李青霞&apos;,89,92),(null,&apos;兰丁丁&apos;,29,96);</span><br><span class="line">Query OK, 3 rows affected (0.01 sec)</span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>
<h4 id="字段表达式"><a href="#字段表达式" class="headerlink" title="字段表达式"></a>字段表达式</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select 20;</span><br><span class="line">+----+</span><br><span class="line">| 20 |</span><br><span class="line">+----+</span><br><span class="line">| 20 |</span><br><span class="line">+----+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select 20*20;</span><br><span class="line">+-------+</span><br><span class="line">| 20*20 |</span><br><span class="line">+-------+</span><br><span class="line">|   400 |</span><br><span class="line">+-------+</span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select id,name,`语文`,`数学`,(`语文`+`数学`) from student;</span><br><span class="line">+----+-----------+--------+--------+---------------------+</span><br><span class="line">| id | name      | 语文   | 数学   | (`语文`+`数学`)     |</span><br><span class="line">+----+-----------+--------+--------+---------------------+</span><br><span class="line">|  1 | 张宝      |     56 |     67 |                 123 |</span><br><span class="line">|  2 | 李青霞    |     89 |     92 |                 181 |</span><br><span class="line">|  3 | 兰丁丁    |     29 |     96 |                 125 |</span><br><span class="line">+----+-----------+--------+--------+---------------------+</span><br><span class="line">3 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>
<p>时间戳</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select unix_timestamp();</span><br><span class="line">+------------------+</span><br><span class="line">| unix_timestamp() |</span><br><span class="line">+------------------+</span><br><span class="line">|       1472347068 |</span><br><span class="line">+------------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure>
<p>随机数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select rand();</span><br><span class="line">+--------------------+</span><br><span class="line">| rand()             |</span><br><span class="line">+--------------------+</span><br><span class="line">| 0.8859497913028578 |</span><br><span class="line">+--------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>通过as给字段取别名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select unix_timestamp() as &apos;时间戳&apos;,rand() as &apos;随机数&apos;;</span><br><span class="line">+------------+--------------------+</span><br><span class="line">| 时间戳     | 随机数             |</span><br><span class="line">+------------+--------------------+</span><br><span class="line">| 1472347205 | 0.8530956766131294 |</span><br><span class="line">+------------+--------------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>as可以省略</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select unix_timestamp() &apos;时间戳&apos;,rand() &apos;随机数&apos;;</span><br><span class="line">+------------+--------------------+</span><br><span class="line">| 时间戳     | 随机数             |</span><br><span class="line">+------------+--------------------+</span><br><span class="line">| 1472347268 | 0.6076290398907187 |</span><br><span class="line">+------------+--------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h4 id="from-子句"><a href="#from-子句" class="headerlink" title="from 子句"></a>from 子句</h4><p>from：来自，from后面跟的是数据源。数据源可以有多个。返回笛卡尔积(排列组合)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table teacher(</span><br><span class="line">    -&gt; id int auto_increment primary key,</span><br><span class="line">    -&gt; name char(16) not null,</span><br><span class="line">    -&gt; `评分` int(3) zerofill</span><br><span class="line">    -&gt; )charset=utf8;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into teacher values (null,&apos;贾老师&apos;,98),(null,&apos;杜老师&apos;,59);</span><br><span class="line">Query OK, 2 rows affected (0.01 sec)</span><br><span class="line">Records: 2  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from student,teacher;</span><br><span class="line">+----+-----------+--------+--------+----+-----------+--------+</span><br><span class="line">| id | name      | 语文   | 数学   | id | name      | 评分   |</span><br><span class="line">+----+-----------+--------+--------+----+-----------+--------+</span><br><span class="line">|  1 | 张宝      |     56 |     67 |  1 | 贾老师    |    098 |</span><br><span class="line">|  1 | 张宝      |     56 |     67 |  2 | 杜老师    |    059 |</span><br><span class="line">|  2 | 李青霞    |     89 |     92 |  1 | 贾老师    |    098 |</span><br><span class="line">|  2 | 李青霞    |     89 |     92 |  2 | 杜老师    |    059 |</span><br><span class="line">|  3 | 兰丁丁    |     29 |     96 |  1 | 贾老师    |    098 |</span><br><span class="line">|  3 | 兰丁丁    |     29 |     96 |  2 | 杜老师    |    059 |</span><br><span class="line">+----+-----------+--------+--------+----+-----------+--------+</span><br><span class="line">6 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>返回笛卡尔积</p>
</blockquote>
<p>可以通过as给表取别名(给表取别名，as可以省略)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select i.name,m.name from student as i,teacher as m;</span><br><span class="line">+-----------+-----------+</span><br><span class="line">| name      | name      |</span><br><span class="line">+-----------+-----------+</span><br><span class="line">| 张宝      | 贾老师    |</span><br><span class="line">| 张宝      | 杜老师    |</span><br><span class="line">| 李青霞    | 贾老师    |</span><br><span class="line">| 李青霞    | 杜老师    |</span><br><span class="line">| 兰丁丁    | 贾老师    |</span><br><span class="line">| 兰丁丁    | 杜老师    |</span><br><span class="line">+-----------+-----------+</span><br><span class="line">6 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>
<h4 id="dual表（伪表）"><a href="#dual表（伪表）" class="headerlink" title="dual表（伪表）"></a>dual表（伪表）</h4><p>dual表是一个伪表。在有些特定情况下，没有具体的表的参与，但是为了保证select语句的完整又必须要一个表名，这时候就使用伪表。<br>dual表是用来保证select语句的完整性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select 20*30 as `积` from dual;</span><br><span class="line">+-----+</span><br><span class="line">| 积  |</span><br><span class="line">+-----+</span><br><span class="line">| 600 |</span><br><span class="line">+-----+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from student where `语文`&gt;59;</span><br><span class="line">mysql&gt; select * from student where 1;	--返回所有数据</span><br><span class="line">mysql&gt; select * from student where 0;	--返回空</span><br></pre></td></tr></table></figure>
<blockquote>
<p>思考：数据库中的表是一个二维表，返回的结果是一张二维表，既然能在数据库的二维表中进行查询，能否在结果集的二维表上继续进行查询？<br>答：可以，使用having条件就是在结果集上继续进行筛选。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from student where name in (&apos;兰丁丁&apos;,&apos;张宝&apos;);</span><br><span class="line">+----+-----------+--------+--------+</span><br><span class="line">| id | name      | 语文   | 数学   |</span><br><span class="line">+----+-----------+--------+--------+</span><br><span class="line">|  1 | 张宝      |     56 |     67 |</span><br><span class="line">|  3 | 兰丁丁    |     29 |     96 |</span><br><span class="line">+----+-----------+--------+--------+</span><br><span class="line">2 rows in set (0.02 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>查询名字是兰丁丁和张宝的信息</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from teacher where name not in (&apos;杜老师&apos;);</span><br><span class="line">+----+-----------+--------+</span><br><span class="line">| id | name      | 评分   |</span><br><span class="line">+----+-----------+--------+</span><br><span class="line">|  1 | 贾老师    |    098 |</span><br><span class="line">+----+-----------+--------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>查询不包含杜老师的信息</p>
</blockquote>
<p>in：在…里面<br>not in：不在…里面</p>
<h4 id="between…and-not-between…and"><a href="#between…and-not-between…and" class="headerlink" title="between…and|not between…and"></a>between…and|not between…and</h4><p>between…and：在…之间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from student where id between 2 and 3;</span><br><span class="line">+----+-----------+--------+--------+</span><br><span class="line">| id | name      | 语文   | 数学   |</span><br><span class="line">+----+-----------+--------+--------+</span><br><span class="line">|  2 | 李青霞    |     89 |     92 |</span><br><span class="line">|  3 | 兰丁丁    |     29 |     96 |</span><br><span class="line">+----+-----------+--------+--------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>id在2和之间包含2和3</p>
</blockquote>
<p>not between …and 不在…之间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from student where id not between 2 and 2;</span><br><span class="line">+----+-----------+--------+--------+</span><br><span class="line">| id | name      | 语文   | 数学   |</span><br><span class="line">+----+-----------+--------+--------+</span><br><span class="line">|  1 | 张宝      |     56 |     67 |</span><br><span class="line">|  3 | 兰丁丁    |     29 |     96 |</span><br><span class="line">+----+-----------+--------+--------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>id不在2和2之间</p>
</blockquote>
<h4 id="is-null-is-not-null"><a href="#is-null-is-not-null" class="headerlink" title="is null | is not null"></a>is null | is not null</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into student values (null,&apos;赵哥&apos;,null,89);</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line"> +----+--------+--------+--------+</span><br><span class="line">| id | name   | 语文   | 数学   |</span><br><span class="line">+----+--------+--------+--------+</span><br><span class="line">|  4 | 赵哥   |   NULL |     89 |</span><br><span class="line">+----+--------+--------+--------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>查询语文或数学为空的信息；</p>
</blockquote>
<p><strong>查询一个为空的字段不能用等于，必须用is null</strong></p>
<h4 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h4><p>= ：结果就是一个字<br><code>select * from stu where id=(select id from class where name=&#39;jack&#39;);</code></p>
<h4 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h4><p>in ：一个字段对应多个值<br><code>select * from stu where id in(select id from class where name in(&#39;php&#39;,&#39;java&#39;));</code></p>
<h4 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h4><p>= ：n个字段名对n个值<br><code>select * from stu where(id,name)=(select id,name from class where name=&#39;php&#39;);</code></p>
<h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><table>
<thead>
<tr>
<th>聚合函数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>sum()</td>
<td style="text-align:center">求和</td>
</tr>
<tr>
<td>avg()</td>
<td style="text-align:center">求平均值</td>
</tr>
<tr>
<td>max()</td>
<td style="text-align:center">求最大值</td>
</tr>
<tr>
<td>min()</td>
<td style="text-align:center">求最小值</td>
</tr>
<tr>
<td>count()</td>
<td style="text-align:center">求记录数</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select sum(`语文`) as `语文总分`,avg(`语文`) as `语文平均分`,max(`语文`) as `语文最高分`,min(`语文`) as `语文最低分`,count(*) as `总人数` from student;</span><br><span class="line">+--------------+-----------------+-----------------+-----------------+-----------+</span><br><span class="line">| 语文总分     | 语文平均分      | 语文最高分      | 语文最低分      | 总人数    |</span><br><span class="line">+--------------+-----------------+-----------------+-----------------+-----------+</span><br><span class="line">|          174 |         58.0000 |              89 |              29 |         4 |</span><br><span class="line">+--------------+-----------------+-----------------+-----------------+-----------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure>
<h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h4><table>
<thead>
<tr>
<th>通配符</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>_  [下划线]</td>
<td style="text-align:center">表示任意一个字符</td>
</tr>
<tr>
<td>%</td>
<td style="text-align:center">表示任意字符</td>
</tr>
</tbody>
</table>
<blockquote>
<p>练习<br>1、满足“T_m”的有（A、C）<br>A：Tom        B：Toom        C：Tam        D：Tm    E：Tmo<br>2、满足“T_m_”的有（B、C）<br>A:Tmom    B:Tmmm    C:T1m2    D:Tmm    E:Tm<br>3、满足“张%”的是（A、B、C、D）<br>A:张三    B：张三丰    C：张牙舞爪        D：张        E：小张<br>4、满足“%诺基亚%”的是（A、B、C、D）<br>A：诺基亚2100   B：2100诺基亚    C：把我的诺基亚拿过来   D：诺基亚</p>
</blockquote>
<p><strong>如果要匹配6个字符，且已ing结尾则使用“___ing” 3个下划线</strong></p>
<p>使用“\”转移特殊字符 “\%”;</p>
<h4 id="模糊查询（like）"><a href="#模糊查询（like）" class="headerlink" title="模糊查询（like）"></a>模糊查询（like）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from student where name like &apos;兰%&apos;;</span><br><span class="line">+----+-----------+--------+--------+</span><br><span class="line">| id | name      | 语文   | 数学   |</span><br><span class="line">+----+-----------+--------+--------+</span><br><span class="line">|  3 | 兰丁丁    |     29 |     96 |</span><br><span class="line">+----+-----------+--------+--------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>查询兰姓小伙伴</p>
</blockquote>
<h4 id="group-by-【分组查询】"><a href="#group-by-【分组查询】" class="headerlink" title="group by 【分组查询】"></a>group by 【分组查询】</h4><p>将查询的结果分组，分组查询目的在于统计数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select id,name,sex,avg(`数学`) as `数学平均分数` from student group by sex;</span><br><span class="line">+----+-----------+------+--------------------+</span><br><span class="line">| id | name      | sex  | 数学平均分数       |</span><br><span class="line">+----+-----------+------+--------------------+</span><br><span class="line">|  2 | 李青霞    | 女   |            92.0000 |</span><br><span class="line">|  1 | 张宝      | 男   |            84.0000 |</span><br><span class="line">+----+-----------+------+--------------------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>分组查询中，字段有普通字段会怎么样？<br>只显示分组后第一条记录的字段值</p>
</blockquote>
<blockquote>
<p>注意内容插入的时候使用引号 ‘’ ，查询字段信息时使用 <code></code> ;</p>
</blockquote>
<p>通过group_concat()函数将同一组的值连接起来显示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select group_concat(id),group_concat(name),sex,avg(`语文`) as `语文平均分`,avg(`数学`) as `数学平均分` from student group by sex;</span><br><span class="line">+------------------+-------------------------+------+-----------------+-----------------+</span><br><span class="line">| group_concat(id) | group_concat(name)      | sex  | 语文平均分      | 数学平均分      |</span><br><span class="line">+------------------+-------------------------+------+-----------------+-----------------+</span><br><span class="line">| 2                | 李青霞                  | 女   |         89.0000 |         92.0000 |</span><br><span class="line">| 1,3,4            | 张宝,兰丁丁,赵哥        | 男   |         42.5000 |         84.0000 |</span><br><span class="line">+------------------+-------------------------+------+-----------------+-----------------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>
<p>实现分组后按降序排列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from student group by `语文` desc;</span><br><span class="line">+----+-----------+------+--------+--------+</span><br><span class="line">| id | name      | sex  | 语文   | 数学   |</span><br><span class="line">+----+-----------+------+--------+--------+</span><br><span class="line">|  2 | 李青霞    | 女   |     89 |     92 |</span><br><span class="line">|  1 | 张宝      | 男   |     56 |     67 |</span><br><span class="line">|  3 | 兰丁丁    | 男   |     29 |     96 |</span><br><span class="line">|  4 | 赵哥      | 男   |   NULL |     89 |</span><br><span class="line">+----+-----------+------+--------+--------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>分组后降序排列</p>
</blockquote>
<p>多列分组(注意：聚合函数*号的位置-&gt;count(*))</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select group_concat(name),sex,count(*) from student group by sex;</span><br><span class="line">+-------------------------+------+----------+</span><br><span class="line">| group_concat(name)      | sex  | count(*) |</span><br><span class="line">+-------------------------+------+----------+</span><br><span class="line">| 李青霞                  | 女   |        1 |</span><br><span class="line">| 张宝,兰丁丁,赵哥        | 男   |        3 |</span><br><span class="line">+-------------------------+------+----------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>
<h4 id="回溯统计【with-rollup】"><a href="#回溯统计【with-rollup】" class="headerlink" title="回溯统计【with rollup】"></a>回溯统计【with rollup】</h4><p>在分组统计的基础上再进行相同的统计</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; update student set sex=null where id=3;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from student;</span><br><span class="line">+----+-----------+------+--------+--------+</span><br><span class="line">| id | name      | sex  | 语文   | 数学   |</span><br><span class="line">+----+-----------+------+--------+--------+</span><br><span class="line">|  1 | 张宝      | 男   |     56 |     67 |</span><br><span class="line">|  2 | 李青霞    | 女   |     89 |     92 |</span><br><span class="line">|  3 | 兰丁丁    | NULL |     29 |     96 |</span><br><span class="line">|  4 | 赵哥      | 男   |   NULL |     89 |</span><br><span class="line">+----+-----------+------+--------+--------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select group_concat(name),sex,count(*) from student group by sex with rollup;</span><br><span class="line">+-----------------------------------+------+----------+</span><br><span class="line">| group_concat(name)                | sex  | count(*) |</span><br><span class="line">+-----------------------------------+------+----------+</span><br><span class="line">| 兰丁丁                            | NULL |        1 |</span><br><span class="line">| 李青霞                            | 女   |        1 |</span><br><span class="line">| 张宝,赵哥                         | 男   |        2 |</span><br><span class="line">| 兰丁丁,李青霞,张宝,赵哥           | NULL |        4 |</span><br><span class="line">+-----------------------------------+------+----------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在分组统计的基础上再进行相同的统计</p>
</blockquote>
<h4 id="having条件"><a href="#having条件" class="headerlink" title="having条件"></a>having条件</h4><p><strong>having和where的区别：</strong><br><strong>where</strong>是对原始数据进行筛选，<strong>having</strong>是对记录集(结果集)进行筛选。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from student having `语文`&lt;59;</span><br><span class="line">+----+-----------+------+--------+--------+</span><br><span class="line">| id | name      | sex  | 语文   | 数学   |</span><br><span class="line">+----+-----------+------+--------+--------+</span><br><span class="line">|  1 | 张宝      | 男   |     56 |     67 |</span><br><span class="line">|  3 | 兰丁丁    | NULL |     29 |     96 |</span><br><span class="line">+----+-----------+------+--------+--------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select name from student where `数学`&gt;80;</span><br><span class="line">+-----------+</span><br><span class="line">| name      |</span><br><span class="line">+-----------+</span><br><span class="line">| 李青霞    |</span><br><span class="line">| 兰丁丁    |</span><br><span class="line">| 赵哥      |</span><br><span class="line">+-----------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select name from student having `数学`&gt;80;</span><br><span class="line">ERROR 1054 (42S22): Unknown column &apos;数学&apos; in &apos;having clause&apos;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>因为在表中查询，表中有 `数学` ，所以where可以查到结果，反之having是查询不到结果的；</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select group_concat(name),sex,count(*) as total from student group by sex having total&gt;1; </span><br><span class="line">+--------------------+------+-------+</span><br><span class="line">| group_concat(name) | sex  | total |</span><br><span class="line">+--------------------+------+-------+</span><br><span class="line">| 张宝,赵哥          | 男   |     2 |</span><br><span class="line">+--------------------+------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>对select出的数据，使用having进行条件设置</p>
</blockquote>
<p>####【where子句】<br>    主要是用于根据一个条件表达式从硬盘上将数据读到内存中时筛选记录。<br>既然where根据条件表达式进行记录的筛选，where的运算符<br>=        判断两个值是否相等<br>=        判断n个字段与n个值是否相等</p>
<h4 id="order-by排序"><a href="#order-by排序" class="headerlink" title="order by排序"></a>order by排序</h4><p><strong>asc：升序【默认】</strong><br><strong>desc：降序</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from student order by \`语文`;			--按语文升序</span><br><span class="line">mysql&gt; select * from student order by \`语文` asc;		--按语文升序</span><br><span class="line">mysql&gt; select * from student order by \`语文` desc;		--按语文降序</span><br></pre></td></tr></table></figure>
<h4 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h4><p><code>语法：limit 起始位置，显示长度</code><br>起始位置可以省略，默认是从0开始</p>
<p>找出班级总分前两名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select name,(`语文`+`数学`) as total from student order by (`语文`+`数学`) desc limit 2;</span><br><span class="line">+-----------+-------+</span><br><span class="line">| name      | total |</span><br><span class="line">+-----------+-------+</span><br><span class="line">| 李青霞    |   181 |</span><br><span class="line">| 兰丁丁    |   125 |</span><br><span class="line">+-----------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h4 id="查询语句中的选项"><a href="#查询语句中的选项" class="headerlink" title="查询语句中的选项"></a>查询语句中的选项</h4><p>查询语句中的选项有两个：<br>1、    all：显示所有数据 【默认】<br>2、    distinct：去除结果集中重复的数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select all sex from student;</span><br><span class="line">+------+</span><br><span class="line">| sex  |</span><br><span class="line">+------+</span><br><span class="line">| 男   |</span><br><span class="line">| 女   |</span><br><span class="line">| NULL |</span><br><span class="line">| 男   |</span><br><span class="line">+------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select distinct sex from student;</span><br><span class="line">+------+</span><br><span class="line">| sex  |</span><br><span class="line">+------+</span><br><span class="line">| 男   |</span><br><span class="line">| 女   |</span><br><span class="line">| NULL |</span><br><span class="line">+------+</span><br><span class="line">3 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>
<h3 id="insert…select…"><a href="#insert…select…" class="headerlink" title="insert…select…"></a>insert…select…</h3><p>选择一个表的数据插入到另外的表中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table stu_boy like student;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into stu_boy select * from student where sex=&apos;男&apos;;</span><br><span class="line">Query OK, 2 rows affected (0.02 sec)</span><br><span class="line">Records: 2  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from stu_boy;</span><br><span class="line">+----+--------+------+--------+--------+</span><br><span class="line">| id | name   | sex  | 语文   | 数学   |</span><br><span class="line">+----+--------+------+--------+--------+</span><br><span class="line">|  1 | 张宝   | 男   |     56 |     67 |</span><br><span class="line">|  4 | 赵哥   | 男   |   NULL |     89 |</span><br><span class="line">+----+--------+------+--------+--------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h3 id="on-duplicate-key-update"><a href="#on-duplicate-key-update" class="headerlink" title="on duplicate key update"></a>on duplicate key update</h3><p>在插入数据的时候，如果插入的数据不满足主键约束或唯一约束则执行更新操作。<br>测试数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1	–创建表</span><br><span class="line">2	create table emp(</span><br><span class="line">3	id int primary key,</span><br><span class="line">4	name varchar(20) unique</span><br><span class="line">5	);</span><br><span class="line">6	– 插入测试数据</span><br><span class="line">7	insert into emp values (1,&apos;tom&apos;);</span><br></pre></td></tr></table></figure>
<p><code>mysql&gt;insert into emp values (1,&#39;berry&#39;) on duplicate key update name=&#39;berry&#39;</code></p>
<blockquote>
<p>编号1和主键冲突，将name改成berry</p>
</blockquote>
<p><code>mysql&gt;insert into emp values (2,&#39;berry&#39;) on duplicate key update id=2;</code></p>
<blockquote>
<p>berry 和唯一键冲突，将id改为2</p>
</blockquote>
<h3 id="union"><a href="#union" class="headerlink" title="union"></a>union</h3><p>作用：将多个select语句结果集纵向联合起来<br>语法：<code>select 语句 union [选项] select 语句 union [选项] select 语句</code></p>
<p>例题：查找上海的男生和北京的女生</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--方法一：</span><br><span class="line">mysql&gt; select * from stu where (stuaddress=&apos;上海&apos; and stusex=&apos;男&apos;) or (stuaddress=&apos;北京&apos; and stusex=&apos;女&apos;);</span><br><span class="line"></span><br><span class="line">--方法二：</span><br><span class="line">mysql&gt; select * from stu where (stuaddress=&apos;上海&apos; and stusex=&apos;男&apos;) union select * from stu where (stuaddress=&apos;北京&apos; and stusex=&apos;女&apos;);</span><br></pre></td></tr></table></figure>
<p>例题：联合多个表的数据<br><code>mysql&gt; select stuname from stu union select name from stu_info;</code></p>
<p>例题：将多个表的数据插入到新表中<br><code>mysql&gt; create table stu2 like stu;        --创建和stu一样的表结构</code></p>
<p>–将上海的男生和北京的女生插入到stu2表中</p>
<p><code>insert into stu2 select * from stu where (stuaddress=&#39;上海&#39; and stusex=&#39;男&#39;) union select * from stu where (stuaddress=&#39;北京&#39; and stusex=&#39;女&#39;);</code></p>
<h4 id="union的选项"><a href="#union的选项" class="headerlink" title="union的选项"></a>union的选项</h4><p>union的选项有两个<br>1、    all：显示所有数据<br>2、    distinct：去除重复的数据【默认】</p>
<blockquote>
<p>默认情况下，取出重复的记录<br>union all 显示联合的数据，不去重</p>
</blockquote>
<h4 id="union的注意事项"><a href="#union的注意事项" class="headerlink" title="union的注意事项"></a>union的注意事项</h4><ul>
<li>union两边的select语句的字段个数必须一致</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select name from student union select name,sex from stu_boy;</span><br><span class="line">ERROR 1222 (21000): The used SELECT statements have a different number of columns</span><br></pre></td></tr></table></figure>
<ul>
<li>union两边的select语句的字段名可以不一致，最终按第一个select语句的字段名。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select id,name from student union select name,sex from stu_boy;</span><br><span class="line">+--------+-----------+</span><br><span class="line">| id     | name      |</span><br><span class="line">+--------+-----------+</span><br><span class="line">| 1      | 张宝      |</span><br><span class="line">| 2      | 李青霞    |</span><br><span class="line">| 3      | 兰丁丁    |</span><br><span class="line">| 4      | 赵哥      |</span><br><span class="line">| 张宝   | 男        |</span><br><span class="line">| 赵哥   | 男        |</span><br><span class="line">+--------+-----------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<ul>
<li>union两边的select语句中的数据类型可以不一致。</li>
</ul>
<h4 id="union和order-by一起使用"><a href="#union和order-by一起使用" class="headerlink" title="union和order by一起使用"></a>union和order by一起使用</h4><p>1、    每条select语句必须用括号括起来。<br>2、    每条select语句的order by必须配合limit才能生效。</p>
<p>例题：男生按数学的降序，女生按语文的升序排列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; (select * from student where sex=&apos;男&apos; order by 数学 desc limit 999) union (select * from student where sex=&apos;女&apos; order by 语文 asc limit 999);</span><br><span class="line">+----+-----------+------+--------+--------+</span><br><span class="line">| id | name      | sex  | 语文   | 数学   |</span><br><span class="line">+----+-----------+------+--------+--------+</span><br><span class="line">|  4 | 赵哥      | 男   |   NULL |     89 |</span><br><span class="line">|  1 | 张宝      | 男   |     56 |     67 |</span><br><span class="line">|  2 | 李青霞    | 女   |     89 |     92 |</span><br><span class="line">+----+-----------+------+--------+--------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 数据类型、列属性、数据完整性</title>
    <url>/2015/20150830-1.html</url>
    <content><![CDATA[<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="数据类型——值类型"><a href="#数据类型——值类型" class="headerlink" title="数据类型——值类型"></a>数据类型——值类型</h4><h5 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h5><table>
<thead>
<tr>
<th>整型</th>
<th style="text-align:center">占用字节</th>
<th style="text-align:center">范围</th>
<th style="text-align:center">范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>tinyint</td>
<td style="text-align:center">1</td>
<td style="text-align:center">-2^7~2^7-1</td>
<td style="text-align:center">-128~127</td>
</tr>
<tr>
<td>smallint</td>
<td style="text-align:center">2</td>
<td style="text-align:center">-2^15~2^15-1</td>
<td style="text-align:center">-32768~32767</td>
</tr>
<tr>
<td>mediumint</td>
<td style="text-align:center">3</td>
<td style="text-align:center">-2^23~2^23-1</td>
<td style="text-align:center">-8388608~8388607</td>
</tr>
<tr>
<td>int</td>
<td style="text-align:center">4</td>
<td style="text-align:center">-2^31~2^31-1</td>
<td style="text-align:center">-2147483648~2147483647</td>
</tr>
<tr>
<td>bigint</td>
<td style="text-align:center">8</td>
<td style="text-align:center">-2^63~2^63-1</td>
<td style="text-align:center">-</td>
</tr>
</tbody>
</table>
<blockquote>
<p>一个字节=8位，8位就是8个二进制数</p>
</blockquote>
<ul>
<li>整型支持显示宽度：最小的显示位数，比如int(5)，如果数值的位数小于5位，前面加上前导0。比如输入12，显示00012；大于5位就不添加前导0</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; describe student;</span><br><span class="line">+-------+--------------------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type                     | Null | Key | Default | Extra          |</span><br><span class="line">+-------+--------------------------+------+-----+---------+----------------+</span><br><span class="line">| id    | int(11)                  | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name  | char(1)                  | YES  |     | NULL    |                |</span><br><span class="line">| num   | int(8) unsigned zerofill | YES  |     | NULL    |                |</span><br><span class="line">+-------+--------------------------+------+-----+---------+----------------+</span><br><span class="line">3 rows in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from student;</span><br><span class="line">+----+------+------------+</span><br><span class="line">| id | name | num        |</span><br><span class="line">+----+------+------------+</span><br><span class="line">|  1 | a    |   00002485 |</span><br><span class="line">|  2 | b    |   03678928 |</span><br><span class="line">|  3 | c    | 1234567890 |</span><br><span class="line">+----+------+------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>脚下留心：必须结合zerofill才起作用<br>显示宽度不决定显示范围，只是在数值不够指定位数时用0做前导</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table student add num2 tinyint;</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into student values (null,&apos;d&apos;,&apos;1&apos;,128);</span><br><span class="line">Query OK, 1 row affected, 1 warning (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from student;</span><br><span class="line">+----+------+------------+------+</span><br><span class="line">| id | name | num        | num2 |</span><br><span class="line">+----+------+------------+------+</span><br><span class="line">|  1 | a    |   00002485 | NULL |</span><br><span class="line">|  2 | b    |   03678928 | NULL |</span><br><span class="line">|  3 | c    | 1234567890 | NULL |</span><br><span class="line">|  4 | d    |   00000001 |  127 |</span><br><span class="line">+----+------+------------+------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>超出最大范围会有警告提示，同时值保存最大范围值</p>
</blockquote>
<ul>
<li>无符号整数（unsigned）：无符号数没有负数，正数部分是有符号的两倍</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into student values (null,666);</span><br><span class="line">Query OK, 1 row affected, 1 warning (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from student;</span><br><span class="line">+----+------+</span><br><span class="line">| id | num  |</span><br><span class="line">+----+------+</span><br><span class="line">|  7 |  255 |</span><br><span class="line">+----+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h5 id="浮点型（保存近似值小数）"><a href="#浮点型（保存近似值小数）" class="headerlink" title="浮点型（保存近似值小数）"></a>浮点型（保存近似值小数）</h5><table>
<thead>
<tr>
<th>浮点型</th>
<th style="text-align:center">占用字节</th>
<th style="text-align:center">范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>float（单精度）</td>
<td style="text-align:center">4</td>
<td style="text-align:center">-3.4E+38~3.4E+38</td>
</tr>
<tr>
<td>double（双精度）</td>
<td style="text-align:center">8</td>
<td style="text-align:center">-1.8E+308~1.8E+308</td>
</tr>
</tbody>
</table>
<ul>
<li>浮点数声明:  float(M,D)   double(M,D)<br>M：总位数<br>D：小数位数</li>
</ul>
<blockquote>
<p>浮点数也是支持显示宽度和无符号数</p>
</blockquote>
<ul>
<li>浮点数支持科学计数法<br><code>insert into uiste values (5E2,4E-1);</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into student values (null,5E2,4E-1);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from student;</span><br><span class="line">+----+--------------+------+</span><br><span class="line">| id | num1         | num2 |</span><br><span class="line">+----+--------------+------+</span><br><span class="line">|  7 |         NULL | NULL |</span><br><span class="line">|  8 | 000000000500 | 00.4 |</span><br><span class="line">+----+--------------+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<ul>
<li>浮点的精度可能会丢失【指的是小数】<br><code>insert into uiste values (99.999999999);</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into student values (null,9.99999999999999,1.1111111111111);</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from student;</span><br><span class="line">+----+--------------+------+</span><br><span class="line">| id | num1         | num2 |</span><br><span class="line">+----+--------------+------+</span><br><span class="line">|  7 |         NULL | NULL |</span><br><span class="line">|  8 | 000000000500 | 00.4 |</span><br><span class="line">|  9 | 000000000010 | 01.1 |</span><br><span class="line">+----+--------------+------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>小数部分如果超过D的限制会四舍五入，整数部分不能超过M-D的限制</p>
</blockquote>
<ul>
<li>定点数<br>语法：decimal(M,D)</li>
</ul>
<blockquote>
<p>定点数是变长的，大致每9个数字用4个字节来存储。定点数之所以能保存精确的小数，因为整数和小数是分开存储的。占用的资源比浮点数要多。<br>定点数和浮点数都支持显示宽度和无符号数</p>
</blockquote>
<h4 id="数据类型——字符型"><a href="#数据类型——字符型" class="headerlink" title="数据类型——字符型"></a>数据类型——字符型</h4><table>
<thead>
<tr>
<th>数据类型</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>char(L)</td>
<td style="text-align:center">定长</td>
</tr>
<tr>
<td>varchar(L)</td>
<td style="text-align:center">变长</td>
</tr>
<tr>
<td>tinytext</td>
<td style="text-align:center">2^8-1=255</td>
</tr>
<tr>
<td>text</td>
<td style="text-align:center">2^16-1=65535</td>
</tr>
<tr>
<td>mediumtext</td>
<td style="text-align:center">2^24-1</td>
</tr>
<tr>
<td>longtext</td>
<td style="text-align:center">2^32-1</td>
</tr>
</tbody>
</table>
<blockquote>
<p>char(10)和varchar(10)的区别？<br>答：相同点：它们最多只能保存10个字符；<br>不同点：char不回收富余的字符，varchar会回收富余的字符。<br>char效率高，浪费空间，varchar节省空间，效率比char低。</p>
</blockquote>
<blockquote>
<p>char的最大长度是255。varchar理论长度是65535字节,实际根本达不到。具体长度与字符编码有关</p>
</blockquote>
<blockquote>
<p>大块文本（text）不计算在总长度中,一个大块文本只占用10个字节来保存文本的地址。</p>
</blockquote>
<h4 id="数据类型——枚举（enum）"><a href="#数据类型——枚举（enum）" class="headerlink" title="数据类型——枚举（enum）"></a>数据类型——枚举（enum）</h4><p>从集合中选择一个数据（单选）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create database uiste charset=utf8;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; create table student(</span><br><span class="line">    -&gt; name varchar(20),</span><br><span class="line">    -&gt; sex enum(&apos;男&apos;,&apos;女&apos;,&apos;保密&apos;)</span><br><span class="line">    -&gt; )charset=utf8;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into student values (&apos;杜敏&apos;,&apos;男&apos;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into student values (&apos;钟程程&apos;,&apos;男或女&apos;);</span><br><span class="line">Query OK, 1 row affected, 1 warning (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from student;</span><br><span class="line">+-----------+------+</span><br><span class="line">| name      | sex  |</span><br><span class="line">+-----------+------+</span><br><span class="line">| 杜敏      | 男   |</span><br><span class="line">| 钟程程    |      |</span><br><span class="line">+-----------+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用枚举进行数据选择的时候，没有屏蔽错误信息只是提示了警告信息</p>
</blockquote>
<blockquote>
<p>MySQL的枚举类型是通过整数来管理的，第一个值是1，第二个值是2，以此类推<br>既然枚举在数据库内部存储的是整数，那么可以直接插入数字</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select sex+0 from student;</span><br><span class="line">+-------+</span><br><span class="line">| sex+0 |</span><br><span class="line">+-------+</span><br><span class="line">|     1 |</span><br><span class="line">|     0 |</span><br><span class="line">+-------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into student values (&apos;赵哥&apos;,2);</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from student;</span><br><span class="line">+-----------+------+</span><br><span class="line">| name      | sex  |</span><br><span class="line">+-----------+------+</span><br><span class="line">| 杜敏      | 男   |</span><br><span class="line">| 钟程程    |      |</span><br><span class="line">| 赵哥      | 女   |</span><br><span class="line">+-----------+------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p><strong>枚举的优点：</strong><br>1、    运行速度快（数字比字符串运算速度快）<br>2、    限制数据<br>3、    节省空间</p>
<blockquote>
<p>已知枚举占用2个字节，请问最多有多少个枚举值？<br>答：2个字节=16位，可以保存216个数字（0-65535），枚举是从1开始，所以枚举最多可以有65535个枚举值</p>
</blockquote>
<h4 id="数据类型——集合（set"><a href="#数据类型——集合（set" class="headerlink" title="数据类型——集合（set)"></a>数据类型——集合（set)</h4><p>从集合中选择一些数据（多选）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table student(</span><br><span class="line">    -&gt; name char,</span><br><span class="line">    -&gt; hobby set(&apos;看书&apos;,&apos;玩游戏&apos;,&apos;敲代码&apos;,&apos;看电视&apos;)</span><br><span class="line">    -&gt; )charset=utf8;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br></pre></td></tr></table></figure>
<p>插入集合的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into student values (&apos;杜敏&apos;,&apos;玩游戏&apos;);</span><br><span class="line">Query OK, 1 row affected, 1 warning (0.01 sec)</span><br><span class="line">mysql&gt; insert into student values (&apos;小兰&apos;,&apos;看书,敲代码&apos;);</span><br><span class="line">Query OK, 1 row affected, 1 warning (0.01 sec)</span><br><span class="line">mysql&gt; insert into student values (&apos;兰&apos;,&apos;敲代码,看书&apos;);</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from student;</span><br><span class="line">+------+------------------+</span><br><span class="line">| name | hobby            |</span><br><span class="line">+------+------------------+</span><br><span class="line">| 杜   | 玩游戏           |</span><br><span class="line">| 小   | 看书,敲代码      |</span><br><span class="line">| 兰   | 看书,敲代码      |</span><br><span class="line">+------+------------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>插入的顺序不一样，但是显示的顺序是一样的</p>
</blockquote>
<blockquote>
<p>集合和枚举一样，每个集合的元素都分配一个固定的值，分配的方式从左往右按2的0、1、2、…次方</p>
</blockquote>
<p>如果是多选，他们的关系是按位或<br>按位与：相同的位上都是1，结果才为1，只要有一个为0，结果为0。<br>按位或：相同的位上只要有一个为1结果就是1。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select hobby+0 from student;</span><br><span class="line">+---------+</span><br><span class="line">| hobby+0 |</span><br><span class="line">+---------+</span><br><span class="line">|       2 |</span><br><span class="line">|       5 |</span><br><span class="line">|       5 |</span><br><span class="line">+---------+</span><br><span class="line">3 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>思考：已知集合占用8个字节，最多可以表示几个选项？<br>答：8个字节=64位，一个位表示1个选项，最多可以表示64个选项。</p>
</blockquote>
<h4 id="数据类型——日期类型"><a href="#数据类型——日期类型" class="headerlink" title="数据类型——日期类型"></a>数据类型——日期类型</h4><table>
<thead>
<tr>
<th>数据类型</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>datetime</td>
<td style="text-align:center">日期时间，占用8个字节</td>
</tr>
<tr>
<td>date</td>
<td style="text-align:center">日期</td>
</tr>
<tr>
<td>time</td>
<td style="text-align:center">时间</td>
</tr>
<tr>
<td>timestamp</td>
<td style="text-align:center">时间戳   占用4个字节</td>
</tr>
<tr>
<td>year</td>
<td style="text-align:center">年份   占用1个字节</td>
</tr>
</tbody>
</table>
<ul>
<li>datetime    格式：年-月-日 小时:分钟:秒</li>
</ul>
<p>测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into test10 values (&apos;2015-6-24 15:15:15&apos;);	--正确</span><br><span class="line">mysql&gt; insert into test10 values (&apos;100-6-24 15:15:15&apos;);		--正确</span><br><span class="line">mysql&gt; insert into test10 values (&apos;9999-6-24 15:15:15&apos;);	--正确</span><br><span class="line">mysql&gt; insert into test10 values (&apos;10000-6-24 15:15:15&apos;);	--错误</span><br></pre></td></tr></table></figure>
<blockquote>
<p>datetime保存范围是：1~9999年</p>
</blockquote>
<ul>
<li>timestamp：时间戳</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into test11 values (&apos;2015-6-24 15:15:15&apos;);	--正确的</span><br><span class="line">mysql&gt; insert into test11 values (&apos;1969-12-31 23:59:59&apos;);	--超过范围</span><br><span class="line">mysql&gt; insert into test11 values (&apos;2038-01-19 11:14:08&apos;);	--超出范围</span><br><span class="line">mysql&gt; insert into test11 values (&apos;2038-01-19 11:14:07&apos;);	--正确</span><br></pre></td></tr></table></figure>
<blockquote>
<p>datetime类型timestamp类型在表现上是一样的。他们的区别：<br>datetime是从1到9999，而timestamp从1970年~2038年，2038年01月19日11:14:07秒以后就超出timestamp范围了。</p>
</blockquote>
<ul>
<li><p>year<br>因为只占用1个字节，最多只能表示255个年份，范围是1901-2155之间的年份</p>
</li>
<li><p>time<br>表示时间或时间间隔，范围是-838:59:59~838:59:59</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into test13 values (12:12:12);	--正确</span><br><span class="line">mysql&gt; insert into test13 values (&apos;212:12:12&apos;);	--正确</span><br><span class="line">mysql&gt; insert into test13 values (&apos;-838:59:59&apos;);--正确</span><br><span class="line">mysql&gt; insert into test13 values (&apos;838:59:59&apos;);	--正确</span><br><span class="line">mysql&gt; insert into test13 values (&apos;839:00:00&apos;);	--错误</span><br></pre></td></tr></table></figure>
<blockquote>
<p>time支持以天的方式插入</p>
</blockquote>
<p><code>insert into student values (&#39;10 12:12:12&#39;);</code></p>
<h4 id="数据类型——boolean"><a href="#数据类型——boolean" class="headerlink" title="数据类型——boolean"></a>数据类型——boolean</h4><p>MySQL不支持boolean类型，true和false在数据库中对应1和0。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table test1(</span><br><span class="line">    -&gt; `field` boolean</span><br><span class="line">    -&gt; )charset=utf8;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; describe test1;</span><br><span class="line">+-------+------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type       | Null | Key | Default | Extra |</span><br><span class="line">+-------+------------+------+-----+---------+-------+</span><br><span class="line">| field | tinyint(1) | YES  |     | NULL    |       |</span><br><span class="line">+-------+------------+------+-----+---------+-------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure>
<h4 id="创建数据表的数据类型"><a href="#创建数据表的数据类型" class="headerlink" title="创建数据表的数据类型"></a>创建数据表的数据类型</h4><blockquote>
<p>手机号码一般使用什么数据类型存储?            char<br>性别一般使用什么数据类型存储?                char    enum<br>年龄信息一般使用什么数据类型存储?            tinyint<br>照片信息一般使用什么数据类型存储?            binary(二进制)<br>薪水一般使用什么数据类型存储?                decimal</p>
</blockquote>
<p><strong>一个字段到底选数字还是字符，取决于有没有计算的可能，如果没有计算的可能即使是数字也要用字符类型，比如手机号、QQ号，…</strong></p>
<h3 id="列属性-是否为空-null-not-null"><a href="#列属性-是否为空-null-not-null" class="headerlink" title="列属性-是否为空(null | not null)"></a>列属性-是否为空(null | not null)</h3><p>null：可以为空<br>not null：不可以为空</p>
<h4 id="列属性——默认值（default）"><a href="#列属性——默认值（default）" class="headerlink" title="列属性——默认值（default）"></a>列属性——默认值（default）</h4><blockquote>
<p>如果一个字段没有插入值，可以默认插入一个指定的值<br>没有插入的字段插入默认值<br>default关键字用来插入默认值</p>
</blockquote>
<h4 id="列属性——自动增长（auto-increment）"><a href="#列属性——自动增长（auto-increment）" class="headerlink" title="列属性——自动增长（auto_increment）"></a>列属性——自动增长（auto_increment）</h4><p>字段的值从1开始，每次递增1，特点就在字段中的数据不可能重复，适合为记录生成唯一的id</p>
<blockquote>
<p>在MySQL中，auto_increment必须是主键。但是主键不一定是自动增长的</p>
</blockquote>
<p><strong>既然从1开始，每次递增1，所以一般自动增长都是无符号整数</strong></p>
<blockquote>
<p>如果要给自动增长列插入数据，使用null关键字。<br>自动增长列上的数据被删除，默认情况下此记录的编号不再使用。</p>
</blockquote>
<blockquote>
<p>思考题：在一个自动增长列上，插入三行，删除两行，插入三行，删除两行，插入三行，删除两行，再插入一个记录编号是多少？<br>答：编号从10开始。删除记录与自动增长的编号没有关系</p>
</blockquote>
<h4 id="列属性——主键（primary-key）"><a href="#列属性——主键（primary-key）" class="headerlink" title="列属性——主键（primary key）"></a>列属性——主键（primary key）</h4><p>主键：唯一标识表中记录的一个或一组列<br>主键的特点：不能重复，不能为空<br>一个表只能有一个主键，主键可以有多个字段组成</p>
<p>主键的作用：</p>
<ul>
<li>保证数据完整性</li>
<li>加快查询速度</li>
</ul>
<h5 id="添加主键：方法一【创建表的时候添加主键】"><a href="#添加主键：方法一【创建表的时候添加主键】" class="headerlink" title="添加主键：方法一【创建表的时候添加主键】"></a>添加主键：方法一【创建表的时候添加主键】</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table stu(</span><br><span class="line">    -&gt; id int primary key,</span><br><span class="line">    -&gt; name varchar(20)</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>
<h5 id="添加主键：方法二【创建表的时候添加主键】"><a href="#添加主键：方法二【创建表的时候添加主键】" class="headerlink" title="添加主键：方法二【创建表的时候添加主键】"></a>添加主键：方法二【创建表的时候添加主键】</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table stu(</span><br><span class="line">    -&gt; id int,</span><br><span class="line">    -&gt; name varchar(20),</span><br><span class="line">    -&gt; primary key(id)</span><br><span class="line">    -&gt; );</span><br></pre></td></tr></table></figure>
<h5 id="添加主键：方法三【更改表的时候添加主键】"><a href="#添加主键：方法三【更改表的时候添加主键】" class="headerlink" title="添加主键：方法三【更改表的时候添加主键】"></a>添加主键：方法三【更改表的时候添加主键】</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table stu(</span><br><span class="line">    -&gt; id int,</span><br><span class="line">    -&gt; name varchar(20)</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; alter table stu add primary key (id)</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>
<h5 id="查看主键"><a href="#查看主键" class="headerlink" title="查看主键"></a>查看主键</h5><p><code>mysql&gt;desc stu;</code></p>
<h5 id="创建组合键"><a href="#创建组合键" class="headerlink" title="创建组合键"></a>创建组合键</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table stu(</span><br><span class="line">    -&gt; id int,</span><br><span class="line">    -&gt; name varchar(20),</span><br><span class="line">    -&gt; primary key(id,name)</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>也可以通过更改表的方式来创建组合键<br>alter table stu add primary key(id,name)</p>
</blockquote>
<h5 id="删除主键"><a href="#删除主键" class="headerlink" title="删除主键"></a>删除主键</h5><p><code>mysql&gt;alter table stu drop primary key;</code></p>
<h5 id="选择主键的原则"><a href="#选择主键的原则" class="headerlink" title="选择主键的原则"></a>选择主键的原则</h5><p>1、    最少性：尽量选择一个字段做主键<br>2、    稳定性：尽量选择更新少的列做主键<br>3、    尽量选择数字型的列做主键</p>
<h5 id="主键思考题"><a href="#主键思考题" class="headerlink" title="主键思考题"></a>主键思考题</h5><blockquote>
<p>在主键列输入的数值，允许为空吗?                不能为空<br>一个表可以有多个主键吗?                            不能<br>在一个学校数据库中，如果一个学校内允许重名的学员，但是一个班级内不允许学员重名，可以组合班级和姓名两个字段一起来作为主键吗？可以<br>标识列（自动增长列）允许为字符数据类型吗？        不允许<br>表中没有合适的列作为主键怎么办？                添加一个自动增长列<br>   如果标识列A的初始值为1，增长量为1，则输入三行数据以后，再删除两行，下次再输入数据行的时候，标识值从多少开始？  从4开始</p>
</blockquote>
<h4 id="列属性——唯一键"><a href="#列属性——唯一键" class="headerlink" title="列属性——唯一键"></a>列属性——唯一键</h4><p>特点：不能重复，可以为空<br>一个表可以有多个唯一键<br>作用：<br>1、    保证数据完整性<br>2、    加快数据访问</p>
<h5 id="添加唯一键【创建表的时候添加唯一键】"><a href="#添加唯一键【创建表的时候添加唯一键】" class="headerlink" title="添加唯一键【创建表的时候添加唯一键】"></a>添加唯一键【创建表的时候添加唯一键】</h5><p>unique key<br>unique </p>
<h5 id="添加唯一键【创建表的时候添加唯一键】-1"><a href="#添加唯一键【创建表的时候添加唯一键】-1" class="headerlink" title="添加唯一键【创建表的时候添加唯一键】"></a>添加唯一键【创建表的时候添加唯一键】</h5><p>unique key(stuname)<br>unique(stuadd)</p>
<h5 id="设置名字的唯一键"><a href="#设置名字的唯一键" class="headerlink" title="设置名字的唯一键"></a>设置名字的唯一键</h5><p><code>unique key `name` (`stuname`)</code><br>name：唯一键名字<br>stuname：字段名字</p>
<h5 id="添加唯一键【修改表的时候添加唯一键】"><a href="#添加唯一键【修改表的时候添加唯一键】" class="headerlink" title="添加唯一键【修改表的时候添加唯一键】"></a>添加唯一键【修改表的时候添加唯一键】</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table stu(</span><br><span class="line">    -&gt; id int primary key,</span><br><span class="line">    -&gt; stuname varchar(20),</span><br><span class="line">    -&gt; stuadd varchar(100)</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>添加唯一键</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table stu add unique key(stuname);   --key可以省略</span><br><span class="line">mysql&gt; alter table stu add unique (stuadd);</span><br></pre></td></tr></table></figure>
<p>一次添加多个唯一键<br><code>mysql&gt;alter table stu add unique(stuname),add unique(stuadd);</code></p>
<h5 id="查看唯一键"><a href="#查看唯一键" class="headerlink" title="查看唯一键"></a>查看唯一键</h5><p><code>mysql&gt;show create talbe stu\G</code></p>
<h5 id="添加组合唯一键"><a href="#添加组合唯一键" class="headerlink" title="添加组合唯一键"></a>添加组合唯一键</h5><h5 id="删除唯一键"><a href="#删除唯一键" class="headerlink" title="删除唯一键"></a>删除唯一键</h5><p>通过唯一键的名字来删除唯一键<br>语法：<code>alter table 表名 drop index 唯一键名称</code><br><code>mysql&gt;alter talbe stu drop index stuname;</code></p>
<h5 id="列属性——备注（comment）"><a href="#列属性——备注（comment）" class="headerlink" title="列属性——备注（comment）"></a>列属性——备注（comment）</h5><h5 id="SQL注释"><a href="#SQL注释" class="headerlink" title="SQL注释"></a>SQL注释</h5><p>单行注释：–或#<br>多行注释：/<em>    </em>/</p>
<h4 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a>数据完整性</h4><h5 id="保证实体完整性"><a href="#保证实体完整性" class="headerlink" title="保证实体完整性"></a>保证实体完整性</h5><p>1、    主键约束<br>2、    唯一约束<br>3、    自动增长列</p>
<h5 id="保证域完整性"><a href="#保证域完整性" class="headerlink" title="保证域完整性"></a>保证域完整性</h5><p>1、    数据类型约束<br>2、    非空约束<br>3、    默认值约束</p>
<h5 id="保证引用完整性"><a href="#保证引用完整性" class="headerlink" title="保证引用完整性"></a>保证引用完整性</h5><p>1、外键约束：从表中的公共字段是主表的外键</p>
<h5 id="保证自定义完整性"><a href="#保证自定义完整性" class="headerlink" title="保证自定义完整性"></a>保证自定义完整性</h5><p>1、    存储过程<br>2、    触发器</p>
<h5 id="主表和从表"><a href="#主表和从表" class="headerlink" title="主表和从表"></a>主表和从表</h5><p>两个表建立关系（两个表只要有公共字段就有关系），一个表称为主表，一个表称为从表。<br>外键约束可以实现：<br>1、    主表中没有的从表中不允许插入<br>2、    从表中有的主表中不允许删除<br>3、    不能更改主表中的值而导致从表中的记录孤立存在。<br>4、    先删除从表，再删除主表</p>
<h4 id="外键（foreign-key）"><a href="#外键（foreign-key）" class="headerlink" title="外键（foreign key）"></a>外键（foreign key）</h4><p>1、    外键：从表中的公共字段，公共字段的名字可以不一样，但是数据类型必须一样。<br>2、    外键约束用来保证引用完整性</p>
<h5 id="添加外键"><a href="#添加外键" class="headerlink" title="添加外键"></a>添加外键</h5><p><strong>foreign key (id) references stuinfo(stuno);</strong><br>方法一：创建表的时候添加外键</p>
<p>references：参照</p>
<p>测试：</p>
<ul>
<li>主表中没有的，从表中不允许插入</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">先插主表，在插从表</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into stuinfo values (1,&apos;tom&apos;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">mysql&gt; insert into stumarks values (1,77);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>
<ul>
<li><p>从表中有的，主表中不能删除</p>
</li>
<li><p>不能更改主表的数据后使得从表的数据孤立</p>
</li>
</ul>
<p>方法二：修改表的时候添加外键<br>语法：<code>alter table stumarks add foreign key (id) references stuinfo(stuno);</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table stuinfo(</span><br><span class="line">    -&gt; stuno char(4) primary key,</span><br><span class="line">    -&gt; stuname varchar(20) not null</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; create table stumarks(</span><br><span class="line">    -&gt; id char(4) primary key,</span><br><span class="line">    -&gt; score int</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; alter table stumarks add foreign key (id) references stuinfo(stuno);</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>
<blockquote>
<p>要创建外键必须是innodb引擎，myisam不支持外键约束</p>
</blockquote>
<p><strong>创建外键的时候，给外键取名</strong><br><code>alter table stumarks add constraint `FK1` foreign key(id) references stuinfo(stuno);</code></p>
<blockquote>
<p>constraint：约束</p>
</blockquote>
<h5 id="删除外键"><a href="#删除外键" class="headerlink" title="删除外键"></a>删除外键</h5><p>通过外键的名字删除外键<br>语法：<code>alter table 表名 drop foreign key `外键名`</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt;alter talbe stumarks drop foreign key `FK1`</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果要在某个字段上添加外键约束，改字段必须要有索引才可以。如果该字段已经存在索引，则直接使用，否则MySQL自动生成索引。</p>
</blockquote>
<h5 id="外键操作"><a href="#外键操作" class="headerlink" title="外键操作"></a>外键操作</h5><p>1、    严格操作（前面讲的是严格操作）<br>2、    置空操作（set null）：如果主表记录删除或更新，从表置空<br>3、    级联操作（cascade）：如果主表记录删除或更新，从表级联</p>
<blockquote>
<p>一般来说：主表删除的时候，从表置空操作，主表更新的时候，从表级联操作。<br>语法：foreign key(外键) references 主表(关键字段) [主表删除时候的动作] [主表更新时候的动作]</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table stumarks(</span><br><span class="line">    -&gt; id int auto_increment primary key,</span><br><span class="line">    -&gt; stuno char(4),</span><br><span class="line">    -&gt; stuscore tinyint(3),</span><br><span class="line">    -&gt; foreign key(stuno) references stuinfo(stuno) on delete set null on update cascade</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--错误案例--</span><br><span class="line">create table stuinfo(</span><br><span class="line">stuno char(4) primary key,</span><br><span class="line">stuname varchar(20) not null</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">create table stumarks(</span><br><span class="line">id char(4) primary key,</span><br><span class="line">score int</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">alter table stumarks add constraint FK1 foreign key (id) references stuinfo(stuno) on delete set null on update cascade;</span><br><span class="line"></span><br><span class="line">--正确案例--</span><br><span class="line">create table stuinfo(</span><br><span class="line">stuno char(4) primary key,</span><br><span class="line">stuname varchar(20) not null</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">create table stumarks(</span><br><span class="line">id1 char(4) primary key,</span><br><span class="line">id char(4),</span><br><span class="line">score int</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">alter table stumarks add constraint FK1 foreign key (id) references stuinfo(stuno) on delete set null on update cascade;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用alter修改表 去创建外键时，是否不能够同时指定制空约束和级联约束？<br>主键不能set null ,所以外键表中新增主键，将外键作为非主键，此问题与alter的设置无关<br><code>foreign key (stuno) references stuinfo(stuno) on delete set null on update cascade;</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table stuinfo(</span><br><span class="line">    -&gt; stuno char(4) primary key,</span><br><span class="line">    -&gt; stuname varchar(20) not null</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line">//主键与非主键之间的关系，主键是不能set null的，所有使用非主键作为外键</span><br><span class="line">mysql&gt; create table stumarks(</span><br><span class="line">    -&gt; id int auto_increment primary key,</span><br><span class="line">    -&gt; stuno char(4),</span><br><span class="line">	    -&gt; score int,</span><br><span class="line">	    -&gt; foreign key (stuno) references stuinfo(stuno) on delete set null on update cascade</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into stuinfo values (&apos;1001&apos;,&apos;tom&apos;),(&apos;1002&apos;,&apos;berry&apos;);</span><br><span class="line">Query OK, 2 rows affected (0.00 sec)</span><br><span class="line">Records: 2  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into stumarks values (null,&apos;1001&apos;,88),(null,&apos;1002&apos;,99);</span><br><span class="line">Query OK, 2 rows affected (0.00 sec)</span><br><span class="line">Records: 2  Duplicates: 0  Warnings: 0</span><br><span class="line">mysql&gt; select * from stumarks;</span><br><span class="line">+----+-------+-------+</span><br><span class="line">| id | stuno | score |</span><br><span class="line">+----+-------+-------+</span><br><span class="line">|  1 | 1001  |    88 |</span><br><span class="line">|  2 | 1002  |    99 |</span><br><span class="line">+----+-------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from stuinfo;</span><br><span class="line">+-------+---------+</span><br><span class="line">| stuno | stuname |</span><br><span class="line">+-------+---------+</span><br><span class="line">| 1001  | tom     |</span><br><span class="line">| 1002  | berry   |</span><br><span class="line">+-------+---------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; delete from stuinfo where stuno=&apos;1001&apos;;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from stumarks;</span><br><span class="line">+----+-------+-------+</span><br><span class="line">| id | stuno | score |</span><br><span class="line">+----+-------+-------+</span><br><span class="line">|  1 | NULL  |    88 |</span><br><span class="line">|  2 | 1002  |    99 |</span><br><span class="line">+----+-------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; update stuinfo set stuno=&apos;1003&apos; where stuno=&apos;1002&apos;;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from stumarks;</span><br><span class="line">+----+-------+-------+</span><br><span class="line">| id | stuno | score |</span><br><span class="line">+----+-------+-------+</span><br><span class="line">|  1 | NULL  |    88 |</span><br><span class="line">|  2 | 1003  |    99 |</span><br><span class="line">+----+-------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h3 id="再来一戳，外键级联"><a href="#再来一戳，外键级联" class="headerlink" title="再来一戳，外键级联"></a>再来一戳，外键级联</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE stumarks DROP FOREIGN KEY `FK1`;</span><br><span class="line"></span><br><span class="line">DROP TABLE</span><br><span class="line">IF EXISTS stuinfo;</span><br><span class="line"></span><br><span class="line">DROP TABLE</span><br><span class="line">IF EXISTS stumarks;</span><br><span class="line"></span><br><span class="line">CREATE TABLE stuinfo(</span><br><span class="line">    stuno CHAR(4) PRIMARY KEY ,</span><br><span class="line">    stuname VARCHAR(10)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE stumarks(</span><br><span class="line">    id INT auto_increment PRIMARY KEY ,</span><br><span class="line">    stuno CHAR(4) UNIQUE KEY,</span><br><span class="line">    stuscore TINYINT(3) ,</span><br><span class="line">    CONSTRAINT `FK1` FOREIGN KEY(stuno) REFERENCES stuinfo(stuno) ON DELETE</span><br><span class="line">SET NULL ON UPDATE CASCADE</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>经验总结：设置级联外键由于 on delete set null 的原因不能设置外键为主键，解决外键数据完整的方法是给外键增加为一件 unique key;</p>
</blockquote>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 知识、数据库、数据表</title>
    <url>/2015/20150829-1.html</url>
    <content><![CDATA[<h3 id="SQL-DML-和-DDL"><a href="#SQL-DML-和-DDL" class="headerlink" title="SQL DML 和 DDL"></a>SQL DML 和 DDL</h3><p>可以把 SQL 分为两个部分：数据操作语言 (DML) 和 数据定义语言 (DDL)。<br>SQL (结构化查询语言)是用于执行查询的语法。但是 SQL 语言也包含用于更新、插入和删除记录的语法。<br>查询和更新指令构成了 SQL 的 DML 部分：<br>SELECT - 从数据库表中获取数据<br>UPDATE - 更新数据库表中的数据<br>DELETE - 从数据库表中删除数据<br>INSERT INTO - 向数据库表中插入数据<br>SQL 的数据定义语言 (DDL) 部分使我们有能力创建或删除表格。我们也可以定义索引（键），规定表之间的链接，以及施加表间的约束。<br>SQL 中最重要的 DDL 语句:<br>CREATE DATABASE - 创建新数据库<br>ALTER DATABASE - 修改数据库<br>CREATE TABLE - 创建新表<br>ALTER TABLE - 变更（改变）数据库表<br>DROP TABLE - 删除表<br>CREATE INDEX - 创建索引（搜索键）<br>DROP INDEX - 删除索引</p>
<h3 id="数据库发展史"><a href="#数据库发展史" class="headerlink" title="数据库发展史"></a>数据库发展史</h3><p>文件系统-》层次模型-》网状模型-》关系型数据库<br>优点：解决了导航的问题、数据完整性得到了解决</p>
<p>缺点：多表查询效率低<br>解决方法：使用NOSQL（非关系型数据库，Redis、mongodb等等），在数据库中按照键值对来存储。</p>
<h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><p>结构化查询语言，标准SQL，也叫SQL-92</p>
<p>access    微软    SQL<br>SQL Server    微软    T-SQL<br>Oracle    甲骨文    PL/SQL<br>MySQL    被甲骨文收购    MySQL</p>
<h3 id="windows-服务开启"><a href="#windows-服务开启" class="headerlink" title="windows 服务开启"></a>windows 服务开启</h3><p>win+R    services.msc 打开服务面板<br>net start    查看已经开启的服务</p>
<p><code>net start mysql</code>      启动服务<br><code>net stop mysql</code>     关闭服务</p>
<h3 id="MySQL客户端连接服务器"><a href="#MySQL客户端连接服务器" class="headerlink" title="MySQL客户端连接服务器"></a>MySQL客户端连接服务器</h3><p>安装文件目录下的：<code>MySQL 5.5 Command Line Client</code><br>navicat 客户端<br>PHPmyadmin 客户端<br>设置环境变量后：<code>mysql  -hlocalhost  -uroot -proot  -P3306</code>   (如果MySQL服务器在本地，IP地址可以省略；如果MySQL服务器用的是3306端口，-P也是可以省略的)</p>
<h3 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h3><p>exit;<br>quit;<br>\q;<br>MySQL中的命令后面要加分号，windows命令行的命令后面不用加分号</p>
<h3 id="数据库基本概念"><a href="#数据库基本概念" class="headerlink" title="数据库基本概念"></a>数据库基本概念</h3><p>数据库：数据库中存放的是表，一个数据库中可以存放多个表<br>表：用来存放数据<br>关系：两个表的公共字段<br>行：记录，也是实体<br>列：字段，也是属性<br>表结构    行    列<br>表数据    记录    字段<br>面向对象    实体    属性</p>
<blockquote>
<p>表的冗余只能减少，不能杜绝</p>
</blockquote>
<p>数据完整性：正确的数据类型，准确的数据范围</p>
<h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><h4 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h4><p><code>Mac xampp ：$ /Applications/XAMPP/xamppfiles/bin/mysql -hlocalhost -uroot -p -P3306</code><br>密码初始为空；</p>
<h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><p>语法：<code>create database [if not exists] 数据名</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create database if not exists uiste;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>问题一：</p>
<blockquote>
<p>如果创建的数据库已存在，就会报错<br>解决：创建数据库的时候判断一下数据库是否存在，如果不存在再创建</p>
</blockquote>
<p>问题二：</p>
<blockquote>
<p>如果数据库名是关键字和特殊字符要报错<br>解决：在特殊字符、关键字行加上反引号<br><code>create database `$@%`;</code></p>
</blockquote>
<p><strong>为了创建数据库时万无一失，我们可以在所有的数据库名上加上反引号</strong></p>
<h4 id="MySQL数据库的目录"><a href="#MySQL数据库的目录" class="headerlink" title="MySQL数据库的目录"></a>MySQL数据库的目录</h4><p>数据库文件保存的路径在安装MySQL的时候就配置好。<br>也可以在<code>my.ini</code>配置文件中更改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Path to the database root</span><br><span class="line">datadir = &quot;F:/wamp/mysql/Data/&quot;</span><br></pre></td></tr></table></figure>
<p>Mac xampp 数据库文件夹：<br><code>/Applications /XAMPP/xamppfiles/var/mysql</code></p>
<p>创建一个数据库，就对应一个文件夹，在文件夹中有一个db.opt文件。在此文件中设置数据库的字符集和校对集</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">default-character-set = utf8</span><br><span class="line">default-collation = utf_general_ci</span><br></pre></td></tr></table></figure>
<h4 id="显示所有数据库【show-databases】"><a href="#显示所有数据库【show-databases】" class="headerlink" title="显示所有数据库【show databases】"></a>显示所有数据库【show databases】</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| cdcol              |</span><br><span class="line">| dedecms            |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| phpmyadmin         |</span><br><span class="line">| test               |</span><br><span class="line">| uiste              |</span><br><span class="line">+--------------------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>information_schema：存储了MySQL服务器管理数据库的信息。比如：数据库名、表、字段名、数据类型及访问权限等等<br>performance_schema：MySQL5.5新增的表，用来保存数据库服务器性能的参数<br>mysql：MySQL系统数据库，保存的登录用户名，密码，以及每个用户的权限等等<br>test：给用户学习和测试的数据库。</p>
</blockquote>
<h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><p>语法：<code>drop database [if exists] `数据库名`</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop database if exists uiste;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| cdcol              |</span><br><span class="line">| dedecms            |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| phpmyadmin         |</span><br><span class="line">| test               |</span><br><span class="line">+--------------------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>问题：</p>
<blockquote>
<p>如果删除的数据库不存在，会报错<br>解决：删除之前判断一下，如果存在就删除</p>
</blockquote>
<h4 id="显示创建数据库的语句"><a href="#显示创建数据库的语句" class="headerlink" title="显示创建数据库的语句"></a>显示创建数据库的语句</h4><p>语法：<code>show create database 数据库名</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show create database uiste;</span><br><span class="line">+----------+------------------------------------------------------------------+</span><br><span class="line">| Database | Create Database                                                  |</span><br><span class="line">+----------+------------------------------------------------------------------+</span><br><span class="line">| uiste    | CREATE DATABASE `uiste` /*!40100 DEFAULT CHARACTER SET latin1 */ |</span><br><span class="line">+----------+------------------------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h4 id="修改数据库字符编码"><a href="#修改数据库字符编码" class="headerlink" title="修改数据库字符编码"></a>修改数据库字符编码</h4><p>语法：<code>alter database `数据库名` charset=字符编码</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter database uiste charset=utf8;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show create database uiste;</span><br><span class="line">+----------+----------------------------------------------------------------+</span><br><span class="line">| Database | Create Database                                                |</span><br><span class="line">+----------+----------------------------------------------------------------+</span><br><span class="line">| uiste    | CREATE DATABASE `uiste` /*!40100 DEFAULT CHARACTER SET utf8 */ |</span><br><span class="line">+----------+----------------------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h4 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h4><p>语法：<code>use `数据库名</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; use uiste;</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure>
<h3 id="表的操作"><a href="#表的操作" class="headerlink" title="表的操作"></a>表的操作</h3><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table [if not exists] `表名`(</span><br><span class="line">	`字段名` 数据类型 [null|not null] [default] [auto_increment] [primary key] [comment],</span><br><span class="line">	字段名 数据类型 …</span><br><span class="line">)[engine=存储引擎] [charset=字符编码]</span><br><span class="line"></span><br><span class="line">null|not null		是否为空</span><br><span class="line">default:			默认值</span><br><span class="line">auto_increment	自动增长</span><br><span class="line">primary key		主键</span><br><span class="line">comment:			备注</span><br><span class="line">engine				引擎</span><br></pre></td></tr></table></figure>
<blockquote>
<p>表名和字段名如果用了关键字，要用反引号引起来。</p>
</blockquote>
<p>创建简单的表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table student(</span><br><span class="line">    -&gt; id int not null auto_increment primary key comment &apos;学生编号&apos;,</span><br><span class="line">    -&gt; name varchar(10) not null comment &apos;学生姓名&apos;,</span><br><span class="line">    -&gt; sex char(4) default &apos;男&apos;);</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br></pre></td></tr></table></figure>
<p>创建复杂的表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table `goods`(</span><br><span class="line">    -&gt; `id` int auto_increment primary key comment &apos;商品编号&apos;,</span><br><span class="line">    -&gt; `name` varchar(20) not null comment &apos;商品名称&apos;,</span><br><span class="line">    -&gt; `add` varchar(100) not null default &apos;地址不详&apos; comment &apos;商品产地&apos;</span><br><span class="line">    -&gt; )engine=innodb charset=utf8 comment &apos;商品表&apos;;</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>create table 数据库名.表名，用于给指定的数据库创建表</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table uiste.teacher(</span><br><span class="line">    -&gt; id int auto_increment primary key,</span><br><span class="line">    -&gt; name varchar(16) not null);</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br></pre></td></tr></table></figure>
<h4 id="数据表文件"><a href="#数据表文件" class="headerlink" title="数据表文件"></a>数据表文件</h4><ul>
<li>一个数据库对应一个文件夹</li>
<li>一个表对应一个或多个文件夹<br>引擎是myisam，一个表对应三个文件(不支持外键约束)<blockquote>
<p>t1.frm  表结构<br>t1.MYD  表数据<br>t1.MYI  表索引<br>引擎是innodb,一个表对应一个表结构文件</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>所有的innodb引擎的数据统一的存放在data\ibdata1文件中。如果数据量很大，MySQL会自动的创建ibdata2，ibdata3，…，目的就是为了便于管理。</p>
</blockquote>
<p>constraint：约束</p>
<h4 id="显示所有表"><a href="#显示所有表" class="headerlink" title="显示所有表"></a>显示所有表</h4><p>语法：<code>show tables;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show tables;</span><br><span class="line">+-----------------+</span><br><span class="line">| Tables_in_uiste |</span><br><span class="line">+-----------------+</span><br><span class="line">| student         |</span><br><span class="line">| teacher         |</span><br><span class="line">+-----------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h4 id="显示创建表的语句"><a href="#显示创建表的语句" class="headerlink" title="显示创建表的语句"></a>显示创建表的语句</h4><p>语法：<code>show create table `表名`</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show create table student;</span><br><span class="line">+---------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Table   | Create Table                                                                                                                                                                                                                           |</span><br><span class="line">+---------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| student | CREATE TABLE `student` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;学生编号&apos;,</span><br><span class="line">  `name` varchar(10) NOT NULL COMMENT &apos;学生姓名&apos;,</span><br><span class="line">  `sex` char(4) DEFAULT &apos;男&apos;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8          |</span><br><span class="line">+---------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure>
<p><strong>将两个字段竖着排列</strong><br>语法：<code>show create table `表名`\G</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show create table student \G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: student</span><br><span class="line">Create Table: CREATE TABLE `student` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;学生编号&apos;,</span><br><span class="line">  `name` varchar(10) NOT NULL COMMENT &apos;学生姓名&apos;,</span><br><span class="line">  `sex` char(4) DEFAULT &apos;男&apos;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h4 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h4><p>语法：<code>desc[ribe] `表名`</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; desc student;</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type        | Null | Key | Default | Extra          |</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">| id    | int(11)     | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name  | varchar(10) | NO   |     | NULL    |                |</span><br><span class="line">| sex   | char(4)     | YES  |     | 男      |                |</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">3 rows in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; describe student;</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type        | Null | Key | Default | Extra          |</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">| id    | int(11)     | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name  | varchar(10) | NO   |     | NULL    |                |</span><br><span class="line">| sex   | char(4)     | YES  |     | 男      |                |</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">3 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>desc 是 describe 的简写</p>
</blockquote>
<h4 id="复制表"><a href="#复制表" class="headerlink" title="复制表"></a>复制表</h4><p>语法一：<code>create table 新表 select 字段 from 旧表</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table student2 select * from student;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>
<blockquote>
<p>特点：不能复制父表的键，能够复制父表的数据</p>
</blockquote>
<p>语法二：create table 新表 like 旧表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table student3 like student;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>特点：只能复制表结构，不能复制表数据</p>
</blockquote>
<h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><p>语法：<code>drop table [if exists] 表1，表2,…</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop table if exists student2;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果删除一个不存在的表就会报错，删除的时候可以判断一下，存在就删除</p>
</blockquote>
<p>可以一次删除多个表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop tables if exists student2,student3;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>
<h4 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h4><p>语法：<code>alter table 表名</code></p>
<h5 id="添加字段"><a href="#添加字段" class="headerlink" title="添加字段"></a>添加字段</h5><p>语法：<code>alter table 表名add [column] 字段名 数据类型 [位置]</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table student add age int(8) after name;</span><br><span class="line">Query OK, 0 rows affected (0.20 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>
<blockquote>
<p>默认字段放在表的最后<br>添加 <code>first</code> 字段放在表的第一位<br>添加 <code>after name</code> 放在 name 字段之后</p>
</blockquote>
<h5 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h5><p>语法：<code>alter table 表 drop [column] 字段名</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table student drop age;</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>
<h5 id="修改字段-改名"><a href="#修改字段-改名" class="headerlink" title="修改字段(改名)"></a>修改字段(改名)</h5><p>语法：<code>alter table 表 change [column] 原字段名 新字段名 数据类型 …</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table student change sex age int(8);</span><br><span class="line">Query OK, 0 rows affected (0.32 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>
<p>同时修改多个字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table student change age myage int(8) comment &apos;我的学生年龄&apos;,change name myname varchar(16) not null comment &apos;我的学生姓名&apos;;</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>
<h5 id="修改字段（不改名）"><a href="#修改字段（不改名）" class="headerlink" title="修改字段（不改名）"></a>修改字段（不改名）</h5><p>语法：<code>alter table 表 modify 字段名 字段属性…</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table student modify myage int(3) not null default 18 comment &apos;如果你没 有设置年龄，我就是永远的18岁&apos;;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>
<blockquote>
<p>只更改字段属性</p>
</blockquote>
<h5 id="修改引擎"><a href="#修改引擎" class="headerlink" title="修改引擎"></a>修改引擎</h5><p>语法：<code>alter table 表名 engine=引擎名</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table student engine=myisam;</span><br><span class="line">Query OK, 0 rows affected (0.18 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>
<h5 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h5><p>语法：<code>alter table 表名 rename to 新表名</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table student rename to student2;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>
<h5 id="将表移动到其他数据库"><a href="#将表移动到其他数据库" class="headerlink" title="将表移动到其他数据库"></a>将表移动到其他数据库</h5><p>语法：<code>alter table 表名 rename to 数据库名.数据表名</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table student2 rename to test.student3;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>
<h4 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h4><h5 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h5><p>语法：<code>insert into 表名 (字段名, 字段名,…) values (值1, 值1,…)</code></p>
<ul>
<li>插入一条数据</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into student (id,name,age) values (1,&apos;小兰&apos;,25);</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<ol>
<li>插入字段名的顺序和数据库字段名的顺序可以不一致</li>
<li>插入值的个数、顺序必须和插入字段名的个数、顺序要一致</li>
</ol>
</blockquote>
<ul>
<li>简写方式：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into student values (2,&apos;杜总&apos;,24);</span><br><span class="line">Query OK, 1 row affected (0.02 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<ol start="3">
<li>自动增长列，可以直接插入null。</li>
</ol>
</blockquote>
<ul>
<li>插入默认值和空值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into student values (null,&apos;张宝&apos;,null);</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>自动增长列，可以直接插入null<br>default关键字用来插入默认值，null用来插入空值</p>
</blockquote>
<ul>
<li>插入多条数据</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into student values (null,&apos;小张&apos;,18),(null,&apos;圆哥&apos;,18);</span><br><span class="line">Query OK, 2 rows affected (0.00 sec)</span><br><span class="line">Records: 2  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>
<ul>
<li>使用insert…set…插入数据</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into student set name=&apos;赵哥&apos;,age=54;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br></pre></td></tr></table></figure>
<h5 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h5><p>语法：<code>update 表名 set 字段=值 [where 条件] [order by 排序] [limit 限制]</code></p>
<ul>
<li>将id为三的年龄改为30</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; update student set age=30 where id=3;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br></pre></td></tr></table></figure>
<blockquote>
<p>需要更改多个内容的时候将需要变更的内容用逗号连接；</p>
</blockquote>
<ul>
<li>将id 从大到小数前3名的学生年龄改为16岁</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; update student set age=16 order by id desc limit 3;</span><br><span class="line">Query OK, 3 rows affected (0.01 sec)</span><br><span class="line">Rows matched: 3  Changed: 3  Warnings: 0</span><br></pre></td></tr></table></figure>
<h5 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h5><p>语法：<code>delete from 表名 [where 条件] [order by 排序] [limit 限制]</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; delete from student where id=9;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>删除id &lt;=7;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; delete from student where id&lt;=7;</span><br><span class="line">Query OK, 7 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>清空表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; delete from student;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>清空表：truncate table 表名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; truncate table student;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>delete from 表和truncate table 表区别？<br>delete from 表：遍历表记录，一条一条的删除<br>truncate table：将原表销毁，再创建一个同结构的新表。就清空表而言，这种方法效率高。</p>
</blockquote>
<h4 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h4><p>字符集：字符在保存和传输时对应的二进制编码集合</p>
<h5 id="数据存储时使用字符集"><a href="#数据存储时使用字符集" class="headerlink" title="数据存储时使用字符集"></a>数据存储时使用字符集</h5><p>MySQL可以在服务器上、数据库、表、字段上设置字符集</p>
<blockquote>
<p>脚下留心：一般在数据库和表上设置字符集，每个字段设置字符集太麻烦。</p>
</blockquote>
<h5 id="数据传输时使用字符集"><a href="#数据传输时使用字符集" class="headerlink" title="数据传输时使用字符集"></a>数据传输时使用字符集</h5><p>发现：在插入数据的时候，如果有中文会报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into student values (null,&apos;李白&apos;);</span><br><span class="line">ERROR 1366 (HY000):Incorrect string value :&apos;\xC0\xEE\xB0\xD7&apos; for column &apos;name&apos;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>分析：客户端编码和服务器连接层编码必须一致，如果不一致就会报错。</p>
</blockquote>
<p>查看客户端的字符编码</p>
<blockquote>
<p>客户端发送某种编码给服务器，由客户端决定<br>客户端编码不能改变<br>客户端右键——属性——选项——可以查看当前客户端的字符编码（GBK）</p>
</blockquote>
<p>查看服务器的字符编码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &apos;character_set_%&apos;;</span><br><span class="line">+--------------------------+------------------------------------------------+</span><br><span class="line">| Variable_name            | Value                                          |</span><br><span class="line">+--------------------------+------------------------------------------------+</span><br><span class="line">| character_set_client     | utf8                                           |</span><br><span class="line">| character_set_connection | utf8                                           |</span><br><span class="line">| character_set_database   | utf8                                           |</span><br><span class="line">| character_set_filesystem | binary                                         |</span><br><span class="line">| character_set_results    | utf8                                           |</span><br><span class="line">| character_set_server     | latin1                                         |</span><br><span class="line">| character_set_system     | utf8                                           |</span><br><span class="line">| character_sets_dir       | /Applications/XAMPP/xamppfiles/share/charsets/ |</span><br><span class="line">+--------------------------+------------------------------------------------+</span><br><span class="line">8 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>解决：只要将服务器的编码设置成gbk就可以解决</p>
</blockquote>
<p>测试：插入中文<br>查询：插入中文</p>
<p>原因：结果返回的是utf8，客户端用gbk来解析，所以乱码<br>解决：服务器按gbk返回即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt;set character_set_results=gbk;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>查询：结果</p>
<blockquote>
<p>总结：客户端编码、<code>character_set_client</code>、<code>character_set_results</code>三个编码的值一致即可操作中文。<br>多学一招：我们只要设置<code>“set names 字符编码”</code>，就可以更改<code>character_set_client</code>、<code>character_set_results</code>的值。</p>
</blockquote>
<h5 id="查看所有字符集"><a href="#查看所有字符集" class="headerlink" title="查看所有字符集"></a>查看所有字符集</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">mysql&gt; show character set;</span><br><span class="line">+----------+-----------------------------+---------------------+--------+</span><br><span class="line">| Charset  | Description                 | Default collation   | Maxlen |</span><br><span class="line">+----------+-----------------------------+---------------------+--------+</span><br><span class="line">| big5     | Big5 Traditional Chinese    | big5_chinese_ci     |      2 |</span><br><span class="line">| dec8     | DEC West European           | dec8_swedish_ci     |      1 |</span><br><span class="line">| cp850    | DOS West European           | cp850_general_ci    |      1 |</span><br><span class="line">| hp8      | HP West European            | hp8_english_ci      |      1 |</span><br><span class="line">| koi8r    | KOI8-R Relcom Russian       | koi8r_general_ci    |      1 |</span><br><span class="line">| latin1   | cp1252 West European        | latin1_swedish_ci   |      1 |</span><br><span class="line">| latin2   | ISO 8859-2 Central European | latin2_general_ci   |      1 |</span><br><span class="line">| swe7     | 7bit Swedish                | swe7_swedish_ci     |      1 |</span><br><span class="line">| ascii    | US ASCII                    | ascii_general_ci    |      1 |</span><br><span class="line">| ujis     | EUC-JP Japanese             | ujis_japanese_ci    |      3 |</span><br><span class="line">| sjis     | Shift-JIS Japanese          | sjis_japanese_ci    |      2 |</span><br><span class="line">| hebrew   | ISO 8859-8 Hebrew           | hebrew_general_ci   |      1 |</span><br><span class="line">| tis620   | TIS620 Thai                 | tis620_thai_ci      |      1 |</span><br><span class="line">| euckr    | EUC-KR Korean               | euckr_korean_ci     |      2 |</span><br><span class="line">| koi8u    | KOI8-U Ukrainian            | koi8u_general_ci    |      1 |</span><br><span class="line">| gb2312   | GB2312 Simplified Chinese   | gb2312_chinese_ci   |      2 |</span><br><span class="line">| greek    | ISO 8859-7 Greek            | greek_general_ci    |      1 |</span><br><span class="line">| cp1250   | Windows Central European    | cp1250_general_ci   |      1 |</span><br><span class="line">| gbk      | GBK Simplified Chinese      | gbk_chinese_ci      |      2 |</span><br><span class="line">| latin5   | ISO 8859-9 Turkish          | latin5_turkish_ci   |      1 |</span><br><span class="line">| armscii8 | ARMSCII-8 Armenian          | armscii8_general_ci |      1 |</span><br><span class="line">| utf8     | UTF-8 Unicode               | utf8_general_ci     |      3 |</span><br><span class="line">| ucs2     | UCS-2 Unicode               | ucs2_general_ci     |      2 |</span><br><span class="line">| cp866    | DOS Russian                 | cp866_general_ci    |      1 |</span><br><span class="line">| keybcs2  | DOS Kamenicky Czech-Slovak  | keybcs2_general_ci  |      1 |</span><br><span class="line">| macce    | Mac Central European        | macce_general_ci    |      1 |</span><br><span class="line">| macroman | Mac West European           | macroman_general_ci |      1 |</span><br><span class="line">| cp852    | DOS Central European        | cp852_general_ci    |      1 |</span><br><span class="line">| latin7   | ISO 8859-13 Baltic          | latin7_general_ci   |      1 |</span><br><span class="line">| utf8mb4  | UTF-8 Unicode               | utf8mb4_general_ci  |      4 |</span><br><span class="line">| cp1251   | Windows Cyrillic            | cp1251_general_ci   |      1 |</span><br><span class="line">| utf16    | UTF-16 Unicode              | utf16_general_ci    |      4 |</span><br><span class="line">| utf16le  | UTF-16LE Unicode            | utf16le_general_ci  |      4 |</span><br><span class="line">| cp1256   | Windows Arabic              | cp1256_general_ci   |      1 |</span><br><span class="line">| cp1257   | Windows Baltic              | cp1257_general_ci   |      1 |</span><br><span class="line">| utf32    | UTF-32 Unicode              | utf32_general_ci    |      4 |</span><br><span class="line">| binary   | Binary pseudo charset       | binary              |      1 |</span><br><span class="line">| geostd8  | GEOSTD8 Georgian            | geostd8_general_ci  |      1 |</span><br><span class="line">| cp932    | SJIS for Windows Japanese   | cp932_japanese_ci   |      2 |</span><br><span class="line">| eucjpms  | UJIS for Windows Japanese   | eucjpms_japanese_ci |      3 |</span><br><span class="line">+----------+-----------------------------+---------------------+--------+</span><br><span class="line">40 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>
<h4 id="校对集"><a href="#校对集" class="headerlink" title="校对集"></a>校对集</h4><p>在某种特定的字符集下，字符和字符的大小关系。比如a和B的大小关系：如果不区分大小写a&lt;B；如果区分大小写a&gt;B。<br>脚下留心：不同的校对集他们的比较结果是不一样的<br>语法：<code>collate=校对集</code><br>创建两个表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table stu1(</span><br><span class="line">name varchar(20)</span><br><span class="line">)charset=utf8 collate=utf8_general_ci;</span><br><span class="line"></span><br><span class="line">create table stu2(</span><br><span class="line">name varchar(20)</span><br><span class="line">)charset=utf8 collate=utf8_bin;</span><br><span class="line">–插入测试数据</span><br><span class="line">insert into stu1 values (&apos;a&apos;),(&apos;B&apos;);</span><br><span class="line">insert into stu2 values (&apos;a&apos;),(&apos;B&apos;);</span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from stu1 order by name;</span><br><span class="line">+------+</span><br><span class="line">| name |</span><br><span class="line">+------+</span><br><span class="line">| a    |</span><br><span class="line">| B    |</span><br><span class="line">+------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from stu2 order by name;</span><br><span class="line">+------+</span><br><span class="line">| name |</span><br><span class="line">+------+</span><br><span class="line">| B    |</span><br><span class="line">| a    |</span><br><span class="line">+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>校对集的规则：<br>1、_bin:按二进制编码进行比较<br>2、_ci:不区分大小写进行比较</p>
<p><strong>查看所有的校对集</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show collation;</span><br><span class="line">+--------------------------+----------+-----+---------+----------+---------+</span><br><span class="line">| Collation                | Charset  | Id  | Default | Compiled | Sortlen |</span><br><span class="line">+--------------------------+----------+-----+---------+----------+---------+</span><br><span class="line">| big5_chinese_ci          | big5     |   1 | Yes     | Yes      |       1 |</span><br><span class="line">| big5_bin                 | big5     |  84 |         | Yes      |       1 |</span><br><span class="line">| dec8_swedish_ci          | dec8     |   3 | Yes     | Yes      |       1 |</span><br><span class="line">| dec8_bin                 | dec8     |  69 |         | Yes      |       1 |</span><br><span class="line"></span><br><span class="line">此处省略200多行...</span><br></pre></td></tr></table></figure>
<p><a href="http://oamgu5mjf.bkt.clouddn.com/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C.docx" target="_blank" rel="noopener">常用操作命令文件下载</a></p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>php数组比较-usort</title>
    <url>/2015/20150828-1.html</url>
    <content><![CDATA[<h3 id="usort-、getdate"><a href="#usort-、getdate" class="headerlink" title="usort()、getdate()"></a>usort()、getdate()</h3><p>自定义排序，书写一个函数，对数组里面的元素大小两两进行比较，如果return -1，则将大的放在前面，如果return 1，则将大的放在后面。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$arr5 = <span class="keyword">array</span>(</span><br><span class="line">		<span class="keyword">array</span>(<span class="string">'name'</span>=&gt;<span class="string">'jack'</span>,<span class="string">'age'</span>=&gt;<span class="number">24</span>,<span class="string">'sex'</span>=&gt;<span class="string">'man'</span>),</span><br><span class="line">		<span class="keyword">array</span>(<span class="string">'name'</span>=&gt;<span class="string">'rose'</span>,<span class="string">'age'</span>=&gt;<span class="number">38</span>,<span class="string">'sex'</span>=&gt;<span class="string">'wom'</span>),</span><br><span class="line">		<span class="keyword">array</span>(<span class="string">'name'</span>=&gt;<span class="string">'lucy'</span>,<span class="string">'age'</span>=&gt;<span class="number">16</span>,<span class="string">'sex'</span>=&gt;<span class="string">'girl'</span>),</span><br><span class="line">		<span class="keyword">array</span>(<span class="string">'name'</span>=&gt;<span class="string">'lili'</span>,<span class="string">'age'</span>=&gt;<span class="number">19</span>,<span class="string">'sex'</span>=&gt;<span class="string">'girl'</span>),</span><br><span class="line">		<span class="keyword">array</span>(<span class="string">'name'</span>=&gt;<span class="string">'Tomi'</span>,<span class="string">'age'</span>=&gt;<span class="number">27</span>,<span class="string">'sex'</span>=&gt;<span class="string">'boy'</span>)</span><br><span class="line">	);</span><br><span class="line"></span><br><span class="line">usort($arr5,<span class="function"><span class="keyword">function</span><span class="params">($num1,$num2)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> ($num1[<span class="string">'age'</span>]==$num2[<span class="string">'age'</span>]) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ($num1[<span class="string">'age'</span>]&gt;$num2[<span class="string">'age'</span>] ? <span class="number">1</span> : <span class="number">-1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;pre&gt;"</span>;</span><br><span class="line">var_dump($arr5);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;/pre&gt;"</span>;</span><br><span class="line"></span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>将二维数组按年龄进行排序</p>
</blockquote>
<p>计算上月最后一天星期几</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//方法一：玩转一周7天</span><br><span class="line">$t = time();</span><br><span class="line">$today = date(&apos;d&apos;,$t);//28</span><br><span class="line">$weekday = localtime(time(),true);//时间数组</span><br><span class="line">$week = $weekday[&apos;tm_wday&apos;];//今天星期几</span><br><span class="line">$res = ($today + $week)%7; //本月已过的天数+星期取7的余数就是上月最后一天</span><br><span class="line">echo &apos;上月最后一天星期：&apos;.$res;</span><br><span class="line"></span><br><span class="line">echo &quot;&lt;hr&gt;&quot;;</span><br><span class="line"></span><br><span class="line">//方法二：玩转时间戳</span><br><span class="line">$today = getdate(time())[&apos;mday&apos;];</span><br><span class="line">$today2 = $today*24*60*60*1000;</span><br><span class="line">$today1 = time();</span><br><span class="line">$diff = $today1 - $today2;</span><br><span class="line">$res2 = getdate($diff);</span><br><span class="line">echo &apos;上月最后一天星期：&apos;.$res2[&apos;wday&apos;];</span><br></pre></td></tr></table></figure>
<p>补充小知识：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getdate()[0] == time();</span><br><span class="line">getdate(time())[&apos;mday&apos;] == date(&apos;d&apos;,time());</span><br></pre></td></tr></table></figure>
<p>获取当前页面编码：<code>mb_internal_encoding()</code><br>修改当前页面编码：<code>mb_interval_encoding(utf-8)</code></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP思想养成</tag>
        <tag>数组比较</tag>
      </tags>
  </entry>
  <entry>
    <title>php数组、字符串</title>
    <url>/2015/20150827-1.html</url>
    <content><![CDATA[<p><strong>本章是需要熟记的函数，使用的时候有问题查手册</strong></p>
<h3 id="操作数组的函数"><a href="#操作数组的函数" class="headerlink" title="操作数组的函数"></a>操作数组的函数</h3><h4 id="is-array"><a href="#is-array" class="headerlink" title="is_array()"></a>is_array()</h4><p>判断一个变量是否是一个数组，返回是一个布尔型，如果是数组返回真，如果不是数组，返回假</p>
<h4 id="array-search"><a href="#array-search" class="headerlink" title="array_search()"></a>array_search()</h4><p>查找一个值是否正在一个数组中，返回的是以键名<br>语法：<code>$arr = array_search(&#39;3&#39;,$arr);</code></p>
<blockquote>
<p>array_search()查找值区分大小写，不区分数据类型，如果出现同值问题，取前面第一个下标。<br>第三个参数如果是true则区分数据类型<code>$arr = array_search(&#39;3&#39;,$arr,true);</code></p>
</blockquote>
<h3 id="操作键值的函数"><a href="#操作键值的函数" class="headerlink" title="操作键值的函数"></a>操作键值的函数</h3><h4 id="array-keys"><a href="#array-keys" class="headerlink" title="array_keys()"></a>array_keys()</h4><p>获取数组中的所有下标，以一个索引数组的模式返回<br>语法：<code>$arr2 = array_keys($arr);</code></p>
<blockquote>
<p>获取的数组，下标从0开始依次递增</p>
</blockquote>
<h4 id="array-values"><a href="#array-values" class="headerlink" title="array_values()"></a>array_values()</h4><p>获取数组中的所有值，以一个索引数组的模式返回<br>语法：<code>$arr3 = array_values($arr);</code></p>
<blockquote>
<p>如果值是一个数组，也同样将这个数组当成以值赋值给数组</p>
</blockquote>
<h4 id="array-combine"><a href="#array-combine" class="headerlink" title="array_combine()"></a>array_combine()</h4><p>将两个数组的值合并成一个数组，第一个数组是下标，第二个数组是值<br>语法：<code>$arr4 = array_combine($arr1,$arr2);</code></p>
<blockquote>
<p>返回的数据类型是一个数组。两个数组参数的元素个数必须要一一对应</p>
</blockquote>
<h4 id="in-array"><a href="#in-array" class="headerlink" title="in_array()"></a>in_array()</h4><p>查找数组中的某一个值是否存在<br>语法：<code>var_dump(in_array(&#39;a&#39;,$arr));</code></p>
<blockquote>
<p>in_array查找是区分大小写的，并且默认不区分数据类型，如果想让他区分数据类型，将第三个参数修改为true即可；<br>第一个参数是需要查找的值，第二个参数是查找的数组，返回的结果是一个布尔值<br>而array_search返回的是一个键名</p>
</blockquote>
<h4 id="array-key-exists"><a href="#array-key-exists" class="headerlink" title="array_key_exists()"></a>array_key_exists()</h4><p>查找一个键是否在某个数组中<br>语法：<code>var_dump(array_key_exists(&#39;1&#39;,$arr));</code></p>
<blockquote>
<p>第一个参数是需要查找的下标，第二个参数是需要寻找的数组，返回的结果是一个boolean型<br>本身就不区分数据类型，没有第三个参数；</p>
</blockquote>
<h4 id="isset"><a href="#isset" class="headerlink" title="isset()"></a>isset()</h4><p>判断一个变量是否已经被定义，如果没有被定义或者值为null返回的结果是false<br>语法：<code>var_dump(isset($arr[&#39;b&#39;]));</code></p>
<blockquote>
<p>isset()和array_key_exists的区别，如果下标对应的值为空。isset返回的结果是false，array_key_exists返回的结果是true</p>
</blockquote>
<h3 id="合并和拆分字符、数组的函数"><a href="#合并和拆分字符、数组的函数" class="headerlink" title="合并和拆分字符、数组的函数"></a>合并和拆分字符、数组的函数</h3><h4 id="implode"><a href="#implode" class="headerlink" title="implode()"></a>implode()</h4><p>将一个数组里面的元素合并成一个字符串<br>语法：<code>$str = implode(&#39;&#39;,$arr);</code></p>
<blockquote>
<p>两个参数，第一个是元素值和值之间连接的符号（第一个可以不写），第二个参数是你需要遍历的数组。join()就是implode别名函数</p>
</blockquote>
<h4 id="explode"><a href="#explode" class="headerlink" title="explode()"></a>explode()</h4><p>将一个字符串拆分成一个数组<br>语法：<code>$arr = explode(&#39;a&#39;,$str);</code></p>
<blockquote>
<p>两个参数，第一个是拆分字符串的标志，第二个参数是需要拆分的字符串</p>
</blockquote>
<p>语法：<code>$arr = explode(&#39;a&#39;,$str,3);</code></p>
<blockquote>
<p>如果第三个元素是正整数，分割成三个部分，最后一个元素会将包含剩下的所有的包含<br>如果第三个原始是负整数，则会将最后的3个元素抛弃，</p>
</blockquote>
<h3 id="数组的交并差"><a href="#数组的交并差" class="headerlink" title="数组的交并差"></a>数组的交并差</h3><h4 id="array-merge"><a href="#array-merge" class="headerlink" title="array_merge()"></a>array_merge()</h4><p>合并两个数组：array_merge(数组1,数组2)<br>语法：<code>$arr = array_merge(range(0,9),range(&#39;a&#39;,&#39;z&#39;));</code></p>
<blockquote>
<p>array_merge如果合并两个数字下标的数组，会将数字重新从0进行组合。<br>array_merge如果合并两个字符串下标的数组，后面的值会将前面的值覆盖。<br>array_merge合并两个数组，先从第一个数组开始合并，然后在合并第二个数组。</p>
</blockquote>
<h4 id="array-diff"><a href="#array-diff" class="headerlink" title="array_diff()"></a>array_diff()</h4><p>计算数组差值<br>语法：<code>array array_diff ( array $array1 , array $array2 [, array $... ] )</code></p>
<blockquote>
<p>对比返回在 array1 中但是不在 array2 及任何其它参数数组中的值。<br>返回一个数组，该数组包括了所有在 array1 中但是不在任何其它参数数组中的值。注意键名保留不变</p>
</blockquote>
<h4 id="array-intersect"><a href="#array-intersect" class="headerlink" title="array_intersect()"></a>array_intersect()</h4><p>计算数组的交集<br>语法：<code>array array_intersect ( array $array1 , array $array2 [, array $ ... ] )</code></p>
<blockquote>
<p>array_intersect() 返回一个数组，该数组包含了所有在 array1 中也同时出现在所有其它参数数组中的值。注意键名保留不变。</p>
</blockquote>
<h3 id="函数遍历数组"><a href="#函数遍历数组" class="headerlink" title="函数遍历数组"></a>函数遍历数组</h3><p>回调函数是由计算机自己去调用php中的函数</p>
<h4 id="array-map"><a href="#array-map" class="headerlink" title="array_map()"></a>array_map()</h4><p>将回调函数作用到给定数组的单元上<br>语法：<code>array array_map ( callable $callback , array $arr1 [, array $... ] )</code><br>语法： array_map(‘函数名’,数组名)。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//使用系统函数，调用数组</span><br><span class="line">$arr=array(10,-12,46,-9,-45);</span><br><span class="line">$arr2 = array_map(&apos;abs&apos;,$arr);</span><br><span class="line">var_dump($arr2);</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//使用自身定义的函数，调用数组</span><br><span class="line">$arr=array(10,-12,46,-9,-45);</span><br><span class="line">fucntion fn($num)&#123;</span><br><span class="line">	$num+=10;</span><br><span class="line">	return $num;</span><br><span class="line">&#125;</span><br><span class="line">$arr2 = array_map(&apos;fn&apos;,$arr);</span><br><span class="line">var_dump($arr2);</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//使用匿名函数，调用数组</span><br><span class="line">$arr=array(10,-12,46,-9,-45);</span><br><span class="line">$arr2 = array_map(function($name)&#123;return &apos;hello&apos;.$name;&#125;,$arr);</span><br><span class="line">var_dump($arr2);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果将所有数字转换为正数；</p>
</blockquote>
<blockquote>
<ol>
<li><code>array_map()</code>返回一个数组，该数组包含了 arr1 中的所有单元经过 callback 作用过之后的单元。callback 接受的参数数目应该和传递给 array_map() 函数的数组数目一致。</li>
<li>array_map去回调我们自己定义好的函数</li>
<li>除了第一个参数直接写函数名的方法以外，我们也可以直接写一个匿名函数，达到回调函数的功能</li>
<li>如果第一个参数的值为null，则会把后面的数组的每一个值取出来进行拼接，合并成一个新的数组</li>
</ol>
</blockquote>
<h4 id="array-walk"><a href="#array-walk" class="headerlink" title="array_walk()"></a>array_walk()</h4><p>功能类似于遍历数组，可以同时获取数组里面的值和下标</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$arr = array(&apos;name&apos;=&gt;&apos;张无忌&apos;,&apos;age&apos;=&gt;528,&apos;sex&apos;=&apos;男&apos;);</span><br><span class="line">function fn($value,$key)&#123;</span><br><span class="line">	echo $key.&apos;-&apos;.$value.&apos;&lt;br&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">$arr2 = array_walk($arr,&apos;fn&apos;);</span><br></pre></td></tr></table></figure>
<p>可以分别获取下标和值，进行计算。如果函数只写一个参数，则获取的是数组里面的值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$arr2 = array_walk($arr,function($value,$key)&#123;</span><br><span class="line">	echo $key.&apos;-&gt;&apos;.$value,&apos;&lt;br&gt;&apos;;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>array_walk同样支持匿名函数的用法</p>
</blockquote>
<ul>
<li><p>接触最多的回调函数还是<code>array_map()，array_walk()</code>用的次数相对于而言，比较少。</p>
</li>
<li><p>array_walk第一个参数写的数组名，第二个参数写的才是调用的数组<br>array_walk返回的结果只会是一个布尔型的结果，如果array_walk执行成功返回的记过就是true，如果array_walk执行失败，返回的救过就是false，他不会生成一个新的数组；</p>
</li>
</ul>
<h3 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h3><p>栈的特点就是先进后出，后进先出。<br>队列的特点就是先进先出，后进后出。</p>
<h4 id="array-push"><a href="#array-push" class="headerlink" title="array_push()"></a>array_push()</h4><p>第一个参数是需要放置的数组，后面的参数是需要放置的元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$arr = array();</span><br><span class="line">array_push($arr,&apos;a&apos;);</span><br><span class="line">array_push($arr,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;);</span><br><span class="line">print_r($arr);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>一次性可以放置多个元素</p>
</blockquote>
<h4 id="array-pop"><a href="#array-pop" class="headerlink" title="array_pop()"></a>array_pop()</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$arr = array();</span><br><span class="line">array_push($arr,&apos;a&apos;);</span><br><span class="line">array_push($arr,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;);</span><br><span class="line">array_pop($arr);</span><br><span class="line">array_pop($arr);</span><br><span class="line">print_r($arr);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>出栈一次只能出一个元素。d和c后进的元素，先被拿出来了</p>
</blockquote>
<p>返回结果：mexd,溢出的元素</p>
<h4 id="array-shift"><a href="#array-shift" class="headerlink" title="array_shift()"></a>array_shift()</h4><p>出队列</p>
<blockquote>
<p>思考：unset和arr_shift有什么区别？<br>答案：使用array_shift去移除一个元素，那个其他的元素位置会往前移一位，保持数据完整性；但是unset删除一个元素，下标也会被删除</p>
</blockquote>
<h4 id="array-unshift"><a href="#array-unshift" class="headerlink" title="array_unshift()"></a>array_unshift()</h4><p>就是在数组的第一个位置插入一个元素。</p>
<blockquote>
<p>往数组里面第一个元素的位置放置一个元素。</p>
</blockquote>
<blockquote>
<p>栈和队列的优点：栈和队列都是有效保证数据的完整性；</p>
</blockquote>
<h3 id="数组的排序"><a href="#数组的排序" class="headerlink" title="数组的排序"></a>数组的排序</h3><h4 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h4><p>按照数值值得大小进行排序。从小到大的顺序</p>
<blockquote>
<p>将原有的下标丢弃，从0开始依次递增</p>
</blockquote>
<h4 id="rsort"><a href="#rsort" class="headerlink" title="rsort()"></a>rsort()</h4><p>按照数组的数值进行排序，从大到小的顺序。</p>
<blockquote>
<p>也是将原有的下标丢弃，从0开始依次递增</p>
</blockquote>
<h4 id="asort"><a href="#asort" class="headerlink" title="asort()"></a>asort()</h4><p>按照数组的数值进行排序，从小到大排序，但是会保留下标</p>
<h4 id="arsort"><a href="#arsort" class="headerlink" title="arsort()"></a>arsort()</h4><p>按照数组的数值进行排序，从大到小排序，但是会保留下标</p>
<h4 id="ksort"><a href="#ksort" class="headerlink" title="ksort()"></a>ksort()</h4><p>按照数组的下标顺序进行排序。从小到大进行排序</p>
<h4 id="krsort"><a href="#krsort" class="headerlink" title="krsort()"></a>krsort()</h4><p>按照数组的下标顺序进行排序，从大到小进行排序</p>
<h4 id="natsort"><a href="#natsort" class="headerlink" title="natsort()"></a>natsort()</h4><p>自然排序</p>
<blockquote>
<p>将字符串整体进行排序，而sort会挨个字符进行比较，然后进行排序</p>
</blockquote>
<h4 id="usort"><a href="#usort" class="headerlink" title="usort()"></a>usort()</h4><p>自定义排序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$arr = array(</span><br><span class="line">	array(&apos;name&apos;=&gt;&apos;jack&apos;,&apos;math&apos;=&gt;78,&apos;age&apos;=&gt;56),</span><br><span class="line">	array(&apos;name&apos;=&gt;&apos;rose&apos;,&apos;math&apos;=&gt;98,&apos;age&apos;=&gt;14),</span><br><span class="line">	array(&apos;name&apos;=&gt;&apos;jame&apos;,&apos;math&apos;=&gt;56,&apos;age&apos;=&gt;67),</span><br><span class="line">	array(&apos;name&apos;=&gt;&apos;uiste&apos;,&apos;math&apos;=&gt;45,&apos;age&apos;=&gt;24)</span><br><span class="line">	);</span><br><span class="line">usort($arr,function($num1,$num2)&#123;</span><br><span class="line">	if ($num1[&apos;age&apos;]&gt;$num2[&apos;age&apos;]) &#123;</span><br><span class="line">		return 1;</span><br><span class="line">	&#125;elseif ($num1[&apos;age&apos;]&lt;$num2[&apos;age&apos;]) &#123;</span><br><span class="line">		return -1;</span><br><span class="line">	&#125;else&#123;</span><br><span class="line">		return 0;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">echo &quot;&lt;pre&gt;&quot;;</span><br><span class="line">print_r($arr);</span><br><span class="line">echo &quot;&lt;/pre&gt;&quot;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在第一个参数小于，等于或大于第二个参数时，该比较函数必须相应地返回一个小于，等于或大于0的整数。</p>
</blockquote>
<p>如果return -1则值放在前面<br>如果 return 1 则值放在后面<br>如果 return 0 则值的位置不发生变化</p>
<h3 id="关于字符串的函数"><a href="#关于字符串的函数" class="headerlink" title="关于字符串的函数"></a>关于字符串的函数</h3><h4 id><a href="#" class="headerlink" title="[]"></a>[]</h4><p>字符串可以理解成字符的合计。</p>
<blockquote>
<p>所以，[]就是获取字符串中的某一个字符</p>
</blockquote>
<h4 id="strlen"><a href="#strlen" class="headerlink" title="strlen()"></a>strlen()</h4><p>获取字符串的长度</p>
<blockquote>
<p>获取长度的单位是字节,中文下的感叹号也被分解为三个字节；空格也在空间</p>
</blockquote>
<h4 id="trim"><a href="#trim" class="headerlink" title="trim()"></a>trim()</h4><p>去除两边的空格</p>
<h4 id="rtrim"><a href="#rtrim" class="headerlink" title="rtrim()"></a>rtrim()</h4><p>除去右边的空格</p>
<h4 id="ltrim"><a href="#ltrim" class="headerlink" title="ltrim()"></a>ltrim()</h4><p>去除左边的空格</p>
<h4 id="strpos"><a href="#strpos" class="headerlink" title="strpos()"></a>strpos()</h4><p>获取字符串某个字符的位置<br>语法：<code>strpos($str,&#39;b&#39;);</code></p>
<blockquote>
<p>获取某个字符首次出现的位置。如果后面加上第三个参数，代表字符串从某个位置开始往后去寻找。如果没写第三个参数，则第三个参数默认为0</p>
</blockquote>
<p>语法：<code>strpos($str,&#39;b&#39;,3);</code></p>
<blockquote>
<p>参数为3，则是从字符串第4个位置开始去寻找</p>
</blockquote>
<h4 id="strrpos"><a href="#strrpos" class="headerlink" title="strrpos()"></a>strrpos()</h4><p>获取某个字符出现的最后一个位置<br>语法：<code>var_dump(strrpo($str,&#39;b&#39;,2));</code></p>
<blockquote>
<p>从右往左查找，第三个参数代表最终查找到某个字符结束。找到返回下标，找不到返回false;</p>
</blockquote>
<h4 id="str-repeat"><a href="#str-repeat" class="headerlink" title="str_repeat()"></a>str_repeat()</h4><p>将某个字符串重复多少次</p>
<blockquote>
<p>第一个参数是需要重复的字符串，第二个参数重复的次数；</p>
</blockquote>
<h4 id="chr"><a href="#chr" class="headerlink" title="chr()"></a>chr()</h4><p>将一个数字转换成ASCII码</p>
<h4 id="ord"><a href="#ord" class="headerlink" title="ord()"></a>ord()</h4><p>将一个ASCII转换成对应的数字</p>
<h4 id="substr"><a href="#substr" class="headerlink" title="substr()"></a>substr()</h4><p>截取某个字符串<br>语法：<code>substr($str,3);</code></p>
<blockquote>
<p>从下标为3的字符开始，一直截取到结束</p>
</blockquote>
<p>语法：<code>substr($str,3,4);</code></p>
<blockquote>
<p>从下标为3的字符开始，截取4个字符</p>
</blockquote>
<p>语法：<code>substr($str,3,-3);</code></p>
<blockquote>
<p>从下标为3的字符开始截取，舍去最后三个字符</p>
</blockquote>
<p>语法：<code>substr($str,-4,2);</code></p>
<blockquote>
<p>从右往左数4个字符开始截取，截取2个</p>
</blockquote>
<p>语法：<code>substr($str,-5,-2);</code></p>
<blockquote>
<p>从右往左数第五个字符开始截取，截取到倒数第二位终止</p>
</blockquote>
<h4 id="strchr"><a href="#strchr" class="headerlink" title="strchr()"></a>strchr()</h4><p>从某个字符开始截取<br>语法：<code>strchr($str,&#39;c&#39;);</code></p>
<blockquote>
<p>从左往右第一个c开始截取到最后（区分大小写）</p>
</blockquote>
<blockquote>
<p>strstr()的功能和strchr()的功能一模一样，只不过名称不同</p>
</blockquote>
<h4 id="stristr"><a href="#stristr" class="headerlink" title="stristr()"></a>stristr()</h4><p>也是从某个字符开始截取，但是不区分大小写</p>
<h4 id="strrchr"><a href="#strrchr" class="headerlink" title="strrchr()"></a>strrchr()</h4><p>从某个字符最后出现的位置开始往后截取</p>
<blockquote>
<p>可以非常方便的获取文件的后缀名</p>
</blockquote>
<h4 id="str-replace"><a href="#str-replace" class="headerlink" title="str_replace()"></a>str_replace()</h4><p>语法：<code>str_replace(替换前的字符串，替换后的字符串，需要替换的字符串)</code></p>
<h4 id="str-split"><a href="#str-split" class="headerlink" title="str_split()"></a>str_split()</h4><p>分割字符串，生成一个数组</p>
<blockquote>
<p>第一个参数是一个字符串，第二个参数代表以几个字节进行拆分<br>explode是以字符进行拆分的</p>
</blockquote>
<h4 id="str-pad"><a href="#str-pad" class="headerlink" title="str_pad()"></a>str_pad()</h4><p>填充字符串</p>
<blockquote>
<p>四个参数组成，第一个是填充的字符串，第二个是长度，第三个是填充物，第四个是左，右，两边填充</p>
</blockquote>
<h4 id="strtolower"><a href="#strtolower" class="headerlink" title="strtolower()"></a>strtolower()</h4><p>将一个字符串转换成全小写</p>
<h4 id="strtoupper"><a href="#strtoupper" class="headerlink" title="strtoupper()"></a>strtoupper()</h4><p>将一个字符串转换成全大写</p>
<h4 id="nl2br"><a href="#nl2br" class="headerlink" title="nl2br()"></a>nl2br()</h4><p>将\n转换成<br></p>
<h4 id="htmlspecialchars"><a href="#htmlspecialchars" class="headerlink" title="htmlspecialchars():"></a>htmlspecialchars():</h4><p>将标签当成普通文本输出</p>
<h4 id="urlencode"><a href="#urlencode" class="headerlink" title="urlencode()"></a>urlencode()</h4><p>可以将字符串进行加密</p>
<h4 id="urldecode"><a href="#urldecode" class="headerlink" title="urldecode()"></a>urldecode()</h4><p>可以将加密好的字符串进行解码</p>
<h3 id="多字符处理函数"><a href="#多字符处理函数" class="headerlink" title="多字符处理函数"></a>多字符处理函数</h3><p>多字符处理函数，不是php默认的开启模式，需要通过配置php.ini进行操作</p>
<blockquote>
<p>extension=php_mbstring.dll</p>
</blockquote>
<h4 id="mb-strlen"><a href="#mb-strlen" class="headerlink" title="mb_strlen()"></a>mb_strlen()</h4><p>获取字符的长度</p>
<blockquote>
<p>第一个参数是我们需要获取的字符串，第二个参数是选择的编码格式</p>
</blockquote>
<h4 id="mb-internal-encoding"><a href="#mb-internal-encoding" class="headerlink" title="mb_internal_encoding()"></a>mb_internal_encoding()</h4><ul>
<li>获取当前的编码格式（不加参数）</li>
<li>修改当前的编码模式（增加参数）</li>
</ul>
<h4 id="mb-strpos"><a href="#mb-strpos" class="headerlink" title="mb_strpos()"></a>mb_strpos()</h4><p>查找当前某个字符的位置</p>
<h4 id="mb-substr"><a href="#mb-substr" class="headerlink" title="mb_substr()"></a>mb_substr()</h4><p>截取字符</p>
<h4 id="iconv"><a href="#iconv" class="headerlink" title="iconv()"></a>iconv()</h4><p>转换格式</p>
<blockquote>
<p>里面三个参数，第一个是当前的编码，第二个是转换后的编码，第三个是需要转换的字符串</p>
</blockquote>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP核心编程</tag>
      </tags>
  </entry>
  <entry>
    <title>php数组相关</title>
    <url>/2015/20150826-1.html</url>
    <content><![CDATA[<blockquote>
<p>复习：<br>匿名函数use用法：将外部和匿名函数处于同一级的变量引用到匿名函数的内部，引用的变量和外部的变量是一个值传递的关系。如果需要引用传址，则在usb变量前加&amp;符号</p>
</blockquote>
<h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><blockquote>
<p>单单从思想的角度上看，递归和迭代没有谁优谁劣，都是一样的，就和大家偏文科偏理科一样，但是，从代码的角度上来看，无疑是迭代的思想更加具有效率，所以建议大家以后去多用迭代的思想去解决问题。</p>
</blockquote>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>不是所有关联数组都是字符串下标<br><code>$arr = array(1110=&gt;&#39;刘德华&#39;,1111=&gt;&#39;金城武&#39;);</code><br>不是所有数组都是整形下标<br><code>$arr = array(&#39;a&#39;=&gt;&#39;雪碧&#39;,&#39;b&#39;=&gt;&#39;可乐&#39;,&#39;c&#39;=&gt;&#39;王老吉&#39;);</code></p>
<h4 id="foreach-遍历数组"><a href="#foreach-遍历数组" class="headerlink" title="foreach 遍历数组"></a>foreach 遍历数组</h4><p>语法：<br><code>foreach(需要遍历数组的名称 as 数组的键 =&gt; 数组的值){  }</code></p>
<p>语法：<br><code>foreach(需要遍历数组的名称 as  数组的值){  }</code></p>
<p>注意：</p>
<blockquote>
<p>foreach遍历数组的时候，数组的指针会自动的下移。<br>foreach遍历完数组以后，指针会指向一个非法的位置<br>foreach在遍历数组之前，会现对数组做一个初始化的操作</p>
</blockquote>
<p>foreach遍历数组，实际是遍历数组的拷贝值,改变原数组的结果，不会影响到遍历数组的结果,foreach遍历数组，如果改变$value的值，原数组不会发生变化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">foreach($arr as $key =&gt; $value)&#123;</span><br><span class="line">	$value = &apos;加多宝&apos;;</span><br><span class="line">	echo &apos;数组的下标是：&apos;.$key.&apos;&lt;br&gt;&apos;;</span><br><span class="line">	echo &apos;数组的值为：&apos;.$value.&apos;&lt;br&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">var_dump($arr);</span><br></pre></td></tr></table></figure>
<p>foreach遍历数组同样支持引用传值，改变$value的值，原数组也会随之发生变化。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">foreach($arr as &amp;$value)&#123;</span><br><span class="line">	$value = &apos;加多宝&apos;;</span><br><span class="line">	echo &apos;数组的值为：&apos;.$value.&apos;&lt;br&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">var_dump($arr);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>foreach遍历完数组以后，下标是一个不确定的情况，如果foreach遍历完以后需要使用数组，最好将他做一个初始化的操作。</p>
</blockquote>
<h4 id="指针-遍历数组"><a href="#指针-遍历数组" class="headerlink" title="指针 遍历数组"></a>指针 遍历数组</h4><blockquote>
<p>通过移动数组的指针，完成一个遍历数组的情况，指针指向的位置一般是分为一个合法位和非法位</p>
</blockquote>
<p>next($arr) :   让指针下移一位–&gt;指针下移<br>current($arr):  获取指针指向当前元素的值–&gt;获取当前值<br>key($arr)  :   获取指针指向当前元素的下标–&gt;获取当前元素下标</p>
<p>for(;current($arr);next($arr)){<br>    echo “数组元素的下标为：”.key($arr).’<br>‘;<br>    echo “数组元素的值为：”.current($arr).’<br>‘;<br>}</p>
<p>prev()        :    让数组的指针上移一位。</p>
<blockquote>
<p>上移指针和下移指针是相对于现在的位置而言，所以一旦指针处于一个非法位置，没有参照物了，指针无论上移还是下移都是非法位</p>
</blockquote>
<p>reset()   :   初始化指针。<br>end()    :   将数组指针指向数组的最后一个元素。</p>
<blockquote>
<p>reset()和end()理解成相当于一个绝对路径的概念，我不需要管数组指针当前指向的位置，直接将数组指针指向第一个元素或者最后一个元素</p>
</blockquote>
<p>each()  :返回一个四个元素的数组，其中1和value代表当前数组指向的值，0和key指向当前数组的下标。并且他会让数组的指针下移一位</p>
<h5 id="while-each-list-遍历数组"><a href="#while-each-list-遍历数组" class="headerlink" title="while+each+list 遍历数组"></a>while+each+list 遍历数组</h5><p>each可以获取元素的值，下标和下移指针，所以直接和while配合，就可以遍历数组<br><strong>方法一</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while($element = each($arr))&#123;</span><br><span class="line">	echo &apos;下标：&apos;,$element[0];</span><br><span class="line">	echo &apos;值：&apos;,$element[1];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>方法二</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while(list($key,$value)=each($arr))&#123;</span><br><span class="line">	echo &apos;下标：&apos;,$key;</span><br><span class="line">	echo &apos;值：&apos;,$value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>list（）    ：  list可以将数组里面的值赋值给一个变量</p>
<blockquote>
<p>each获取的是一个数组类型的变量，所以可以利用list将数组的值获取出来</p>
</blockquote>
<blockquote>
<p>3种遍历数组的方式，for(),foreach(),while+each+list的方式，以后工作中90%的人基本上用的都是foreach,9%都会使用while+each+list的方法，for基本上没有人使用</p>
</blockquote>
<h3 id="关于赋值的指针问题"><a href="#关于赋值的指针问题" class="headerlink" title="关于赋值的指针问题"></a>关于赋值的指针问题</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$arr=array(‘a’,’b’,’c’,’d’);</span><br><span class="line">$arr2=$arr;</span><br><span class="line">echo current($arr2);</span><br><span class="line">//结果是 a，地址传递</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$arr=array(‘a’,’b’,’c’,’d’);</span><br><span class="line">next($arr);</span><br><span class="line">$arr2=$arr;</span><br><span class="line">echo current($arr2);</span><br><span class="line">// 结果是b，复制数组的时候，指针跟着一起被复制</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$arr=array(&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;);</span><br><span class="line">$arr2=$arr;</span><br><span class="line">next($arr);</span><br><span class="line">echo current($arr2);</span><br><span class="line">// 结果是a ,复制数组以后，修改一个数组的指针，另一个数组不会一起发生变化。</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$arr=array(&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;);</span><br><span class="line">next($arr);</span><br><span class="line">next($arr);</span><br><span class="line">next($arr);</span><br><span class="line">next($arr);</span><br><span class="line">$arr2=$arr;</span><br><span class="line">echo current($arr2);</span><br><span class="line">// 结果是a ,当一个数组处于一个非法位置的时候，复制给另一个数组，此时先查看哪个，哪个就会被初始化，另一个就不会初始化；</span><br></pre></td></tr></table></figure>
<h3 id="COW-写时复制"><a href="#COW-写时复制" class="headerlink" title="COW 写时复制"></a>COW 写时复制</h3><p>如果将一个变量赋值给另一个变量，不会立刻去开辟一个空间，只有当变量进行写操作的时候，才会给他开辟一个空间。</p>
<p>memory_get_usage()    获取文件占用空间的大小。<br>array_fill（开始下标，添加元素的数量，默认值）<br>shuffle() - 将数组打乱<br>array_fill() - 用给定的值填充数组</p>
<p>在foreach里面对原数组进行写操作时，复制的数组才开辟了一块空间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	header(&quot;content-type:text/html;charset=utf-8&quot;);</span><br><span class="line">	$arr=array(&apos;可乐&apos;,&apos;雪碧&apos;,&apos;王老吉&apos;);</span><br><span class="line">	foreach($arr as $key =&gt; $value)&#123;</span><br><span class="line">	&#125;</span><br><span class="line">	var_dump(current($arr));</span><br><span class="line">//指针停留在非法位，没有进行写操作。</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	header(&quot;content-type:text/html;charset=utf-8&quot;);</span><br><span class="line">	$arr=array(&apos;可乐&apos;,&apos;雪碧&apos;,&apos;王老吉&apos;);</span><br><span class="line">	foreach($arr as $key =&gt; $value)&#123;</span><br><span class="line">		$arr[1]=&apos;加多宝&apos;;</span><br><span class="line">	&#125;</span><br><span class="line">	var_dump(current($arr));</span><br><span class="line">//结果为加多宝，foreach循环的是复制的原始数组，里面更改的也是原始数组。</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	header(&quot;content-type:text/html;charset=utf-8&quot;);</span><br><span class="line">	$arr=array(&apos;可乐&apos;,&apos;雪碧&apos;,&apos;王老吉&apos;);</span><br><span class="line">	foreach($arr as $key =&gt; $value)&#123;</span><br><span class="line">		if($key==1)&#123;</span><br><span class="line">			$arr[1]=&apos;加多宝&apos;;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	var_dump(current($arr));</span><br><span class="line">//结果为王老吉，进行了写操作。</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	$arr=array(&apos;可乐&apos;,&apos;雪碧&apos;,&apos;王老吉&apos;);</span><br><span class="line">	foreach($arr as $key =&gt; $value)&#123;</span><br><span class="line">		if($key==2)&#123;</span><br><span class="line">			$arr[1]=&apos;加多宝&apos;;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	var_dump(current($arr));</span><br><span class="line">//结果为可乐，复制数组的时候，指针处于一个非法位置，所以指针被初始化操作了。</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	header(&quot;content-type:text/html;charset=utf-8&quot;);</span><br><span class="line">	$arr=array(&apos;可乐&apos;,&apos;雪碧&apos;,&apos;王老吉&apos;);</span><br><span class="line">	foreach($arr as $key =&gt; $value)&#123;</span><br><span class="line">		if($key==3)&#123;</span><br><span class="line">			$arr[1]=&apos;加多宝&apos;;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	var_dump(current($arr));</span><br><span class="line">//if语句一直没有被执行，所以一直没有进行写时复制。所以遍历完数组以后，指针指向非法位</span><br></pre></td></tr></table></figure>
<p><strong>foreach变量数组总结</strong></p>
<blockquote>
<p>先复制后移动，原始数组保持指针不变<br>先移动后复制，复制的数组会将指针也复制了<br>指针处于非法位置时，进行复制，先查看哪个数组，哪个就先被初始化</p>
</blockquote>
<h3 id="关于数组的几个函数"><a href="#关于数组的几个函数" class="headerlink" title="关于数组的几个函数"></a>关于数组的几个函数</h3><p><strong>range（初始值，结束值）</strong><br><code>$arr = range(1,10);</code></p>
<p><strong>array_merge(数组1,数组2)</strong><br><code>$arr = array_merge(range(0,9),range(&#39;a&#39;,&#39;z&#39;));</code></p>
<blockquote>
<p>array_merge如果合并两个数字下标的数组，会将数字重新从0进行组合。<br>array_merge如果合并两个字符串下标的数组，后面的值会将前面的值覆盖。<br>array_merge合并两个数组，先从第一个数组开始合并，然后在合并第二个数组。</p>
</blockquote>
<p><strong>array_rand(数组，个数);</strong><br>随机获取一个数组的下标</p>
<blockquote>
<p>array_rand获取的是元素的下标，如果只获取一个元素下标，则是以普通数据类型进行存储，如果获取多个下标，则以数组的模式进行存储。<br>虽然array_rand是随机获取下标的，但是他获取多个下标的时候会从小到大排序</p>
</blockquote>
<p><strong>shuffle()</strong><br>可以打乱一个数组的元素</p>
<blockquote>
<p>返回值是bool(true),</p>
</blockquote>
<p><strong>随机验证码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$arr = array_merge(range(0,9),range(&apos;a&apos;,&apos;z&apos;),range(&apos;A&apos;,&apos;Z&apos;));</span><br><span class="line">$arr2 = array_rand($arr,4);</span><br><span class="line">shuffle($arr2);</span><br><span class="line">$str = &apos;&apos;;</span><br><span class="line">foreach ($arr2 as $value) &#123;</span><br><span class="line">	$str.=$arr[$value];</span><br><span class="line">&#125;</span><br><span class="line">var_dump($str);</span><br></pre></td></tr></table></figure>
<p>补充：</p>
<blockquote>
<p>memory_get_usage() 获取当前文件占用空间的大小；<br>array_fill(0,10,’uiste’); 0开始下标，10是元素个数，uiste是每个元素的内容</p>
</blockquote>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP核心编程</tag>
      </tags>
  </entry>
  <entry>
    <title>php函数基础</title>
    <url>/2015/20150824-1.html</url>
    <content><![CDATA[<h3 id="return"><a href="#return" class="headerlink" title="return"></a>return</h3><ol>
<li>中断文件的功能：终止的仅仅是当前return所在的文件，而不是终止整个程序。</li>
<li>返回值</li>
<li>return返回结果，可以是一个变量，所以，同样支持值传递和引用传递两种方法，如果使用引用传递，则在函数名的前面加上一个&amp;</li>
</ol>
<h3 id="exit-die"><a href="#exit-die" class="headerlink" title="exit()/die()"></a>exit()/die()</h3><p>exit()和die()的功能一模一样，他们就是一个功能的两种叫法。作用是终止程序。</p>
<h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep()"></a>sleep()</h3><p>sleep后面有一个参数，代表程序延迟多少秒后继续执行。</p>
<h3 id="函数调用时间"><a href="#函数调用时间" class="headerlink" title="函数调用时间"></a>函数调用时间</h3><p>代码是先进行解析再执行里面的语句，解析阶段已经预先给function开辟了空间，所以执行阶段调用函数时，可以将调用函数放在函数声明之前。</p>
<h3 id="可变函数"><a href="#可变函数" class="headerlink" title="可变函数"></a>可变函数</h3><p>可以用一个变量来存放函数名，需要调用函数的时候，直接调用这个变量</p>
<blockquote>
<p>作用:将一堆复杂的函数放在一个可变的数组集合中。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">imagecreatefromjpg();</span><br><span class="line">imagecreatefromjpeg();</span><br><span class="line">imagecreatefrombmp();</span><br><span class="line">imagecreatefromgif();</span><br><span class="line">$file = &apos;chihuo.jpg&apos;;</span><br><span class="line">$type = &apos;jpg&apos;;</span><br><span class="line">$arr = array(</span><br><span class="line">	&apos;jpg&apos; =&gt; &apos;imagecreatefromjpg&apos;,</span><br><span class="line">	&apos;jpeg&apos;=&gt; &apos;imagecreatefromjpeg&apos;,</span><br><span class="line">	&apos;bmp&apos; =&gt; &apos;imagecreatefrombmp&apos;,</span><br><span class="line">	&apos;gif&apos; =&gt; &apos;imagecreatefromgif&apos;</span><br><span class="line">)</span><br><span class="line">$arr[$type]();</span><br></pre></td></tr></table></figure>
<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>没有函数名的函数，称之为匿名函数，匿名函数一般是将他赋值给一个变量，需要加载的时候，直接加载这个变量</p>
<blockquote>
<p>作用：调用完成后使用unset快速销毁</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$fn = function($name)&#123;</span><br><span class="line">	echo $name;</span><br><span class="line">&#125;</span><br><span class="line">var_dump($fn);</span><br><span class="line">``</span><br><span class="line">&gt;在匿名函数中，要先声明函数，在定义函数</span><br><span class="line"></span><br><span class="line">### create_function()	创建一个函数</span><br><span class="line">&gt;作用：网站多国语言创建有需求的语言函数，节约空间</span><br><span class="line"></span><br><span class="line">语法</span><br><span class="line">：`create_function(‘参数列表’,’函数体’)；`</span><br><span class="line">&gt;create_function括号内的参数和函数体，必须要被单引号包裹起来，不能使用双引号</span><br><span class="line">如果要传递多个参数，在参数列表的单引号内，用,进行分割</span><br><span class="line">在一些大型的项目中，使用create_function模式去创建函数，可以极大的节省项目所占用的内存空间</span><br><span class="line"></span><br><span class="line">**`create_function`创建函数以后，默认的函数名是（隐藏字节+lambda_1），每当调用一次函数，后面的数字加1，重启apache以后，数字清零**</span><br><span class="line"></span><br><span class="line">### function_exists()  判断一个函数是否已经被定义</span><br><span class="line">&gt;一般项目中代码量很大，去寻找一个函数会比较复杂，所以会用function_exists（‘函数名’）去判断一个一个函数是否已经被定义</span><br><span class="line"></span><br><span class="line">### 参数</span><br><span class="line">形参： 声名函数时所使用的参数</span><br><span class="line">实参： 调用函数时所使用的参数</span><br><span class="line"></span><br><span class="line">**直接传递参数的模式，就是一个值传递的过程，改变一个变量的值，不影响另一个变量**</span><br><span class="line"></span><br><span class="line">&gt;如果一个参数，有默认值的话，如果实参没有传递，形参以默认值的数据存在，而如果实参传递了一个数据。则形参以实参传递的数据为主</span><br><span class="line"></span><br><span class="line">**参数的默认值不能是一个变量，因为function关键词在代码的解析阶段就会去运行，但是这个时候并没有变量的赋值，变量的赋值操作是在代码的运行阶段才会被复制。**</span><br><span class="line"></span><br><span class="line">**参数的默认值，可以是一个常量，如果在调用函数之前定义了这个常量，则默认值会以常量的值进行计算。如果在调用函数之前还没有定义这个常量，则函数会将常量名当成一个普通的字符串去解析。**</span><br><span class="line"></span><br><span class="line">我们会把带默认值的形参统一放在参数列表的最右边，这样，在实参传递的时候，就不会出现问题</span><br><span class="line"></span><br><span class="line">**参数个数带来的问题**</span><br><span class="line">&gt;实参的个数少于形参的个数---报错--代码还会继续运行下去</span><br><span class="line">形参的个数少于实参的个数--不报错，代码正常运行--超出部分不被接收</span><br><span class="line"></span><br><span class="line">###	极限情况</span><br><span class="line"></span><br><span class="line">在一个函数不知道会传递多少个实参的时候，一般形参一个不写。代码不会报错。</span><br><span class="line"></span><br><span class="line">**func_get_args()**</span><br><span class="line">会将传递的实参以一个数组的形式去进行保存。</span><br><span class="line">**func_get_arg(num)**</span><br><span class="line">获取传递的第num+1个实参的值。</span><br><span class="line">**func_num_args()**</span><br><span class="line">获取传递实参的个数。</span><br></pre></td></tr></table></figure>
<p>// 计算不确定个数数字的和。<br>//方法一<br>    function hs(){<br>        $num=func_num_args();<br>        $sum=0;<br>        for($i=0;$i&lt;$num;$i++){<br>            $sum+=func_get_arg($i);<br>        }<br>        echo $sum;<br>    }<br>    hs(1,3,5,6,7,8,9);</p>
<p>//方法二<br>    function hs2(){<br>        $arr=func_get_args();<br>        $sum=0;<br>        for($i=0,$n=count($arr);$i&lt;$n;$i++){<br>            $sum+=$arr[$i];<br>        }<br>        echo $sum;<br>    }<br>    hs2(1,3,5,6,7,8,9);</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;我们可以用func_get_args去同时替代func_get_arg,func_num_args两个函数</span><br><span class="line"></span><br><span class="line">&gt;如果我需要返回的值是一个非常非常大的数组或者其他数据类型，如果使用值传递，则需要花费时间去重新复制一个值，而如果使用引用传递，直接复制地址就可以了，可以节省很多的时间</span><br><span class="line"></span><br><span class="line">### 变量的作用域</span><br><span class="line">#### 全局变量</span><br><span class="line">在函数外部定义的变量称之为全局变量</span><br><span class="line"></span><br><span class="line">#### 局部变量</span><br><span class="line">在函数体内部定义的变量称之为局部变量</span><br><span class="line"></span><br><span class="line">&gt;在JS中全局变量可以在局部使用，局部变量不能在全局中使用。</span><br><span class="line">在PHP中，全局变量不能再局部使用，局部变量也不能在全局中使用。</span><br><span class="line">PHP中全局变量只能在函数的外面使用，局部变量只能在函数的内部使用</span><br><span class="line"></span><br><span class="line">**如果一个变量的作用域同时包含函数内和函数外，那么他就是一个超全局的变量**</span><br><span class="line">九大超全局变量的作用域都是函数内+函数外</span><br><span class="line"></span><br><span class="line">##### $GLOBALS</span><br><span class="line"></span><br><span class="line">用$GLOBALS去定义一个变量，$变量名和$GLOBAL[‘变量名’]存在一定的关系。</span><br><span class="line">&gt;$变量名和$GLOBALS变量名两者是一个一体的关系，修改一个另一个也会发生变化，删除一个另一个就不存在了</span><br><span class="line"></span><br><span class="line">**关键词global**</span><br><span class="line">语法 global 变量名 </span><br><span class="line">作用，将一个全局变量引用传值到局部变量中，两者是两个独立的变量</span><br></pre></td></tr></table></figure>
<p>function hs(){<br>    global $age;<br>    $age++;<br>    unset($age);<br>}<br>$age = 27;<br>hs();<br>echo $age;</p>
<p>结果：28;<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;虽然global被php大力推广，但是效果很差，程序员还是习惯使用$GLOBALS用法</span><br><span class="line"></span><br><span class="line">### 变量的生命周期</span><br><span class="line"></span><br><span class="line">全局变量的生命周期，是从**被定义的时候开始，到文件运行完毕**以后，当前文件的全局变量生命周期就会结束。</span><br><span class="line"></span><br><span class="line">局部变量的生命周期，是从**函数内部被定义开始，到函数执行完毕**以后，当前函数内的所有变量，生命周期就会结束</span><br><span class="line"></span><br><span class="line">**static 静态变量**</span><br><span class="line">static  用来定义一个静态变量</span><br><span class="line">&gt;静态变量只会被初始化一次，之后不会被重新初始化</span><br><span class="line">静态变量的生命周期等同与全局变量的生命周期，但是他的作用域等同于局部变量的作用</span><br><span class="line">以上所说都是正常情况下变量的生命周期，但是，我们同样可以用unset()来提前结束一个变量的生命周期。</span><br><span class="line"></span><br><span class="line">### 匿名函数</span><br><span class="line">可以通过对变量的类型进行判断，如果是一个字符串，说明是一个可变函数，如果是一个对象，说明是一个匿名函数</span><br><span class="line"></span><br><span class="line">匿名函数的优点</span><br><span class="line">&gt;匿名函数可以随时随地被调用，也可以随时随地被销毁。特别适合一些临时性的函数</span><br><span class="line"></span><br><span class="line">**use**</span><br><span class="line">虽然，匿名函数是一个赋值语句，但是里面的变量都是一些局部变量。  我们可以利用use将一个和函数处于同一作用域的变量引用进来</span><br></pre></td></tr></table></figure></p>
<p>$c = 30;<br>$fn = function() use($c){<br>    $a = 10;<br>    $b = 20;<br>    echo $a+$b+$c;<br>}</p>
<p>$fn();</p>
<p>结果：60;<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>$name = ‘rose’;<br>function abc(){<br>    $name = ‘jack’;<br>    $fn = function() use($name){<br>    echo $name;<br>    }<br>$fn();<br>}<br>abc();</p>
<p>结果是：jack;<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;作用域并不是一成不变的，一个全局变量，也可能会变成一个局部变量。</span><br><span class="line">use调用函数同样支持值传递和引用传递，如果使用引用传值，在use右边的变量前加上一个&amp;</span><br><span class="line"></span><br><span class="line">### 递归函数</span><br><span class="line"></span><br><span class="line">递归是属于分治（分，治，合）的算法。迭代也属于分治的算法。</span><br><span class="line">递归函数，就是在一个函数里面继续调用一个函数。</span><br><span class="line"></span><br><span class="line">递归函数必须由两个部分组成：</span><br><span class="line">递归点：一个函数继续调用他本身。  如果没有递归点，他就不算一个递归函数。</span><br><span class="line">递归出口：如果一个函数不断地调用他本身，没有出口的话，这个函数会一直运行到空间耗尽或者是时间耗尽的情况才会结束。所以一个函数必须要有递归出口</span><br><span class="line"></span><br><span class="line">计算个菲波拉契数列，输出第n项的数字</span><br><span class="line"></span><br><span class="line">```php</span><br><span class="line">//计算菲波拉契数列</span><br><span class="line">	//用递归实现菲波拉契数列</span><br><span class="line">	function fn($n)&#123;</span><br><span class="line">		//第一项和第二项的结果是1</span><br><span class="line">		if($n==1||$n==2)&#123;</span><br><span class="line">			return 1;</span><br><span class="line">		&#125;</span><br><span class="line">		//从第三项开始，每一项等于前两项的和</span><br><span class="line">		return fn($n-1)+fn($n-2);  //递归点</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	echo fn(11);</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP核心编程</tag>
      </tags>
  </entry>
  <entry>
    <title>php基础语法-数据类型、运算符、分支结构、包含文件</title>
    <url>/2015/20150823-1.html</url>
    <content><![CDATA[<h3 id="ASCII编码"><a href="#ASCII编码" class="headerlink" title="ASCII编码"></a>ASCII编码</h3><p>ASCII码一共有128个，一个ASCII编码占用1个字节，也就是8位。所以我们书写字符串的时候，一个字母占用1个字节。<br>ASCII编码全部都是连续的，比如A是65，B是66，C，67。<br>ASCII编码小写字母比大写字母大32。比如A是65，小写a是97。</p>
<p>chr()   :    将一个数字转换成对应的ASCII码的字符。<br>ord()     :    将一个ASCII码的字符转换成相对应的数</p>
<p>\num   就是将八进制的num转换成ascii编码<br>\xnum  就是将十六进制的num转换成ascii编码</p>
<h3 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h3><p>数字：0、0.0、0.00 等0数都是false<br>字符串：”0”、” “空字符串都是false<br>null 和所有为空的数据类型都是false</p>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>如果不给数组添加下标，则默认下标从0开始依次递增<br>如果数组元素下标之前已经存在数字下标了，那么新的元素下标则为之前元素下标的最大值<code>+1</code>;<br>如果数组元素存在同样的下标，那么后面下标对应的值会将前面的值给<strong>覆盖</strong>。<br>数组的<strong>下标</strong>只能是字符串或者整型，如果是其他数据类型，他会将其强制转换成字符串或者整型。</p>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>对象和数组非常的相似，唯一的区别就是可以在对象里面书写函数，所以我们一般成对象为有生命的数组</p>
<h3 id="空型-null"><a href="#空型-null" class="headerlink" title="空型  null"></a>空型  null</h3><p>如果一个变量，我们不进行赋值，那么他就是一个null<br>同样的我们也可以主动的给一个变量赋值为null<br>一般情况下，如果一个变量占据了很大的空间，我们又暂时用不到他，我们就可以将他赋值为null，这样他所占据的空间就会被释放</p>
<h3 id="资源-resource"><a href="#资源-resource" class="headerlink" title="资源  resource"></a>资源  resource</h3><p>一般来说，我们不能自己去创建一个资源，所有的资源都是php已经预先定义好的，我们所能做的就是直接拿过来使用。</p>
<h3 id="数据类型的转换"><a href="#数据类型的转换" class="headerlink" title="数据类型的转换"></a>数据类型的转换</h3><p>字符串存储在计算机中，是以ASCII编码进行存储，所以他们的存储方式不一样，在做不同数据类型计算的时候，计算机会自动的做一个数据类型的转换</p>
<p>计算机自动的做数据类型的转换</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a = 12;</span><br><span class="line">$b = &apos;4abc&apos;;</span><br><span class="line">echo $a+$b;</span><br></pre></td></tr></table></figure>
<p>获取的数据和我们想要的结果不一样，所以我们需要手动的做数据类型的转换</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a = 12;</span><br><span class="line">$b = 3.45;</span><br><span class="line">echo $a+(int)$b;</span><br></pre></td></tr></table></figure>
<p>(需要转换的数据类型)需要转换的数字即可</p>
<blockquote>
<p>如果是一个纯数字的字符串转换的结果就是数字本身，如果带有字母，则从最左边寻找，如果遇到字母，则直接将右边的部分抛弃，如果是空的内容，则强制转换整型的结果为0，false为0,true为1</p>
</blockquote>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>当进行逻辑运算的时候，如果左边已经达到了最终的结果，那么php为了节省运算的时间，右边就不进行运算了，那么相当于右边的内容被短路了。所以为了避免逻辑短路，尽量不要在逻辑运算符中做算数运算</p>
<blockquote>
<p>思考： a++和a+=1对于a本身而言是否一样？<br>答案： 不一样，在++操作字符串的时候，他会做ASCII编码操作。<br>一般来说，只有在算数运算中使用自增自减操作</p>
</blockquote>
<h3 id="常用的函数"><a href="#常用的函数" class="headerlink" title="常用的函数"></a>常用的函数</h3><p><strong>isset()</strong></p>
<p>isset(变量名) ： 判断一个变量是否已经被定义。如果被定义，返回的结果是true，否则返回的结果是false。<br>只有变量没有被定义或者变量被定义的结果是null，那么isset()返回的结果是false，除此以外，只要你定义了这个变量，isset的结果就是true。</p>
<p><strong>empty()</strong></p>
<p>语法：empty(变量名)，如果变量里面的内容不为空，则返回的结果是false，否则返回的结果为true。</p>
<p>empty转换的结果和boolean转换的结果正好相反，所以，只需要记住其中一个就可以了。</p>
<p><strong>is_XXX</strong></p>
<p>XXX表示一个数据类型。<br>is_int(变量)  判断变量是否是一个整型，true表示是整型，false表示不是整型。<br>is_boolean()<br>is_string()<br>is_float()</p>
<h3 id="替代语法"><a href="#替代语法" class="headerlink" title="替代语法"></a>替代语法</h3><p>将开始的大括号使用:进行替代，将结束的大括号使用end XXX来替代，这里面的XXX代表的就是这个结构的名称<br>结尾加上“;”分号</p>
<blockquote>
<p>替代语法一般来说，是写在html和php的混编语言中<br>使用替代语法，可以非常清晰明了的判断，结束标记到底是属于哪个结构</p>
</blockquote>
<p><strong>if语句中如果要是用elseif的话在else和if之间不要加上空格</strong></p>
<blockquote>
<p>思考：如果for循环执行了n次循环，那么初始化变量，条件判断和变量更新分别执行了多少次？<br>答案： 初始化变量执行1次，条件判断执行n+1次，变量更新执行n次。</p>
</blockquote>
<p><strong>break,continue参数的问题</strong><br>break和continue默认的参数是1，代表break和continue只会跳出当前的一层for循环，如果你想让break和continue一次性跳出多层循环，需要在break和continue的后面加上一个需要跳出的层数</p>
<p><strong>关于switch跳出循环的问题</strong><br>我们可以将switch看成是一个只执行一次的循环体，所以如果要在switch中跳出循环，则要在break的基础上+1</p>
<p>在switch语句中写break和continue的效果是一模一样的</p>
<h3 id="绝对路径和相对路径"><a href="#绝对路径和相对路径" class="headerlink" title="绝对路径和相对路径"></a>绝对路径和相对路径</h3><p>所谓的相对路径，就是相对于当前文件去查找另一个文件就是一个相对路径。<br>绝对路径就是不参照任何一个位置，所书写的地址。<br>程序中的绝对路径就是从盘符开始，去书写一个路径</p>
<p>../文件名       上一级文件夹<br>./文件名        当前文件夹<br>文件名        当前文件夹</p>
<h3 id="包含文件"><a href="#包含文件" class="headerlink" title="包含文件"></a>包含文件</h3><p>所谓的包含文件就是将需要的文件加载到你所编写的文件中去，包含文件有四种方式。<br><code>include</code>  <code>include_once</code>  <code>require</code>   <code>require_once</code></p>
<p><strong>include加载文件</strong><br>语法，include(需要加载的文件) ， include 需要加载的文件</p>
<blockquote>
<p>相对路径的位置不太好确定，在工作中容易引发报错，所以在工作中最好去使用绝对路径</p>
</blockquote>
<p>打开phpinfo()，搜索include_path</p>
<p>使用<code>set_include_path</code>(‘需要设置的目录’)<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$str = get_include_path();</span><br><span class="line">set_include_path(&apos;c:/php/joker;&apos;.$str);</span><br><span class="line">include(&apos;joker.php&apos;);</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>思考，将原来的路径放在新增文件夹路径的左边效率更高还是右边效率更高？<br>答案：放在右边更高<br>一般情况下，在项目中，会将所有需要加载的文件统一放在一个文件夹中，通过set_include_path去进行设置加载</p>
</blockquote>
<p><strong>include PK require</strong><br>require也是加载一个文件<br>include加载文件，如果出现了错误，会报一个警告性（warning）的错误，然后代码还会继续往下执行。<br>require加载文件，如果出现了错误，会报一个致命性（fatal error）的错误。然后代码就不会继续往下执行。</p>
<p><strong>include PK include_once</strong><br>include如果载入相同的文件都会分别去执行，但是include_once如果载入相同的文件，只会执行一次。</p>
<p><code>include_once</code> 的效率更低，因为include_once在加载一个文件之前，都会检查前面的代码，看看这个文件是否已经被加载过了</p>
<p><strong>exit()/die()</strong><br>exit()和die()是同一样函数，只不过起的名字不同。它的作用就是让一个程序终止执行。</p>
<p><strong>sleep()</strong><br>延时函数，让一个程序停止任意秒后继续执行</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP核心编程</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP思想养成-打印菱形</title>
    <url>/2015/20150822-2.html</url>
    <content><![CDATA[<blockquote>
<p>拿出一张纸画个图，站在代码外面的世界，分析一下功能实现的步骤，再讲思想转换成代码</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">header(<span class="string">"content-type:text/html;charset=utf-8"</span>);</span><br><span class="line"><span class="comment">// PHP打印菱形的两种方法，备注的信息由于定义层数是从0开始，所以思想与代码有略微区别</span></span><br><span class="line"><span class="comment">// copyright ：uiste</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"方法一：通过判定半个菱形的层数将剩余层数输出&lt;br/&gt;"</span>;</span><br><span class="line"><span class="comment">//定义所打印菱形的上半区的层数</span></span><br><span class="line">$row = <span class="number">5</span>;</span><br><span class="line"><span class="comment">//循环上半区层数从第0层到层数减一</span></span><br><span class="line"><span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; $row; $i++) &#123; </span><br><span class="line">	<span class="comment">//先打印左侧的空格：总层数减去当前层数减1</span></span><br><span class="line">	<span class="keyword">for</span> ($j=<span class="number">0</span>; $j &lt; $row-$i<span class="number">-1</span>; $j++) &#123; </span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"&amp;nbsp"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//打印“*”号，当前层数乘以2加1</span></span><br><span class="line">	<span class="keyword">for</span> ($k=<span class="number">0</span>; $k &lt; $i*<span class="number">2</span>+<span class="number">1</span>; $k++) &#123; </span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"*"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//循环下班去层数从上半区总层数减1</span></span><br><span class="line"><span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; $row<span class="number">-1</span>; $i++) &#123; </span><br><span class="line">	<span class="comment">//打印左侧空格等于下班去当前的层数</span></span><br><span class="line">	<span class="keyword">for</span> ($j=<span class="number">0</span>; $j &lt;= $i; $j++) &#123; </span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"&amp;nbsp"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//打印“*”号，下半区总层数减去当前层数乘以2加1</span></span><br><span class="line">	<span class="keyword">for</span> ($k=<span class="number">0</span>; $k &lt; ($row<span class="number">-1</span>-$i)*<span class="number">2</span><span class="number">-1</span>; $k++) &#123; </span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"*"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;方法：通过整个层数判定分区进行输出（必须为奇数层数）&lt;br/&gt;"</span>;</span><br><span class="line"><span class="comment">//定义所打印菱形的总层数</span></span><br><span class="line">$row=<span class="number">9</span>;</span><br><span class="line"><span class="comment">//定义上半区的总层数</span></span><br><span class="line">$n = ceil($row/<span class="number">2</span>);</span><br><span class="line"><span class="comment">//循环所有层数</span></span><br><span class="line"><span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; $row; $i++) &#123; </span><br><span class="line">	<span class="comment">//判断若小于上半区层数进行上半区的循环</span></span><br><span class="line">	<span class="keyword">if</span> ($i&lt;$n) &#123;</span><br><span class="line">		<span class="comment">//打印空格上半区总层数减去当前层数</span></span><br><span class="line">		<span class="keyword">for</span> ($j=<span class="number">0</span>; $j &lt; $n-$i<span class="number">-1</span>; $j++) &#123; </span><br><span class="line">			<span class="keyword">echo</span> <span class="string">"&amp;nbsp"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//打印“*”号，当前层数乘以2减1</span></span><br><span class="line">		<span class="keyword">for</span> ($k=<span class="number">0</span>; $k &lt; $i*<span class="number">2</span>+<span class="number">1</span>; $k++) &#123; </span><br><span class="line">			<span class="keyword">echo</span> <span class="string">"*"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="comment">//如果条件不满足上去，开始打印下半区信息</span></span><br><span class="line">		<span class="comment">//先打印空格，等于当前层数减去上半区层数</span></span><br><span class="line">		<span class="keyword">for</span> ($j=<span class="number">0</span>; $j &lt; $i-$n+<span class="number">1</span>; $j++) &#123; </span><br><span class="line">			<span class="keyword">echo</span> <span class="string">"&amp;nbsp"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//打印“*”号，等于总层数减去已经打印层数乘以2加1</span></span><br><span class="line">		<span class="keyword">for</span> ($k=<span class="number">0</span>; $k &lt; ($row-$i)*<span class="number">2</span><span class="number">-1</span>; $k++) &#123; </span><br><span class="line">			<span class="keyword">echo</span> <span class="string">"*"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP思想养成</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac系统截图快捷键详细介绍</title>
    <url>/2015/20150822-1.html</url>
    <content><![CDATA[<p>这篇文章介绍了Mac系统截图快捷键组合方式，使用不同的快捷键组合可以在Mac系统截取不同大小和区域的截图。完全可以不用第三方截图工具了，Mac很强大！</p>
<h3 id="一、基础快捷键（-表示同时操作、-表示分步操作"><a href="#一、基础快捷键（-表示同时操作、-表示分步操作" class="headerlink" title="一、基础快捷键（+表示同时操作、-表示分步操作)"></a>一、基础快捷键（+表示同时操作、-表示分步操作)</h3><p>Cmd+Shift+3：全屏截图；截取整个屏幕，保存截图至桌面文件夹。</p>
<p>Cmd+Shift+4：区域截图；鼠标光标变成带坐标的小十字，通过拖拽截取特定区域，保存截图至桌面文件夹。</p>
<p>Cmd+Shift+4 – 单击空格键 – 鼠标单击指定窗口：窗口截图；出现小十字光标后对指定窗口按空格键，鼠标光标变成照相机，鼠标单击截取指定窗口，保存截图至桌面文件夹。</p>
<h3 id="二、进阶快捷键"><a href="#二、进阶快捷键" class="headerlink" title="二、进阶快捷键"></a>二、进阶快捷键</h3><p>Cmd+Shift+4 – 按住空格键拖动鼠标：区域截图；选取区域范围后，按住空格键并拖到鼠标可移动选取范围，释放按键后保存截图至桌面文件夹。</p>
<p>Cmd+Shift+4 – 按住Shift – 上下/左右移动鼠标：区域截图；选取区域范围后，按住 Shift 并上下/左右移动鼠标即可固定选取范围宽度/高度改变高度/宽度，释放按键后保存截图至桌面文件夹。</p>
<p>Cmd+Shift+4 – 按住Shift和Option: 区域截图；选取区域范围后，按住 Shift 和 Option 键在上一快捷键功能的基础上自由切换高度宽度，释放按键后保存截图至桌面文件夹。</p>
<p>Cmd+Shift+4 – 按住Option: 区域截图；选取区域范围后，按住 Option 键可按比例缩放选取范围，释放按键后保存截图至桌面文件夹。</p>
<p>PS：以上介绍的快捷键配合按住 Control 键即可将截图文件保存在剪切板，以供调用。</p>
<h3 id="三、利用终端截图"><a href="#三、利用终端截图" class="headerlink" title="三、利用终端截图"></a>三、利用终端截图</h3><p>还有比较 Geek 的方法就是通过终端（Terminal）命令来截图，终端截图命令 screencapture 有十多种参数可以选择，比如截图后立即显示、消除截图声音、延迟数秒后截图等。有兴趣的读者可以通过下面这条命令查看各个参数的具体使用方法。 screencapture -h</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Mac系统工具</tag>
      </tags>
  </entry>
  <entry>
    <title>php基础语法-常量、变量、数据类型</title>
    <url>/2015/20150821-1.html</url>
    <content><![CDATA[<h3 id="php的四种头文件"><a href="#php的四种头文件" class="headerlink" title="php的四种头文件"></a>php的四种头文件</h3><p>2种标准模式的头文件 </p>
<blockquote>
<p>&lt;?php  ?&gt;   </p>
</blockquote>
<script language="’php’"></script>

<p>短标签模式    &lt;?     ?&gt;   修改配置文件<code>short_open_tag=on</code></p>
<p>asp模式            &lt;%    %&gt;   修改配置文件<code>asp_tags=on</code></p>
<h3 id="php的基本语法"><a href="#php的基本语法" class="headerlink" title="php的基本语法"></a>php的基本语法</h3><ol>
<li>php每条语句结束时必须加上结束符;，除非是代码的最后一条语句，并且要有结束标签。</li>
<li>php在单独存在的时候，结束标签可以省略，但是，如果是和html混编在一起，并且结束时后面还有Html代码，则结束标签不能省略</li>
<li>php的输出。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo </span><br><span class="line">print</span><br><span class="line">var_dump    3个  类型，长度，值</span><br></pre></td></tr></table></figure>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>$变量名 = 变量值；<br>变量名是由字母，数字和下划线组成，但是数字不能开头，也可以是中文。<br>帕斯卡命名，驼峰命名，下划线命名。<br>删除：unset(), 删除的是变量名和变量的引用，保留了变量值。<br>值传递和引用传递：<br>$变量名1=$变量名2  复制的是值，两个变量是独立存在的，修改一个不影响另一个结果<br>$变量名1=&amp;$变量名2  复制的是变量的引用，两个变量同时指向一个变量值，修改一个变量，另一个也会发生变化。</p>
<p>九大超全局预定义数组变量</p>
<blockquote>
<p>$_GET  :  获取地址栏提交的数据<br>$_POST :   获取表单post提交的数据<br>$_REQUEST  :   既能获取get提交的数据也能获取post提交的数据<br>$_SERVER  :   获取服务器的信息<br>$_COOKIE  :   获取cookie存储的数据<br>$_FILE    :    获取文件信息<br>$_SESSION   :   获取session信息<br>$_ENV   :    在linux系统下获取的信息<br>$GLOBALS  :   设置一个超全局变量</p>
</blockquote>
<p>$_GET获取方式：</p>
<blockquote>
<p>表单提交<br><a>提交<br>js提交</a></p>
</blockquote>
<p>?:  分割域名和get提交数据<br>=： 下标和值的分割<br>&amp;： 获取的不同元素之间的分割。</p>
<p>$_POST获取方式：表单提交<br>$_POST的安全性能更高，<br>$_POST获取的大小更大<br>$_POST 可以获取各种数据类型<br>$_GET只能获取字符串。</p>
<p><code>$_REQUEST 理解成$_GET+$_POST</code></p>
<p>既可以获取get数据也可以获取post数据<br>默认情况下如果get和post提交的数据发生冲突，以post提交的数据为主。<br>修改方法：打开php.ini，搜索 request_order，将GP改成PG则以get数据为主</p>
<h3 id="常量："><a href="#常量：" class="headerlink" title="常量："></a>常量：</h3><p><code>define(“常量名”，‘常量值’，boolean)</code></p>
<p>常量名：如果直接输出，则必须是字母数字和下划线组成，中文也可以。<br>如果想输出特殊的函数，使用constant(‘常量名’)进行输出。</p>
<p>defined（‘常量名’）判断常量是否已经被定义。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">define(&quot;^_^&quot;, &quot;老的常量值&quot;);</span><br><span class="line">if (!defined(&quot;^_^&quot;)) &#123;</span><br><span class="line">	define(&quot;^_^&quot;, &quot;新的常量值&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">	echo &quot;常量已经定义：&quot;;</span><br><span class="line">&#125;</span><br><span class="line">echo constant(&quot;^_^&quot;);</span><br></pre></td></tr></table></figure>
<p>get_defined_constants（） 获取所有已经被定义过的常量<br>魔术常量：<br>披着常量外皮的变量。<br><strong>LINE</strong>    获取代码当前的行数<br><strong>FILE</strong>    获取文件所在的路径</p>
<p>const 常量名=值。</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p><strong>标量数据类型</strong><br>整型  int<br>浮点型  float<br>布尔型   boolean<br>字符串   string</p>
<p><strong>复合数据类型</strong><br>数组   array<br>对象     object</p>
<p><strong>特殊数据类型</strong><br>空型    null<br>资源    resource</p>
<p>整型<br>四个字节，32位，第一位为符号位  0为正  1为负<br>最大值  $$2^31-1    -2^31$$     如果超出最大值，则会变成浮点型。<br>PHP_INT_MAX 可以获取Int类型的最大值</p>
<p><strong>进制转换</strong><br>十进制 转其他进制使用除法<br>从下往上读取<br>其他进制转换成十进制使用乘法</p>
<p>2    ：    bin<br>8    ：    oct<br>10    ：    dec<br>16    ：    hex<br>二进制转换为十进制：<br>bindec(‘需要转换的数字’)<br>八进制转换为十进制：<br>octdec(‘需要转换的数字’)<br>十六进制转换成十进制：<br>hexdec(‘需要转换的数字’)<br>十进制转换为二，八，十六进制：<br>decbin();   decoct();    dechex();</p>
<p><strong>浮点型</strong><br>有效数字是14位<br>如果要表示一个有效数字超出14位的数字，使用科学记数法。<br>aEb  a<em>10^b<br>aE-b   a</em>10^-b<br>约（1.8E308）<br>浮点型的比较是不标准的。<br>浮点型的进制转换<br>十进制到二进制<br>乘法<br>从上往下读取。<br>绝大情况下获取的数字都是无限循环小数，所以，php只能取他的近似值。</p>
<p><strong>布尔型</strong><br>只有真和假，一般在条件判断中使用。<br>整型：值为零的情况下是false其他都是true<br>字符串：字符串0，和空的情况下，是false，其他都是true<br>其他数据类型：只有空的情况下，结果为false，其他都是true</p>
<p><strong>字符串</strong><br>单引号：若输出字符串使用单引号速度较快<br>双引号：会解析引号内的内容，如果包含的是变量会转换成结果<br>heredoc：</p>
<blockquote>
<p>语法<br>&lt;&lt;&lt;heredoc<br>…………………..<br>………<br>heredoc;</p>
</blockquote>
<p>nowdoc：</p>
<blockquote>
<p>语法<br>&lt;&lt;&lt;’heredoc’<br>…………….<br>…………<br>heredoc;</p>
</blockquote>
<p>注意：</p>
<blockquote>
<p>前后名称可以随意起但是必须要一致。<br>结束名称必须要在当前行的最左边。<br>结束名称后面必须要加;<br>heredoc可以解析php中的变量，但是nowdoc不能解析php中的变量。他俩的区别和单引号双引号的区别非常的相似<br>nowdoc是高版本php中才支持的语言</p>
</blockquote>
<p>/<em>php会将机器语言，存储在内存之中</em>/</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP核心编程</tag>
      </tags>
  </entry>
  <entry>
    <title>wamp 多站点配置</title>
    <url>/2015/20150820-1.html</url>
    <content><![CDATA[<blockquote>
<p>wamp<br>windows<br>a:apache<br>m:mysql<br>p:php</p>
</blockquote>
<h3 id="apache的安装"><a href="#apache的安装" class="headerlink" title="apache的安装"></a>apache的安装</h3><p>安装好了以后右下方会有一个小羽毛按钮。</p>
<p>测试，浏览器的地址栏上输入<code>127.0.0.1</code></p>
<p><strong>apache四种开启方式</strong></p>
<ul>
<li>左击小羽毛或者双击小羽毛<br>右击我的电脑，选择管理，再选择服务<br>cmd命令行的模式<br><code>httpd -k start</code></li>
</ul>
<blockquote>
<p>环境变量的设置，右击我的电脑，属性，高级系统设置，环境变量，选择path进行编辑。<br>httpd -t 检查apache是否可以正常运行</p>
</blockquote>
<p><strong>apache几个比较重要的文件夹</strong></p>
<ul>
<li>bin:里面都是一些apache可执行文件httpd.exe，apacheMonitor.exe<br>htdocs:默认站点，一般刚安装完apache以后，运行网页会放在htdocs中<br>conf:里面都是apache一些可以配置的文件<br>module：里面是apache的一些模块，加载的模块的功能就是apache的功能。</li>
</ul>
<h3 id="php的安装"><a href="#php的安装" class="headerlink" title="php的安装"></a>php的安装</h3><p>解压安装包就可以运行了。<br>打开cmd，输入php.exe -v 可以查看php的版本号<br>目前apache和php是两个独立的存在。<br>打开apache的配置文件。<br>所有加载模块都是 LoadModule 模块名 “路径”<br>加载完了以后，apache不知道后缀名是.php的文件交给php脚本处理器。</p>
<p>加载PHP模块<br><code>LoadModule php5_module &quot;C:/wamp/php/php5apache2_2.dll&quot;</code></p>
<p>引入php.ini配置文件<br><code>PHPIniDir &quot;C:/wamp/php&quot;</code></p>
<p><code>addtype application/x-httpd-php  .php</code><br>重启apache</p>
<p>代码中输入<code>phpinfo（）</code>可以查看php的所有信息。</p>
<p>方法一：<code>c:/windows，php.ini</code>复制到<code>c:/windows</code><br>方法二：打开apache的配置文件，输入PHPIniDir “路径”</p>
<p>Php的配置文件有两个，<code>php.ini-development</code>  <code>php.ini-product</code><br>一定要重命名php.ini</p>
<p>要给php设置时区。<br>打开php.ini 搜索<code>date.timezone = PRC</code></p>
<h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><p>mysql 是一个c/s结构，同时安装了客户端和服务器端。<br>配置mysql的配置文件，打开配置向导<br>配置完安装，有四个勾<br>打开cmd 输入<code>mysql.exe -uroot -proot</code><br>如果出现welcome界面代表大家安装成功</p>
<p><code>mysql_connect();</code><br>关联mysql和php<br>打开php的配置文件<br>extension，将php_mysql.dll的注释去掉<br><code>extension_dir=”路径”</code></p>
<p>打开apache的配置文件httpd.conf<br>站点：<code>documentRoot</code><br>允许加载：<code>allow from all</code><br>关于允许拒绝的顺序 <code>order</code><br>设置目录：<code>options indexes</code><br>设置首页: <code>directoryIndex 首页名称</code></p>
<p>配置虚拟主机<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;virtualHost *:80&gt;</span><br><span class="line">documentRoot 设置站点</span><br><span class="line">serverName 设置域名</span><br><span class="line">directoryIndex 站点</span><br><span class="line">&lt;directory “站点”&gt;</span><br><span class="line"></span><br><span class="line">&lt; /directory&gt;</span><br><span class="line">&lt;/virtualHost&gt;</span><br></pre></td></tr></table></figure></p>
<p>分布式部署</p>
<p><code>allowoverride all</code><br>分布式部署的文件夹 .htaccess<br>不能直接创建，需要通过编辑器去创建。</p>
<h1 id="虚拟站点配置"><a href="#虚拟站点配置" class="headerlink" title="虚拟站点配置"></a>虚拟站点配置</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">	# 配置管理员的邮箱，当服务器产生500错误（服务器内部错误）的时候会在错误页面上展示该邮箱</span><br><span class="line">	ServerAdmin hi@uiste.com</span><br><span class="line">	# 站点根目录</span><br><span class="line">	DocumentRoot &quot;E:\webdocs\sh06&quot;</span><br><span class="line">	# 站点所绑定的域名</span><br><span class="line">	ServerName www.uiste.com</span><br><span class="line">	# 站点配置别名（域名绑定的另一种形式）</span><br><span class="line">	ServerName uiste.com</span><br><span class="line">	# 错误日志，logs目录是指Apache目录下</span><br><span class="line">	ErrorLog &quot;logs/sh/error.log&quot;</span><br><span class="line">	# 正常访问日志，logs也是在Apache目录下，common是指日志记录规则</span><br><span class="line">	CustomLog &quot;logs/sh/access.log&quot; common</span><br><span class="line">	# 针对站点目录的详细配置</span><br><span class="line">	&lt;Directory &quot;E:\webdocs\sh06&quot;&gt;</span><br><span class="line">		allow from all</span><br><span class="line">		AllowOverride all</span><br><span class="line">		Options +indexes</span><br><span class="line">	&lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>
<p><code>cmd to hosts</code><br><code>127.0.0.1 www.sh06.com sh06.com</code></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP开发环境</tag>
      </tags>
  </entry>
  <entry>
    <title>js思想养成-光标定位</title>
    <url>/2015/20150818-1.html</url>
    <content><![CDATA[<h3 id="当鼠标划过文本框-自动选中文本框中的内容"><a href="#当鼠标划过文本框-自动选中文本框中的内容" class="headerlink" title="当鼠标划过文本框,自动选中文本框中的内容"></a>当鼠标划过文本框,自动选中文本框中的内容</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;form action=<span class="string">"a.php"</span> method=<span class="string">"post"</span> name=<span class="string">"login"</span> id=<span class="string">"form1"</span> onsubmit=<span class="string">"return checkName()"</span>&gt;</span><br><span class="line">	用户名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> id=<span class="string">"username"</span>/&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">	&lt;input type=<span class="string">"submit"</span> id=<span class="string">"btn"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">	&lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">	&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">	// 当鼠标划过文本 框,自动选中文本框中的内容</span></span><br><span class="line"><span class="string">	var obj = document.getElementById("</span>username<span class="string">");</span></span><br><span class="line"><span class="string">	obj.onmouseover = function()&#123;</span></span><br><span class="line"><span class="string">		this.select();</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">	// 表单验证不为空</span></span><br><span class="line"><span class="string">	function checkName()&#123;</span></span><br><span class="line"><span class="string">		if (obj.value != "</span><span class="string">") &#123;</span></span><br><span class="line"><span class="string">			return true;</span></span><br><span class="line"><span class="string">		&#125;else&#123;</span></span><br><span class="line"><span class="string">			return false;</span></span><br><span class="line"><span class="string">		&#125;</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">	&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="网页自动跳转so-easy"><a href="#网页自动跳转so-easy" class="headerlink" title="网页自动跳转so easy!!!"></a>网页自动跳转so easy!!!</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function gonewpage()&#123;</span><br><span class="line">	window.location.href = &quot;./new.html&quot;;</span><br><span class="line">&#125;</span><br><span class="line">setTimeout(&quot;gonewpage()&quot;,2000);</span><br></pre></td></tr></table></figure>
<h3 id="在弹出窗页面输入信息，返回到原始页面中"><a href="#在弹出窗页面输入信息，返回到原始页面中" class="headerlink" title="在弹出窗页面输入信息，返回到原始页面中"></a>在弹出窗页面输入信息，返回到原始页面中</h3><blockquote>
<p>一个网页,使得打开它时弹出一个全屏的窗口,该窗口中有一个文本框和一个按钮。<br><strong>主窗口</strong></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-cn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>主窗口<span class="tag">&lt;/<span class="name">title</span>&gt;</span>	</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 通过弹出窗口接受信息 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"a1"</span> <span class="attr">target</span>=<span class="string">"new"</span>&gt;</span>新窗口<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"msg"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> a1 = <span class="built_in">document</span>.getElementById(<span class="string">"a1"</span>);</span></span><br><span class="line"><span class="javascript">	a1.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">		<span class="built_in">window</span>.open(<span class="string">"new.html"</span>,<span class="string">"弹出窗口"</span>,<span class="string">"location=no,toolbar=no,menubar=no"</span>);</span></span><br><span class="line"><span class="javascript">		<span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>弹出窗口</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>弹出窗口<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"message"</span> <span class="attr">id</span>=<span class="string">"m1"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"关闭"</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">onclick</span>=<span class="string">"btn3()"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> message = <span class="built_in">document</span>.getElementById(<span class="string">"m1"</span>);</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> btn2 = <span class="built_in">document</span>.getElementById(<span class="string">"btn2"</span>);</span></span><br><span class="line"><span class="javascript">	<span class="function"><span class="keyword">function</span> <span class="title">btn3</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> form1 = <span class="built_in">window</span>.opener.document.getElementById(<span class="string">"msg"</span>);</span></span><br><span class="line">		form1.value = message.value;</span><br><span class="line"><span class="javascript">		<span class="built_in">window</span>.close();</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>js思想养成</tag>
      </tags>
  </entry>
  <entry>
    <title>js基础知识点</title>
    <url>/2015/20150817-2.html</url>
    <content><![CDATA[<h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>运算符优先级：<br>括号优先<br>逻辑与比逻辑或优先<br>赋值运算符最后</p>
<p>typeof(变量名) 输出变量数据类型</p>
<p>firebug 调试js代码，函数执行完成后会继续返回到调研的位置</p>
<p>在函数内部定义的变量为局部变量，局部变量取消前面的var 就默认为全局变量，全局变量在函数外部使用时，需要先调用函数；</p>
<p>函数可以先定义后调用，同时也可以先调用后定义；</p>
<p>arr.length  计算数组长度</p>
<p>isNaN(24)  判断是否不是一个数字,若为”23b”，则不是一个数字，返回ture</p>
<h3 id="数组对象"><a href="#数组对象" class="headerlink" title="数组对象"></a>数组对象</h3><p>var arrr = [23,24,25];<br>arr.concat(arr1,arr2) 使用concat连接数组或者在arr数组后面增加元素,组成的是新的数组</p>
<p>arr.join(“-“) 使用“-”连接数组的每一项 返回的结果是 23-24-25;如果以空字符串连接，返回的是字符串<br>pop(),删除数组的最后一项，并且返回被删除的元素；<br>push(),加入新的内容，并返回新的长度；<br>reverse():翻转数组的顺序；</p>
<h3 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h3><p>charAt(3) ,获取指定字符串下标的元素<br>charCodeAt(3),获取指定字符串下标元素的ASCCI值<br>indexOf(“d”),获取字符d在字符串中第一次出现的位置，若无法查找返回-1；<br>lastIndexOf(“d”),获取字符d在字符串中最后一次出现的位置，若无法查找返回-1；<br>split(“n”),将字符串以字符n进行分割，返回一个数组；<br>substr(n,m),截取字符串从n开始的m个元素，如果只有一个参数就截取到最后<br>substring(n,m),截取从下标为n的位置到m的位置；左开右闭区间；如果只有一个参数就截取到最后<br>toLowerCase():将字符串字母转换成小写形式返回，原有字符串大小写不变<br>toUpperCase():将字符串字母转换成大写形式返回，原有字符串大小写不变</p>
<blockquote>
<p>判断上传文件的思路：通过使用lastIndexOf(“.”)判断“.”最后出现的文字，再通过substr(n+1,4)截取文件格式后缀进行判断；为避免大小写问题可以通过toLowerCase()统一转换成小写进行判断</p>
</blockquote>
<h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><p>Math.pow(n,m):求n的m次方<br>Math.abs(n)：求n的绝对值<br>Math.round(n):求n的四舍五入值<br>Math.floor(n):求n的向下取整的值<br>Math.ceil(n):求n的向上取整的值<br>Math.random():求0-1的随机整数 ，左开右闭区间求10-20的整数Math.floor(Math.random()*10+10);<br>使用floor比用round公平，出现0的概率与出现1的概率相同；</p>
<h3 id="DaTe对象"><a href="#DaTe对象" class="headerlink" title="DaTe对象"></a>DaTe对象</h3><p>四种创建方式：<br>var n1 = new Date();<br>var n2 = new Date(“1991/11/5”);<br>var n3 = new Date(1991,11,5);显示12月<br>var n4 = new Date(233428408324);<br>toLocaleString():该方法以本地格式显示</p>
<p>getFullYear();获取年份<br>getMonth();获取月份<br>getDate();获取日期<br>getHours();获取小时<br>getMinutes();获取分钟<br>getSeconds();获取秒<br>getMilliSeconds();获取毫秒<br>getDay();获取星期<br>getTime();获取从1970到时间点的毫秒</p>
<h3 id="样式对象"><a href="#样式对象" class="headerlink" title="样式对象"></a>样式对象</h3><p>obj.style.background = “res”; 背景颜色变为红色<br>obj.style.fontSize = “60px”; 更改字体大小<br>innerHtml获取文档内容（带html标签）<br>innerText获取文本内容（去除HTML标签）</p>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>onfous:获得焦点<br>onblur:失去焦点<br>onsubmit：提交事件<br>onchange:当发生改变的时候<br>onreset：重置事件<br>onload 当页面加载完成立刻执行的事件<br>两种方式：</p>
<p><script> window.onload=init;</script></p>
<body onload="init()"></body>

<h3 id="Event事件信息对象"><a href="#Event事件信息对象" class="headerlink" title="Event事件信息对象"></a>Event事件信息对象</h3><p>Event:保存事件发生时的相关信息<br>Event.clientX:事件发生时的X的坐标（鼠标事件的对象）<br>var obj = Event.target:事件发生源（返回触发此事件的元素）<br>Event：必须通过参数形式传递给函数才可以使用</p>
<h3 id="cursor-光标"><a href="#cursor-光标" class="headerlink" title="cursor 光标"></a>cursor 光标</h3><p>cursor：crosshair;<br>cursor: help;<br>cursor：wait;</p>
<h3 id="错误调试"><a href="#错误调试" class="headerlink" title="错误调试"></a>错误调试</h3><p>try{运行错误代码}<br>catch(err){alert(err.message);}</p>
<h3 id="创建标签对象"><a href="#创建标签对象" class="headerlink" title="创建标签对象"></a>创建标签对象</h3><p>var obj = document.createElement(“标签名”) 通过createElement创建标签对象<br>document.body.appendChild(obj); 将标签对象增加到obj中</p>
<p>注意：body中由于margin边距原因可能导致事件不会被触发（小星星案例）</p>
<h3 id="按钮开关的切换方式"><a href="#按钮开关的切换方式" class="headerlink" title="按钮开关的切换方式"></a>按钮开关的切换方式</h3><p>方法一：通过if语句进行判断value值<br>方法二：通过记录点击的次数，默认开，如果是偶数就返回开，如果是奇数就返回关。注意定义记次变量需作为全局变量<br>方法三：定义一个flag 变量记录bool值，开为ture，关为false<br>方法四：通过this传递当前对象，判断当前对象的value值<br>this代表当前obj</p>
<h3 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h3><p>var n = prompt(“提示信息”,”默认值”);   //pppp就是可以输入信息的<br>confirm()选择确定和取消<br>open(“<a href="http://www.uiste.com&quot;,&quot;uiste博客&quot;,&quot;width=300,height=300,top=20,left=20&quot;" target="_blank" rel="noopener">www.uiste.com&quot;,&quot;uiste博客&quot;,&quot;width=300,height=300,top=20,left=20&quot;</a>) 打开一个新的窗口</p>
<h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p>一次性定时器：var time1 = windows.setTimeout(“js代码”,时间);<br>反复性定时器：var time2= window.setInterval(“js代码”,时间);<br>清楚定时器：window.clearTimeout(time1);</p>
<h3 id="图片轮播的思想"><a href="#图片轮播的思想" class="headerlink" title="图片轮播的思想"></a>图片轮播的思想</h3><blockquote>
<p>声明全局变量：背景图变换的序号i,用于清楚定时器的time；<br>第一步：初始化函数中加入一个交换背景图片的反复性定时器用于加载交换函数<br>第二步：图片自动播放联动按钮变化：在交换函数中通过for循环改变i的值，再通过元素样式对象属性进行切换图片；通过第二个循环，与第一循环的i值关联，用于联动按钮的背景样式<br>第三步：写一个stop函数当鼠标放置在img上清楚定时器，start函数鼠标离开时重新启动定时器(<strong>注意设置定时器名字</strong>)<br><code>（dsq=window.setInterval(&quot;change()&quot;,1000);）</code>重写一遍定时器<br>第五步：按钮点击联动图片自动切换：通过使用函数值传递，进行判断切换stopImg函数(<strong>注意i=n来控制图片切换避免鼠标离开时乱启动图片</strong>)<br><code>&lt;li id=&quot;d1&quot; onmousemove=&quot;stopImg(1,this)&quot; onmouseout=&quot;startImg(this)&quot;&gt;1&lt;/li&gt;</code></p>
</blockquote>
<h3 id="找对象的方法"><a href="#找对象的方法" class="headerlink" title="找对象的方法"></a>找对象的方法</h3><p>id:document.getElementById(“id名”)；<br>标签名：document.getElementsByTagName(“标签名”);//多个标签以数组形式保存<br>name:document.getElementsByName(“name名”);//数组<br>className:document.getElementsByClassName(“class名”);//数组<br>img:document.images;//数组<br>link对象：document.links;//获取连接对象，数组<br>表单对象：document.form;<br>body标签对象：document.body;<br>html标签对象：document.docuementElement;<br>事件信息对象：event;<br>当前对象：this;</p>
<h3 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h3><p>location.属性 返回当前页面的URL相关信息<br>location.方法()<br>assign加载新文档【跳转】<br>reload重新加载当前文档【刷新】<br>replace 用新文档替换当前文档【不会再history中生成新的记录】</p>
<h3 id="history-对象"><a href="#history-对象" class="headerlink" title="history 对象"></a>history 对象</h3><p>包含用户访问过的URL<br>属性：<br>length：返回历史记录中的URL数量<br>方法：<br>back():加载前一个页面<br>forward()：加载后一个页面<br>go(-3)：跳转到指定页面，后退几个页面就写数字几</p>
<h3 id="screen对象"><a href="#screen对象" class="headerlink" title="screen对象"></a>screen对象</h3><p>screen.height:获取屏幕的高度<br>screen.width:获取屏幕的宽度</p>
<h3 id="navigation对象"><a href="#navigation对象" class="headerlink" title="navigation对象"></a>navigation对象</h3><p>包含有关浏览器的相关信息<br>appName : 返回浏览器名称<br>appCodeName：返回浏览器代码名<br>appVersion:浏览器版本号和平台信息<br>userAgent:浏览器信息<br>浏览器判断<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var obj = navigator.userAgent;</span><br><span class="line">if(obj.indexOf(&quot;Firefox&quot;!=-1))&#123;</span><br><span class="line">	alert(&quot;火狐浏览器&quot;);</span><br><span class="line">&#125;else if (obj.indexOf(&quot;Chrome&quot;!=-1))&#123;</span><br><span class="line">	alert(&quot;谷歌浏览器&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">	alert(&quot;其它浏览器&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>图片轮播</title>
    <url>/2015/20150817-1.html</url>
    <content><![CDATA[<h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p><strong>一步一步来</strong></p>
<ul>
<li>图片切换</li>
<li>鼠标悬停</li>
<li>按钮跟踪</li>
<li>………………<h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight html"><figcaption><span>css javascript</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-cn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>轮播图片<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">	*&#123;</span><br><span class="line">		margin: 0;</span><br><span class="line">		padding: 0;</span><br><span class="line">	&#125;</span><br><span class="line">	div &#123;</span><br><span class="line">		margin:50px;</span><br><span class="line">		width: 470px;</span><br><span class="line">	&#125;</span><br><span class="line">	div ul&#123;</span><br><span class="line">		float: right;</span><br><span class="line">		margin-top:45px;</span><br><span class="line">	&#125;</span><br><span class="line">	div ul li&#123;</span><br><span class="line">		list-style:none;</span><br><span class="line">		width:30px;</span><br><span class="line">		height: 20px;</span><br><span class="line">		line-height: 20px;</span><br><span class="line">		text-align: center;</span><br><span class="line">		border: 1px solid orange;</span><br><span class="line">		margin-top:5px;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">		<span class="built_in">window</span>.onload = init;		</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> i =<span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> time;</span></span><br><span class="line"><span class="javascript">		<span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> obj = <span class="built_in">document</span>.getElementById(<span class="string">"d1"</span>);</span></span><br><span class="line"><span class="javascript">			<span class="comment">//解决第一背景颜色不变的情况</span></span></span><br><span class="line"><span class="javascript">			obj.style.background = <span class="string">"orange"</span>;</span></span><br><span class="line"><span class="javascript">			time = <span class="built_in">window</span>.setInterval(<span class="string">'change()'</span>,<span class="number">1000</span>);</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="javascript">		<span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">			i++;</span><br><span class="line">			if (i&gt;5) &#123;</span><br><span class="line">				i=1;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> obj = <span class="built_in">document</span>.getElementById(<span class="string">'img'</span>);</span></span><br><span class="line"><span class="javascript">			obj.src = <span class="string">"images/beijing_"</span> + i + <span class="string">".jpg"</span>;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> obj2 = <span class="built_in">document</span>.getElementById(<span class="string">"d"</span>+i);</span></span><br><span class="line"><span class="javascript">			obj2.style.background = <span class="string">"orange"</span>;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">1</span> ; j&lt;<span class="number">6</span>; j++)&#123;</span></span><br><span class="line">				if(j!=i)&#123;</span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> obj3 = <span class="built_in">document</span>.getElementById(<span class="string">"d"</span>+j);</span></span><br><span class="line"><span class="javascript">				obj3.style.background = <span class="string">"white"</span>;</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="javascript">		<span class="function"><span class="keyword">function</span> <span class="title">stop</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">			<span class="built_in">window</span>.clearInterval(time);</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="javascript">		<span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">			time = <span class="built_in">window</span>.setInterval(<span class="string">'change()'</span>,<span class="number">1000</span>);</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="javascript">		<span class="function"><span class="keyword">function</span> <span class="title">stopImg</span>(<span class="params">n,m</span>)</span>&#123;</span></span><br><span class="line">			i = n;</span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> obj = <span class="built_in">document</span>.getElementById(<span class="string">'img'</span>);</span></span><br><span class="line"><span class="javascript">			obj.src = <span class="string">"images/beijing_"</span> + i + <span class="string">".jpg"</span>;</span></span><br><span class="line"><span class="javascript">			<span class="built_in">window</span>.clearInterval(time);</span></span><br><span class="line"><span class="javascript">			m.style.background=<span class="string">"orange"</span>;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">1</span> ; j&lt;<span class="number">6</span>; j++)&#123;</span></span><br><span class="line">				if(j!=i)&#123;</span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> obj3 = <span class="built_in">document</span>.getElementById(<span class="string">"d"</span>+j);</span></span><br><span class="line"><span class="javascript">				obj3.style.background = <span class="string">"white"</span>;</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="javascript">		<span class="function"><span class="keyword">function</span> <span class="title">startImg</span>(<span class="params">m</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">			time = <span class="built_in">window</span>.setInterval(<span class="string">'change()'</span>,<span class="number">1000</span>);</span></span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/beijing_1.jpg"</span> <span class="attr">width</span>=<span class="string">"400"</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">onmousemove</span>=<span class="string">"stop()"</span> <span class="attr">onmouseout</span>=<span class="string">"start()"</span> <span class="attr">title</span>=<span class="string">"背景图1"</span> <span class="attr">alt</span>=<span class="string">"背景图1"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"d1"</span> <span class="attr">onmousemove</span>=<span class="string">"stopImg(1,this)"</span> <span class="attr">onmouseout</span>=<span class="string">"startImg(this)"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"d2"</span> <span class="attr">onmousemove</span>=<span class="string">"stopImg(2,this)"</span> <span class="attr">onmouseout</span>=<span class="string">"startImg(this)"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"d3"</span> <span class="attr">onmousemove</span>=<span class="string">"stopImg(3,this)"</span> <span class="attr">onmouseout</span>=<span class="string">"startImg(this)"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"d4"</span> <span class="attr">onmousemove</span>=<span class="string">"stopImg(4,this)"</span> <span class="attr">onmouseout</span>=<span class="string">"startImg(this)"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"d5"</span> <span class="attr">onmousemove</span>=<span class="string">"stopImg(5,this)"</span> <span class="attr">onmouseout</span>=<span class="string">"startImg(this)"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><blockquote>
<p>声明全局变量：背景图变换的序号i,用于清楚定时器的time；<br>第一步：初始化函数中加入一个交换背景图片的反复性定时器用于加载交换函数<br>第二步：图片自动播放联动按钮变化：在交换函数中通过for循环改变i的值，再通过元素样式对象属性进行切换图片；通过第二个循环，与第一循环的i值关联，用于联动按钮的背景样式<br>第三步：写一个stop函数当鼠标放置在img上清楚定时器，start函数鼠标离开时重新启动定时器(<strong>注意设置定时器名字</strong>)<br><code>（dsq=window.setInterval(&quot;change()&quot;,1000);）</code>重写一遍定时器<br>第五步：按钮点击联动图片自动切换：通过使用函数值传递，进行判断切换stopImg函数(<strong>注意i=n来控制图片切换避免鼠标离开时乱启动图片</strong>)<br><code>&lt;li id=&quot;d1&quot; onmousemove=&quot;stopImg(1,this)&quot; onmouseout=&quot;startImg(this)&quot;&gt;1&lt;/li&gt;</code></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js特效</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP弱类型安全问题总结</title>
    <url>/2015/20150815-1.html</url>
    <content><![CDATA[<blockquote>
<p>PHP特性就是弱类型，以及内置函数对于传入参数的松散处理<br>本篇文章主要就是记录PHP的弱类型所带来的问题。</p>
</blockquote>
<h1 id="PHP弱类型简介"><a href="#PHP弱类型简介" class="headerlink" title="PHP弱类型简介"></a>PHP弱类型简介</h1><p>在PHP中，可以进行一下的操作。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$param = 1;</span><br><span class="line">$param = array();</span><br><span class="line">$param = &quot;stringg&quot;;</span><br></pre></td></tr></table></figure></p>
<p>弱类型的语言对变量的数据类型没有限制，你可以在任何地时候将变量赋值给任意的其他类型的变量，同时变量也可以转换成任意地其他类型的数据。</p>
<h1 id="类型转换问题"><a href="#类型转换问题" class="headerlink" title="类型转换问题"></a>类型转换问题</h1><p>类型转换是无法避免的问题。例如需要将GET或者是POST的参数转换为int类型，或者是两个变量不匹配的时候，PHP会自动地进行变量转换。但是PHP是一个弱类型的语言，导致在进行类型转换的时候会存在很多意想不到的问题。</p>
<p>比较操作符<br>类型转换<br>在$a==$b的比较中<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a=null;$b=flase ; //true</span><br><span class="line">$a=&apos;&apos;;$b=null; //true</span><br></pre></td></tr></table></figure></p>
<p>这样的例子还有很多，这种比较都是相等。<br>使用比较操作符的时候也存在类型转换的问题，如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0==&apos;0&apos; //true</span><br><span class="line">0 == &apos;abcdefg&apos; //true</span><br><span class="line">0 === &apos;abcdefg&apos; //false</span><br><span class="line">1 == &apos;1abcdef&apos; //true</span><br></pre></td></tr></table></figure></p>
<p>当不同类型的变量进行比较的时候就会存在变量转换的问题，在转换之后就有可能会存在问题。</p>
<h1 id="Hash比较"><a href="#Hash比较" class="headerlink" title="Hash比较"></a>Hash比较</h1><p>除了以上的这种方式之外在进行hash比较的时候也会存在问题。如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;0e132456789&quot;==&quot;0e7124511451155&quot; //true</span><br><span class="line">&quot;0e123456abc&quot;==&quot;0e1dddada&quot; //false</span><br><span class="line">&quot;0e1abc&quot;==&quot;0&quot;     //true</span><br></pre></td></tr></table></figure></p>
<p>在进行比较运算时，如果遇到了0e\d+这种字符串，就会将这种字符串解析为科学计数法。所以上面例子中2个数的值都是0因而就相等了。如果不满足0e\d+这种模式就不会相等。这个题目在攻防平台中的md5 collision就有考到。</p>
<h1 id="十六进制转换"><a href="#十六进制转换" class="headerlink" title="十六进制转换"></a>十六进制转换</h1><p>还存在一种十六进制余字符串进行比较运算时的问题。例子如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;0x1e240&quot;==&quot;123456&quot; //true</span><br><span class="line">&quot;0x1e240&quot;==123456 //true</span><br><span class="line">&quot;0x1e240&quot;==&quot;1e240&quot; //false</span><br></pre></td></tr></table></figure></p>
<p>当其中的一个字符串是0x开头的时候，PHP会将此字符串解析成为十进制然后再进行比较，0×1240解析成为十进制就是123456，所以与int类型和string类型的123456比较都是相等。攻防平台中的起名字真难就是考察的这个特性。</p>
<h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><p>常见的转换主要就是int转换为string，string转换为int。</p>
<p>int转string：<br><code>$var = 5;</code><br>方式1：$item = (string)$var;</p>
<p>方式2：$item = strval($var);</p>
<p>string转int：intval()函数。</p>
<p>对于这个函数，可以先看2个例子。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump(intval(&apos;2&apos;)) //2</span><br><span class="line">var_dump(intval(&apos;3abcd&apos;)) //3</span><br><span class="line">var_dump(intval(&apos;abcd&apos;)) //0</span><br></pre></td></tr></table></figure></p>
<p>说明intval()转换的时候，会将从字符串的开始进行转换知道遇到一个非数字的字符。即使出现无法转换的字符串，intval()不会报错而是返回0。<br>intval()的这种特性在攻防平台中的MYSQL这道题目中就有考到。<br>同时，程序员在编程的时候也不应该使用如下的这段代码：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(intval($a)&gt;1000) &#123;</span><br><span class="line">    mysql_query(&quot;select * from news where id=&quot;.$a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这个时候$a的值有可能是1002 union…..</p>
<h1 id="内置函数的参数的松散性"><a href="#内置函数的参数的松散性" class="headerlink" title="内置函数的参数的松散性"></a>内置函数的参数的松散性</h1><p>内置函数的松散性说的是，调用函数时给函数传递函数无法接受的参数类型。解释起来有点拗口，还是直接通过实际的例子来说明问题，下面会重点介绍几个这种函数。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">md5()</span><br><span class="line">$array1[] = array(</span><br><span class="line">    &quot;foo&quot; =&gt; &quot;bar&quot;,</span><br><span class="line">    &quot;bar&quot; =&gt; &quot;foo&quot;,</span><br><span class="line">);</span><br><span class="line">$array2 = array(&quot;foo&quot;, &quot;bar&quot;, &quot;hello&quot;, &quot;world&quot;);</span><br><span class="line">var_dump(md5($array1)==var_dump($array2)); //true</span><br></pre></td></tr></table></figure></p>
<p>PHP手册中的md5()函数的描述是string md5 ( string $str [, bool $raw_output = false ] )，md5()中的需要是一个string类型的参数。但是当你传递一个array时，md5()不会报错，知识会无法正确地求出array的md5值，这样就会导致任意2个array的md5值都会相等。这个md5()的特性在攻防平台中的bypass again同样有考到。</p>
<p>strcmp()</p>
<p>strcmp()函数在PHP官方手册中的描述是int strcmp ( string $str1 , string $str2 ),需要给strcmp()传递2个string类型的参数。如果str1小于str2,返回-1，相等返回0，否则返回1。strcmp函数比较字符串的本质是将两个变量转换为ascii，然后进行减法运算，然后根据运算结果来决定返回值。</p>
<p>如果传入给出strcmp()的参数是数字呢？<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$array=[1,2,3];</span><br><span class="line">var_dump(strcmp($array,&apos;123&apos;)); //null,在某种意义上null也就是相当于false。</span><br></pre></td></tr></table></figure></p>
<p>strcmp这种特性在攻防平台中的pass check有考到。</p>
<p>switch()</p>
<p>如果switch是数字类型的case的判断时，switch会将其中的参数转换为int类型。如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$i =&quot;2abc&quot;;</span><br><span class="line">switch ($i) &#123;</span><br><span class="line">case 0:</span><br><span class="line">case 1:</span><br><span class="line">case 2:</span><br><span class="line">    echo &quot;i is less than 3 but not negative&quot;;</span><br><span class="line">    break;</span><br><span class="line">case 3:</span><br><span class="line">    echo &quot;i is 3&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这个时候程序输出的是i is less than 3 but not negative，是由于switch()函数将$i进行了类型转换，转换结果为2。</p>
<p>in_array()</p>
<p>在PHP手册中，in_array()函数的解释是bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] ),如果strict参数没有提供，那么in_array就会使用松散比较来判断$needle是否在$haystack中。当strince的值为true时，in_array()会比较needls的类型和haystack中的类型是否相同。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$array=[0,1,2,&apos;3&apos;];</span><br><span class="line">var_dump(in_array(&apos;abc&apos;, $array));  //true</span><br><span class="line">var_dump(in_array(&apos;1bc&apos;, $array)); //true</span><br></pre></td></tr></table></figure></p>
<p>可以看到上面的情况返回的都是true,因为’abc’会转换为0，’1bc’转换为1。<br>array_search()与in_array()也是一样的问题。</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP安全问题</tag>
      </tags>
  </entry>
  <entry>
    <title>margin：0 auto 不能居中</title>
    <url>/2015/20150812-1.html</url>
    <content><![CDATA[<p>既然用了 position:absolute, margin 也就不再对元素的位置产生影响了。<br>办法很多:</p>
<ul>
<li>如果ul宽度是固定的话（已知数量的li以及图片长度），可以用 left: calc(100% - <em>ul 宽度的一半</em>)。</li>
<li>又或者，把 Position: absolute 等使元素沉底的 styles 放置到外一层的div当中。将 ul 设为 text-align: center，li 设为 display:inline-block 来居中图片元素。</li>
</ul>
<blockquote>
<p>作者：Eastenluis<br>链接：<a href="http://www.zhihu.com/question/23861520/answer/25936737" target="_blank" rel="noopener">http://www.zhihu.com/question/23861520/answer/25936737</a><br>来源：知乎<br>著作权归作者所有，转载请联系作者获得授权。</p>
</blockquote>
<hr>
<p>因为有position:absolute<br>一种可以参考的方法是套两层，外面一层margin-left:50%，里面margin-left:-50%<br>另一种是外面一层width:100%，里面再margin:0 auto;display:table</p>
<p>就算没有position:absolute，要是不明确设宽的话也需要display:table或者其它方法</p>
<blockquote>
<p>作者：于航<br>链接：<a href="http://www.zhihu.com/question/23861520/answer/25893095" target="_blank" rel="noopener">http://www.zhihu.com/question/23861520/answer/25893095</a><br>来源：知乎<br>著作权归作者所有，转载请联系作者获得授权。</p>
</blockquote>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>冒泡，选择，插入，快速</title>
    <url>/2015/20150807-1.html</url>
    <content><![CDATA[<p>冒泡，选择，插入，快速，四种常用的排序方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"zh-cn"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">	&lt;title&gt;冒泡排序法&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span><span class="params">($arr)</span></span>&#123;</span><br><span class="line">	<span class="comment">//利用双重循环完成</span></span><br><span class="line">	<span class="comment">//外层循环控制 比较的轮数，每轮会将一个最大的气泡（数）浮到水面</span></span><br><span class="line">	<span class="comment">//如果数组的元素个数为N 则需要N-1轮完成</span></span><br><span class="line">		<span class="keyword">for</span> ($i=<span class="number">0</span>,$len = count($arr); $i &lt; $len<span class="number">-1</span>; $i++) &#123; </span><br><span class="line">			<span class="comment">//内层循环控制 的比较的次数，</span></span><br><span class="line">			<span class="comment">////第一轮需要比较 N-1次</span></span><br><span class="line">			<span class="comment">//第二轮需要比较 N-2次</span></span><br><span class="line">			<span class="keyword">for</span> ($j=<span class="number">0</span>; $j &lt; $len<span class="number">-1</span>-$i; $j++) &#123; </span><br><span class="line">				<span class="keyword">if</span> ($arr[$j]&gt;$arr[$j+<span class="number">1</span>]) &#123;</span><br><span class="line">					$temp = $arr[$j];</span><br><span class="line">					$arr[$j]=$arr[$j+<span class="number">1</span>];</span><br><span class="line">					$arr[$j+<span class="number">1</span>]=$temp;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> $arr;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">selectSort</span><span class="params">($arr)</span></span>&#123;</span><br><span class="line">		<span class="comment">//实现思路</span></span><br><span class="line">		<span class="comment">//双重循环完成，外层控制轮数，当前的最小值。</span></span><br><span class="line">		<span class="comment">//内层 控制的比较次数</span></span><br><span class="line">		<span class="comment">//$i 当前最小值的位置， 需要参与比较的元素</span></span><br><span class="line">		<span class="keyword">for</span> ($i=<span class="number">0</span>,$len=count($arr); $i &lt; $len<span class="number">-1</span>; $i++) &#123; </span><br><span class="line">			$p=$i;</span><br><span class="line">			<span class="keyword">for</span> ($j=$i+<span class="number">1</span>; $j &lt; $len; $j++) &#123; </span><br><span class="line">				<span class="keyword">if</span>($arr[$j]&lt;$arr[$p])&#123;</span><br><span class="line">					$p=$j;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> ($p!=$i) &#123;</span><br><span class="line">				$temp = $arr[$i];</span><br><span class="line">				$arr[$i]=$arr[$p];</span><br><span class="line">				$arr[$p]=$temp;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> $arr;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">insertSort</span><span class="params">($arr)</span></span>&#123;</span><br><span class="line">		<span class="comment">//利用双重循环，外层控制要进行插入判断的数</span></span><br><span class="line">		<span class="comment">//内层是已经排好的数与外层的数进行比较交换</span></span><br><span class="line">		<span class="keyword">for</span> ($i=<span class="number">1</span>,$len=count($arr); $i &lt; $len; $i++) &#123; </span><br><span class="line">			$temp=$arr[$i];</span><br><span class="line">			<span class="keyword">for</span> ($j=$i<span class="number">-1</span>; $j &gt;= <span class="number">0</span>; $j--) &#123; </span><br><span class="line">				<span class="keyword">if</span> ($temp&lt;$arr[$j]) &#123;</span><br><span class="line">					$arr[$j+<span class="number">1</span>]=$arr[$j];</span><br><span class="line">					$arr[$j]=$temp;</span><br><span class="line">				&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> $arr;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*快速排序</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> array $arr 需要排序的数组</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> array 排序好的数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick_sort</span><span class="params">($arr)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//先判断是否需要继续进行</span></span><br><span class="line">    $length = count($arr);</span><br><span class="line">    <span class="keyword">if</span>($length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> $arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果没有返回，说明数组内的元素个数 多余1个，需要排序</span></span><br><span class="line">    <span class="comment">//选择一个标尺</span></span><br><span class="line">    <span class="comment">//选择第一个元素</span></span><br><span class="line">    $base_num = $arr[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//遍历 除了标尺外的所有元素，按照大小关系放入两个数组内</span></span><br><span class="line">    <span class="comment">//初始化两个数组</span></span><br><span class="line">    $left_array = <span class="keyword">array</span>();<span class="comment">//小于标尺的</span></span><br><span class="line">    $right_array = <span class="keyword">array</span>();<span class="comment">//大于标尺的</span></span><br><span class="line">    <span class="keyword">for</span>($i=<span class="number">1</span>; $i&lt;$length; $i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>($base_num &gt; $arr[$i]) &#123;</span><br><span class="line">            <span class="comment">//放入左边数组</span></span><br><span class="line">            $left_array[] = $arr[$i];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//放入右边</span></span><br><span class="line">            $right_array[] = $arr[$i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//再分别对 左边 和 右边的数组进行相同的排序处理方式</span></span><br><span class="line">    <span class="comment">//递归调用这个函数,并记录结果</span></span><br><span class="line">    $left_array = quick_sort($left_array);</span><br><span class="line">    $right_array = quick_sort($right_array);</span><br><span class="line">    <span class="comment">//合并左边 标尺 右边</span></span><br><span class="line">    <span class="keyword">return</span> array_merge($left_array, <span class="keyword">array</span>($base_num), $right_array);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">	$myarr=<span class="keyword">array</span>(<span class="number">23</span>,<span class="number">45</span>,<span class="number">64</span>,<span class="number">21</span>,<span class="number">5</span>,<span class="number">75</span>);</span><br><span class="line">	print_r(bubbleSort($myarr));</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">	print_r(selectSort($myarr));</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">	print_r(insertSort($myarr));</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">	print_r(quick_sort($myarr));</span><br><span class="line"></span><br><span class="line"> <span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>PHP</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>得与失</title>
    <url>/2015/20150805-1.html</url>
    <content><![CDATA[<h4 id="说服自己"><a href="#说服自己" class="headerlink" title="说服自己"></a>说服自己</h4><p>最近一直在思考，放弃是会得到更多，还是失去的更少</p>
<p>其实，内心坚定的我已经将第一句扭曲了</p>
<p>不论结果如何，自己认定的，自己去承担</p>
<p>认定不是盲目的跟随，是分析过现有状态的优势</p>
<p>亦分析过新决策的弊端，究竟优有多优，弊有多弊</p>
<p>心里清晰，，，</p>
<p>不装B了，记录这段话只是为了说服自己，</p>
<p>很感谢，今日领导的挽留，即成为我将来没事儿吹牛炫耀的话题了</p>
<h4 id="喝碗鸡汤"><a href="#喝碗鸡汤" class="headerlink" title="喝碗鸡汤"></a>喝碗鸡汤</h4><hr>
<p>人生一世，草木一秋， 努力去做一个不计较得失的人吧！淡然于心，从容于表，优雅自在地生活。 咀嚼平淡如水的日子，领略四季起伏的风景，走着属于自己的人生之路 。学会在得失中找回自我，舍得下，放得开，便自然是春风得意，月明清高。</p>
<a id="more"></a>
<hr>
<h4 id="简单总结一下策划工作体会"><a href="#简单总结一下策划工作体会" class="headerlink" title="简单总结一下策划工作体会"></a>简单总结一下策划工作体会</h4><p><code>个人感悟，职场鸡汤，没有逻辑亦没有案例，信则有，不信则无</code></p>
<h5 id="最牛策划人小组竞选通过"><a href="#最牛策划人小组竞选通过" class="headerlink" title="最牛策划人小组竞选通过"></a>最牛策划人小组竞选通过</h5><p>本来不爱吹牛的我，开头这里还是要提一下；天性对于做事的方法就有思想，加之执行力强（效率有待提升），在做了充足的准备；充分洞悉老板的内心，因而通过了老板的法眼，成功从竞选小组脱颖而出。</p>
<blockquote>
<p>自以为老板的内心如下：<br>第一：喜欢以团队为核心的员工，所以你不要试图在老板面前争风头，即使内容全是你做的，亦要将成果分享队友，因为真正谁承担了多少，老板心里清楚<br>第二：有想法就去行动，因为空想者太多了，竞技项目领导打分的唯一标准是可实现度，及项目所做的深度<br>第三：最好做事能有逻辑，能有几个点是独特的，能打动到老板的内心，这就要洞悉他真正的需求，及你与他人的差异化的点<br>第四：做好充分的准备，再不擅长演讲的人，就像我，有自己的想法后，将讲稿改几十遍背几百遍，能将思想讲述清楚，剩下的就是听天由命了<br>第五：补充一点，如果可以事先准备几个问题的答案，或者能故意预留几个点准备好答案，等待提问。那样可能效果更佳，因为既然你这样做了，起码自己认定是正确，这里不是玩心计，是通过方法去说服别人，认定你的想法</p>
</blockquote>
<h5 id="策划工作-概念、设计、优化、量产"><a href="#策划工作-概念、设计、优化、量产" class="headerlink" title="策划工作-概念、设计、优化、量产"></a>策划工作-概念、设计、优化、量产</h5><p><code>没有收集资料，想到什么就先记录什么了，以后有补充，另行记录</code></p>
<p><strong>定位</strong></p>
<p>为什么要做这个产品，是为了通过产品本身盈利，还是通过产品周边盈利，亦或者做高端占位，提升品牌形象？</p>
<p>纯创新性的产品也没有做过，常规性的产品一般都是看行业动态，在结合品牌与产品匹配，分析竞争对手：价格段分析，品牌分析，品项属性配置分析，这些分析都是后续进一步工作的基数，不得结果；</p>
<p>目标受众人群：按场景使用需求划分，比按财富值划分重合度更低，可有效避免重复数据对定位人群的结果影响</p>
<p><strong>概念</strong></p>
<p>初次概念：概念只做0-1，不做1-N，因为1-N基本不用看这里的内容，那是有了0-1的过程后的扩展</p>
<p>趋势分析：好产品为什么好，价格原因、品牌原因、功能配置？不好的产品又为什么不好，一定要清楚不好的产品，只看好产品，会导致，决策的武断做了类似于本来就不好的产品，那样结果可想而知<br>趋势分析，应该是用户想要的，而不是需要的，其实这个道理也很简单，需要的可以买亦可以不买，不买通过其他方案解决需求；而想要的，是用感性战胜了理智，所以可能你在某个点打动了他，他会不经过大脑而买了这个产品，似乎有点阴险，但客户买了，就是因为其喜欢，他甚至不会去使用，将其作为收藏品，但就是想要，所以两全其美</p>
<p>使用地图：原则，不要考虑技术实现，不要考虑制造成本，一定要发散思维，且需要有想法的小团体去完成这个事；从使用场景的第一步入手，你发现了生活中的一个痛点，你想到通过一个东西去解决这个问题，可能想到自己创造什么样的解决方案，当然这个基本不用考虑，因为你做个思考是要通过一个产品，一个东西去解决这个痛点；所以你需要买一个东西，你会想到从什么样的渠道购买，这个可能就是未来的重点销售渠道；你会想到我买到这个产品，产品到我手里是什么样子的，这里可能涉及配送，搬用的方式；你会想到我开封后希望有个什么样的面貌，这里涉及到产品的包装形态；你会想到第一次安装使用，你会想到产品使用的一切的一切，尽量全面，记录这些想法，这才能深入挖掘到产品使用场景的痛点，产品的体验，甚至于产品的售后，当然这里是产品的概念定义，重点是产品的概念，千万不要由于全面，反而没有重点，跑偏了。</p>
<p>技术突破：依托技术储备，积木式的拼接，可能这将带来颠覆性的体验，在这里不是重点，梦想太大了，需要承载的更多，看这里可能会跑偏，回归正题，技术突破，是用来补充产品概念的</p>
<p>补充一个九宫格： 横轴：过去、现在、将来， 纵轴：父类、本体、子类；这里面有点深奥，有机会再详细研究下</p>
<p><strong>研究计划</strong></p>
<p>分析：成本，性价比 QFD工具<br>观察：痛点，概念</p>
<p>访谈：一般都是田野工作不建议，访谈四段式：情景，过去，现在，将来；这里面的一个核心思想就是验证问题的错误，只有验证不了问题的错误，才能说明问题的正确，如果本来你是认为，你的问题正确存在，带有这样的倾向性，基本不会发现准确真实的用户需求。借按钮增加与否的调研，现在回想起来，就不应该给用户看产品，再去介绍产品的定义，可以和他们聊未来，似乎可以这样做；<br>录音，转意；拍视频、照片；样本展示；</p>
<p>目标用户：<br>发烧友：提出问题甚至有解决方案，亦能提供发展趋势的建议<br>重度用户：提痛点需求<br>极端用户：特殊产品的需求<br>早期用户：</p>
<p>以上，鉴定概念真伪，筛选概念；以敏锐的眼光与定位，抓取核心概念</p>
<p>确定最佳概念<br>扩大访谈，（定量阶段）<br>调研核心思想：<code>定性调研找问题，定量调研找共性</code>。不管是哪个过程，千万别引到用户去选你想要的答案，尽可能开放性，另外一定要做好充足的准备，调研的核心问题，问题的具体描述，调研过程的录音、拍照取证。转意最好能在调研结束的当日内完成。</p>
<p>（行业趋势、市场容量、品牌占比、TOP品项）</p>
<p>累了，困了，没思绪了先睡了<br>date: 2015-08-06 01:05:20</p>
<hr>
<h5 id="策划工作-项目管理"><a href="#策划工作-项目管理" class="headerlink" title="策划工作-项目管理"></a>策划工作-项目管理</h5><p><strong>全面思考的思想</strong><br>本人最不喜欢，也最不擅长的，同时也是未来可提升的最大一块；即使他是一个很努力的工程师，也不可能和你的思想一致，所以沟通协调中，难免出现分歧，矛盾可能不知不觉中产生了。这是沟通的艺术，需要加紧强化了；粗浅的认为，讲话的时候尽量不要有盛气凌人的态度，好好说话（可以听听马东的好好说话了）。不扯了，进入正题</p>
<p>先从产品变更开始吧，收到产品变更需求，站在产品策划的角度，可不是单纯的将任务需求下发出去。还是之前那句话，多部门协调工作，必然出现扯后腿的人。所以你要尽可能的将问题考虑全面。不管有没有启动会，你都要考虑以下问题：</p>
<blockquote>
<p>项目里程碑：要考虑设计师、研发工程师的项目时间安排，确认项目里程碑的合理性<br>切换时间周期：要考虑变更过程涉及到老物料的库存及供应商库存的切换，去除公有物料的专用物料可能是老产品自然切换的最多生产量（当然成本太少的可综合评估报废处理），依据常规消耗量，规定切换的时间周期，再定期去检讨；<br>关键人员安排：变更过程一定要和采购、生管、订单、市场、沟通好；市场认定你的变更是第一步，当然一般情况下，这些需要本身就是来源于市场，然后市场要根据新规格的变更产品做出来至少一个季度的需求量，到订单中心；这样由订单中心到生管的客户需求量就是正确的，生管排计划时，会根据切换的产品将新产品排进去，物控到采购的物料也是最新的。<br>规范产前流程：产品规格调整会涉及品质入库检核，所以变更项目需有试产安排，当然这个本来应该是必须的，但本企业还没有固化下来，所以只能去推动了，试产做相关的品质验证，通过后要交由领导对产品进行封样确认，避免入库前的忙乱</p>
</blockquote>
<p>没什么技术含量，就是多动脑，勤思考，所以不浪费时间记这些东东了<br>date: 2015-08-06 10:15:53</p>
<h5 id="策划工作-产品管理"><a href="#策划工作-产品管理" class="headerlink" title="策划工作-产品管理"></a>策划工作-产品管理</h5><p>改善产品，功能迭代</p>
]]></content>
      <tags>
        <tag>产品经理</tag>
      </tags>
  </entry>
  <entry>
    <title>sublime</title>
    <url>/2015/20150801-1.html</url>
    <content><![CDATA[<ul>
<li>alt+command+2  左右分2屏</li>
<li>ctrl+shift+k 快速删除整行</li>
<li>Ctrl+command+⬆️    上下行交换</li>
<li>ctrl+K         从光标位置，删除代码至行尾</li>
<li>command + P </li>
<li>@</li>
<li><p>js</p>
</li>
<li><p>command + D  多次输入</p>
</li>
<li>command + K</li>
<li><p>alt + F3  多选</p>
</li>
<li><p>command + enter</p>
</li>
<li><p>command + shift + enter</p>
</li>
<li><p>command + H</p>
</li>
<li><p>command + A</p>
</li>
<li><p>command + shift + L</p>
</li>
<li><p>shift + 鼠标右键 + 向下移动</p>
</li>
<li><p>ul&gt;.item$*10</p>
</li>
<li><p>h2{内容}</p>
</li>
<li><p>command + shift + V  带缩进粘贴</p>
</li>
</ul>
<p><a href="http://www.jianshu.com/p/3cb5c6f2421c" title="玩转Sublime" target="_blank" rel="noopener">资源收集</a></p>
]]></content>
      <tags>
        <tag>sublime</tag>
      </tags>
  </entry>
  <entry>
    <title>github 常用命令</title>
    <url>/2015/20150731-2.html</url>
    <content><![CDATA[<h4 id="使用git在本地创建一个项目的过程"><a href="#使用git在本地创建一个项目的过程" class="headerlink" title="使用git在本地创建一个项目的过程"></a>使用git在本地创建一个项目的过程</h4><p>:q 退出编辑页面</p>
<h5 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ makdir test    //创建一个项目test</span><br><span class="line">$ cd test/       //打开这个项目</span><br><span class="line">$ git clone https://github.com/uiste/test.git   //检出项目到本地</span><br><span class="line">$ ls             //即list显示当前目录中的文件名字</span><br><span class="line">$ vi README.md   //打开文件，进入编辑状态;编辑完成后 :wq 保存退出</span><br><span class="line">$ git init       //初始化</span><br><span class="line">$ touch README	 //创建README文件</span><br><span class="line">$ git status     //查看工作区状态，是否有为跟踪文件</span><br><span class="line">$ git add README //更新README文件</span><br><span class="line">$ git commit -m ‘记录修改内容’   //提交更新，并注释信息“first commit”</span><br><span class="line">$ git remote add Hexo https://github.com/uiste/Hexo.git   //连接远程github项目</span><br><span class="line">$ git push -u Hexo master   //将本地项目更新到github项目上去</span><br></pre></td></tr></table></figure>
<h5 id="回到过去"><a href="#回到过去" class="headerlink" title="回到过去"></a>回到过去</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git log  //查看提交日志，找到对应记录的修改文件，复制commit 指针</span><br><span class="line">$ git reflog //查询具体的版本号，最前面即为commit ID号</span><br><span class="line">$ git reset --hard 0ce6fd2	//恢复到以前版本</span><br></pre></td></tr></table></figure>
<h5 id="建立里程碑"><a href="#建立里程碑" class="headerlink" title="建立里程碑"></a>建立里程碑</h5><blockquote>
<p>在github上打开项目首页<br>release菜单-&gt;Draft a new release<br>版本号 @ Target:master -&gt;Write 记录项目信息<br>Publish release 发布里程碑</p>
</blockquote>
<h5 id="分支开发"><a href="#分支开发" class="headerlink" title="分支开发"></a>分支开发</h5><blockquote>
<p>在github客户端操作<br>创建新分支：项目文件名 -&gt; Manage -&gt; 右侧Unpbulish -&gt; Branch 建立分支名为BUG<br>在新分支中：修改项目文件内容 -&gt; Commit to BUG 提交修改内容到BUG分支<br>合并分支内容：项目文件名 -&gt; Manage -&gt; BUG 移动到左侧Merge ，master移动到右侧Merge -&gt; 点击Merge</p>
</blockquote>
<a id="more"></a>
<p><strong>以下是互联网摘取信息</strong></p>
<h4 id="最基本的命令："><a href="#最基本的命令：" class="headerlink" title="最基本的命令："></a>最基本的命令：</h4><p>拷贝并跟踪远程的master分支。跟踪的好处是以后可以直接通过pull和push命令来提交或者获取远程最新的代码，而不需要指定远程分支名字。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone </span><br><span class="line"></span><br><span class="line">git submodule init</span><br><span class="line"></span><br><span class="line">git submodule update</span><br></pre></td></tr></table></figure>
<h4 id="显示信息类命令"><a href="#显示信息类命令" class="headerlink" title="显示信息类命令"></a>显示信息类命令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git ls-files -u 显示冲突的文件，-s是显示标记为冲突已解决的文件</span><br><span class="line"></span><br><span class="line">git diff 对比工作区和stage文件的差异 </span><br><span class="line">git diff --cached 对比stage和branch之间的差异</span><br><span class="line"></span><br><span class="line">git branch 列出当前repository下的所有branch </span><br><span class="line">git branch --a 列出local 和remote下的所有branch</span><br><span class="line"></span><br><span class="line">git ls-files --stage 检查保存在stage的文件</span><br><span class="line"></span><br><span class="line">git log 显示到HEAD所指向的commit为止的所有commit记录 。使用reset HEAD~n 命令使HEAD指针向前移动，会导致HEAD之后的commit记录不会被显示。</span><br><span class="line"></span><br><span class="line">git log -g则会查询reflog去查看最近做了哪些动作，这样可以配合git branch 恢复之前因为移动HEAD指针所丢弃的commit对象。如果reflog丢失则可以通过git fsck --full来查看没被引用的commit对象。 </span><br><span class="line">git log -p -2 对比最新两次的commit对象 </span><br><span class="line">log -1 HEAD</span><br><span class="line"></span><br><span class="line">git log --pretty=oneline</span><br><span class="line"></span><br><span class="line">git log --stat 1a410e 查看sha1为1a410e的commit对象的记录</span><br><span class="line"></span><br><span class="line">git blame -L 12,22 sth.cs 如果你发现自己代码中 的一个方法存在缺陷,你可以用git blame来标注文件,查看那个方法的每一行分别是由谁 在哪一天修改的。下面这个例子使用了-L选项来限制输出范围在第12至22行</span><br></pre></td></tr></table></figure>
<h4 id="创建类命令"><a href="#创建类命令" class="headerlink" title="创建类命令"></a>创建类命令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git brach branchName 创建名为branchName的branch </span><br><span class="line">git checkout branchName 切换到branchName的branch </span><br><span class="line">git checkout -b 创建并切换，也就是上面两个命令的合并</span><br><span class="line"></span><br><span class="line">git brach branchName ef71 从commit ef71创建名为branchName的branch</span><br></pre></td></tr></table></figure>
<h4 id="撤销类命令"><a href="#撤销类命令" class="headerlink" title="撤销类命令"></a>撤销类命令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果是单个文件 </span><br><span class="line">1.use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage </span><br><span class="line">如果已经用add 命令把文件加入stage了，就先需要从stage中撤销</span><br><span class="line"></span><br><span class="line">然后再从工作区撤销 </span><br><span class="line">2.use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory</span><br><span class="line"></span><br><span class="line">git checkout a.txt  撤销a.txt的变动（工作区上的文件） </span><br><span class="line">如果是多个文件 </span><br><span class="line">git chenkout .</span><br><span class="line"></span><br><span class="line">如果已经commit 了，则需要 </span><br><span class="line">git commit --amend 来修改，这个只能修改最近上一次的,也就是用一个新的提交来覆盖上一次的提交。因此如果push以后再做这个动作就会有危险</span><br><span class="line"></span><br><span class="line">$ git reset --hard HEAD 放弃工作区和index的改动,HEAD指针仍然指向当前的commit.（参照第一幅图）</span><br><span class="line"></span><br><span class="line">这条命令同时还可以用来撤销还没commit的merge,其实原理就是放弃index和工作区的改动，因为没commit的改动只存在于index和工作区中。</span><br><span class="line"></span><br><span class="line">$ git reset --hard HEAD^ 用来撤销已经commit的内容(等价于 git reset --hard HEAD~1) 。原理就是放弃工作区和index的改动，同时HEAD指针指向前一个commit对象。</span><br><span class="line"></span><br><span class="line">git revert 也是撤销命令，区别在于reset是指向原地或者向前移动指针，git revert是创建一个commit来覆盖当前的commit,指针向后移动</span><br></pre></td></tr></table></figure>
<h4 id="提交类命令"><a href="#提交类命令" class="headerlink" title="提交类命令"></a>提交类命令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add 跟踪新文件或者已有文件的改动，或者用来解决冲突</span><br><span class="line"></span><br><span class="line">git commit 把文件从stage提交到branch</span><br><span class="line"></span><br><span class="line">git commit -a 把修改的文件先提交到stage,然后再从stash提交到branch</span><br></pre></td></tr></table></figure>
<h4 id="删除类命令"><a href="#删除类命令" class="headerlink" title="删除类命令"></a>删除类命令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rm --cached readme.txt 只从stage中删除，保留物理文件</span><br><span class="line"></span><br><span class="line">git rm readme.txt 不但从stage中删除，同时删除物理文件</span><br><span class="line"></span><br><span class="line">git mv a.txt b.txt 把a.txt改名为b.txt</span><br></pre></td></tr></table></figure>
<h4 id="Merge类命令"><a href="#Merge类命令" class="headerlink" title="Merge类命令"></a>Merge类命令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在冲突状态下，需要解决冲突的文件会从index打回到工作区。</span><br><span class="line"></span><br><span class="line">1.用工具或者手工解决冲突 </span><br><span class="line">2.git add 命令来表明冲突已经解决。 </span><br><span class="line">3.再次commit 已解决冲突的文件。</span><br><span class="line"></span><br><span class="line">$ git reset --hard ORIG_HEAD 用来撤销已经commit 的merge. </span><br><span class="line">$ git reset --hard HEAD 用来撤销还没commit 的merge,其实原理就是放弃index和工作区的改动。</span><br><span class="line"></span><br><span class="line">git reset --merge ORIG_HEAD，注意其中的--hard 换成了 --merge，这样就可以避免在回滚时清除working tree。</span><br></pre></td></tr></table></figure>
<p><img src="http://resoure.uiste.com/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.png" alt="github常用命令"></p>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery中hover连续触发动画的bug</title>
    <url>/2015/20150731-1.html</url>
    <content><![CDATA[<h5 id="在用jQuery实现下拉菜单特效时，发现鼠标连续触碰对象会导致hover事件反复发生，如："><a href="#在用jQuery实现下拉菜单特效时，发现鼠标连续触碰对象会导致hover事件反复发生，如：" class="headerlink" title="在用jQuery实现下拉菜单特效时，发现鼠标连续触碰对象会导致hover事件反复发生，如："></a>在用jQuery实现下拉菜单特效时，发现鼠标连续触碰对象会导致hover事件反复发生，如：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jQuery(&quot;#nav li&quot;).hover(function()&#123;</span><br><span class="line">    $(this).find(&quot;ul:first&quot;).slideDown(&quot;slow&quot;);</span><br><span class="line">&#125;,function()&#123;</span><br><span class="line">    $(this).find(&quot;ul:first&quot;).slideUp(&quot;fast&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h5 id="度娘找到相关的解决方法，增加filter过滤到正在执行的动画模块即可，修正后的代码如下："><a href="#度娘找到相关的解决方法，增加filter过滤到正在执行的动画模块即可，修正后的代码如下：" class="headerlink" title="度娘找到相关的解决方法，增加filter过滤到正在执行的动画模块即可，修正后的代码如下："></a>度娘找到相关的解决方法，增加filter过滤到正在执行的动画模块即可，修正后的代码如下：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jQuery(&quot;#nav li&quot;).hover(function()&#123;</span><br><span class="line">    $(this).find(&quot;ul:first&quot;).filter(&apos;:not(:animated)&apos;).slideDown(&quot;slow&quot;);</span><br><span class="line">&#125;,function()&#123;</span><br><span class="line">    $(this).find(&quot;ul:first&quot;).slideUp(&quot;fast&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS默认样式表</title>
    <url>/2015/20150730-1.html</url>
    <content><![CDATA[<p>网页设计，让人最头疼的莫过于让页面兼容各大浏览器，准确些是兼容它们“默认”的CSS样式表。</p>
<h4 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h4><h5 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* &#123;margin:0px; padding:0px;&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这行代码虽然简单，但却让网页解析太慢。<br>于是出现了几种CSS重置方法：</p>
</blockquote>
<h5 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h5><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body, html, div, blockquote, img, label, p, h1, h2, h3, h4, h5, h6, pre, ul, ol,</span><br><span class="line">li, dl, dt, dd, form, a, fieldset, input, th, td</span><br><span class="line">&#123;margin: 0; padding: 0; border: 0; outline: none;&#125;</span><br><span class="line">body&#123;line-height: 1;font-size: 88% /* Decide for yourself if you want to include this. */;&#125;</span><br><span class="line">h1, h2, h3, h4, h5, h6&#123;font-size: 100%;padding: .6em 0;margin: 0 15px;&#125;</span><br><span class="line">ul, ol&#123;list-style: none;&#125;</span><br><span class="line">a&#123;color: black;text-decoration: none;&#125;</span><br><span class="line">a:hover</span><br><span class="line">&#123;text-decoration: underline;&#125;</span><br><span class="line">.floatLeft&#123;float: left;padding: .5em .5em .5em 0;&#125;</span><br><span class="line">.floatRight&#123;float: right;padding: .5em 0 .5em .5em;&#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure>
<blockquote>
<p>NETTUTS上的 Jeffrey Way写了篇文章Weekend Quick Tip: Create Your Own Simple Reset.css File<br>释出自己用来重置CSS样式表的方法,这个方法适用于大多数的网页设计。</p>
</blockquote>
<h5 id="第三种方式"><a href="#第三种方式" class="headerlink" title="第三种方式"></a>第三种方式</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">html, body, div, span, applet, object, iframe,</span><br><span class="line">h1, h2, h3, h4, h5, h6, p, blockquote, pre,</span><br><span class="line">a, abbr, acronym, address, big, cite, code,</span><br><span class="line">del, dfn, em, font, img, ins, kbd, q, s, samp,</span><br><span class="line">small, strike, strong, sub, sup, tt, var,</span><br><span class="line">b, u, i, center,</span><br><span class="line">dl, dt, dd, ol, ul, li,</span><br><span class="line">fieldset, form, label, legend,</span><br><span class="line">table, caption, tbody, tfoot, thead, tr, th, td &#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">        border: 0;</span><br><span class="line">        outline: 0;</span><br><span class="line">        font-size: 100%;</span><br><span class="line">        vertical-align: baseline;</span><br><span class="line">        background: transparent;</span><br><span class="line">&#125;</span><br><span class="line">body &#123;line-height: 1;&#125;</span><br><span class="line">ol, ul &#123;list-style: none;&#125;</span><br><span class="line">blockquote, q &#123;quotes: none;&#125;</span><br><span class="line">blockquote:before, blockquote:after,</span><br><span class="line">q:before, q:after &#123;content: &apos;&apos;;content: none;&#125;</span><br><span class="line"></span><br><span class="line">/* remember to define focus styles! */</span><br><span class="line">:focus &#123;outline: 0;&#125;</span><br><span class="line"></span><br><span class="line">/* remember to highlight inserts somehow! */</span><br><span class="line">ins &#123;text-decoration: none;&#125;</span><br><span class="line">del &#123; text-decoration: line-through;&#125;</span><br><span class="line"></span><br><span class="line">/* tables still need &apos;cellspacing=&quot;0&quot;&apos; in the markup */</span><br><span class="line">table &#123;border-collapse: collapse;border-spacing: 0;&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这个重置的太多</p>
</blockquote>
<h5 id="第四种方式"><a href="#第四种方式" class="headerlink" title="第四种方式"></a>第四种方式</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body,div,dl,dt,dd,ul,ol,li,h1,h2,h3,h4,h5,h6,pre,form,fieldset,input,textarea,p,blockquote,th,td &#123;</span><br><span class="line">        margin:0;</span><br><span class="line">        padding:0;</span><br><span class="line">&#125;</span><br><span class="line">table &#123;border-collapse:collapse;border-spacing:0;&#125;</span><br><span class="line">fieldset,img &#123; border:0;&#125;</span><br><span class="line">address,caption,cite,code,dfn,em,strong,th,var &#123;font-style:normal;</span><br><span class="line">font-weight:normal;&#125;</span><br><span class="line">ol,ul &#123;list-style:none;&#125;</span><br><span class="line">caption,th &#123;text-align:left;&#125;</span><br><span class="line">h1,h2,h3,h4,h5,h6 &#123;font-size:100%;font-weight:normal;&#125;</span><br><span class="line">q:before,q:after &#123;content:&apos;&apos;;&#125;</span><br><span class="line">abbr,acronym &#123; border:0;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h4><h5 id="CSS通用样式"><a href="#CSS通用样式" class="headerlink" title="CSS通用样式"></a>CSS通用样式</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body,ul,ol,dl,dd,h1,h2,h3,h4,h5,h6,p,input,select,textarea,form&#123;margin: 0; padding: 0;&#125;</span><br><span class="line">body&#123;font:14px/1.5 &quot;宋体&quot;;&#125;</span><br><span class="line">img&#123;border:none;&#125;</span><br><span class="line">ul,ol&#123;list-style:none;&#125;</span><br><span class="line">input,select,textarea&#123;outline:none;border:none;background:none;&#125;</span><br><span class="line">textarea&#123;resize:none;&#125;</span><br><span class="line">a&#123;text-decoration:none;&#125;</span><br><span class="line"></span><br><span class="line">/*清浮动*/</span><br><span class="line">.clearfix:after&#123;content:&quot;&quot;;*display:block;*clear:both;&#125;</span><br><span class="line">.clearfix&#123;zoom:1;&#125;</span><br></pre></td></tr></table></figure>
<h5 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">::selection &#123;background-color:#669900; color:#ffffff; text-shadow:none;&#125;</span><br><span class="line">::-moz-selection &#123;background-color:#669900; color:#ffffff;text-shadow:none;&#125;</span><br></pre></td></tr></table></figure>
<h5 id="去掉a的下划线"><a href="#去掉a的下划线" class="headerlink" title="去掉a的下划线"></a>去掉a的下划线</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#123;blr:expression(this.onFocus=this.blur())&#125; /*if IE*/</span><br><span class="line">a &#123;outline:none;&#125;/*if 火狐等现代浏览器浏览器*/</span><br></pre></td></tr></table></figure>
<h5 id="省略号"><a href="#省略号" class="headerlink" title="省略号"></a>省略号</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">white-space:nowrap;overflow:hidden;text-overflow:ellipsis;</span><br></pre></td></tr></table></figure>
<h5 id="英文自动换行"><a href="#英文自动换行" class="headerlink" title="英文自动换行"></a>英文自动换行</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">word-break: break-all;</span><br></pre></td></tr></table></figure>
<h5 id="强制不换行"><a href="#强制不换行" class="headerlink" title="强制不换行"></a>强制不换行</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">white-space:nowrap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">contenteditable=&quot;true&quot;</span><br><span class="line">`</span><br></pre></td></tr></table></figure>
<hr>
<h5 id="clearfix完整版"><a href="#clearfix完整版" class="headerlink" title="clearfix完整版"></a>clearfix完整版</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.clearfix:before,.clearfix:after &#123; content:&quot;&quot;; display:table;&#125;</span><br><span class="line">.clearfix:after&#123;clear:both;&#125;</span><br><span class="line">.clearfix&#123;*zoom:1;&#125;</span><br><span class="line">--------------------</span><br><span class="line">expression(this.onFocus=this.blur())</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo SEO优化</title>
    <url>/2015/20150725-1.html</url>
    <content><![CDATA[<p>当我们搭建一个网站之后，如果没有做一些相关的搜索引擎优化SEO，那么我们的网站是很难获取来自搜索引擎的流量的，用户很难在搜索引擎上搜索到我们网站的内容，所以接下来我们要为Hexo网站做一些简单的搜索优化。</p>
<hr>
<h5 id="将网站链接提交到百度"><a href="#将网站链接提交到百度" class="headerlink" title="将网站链接提交到百度"></a>将网站链接提交到百度</h5><p>百度搜索引擎提交入口<br>有三种验证方式，我选择Html标签验证，在themes\next\layout_partials\head.swing中添加验证代码：</p>
<pre><code>&lt;meta name=&quot;baidu-site-verification&quot; content=&quot;s8Pe1TBqyy&quot; /&gt;
</code></pre><p>然后点击完成验证，通过即可。同理将站点链接也提交到Google和搜狗，此处不表。</p>
<h5 id="给站点添加sitemap"><a href="#给站点添加sitemap" class="headerlink" title="给站点添加sitemap"></a>给站点添加sitemap</h5><p>Hexo安装sitemap</p>
<pre><code>npm install hexo-generator-sitemap --save #sitemap.xml适合提交给谷歌搜素引擎

npm install hexo-generator-baidu-sitemap --save #baidusitemap.xml适合提交百度搜索引擎
</code></pre><p>2、 在站点配置文件_config.yml中添加以下代码<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 自动生成sitemap</span><br><span class="line">sitemap:</span><br><span class="line">path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">path: baidusitemap.xml</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>3、 修改站点配置文件_config.yml<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">url: http://yoursite</span><br></pre></td></tr></table></figure></p>
<p>4、 Hexo编译<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure></p>
<p>会/public目录下生成sitemap.xml和baidusitemap.xml，这就是你的站点地图。<br>5、 提交sitemap到站长平台<br>百度站长平台sitemap提交是邀请制的，并没有对所有站长开放，只有网站到一定等级百度才会在你后台开放提交sitemap的入口。</p>
<h5 id="添加蜘蛛协议robots-txt"><a href="#添加蜘蛛协议robots-txt" class="headerlink" title="添加蜘蛛协议robots.txt"></a>添加蜘蛛协议robots.txt</h5><p>1、 新建robots.txt文件，添加以下文件内容，把robots.txt放在hexo站点的source文件下。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># hexo robots.txt</span><br><span class="line">User-agent: *</span><br><span class="line">Allow: /</span><br><span class="line">Allow: /categories/</span><br><span class="line">Allow: /tags/</span><br><span class="line">Allow: /archives/</span><br><span class="line">Allow: /about/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /js/</span><br><span class="line">Disallow: /css/</span><br><span class="line">Disallow: /fonts/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /fancybox/</span><br><span class="line">Sitemap: http://www.zaoanx.com/sitemap.xml</span><br><span class="line">Sitemap: http://www.zaoanx.com/baidusitemap.xml</span><br></pre></td></tr></table></figure></p>
<p>2、 在百度站长平台监测并更新Robots<br>提示检测到您更新了Robots文件即成功。</p>
<h5 id="给出站链接添加-“nofollow”-标签"><a href="#给出站链接添加-“nofollow”-标签" class="headerlink" title="给出站链接添加 “nofollow” 标签"></a>给出站链接添加 “nofollow” 标签</h5><p>nofollow标签是由谷歌领头创新的一个“反垃圾链接”的标签，并被百度、yahoo等各大搜索引擎广泛支持，引用nofollow标签的目的是：用于指示搜索引擎不要追踪（即抓取）网页上的带有nofollow属性的任何出站链接，以减少垃圾链接的分散网站权重。<br>以hexo的NexT主题为例，需要修改两处<br>1、 找到footer.swig，路径在your-hexo-site\themes\next\layout_partials，将下面代码</p>
<pre><code>{{ __('footer.powered', '<a class="theme-link" href="http://hexo.io" target="_blank" rel="noopener">Hexo</a>') }}
</code></pre><p>改成</p>
<pre><code>{{ __('footer.powered', '<a class="theme-link" href="http://hexo.io" rel="noopener" target="_blank">Hexo</a>') }}
</code></pre><p>将下面代码</p>
<pre><code>&lt;a class=&quot;theme-link&quot; href=&quot;https://github.com/iissnan/hexo-theme-next&quot;&gt;
</code></pre><p>改成</p>
<pre><code>&lt;a class=&quot;theme-link&quot; href=&quot;https://github.com/iissnan/hexo-theme-next&quot; rel=&quot;external nofollow&quot;&gt;
</code></pre><p>2、 修改sidebar.swig文件，路径在your-hexo-site\themes\next\layout_macro，将下面代码</p>
<pre><code>&lt;a href=&quot;{{ link }}&quot; target=&quot;_blank&quot;&gt;{{ name }}&lt;/a&gt;
</code></pre><p>改成</p>
<pre><code>&lt;a href=&quot;{{ link }}&quot; target=&quot;_blank&quot; rel=&quot;external nofollow&quot;&gt;{{ name }}&lt;/a&gt;
</code></pre><p>将下面代码</p>
<pre><code>&lt;a href=&quot;http://creativecommons.org/licenses/{{ theme.creative_commons }}/4.0&quot; class=&quot;cc-opacity&quot; target=&quot;_blank&quot;&gt;
</code></pre><p>改成</p>
<pre><code>&lt;a href=&quot;http://creativecommons.org/licenses/{{ theme.creative_commons }}/4.0&quot; class=&quot;cc-opacity&quot; target=&quot;_blank&quot; rel=&quot;external nofollow&quot;&gt;
</code></pre><p>可以使用chinaz站长工具进行各项检测。</p>
<h5 id="keywords-和-description"><a href="#keywords-和-description" class="headerlink" title="keywords 和 description"></a>keywords 和 description</h5><p>在\scaffolds\post.md中添加如下代码，用于生成的文章中添加关键字和描述。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">keywords: </span><br><span class="line">description:</span><br></pre></td></tr></table></figure></p>
<p>在\themes\next\layout_partials\head.swig有如下代码，用于生成文章的keywords。暂时还没找到生成description的位置。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if page.keywords %&#125;</span><br><span class="line">  &lt;meta name=&quot;keywords&quot; content=&quot;&#123;&#123; page.keywords &#125;&#125;&quot; /&gt;</span><br><span class="line">&#123;% elif page.tags and page.tags.length %&#125;</span><br><span class="line">  &lt;meta name=&quot;keywords&quot; content=&quot;&#123;% for tag in page.tags %&#125;&#123;&#123; tag.name &#125;&#125;,&#123;% endfor %&#125;&quot; /&gt;</span><br><span class="line">&#123;% elif theme.keywords %&#125;</span><br><span class="line">  &lt;meta name=&quot;keywords&quot; content=&quot;&#123;&#123; theme.keywords &#125;&#125;&quot; /&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后在\themes\next\layout_macro\post.swig中找到这个位置：</p>
<pre><code>{% if post.description %}
</code></pre><p>将以下代码去掉：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if post.description %&#125;</span><br><span class="line">  &#123;&#123; post.description &#125;&#125;</span><br><span class="line">  &lt;div class=&quot;post-more-link text-center&quot;&gt;</span><br><span class="line">	&lt;a class=&quot;btn&quot; href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;&gt;</span><br><span class="line">	  &#123;&#123; __(&apos;post.read_more&apos;) &#125;&#125; &amp;raquo;</span><br><span class="line">	&lt;/a&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<p>否则首页的文章摘要就会变成文章的description。</p>
<h5 id="首页title的优化"><a href="#首页title的优化" class="headerlink" title="首页title的优化"></a>首页title的优化</h5><p>更改index.swig文件，文件路径是your-hexo-site\themes\next\layout，将下面代码</p>
<pre><code>{% block title %} {{ config.title }} {% endblock %}

改成

    {% block title %} {{ config.title }} - {{ theme.description }} {% endblock %}
</code></pre><p>这时候你的首页标题会更符合网站名称 - 网站描述这习惯。</p>
<h5 id="修改文章链接"><a href="#修改文章链接" class="headerlink" title="修改文章链接"></a>修改文章链接</h5><p>HEXO默认的文章链接形式为domain/year/month/day/postname，默认就是一个四级url，并且可能造成url过长，对搜索引擎是十分不友好的，我们可以改成 domain/postname 的形式。编辑站点_config.yml文件，修改其中的permalink字段改为permalink: :title.html即可.</p>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>seo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo分类和标签无法显示</title>
    <url>/2015/20150724-3.html</url>
    <content><![CDATA[<p>hexo 下的分类和标签无法显示，解决方法</p>
<h2 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h2><p>新建一个页面，命名为 tags 。命令如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new page &quot;tags&quot;</span><br></pre></td></tr></table></figure></p>
<h2 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h2><p>编辑刚刚新建的页面，将页面的类型设置为tags，主题将自动为这个页面显示标签云。页面内容如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: Tagcloud</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>注意：如果有启用多说 或者 Disqus 评论，默认页面也会带有评论。需要关闭的话，请添加字段 comments 并将值设置为 false，如：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: Tagcloud</span><br><span class="line">date: 2015-7-24 22:21:13</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comment: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p>
<h2 id="步骤三"><a href="#步骤三" class="headerlink" title="步骤三"></a>步骤三</h2><p>在菜单中添加链接。编辑 主题配置文件 ，添加 tags 到 menu 中，如下:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: /</span><br><span class="line">  categories: /categories</span><br><span class="line">  about: /about</span><br><span class="line">  archives: /archives</span><br><span class="line">  tags: /tags</span><br><span class="line">  #commonweal: /404.html</span><br></pre></td></tr></table></figure></p>
<p><strong>分类的解决方法同标签</strong></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库基本操作</title>
    <url>/2015/20150724-2.html</url>
    <content><![CDATA[<h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><h4 id="连接数据库："><a href="#连接数据库：" class="headerlink" title="连接数据库："></a>连接数据库：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/Applications/XAMPP/xamppfiles/bin/mysql -uroot -p123456</span><br></pre></td></tr></table></figure>
<h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create database uiste charset=utf8;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br></pre></td></tr></table></figure>
<h4 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h4><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; use uiste;</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure>
<h4 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table uiste_stu(</span><br><span class="line">    -&gt;      id int not null auto_increment primary key,</span><br><span class="line">    -&gt;      name char(10) not null,</span><br><span class="line">    -&gt;      sex char(1) not null default &apos;男&apos;,</span><br><span class="line">    -&gt;      age tinyint not null,</span><br><span class="line">    -&gt;      score decimal(3,1)</span><br><span class="line">    -&gt;      );</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br></pre></td></tr></table></figure>
<h4 id="查看所有表："><a href="#查看所有表：" class="headerlink" title="查看所有表："></a>查看所有表：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show tables;</span><br><span class="line">+-----------------+</span><br><span class="line">| Tables_in_uiste |</span><br><span class="line">+-----------------+</span><br><span class="line">| uiste_stu       |</span><br><span class="line">+-----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h4 id="显示创建表的SQL语句"><a href="#显示创建表的SQL语句" class="headerlink" title="显示创建表的SQL语句"></a>显示创建表的SQL语句</h4><p>语法：show create table 表名 [\G];<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show create table uiste_stu \G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: uiste_stu</span><br><span class="line">Create Table: CREATE TABLE `uiste_stu` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` char(10) NOT NULL,</span><br><span class="line">  `sex` char(1) NOT NULL DEFAULT &apos;男&apos;,</span><br><span class="line">  `age` tinyint(4) NOT NULL,</span><br><span class="line">  `score` decimal(3,1) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR: </span><br><span class="line">No query specified</span><br></pre></td></tr></table></figure></p>
<h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><p>语法：drop table 表1,表2,表3;<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop tabel stu;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<h3 id="数据表操作"><a href="#数据表操作" class="headerlink" title="数据表操作"></a>数据表操作</h3><h4 id="显示数据表结构"><a href="#显示数据表结构" class="headerlink" title="显示数据表结构"></a>显示数据表结构</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; describe uiste_stu;</span><br><span class="line">+-------+--------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type         | Null | Key | Default | Extra          |</span><br><span class="line">+-------+--------------+------+-----+---------+----------------+</span><br><span class="line">| id    | int(11)      | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name  | char(10)     | NO   |     | NULL    |                |</span><br><span class="line">| sex   | char(1)      | NO   |     | 男      |                |</span><br><span class="line">| age   | tinyint(4)   | NO   |     | NULL    |                |</span><br><span class="line">| score | decimal(3,1) | YES  |     | NULL    |                |</span><br><span class="line">+-------+--------------+------+-----+---------+----------------+</span><br><span class="line">5 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>
<h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><p>语法：insert into 表名  (字段1,字段2) values (值1,值2);<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into uiste_stu (id,name,sex,age,score) values(2,&apos;杜敏&apos;,&apos; 女&apos;,22,59.9);</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br></pre></td></tr></table></figure></p>
<p>*插入字段可以和数据库中的字符顺序不一致，但是值需要和字段的顺序一致；<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into uiste_stu (name,id,sex,age,score) values(&apos;钟程程&apos;,3,&apos;女&apos;,23,79.9);</span><br></pre></td></tr></table></figure></p>
<p>*插入字段是可以省略的，插入的值和数据表中的字段顺序和个数是一致的；<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into uiste_stu values(4,&apos;赵哥&apos;,&apos;男&apos;,45,19.9);</span><br></pre></td></tr></table></figure></p>
<p>*自动增长的插入<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into uiste_stu values(null,&apos;圆哥&apos;,&apos;女&apos;,18,89.9);</span><br></pre></td></tr></table></figure></p>
<p>*默认值的插入（default不带分号）<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into uiste_stu values(6,&apos;张宝&apos;,default,28,9.9);</span><br></pre></td></tr></table></figure></p>
<h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><p>语法：update  表名 set 字段1=值1,字段2=值2  where  条件;<br>*将赵哥的性别改为女;<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; update uiste_stu set sex=&apos;女&apos; where name=&apos;赵哥&apos;;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br></pre></td></tr></table></figure></p>
<p>*若不加限定条件，将表中所有字段进行更改；</p>
<h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><p>语法：delete from 表名 [where 条件];<br>*删除id为6的信息<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; delete from uiste_stu where id=6;</span><br></pre></td></tr></table></figure></p>
<h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><p>语法：select 列名 from 表名 [where 条件] [order by 字段 asc|desc] [limit  起始位置,获取条数];<br>默认升序：asc     降序：desc<br>limit 限制：限制取几条数据<br>*查询所有学生的姓名和性别<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select name,sex from uiste_stu;</span><br></pre></td></tr></table></figure></p>
<p>*查询所有学生的所有字段<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select id,name,sex,age,score from uiste_stu;</span><br><span class="line">mysql&gt; select * from uiste_stu;</span><br></pre></td></tr></table></figure></p>
<p>*查询所有男生的信息<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from uiste_stu where sex=&apos;男&apos;;</span><br></pre></td></tr></table></figure></p>
<p>*查询所有分数大于60分的女生<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from uiste_stu where sex=&apos;女&apos; and score&gt;=60;</span><br></pre></td></tr></table></figure></p>
<p>*查询将所有分数大于60分的学生的信息，按分数从高到低排序<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from uiste_stu where score&gt;=60 order by score desc;</span><br></pre></td></tr></table></figure></p>
<p>*查询数据表中的前三条数据<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from uiste_stu limit 3;</span><br></pre></td></tr></table></figure></p>
<p>*查询第二条开始往后的三条数据(第一条是0)<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from uiste_stu limit 1,3;</span><br></pre></td></tr></table></figure></p>
<p>*查询分数前三名的学生信息<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from uiste_stu order by score desc limit 3;</span><br></pre></td></tr></table></figure></p>
<p>*最后查询所有的数据<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from uiste_stu;</span><br><span class="line">+----+-----------+-----+-----+-------+</span><br><span class="line">| id | name      | sex | age | score |</span><br><span class="line">+----+-----------+-----+-----+-------+</span><br><span class="line">|  1 | 小兰      | 男  |  25 |  98.7 |</span><br><span class="line">|  2 | 杜敏      | 女  |  22 |  59.9 |</span><br><span class="line">|  3 | 钟程程    | 女  |  23 |  79.9 |</span><br><span class="line">|  4 | 赵哥      | 女  |  45 |  19.9 |</span><br><span class="line">|  5 | 圆哥      | 女  |  18 |  89.9 |</span><br><span class="line">|  6 | 张宝      | 男  |  28 |   9.9 |</span><br><span class="line">+----+-----------+-----+-----+-------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><p>· sum():求和<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select sum(score) from uiste_stu;</span><br></pre></td></tr></table></figure></p>
<p>· avg():求平均值<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select avg(score) from uiste_stu;</span><br></pre></td></tr></table></figure></p>
<p>· max():求最大值<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select max(score) from uiste_stu;</span><br></pre></td></tr></table></figure></p>
<p>· min():求最小值(不算null)<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select min(score) from uiste_stu;</span><br></pre></td></tr></table></figure></p>
<p>· count():求记录数<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select count(*) from uiste_stu;</span><br></pre></td></tr></table></figure></p>
<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>=   等于和赋值<br>&lt;&gt;  不等于<br>· 逻辑运算符<br>and  与<br>or     或<br>not   非</p>
<h3 id="数据库常见问题"><a href="#数据库常见问题" class="headerlink" title="数据库常见问题"></a>数据库常见问题</h3><p>创建的数据库已存在<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR 1007 (HY000): Can&apos;t create database &apos;uiste&apos;; database exists</span><br></pre></td></tr></table></figure></p>
<p>创建的数据库是一个关键字，解决在名字上加上反引号<code></code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database `create`;     反引号可以创建更为复杂的字符和汉字</span><br></pre></td></tr></table></figure></p>
<p>delete 和 drop 删除表名的区别<br>delete删除表的内容，表的结构还保留，drop 删除整个表<br>创建数据库或者数据表必要时进行的判断<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database if not exists uiste</span><br></pre></td></tr></table></figure></p>
<p><strong>一张表只能有一个主键，但是主键可以由多个字段组成，如：</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `products_description` (</span><br><span class="line">  `products_id` int(11) NOT NULL,</span><br><span class="line">  `language_id` int(11) NOT NULL default &apos;1&apos;,</span><br><span class="line">  `products_name` varchar(64) NOT NULL default &apos;&apos;,</span><br><span class="line">  PRIMARY KEY  (`products_id`,`language_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=latin1;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL ERROR 1044 (42000)</title>
    <url>/2015/20150724-1.html</url>
    <content><![CDATA[<h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><blockquote>
<p>在MySQL控制台下创建数据库出现以下信息：<br>mysql&gt; CREATE DATABASE uiste;<br>ERROR 1044 (42000): Access denied for user ‘‘@’localhost’ to database ‘uiste’</p>
</blockquote>
<h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>执行以下命令进入控制台：</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql --user=root -p</span><br><span class="line">输入root用户的密码即可进入mysql控制台：</span><br><span class="line">创建数据库：</span><br><span class="line">create database uiste;</span><br><span class="line">显示所有数据库：</span><br><span class="line">show databases;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac下使用Brew搭建PHP(LNMP/LAMP)开发环境</title>
    <url>/2015/20150723-1.html</url>
    <content><![CDATA[<p>Mac下搭建lamp开发环境很容易，有xampp和mamp现成的集成环境。但是集成环境对于经常需要自定义一些配置的开发者来说会非常麻烦，而且Mac本身自带apache和php，在brew的帮助下非常容易手动搭建，可控性很高。</p>
<h2 id="Brew"><a href="#Brew" class="headerlink" title="Brew"></a>Brew</h2><p>brew对于mac，就像apt-get对于ubuntu，安装软件的好帮手，不能方便更多…</p>
<p>brew的安装方式如下：</p>
<p><code>ruby -e &quot;$(curl -fsSL https://raw.github.com/mxcl/homebrew/go/install)&quot;</code><br>brew常用选项<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install xxx</span><br><span class="line">brew uninstall xxx</span><br><span class="line">brew list </span><br><span class="line">brew update xxx</span><br></pre></td></tr></table></figure></p>
<h2 id="Apache-Nginx"><a href="#Apache-Nginx" class="headerlink" title="Apache || Nginx"></a>Apache || Nginx</h2><h3 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h3><p>Apache的话使用mac自带的基本就够了，我的系统是10.9，可以使用以下命令控制Apache<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apachectl start</span><br><span class="line">sudo apachectl restart</span><br><span class="line">sudo apachectl stop</span><br></pre></td></tr></table></figure></p>
<p>唯一要改的是主目录，mac默认在home下有个sites（站点）目录，访问路径是</p>
<p><code>http://localhost/~user_name</code><br>这样很不适合做开发用，修改/etc/apache2/httpd.conf内容<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DocumentRoot &quot;/Users/username/Sites&quot;</span><br><span class="line">&lt;Directory /&gt;</span><br><span class="line">    Options Indexes MultiViews</span><br><span class="line">    AllowOverride All</span><br><span class="line">    Order allow,deny</span><br><span class="line">    Allow from all</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure></p>
<p>这样sites目录就是网站根目录了，代码都往这个下头丢</p>
<h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>要使用Nginx也比较方便，首先安装</p>
<p><code>brew install nginx</code><br>启动关闭Nginx的命令如下（如果想要监听80端口，必须以管理员身份运行）</p>
<p>#打开 nginx<br><code>sudo nginx</code></p>
<p>#重新加载配置|重启|停止|退出 nginx<br><code>nginx -s reload|reopen|stop|quit</code></p>
<p>#测试配置是否有语法错误<br><code>nginx -t</code><br>配置Nginx</p>
<p><code>cd /usr/local/etc/nginx/</code><br><code>mkdir conf.d</code><br>修改Nginx配置文件</p>
<p><code>vim nginx.conf</code><br>主要修改位置是最后的include<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">worker_processes  1;  </span><br><span class="line"></span><br><span class="line">error_log       /usr/local/var/log/nginx/error.log warn;</span><br><span class="line"></span><br><span class="line">pid        /usr/local/var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  256;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    access_log      /usr/local/var/log/nginx/access.log main;</span><br><span class="line">    port_in_redirect off;</span><br><span class="line">    sendfile        on; </span><br><span class="line">    keepalive_timeout  65; </span><br><span class="line"></span><br><span class="line">    include /usr/local/etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>修改自定义文件</p>
<p><code>vim ./conf.d/default.conf</code><br>增加一个监听端口<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    root /Users/username/Sites/; # 该项要修改为你准备存放相关网页的路径</span><br><span class="line"></span><br><span class="line">    location / &#123; </span><br><span class="line">        index index.php;</span><br><span class="line">        autoindex on; </span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    #proxy the php scripts to php-fpm  </span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        include /usr/local/etc/nginx/fastcgi.conf;</span><br><span class="line">        fastcgi_intercept_errors on; </span><br><span class="line">        fastcgi_pass   127.0.0.1:9000; </span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这个时候还不能访问php站点，因为还没有开启php-fpm。</p>
<p>虽然mac 10.9自带了php-fpm，但是由于我们使用了最新的PHP，PHP中自带php-fpm，所以使用PHP中的php-fpm可以保证版本的一致。</p>
<p>这里的命令在安装完下一步的php后再执行<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nginx</span><br><span class="line">sudo php-fpm -D</span><br></pre></td></tr></table></figure></p>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><p>PHP在mac下默认安装了，但是不好控制版本，利用brew可以再mac下安装最新版本，甚至是多个版本，我装了php5.5<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew update</span><br><span class="line">brew tap homebrew/dupes</span><br><span class="line">brew tap josegonzalez/homebrew-php</span><br><span class="line"># brew install php55 --with-fpm #Nginx</span><br><span class="line">brew install php55 #Apache</span><br></pre></td></tr></table></figure></p>
<p>然后修改php的cli路径和apache使用的php模块。在.bashrc或.zshrc里头加以下内容</p>
<p><code>#export PATH=&quot;$(brew --prefix josegonzalez/php/php55)/bin:$PATH&quot;</code><br><code>export PATH=&quot;/usr/local/bin:/usr/local/sbin:$PATH&quot;</code><br>就用刚刚安装的php代替了系统默认cli的php版本。然后在/etc/apache2/httpd.conf下增加</p>
<p><code>LoadModule php5_module /usr/local/Cellar/php55/5.5.8/libexec/apache2/libphp5.so</code><br>这样就对apache使用的php版本也进行了修改。</p>
<p>后面会用到mongo和mysql，所以可以直接利用下面命令安装php模块，其他模块也类似<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install php55-mysql</span><br><span class="line">brew install php55-mongo</span><br></pre></td></tr></table></figure></p>
<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><p>mac不自带mysql，这里需要重新安装，方法依然很简单<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install mysql</span><br><span class="line">unset TMPDIR</span><br><span class="line">mysql_install_db --verbose --user=`whoami` --basedir=&quot;$(brew --prefix mysql)&quot; --datadir=/usr/local/var/mysql --tmpdir=/tmp</span><br><span class="line">sudo chown -R your_user /usr/local/var/mysql/</span><br></pre></td></tr></table></figure></p>
<p>第一句是安装，后面的是确保正常使用。然后是启动命令</p>
<p><code>mysql.server start</code><br>最好给mysql设个密码，方法如下</p>
<p><code>mysqladmin -u root password &#39;xxx&#39;</code><br>如果想修改mysql的配置，在<code>/usr/local/etc</code>下建立一个<code>my.cnf</code>，例如增加log</p>
<p>[mysqld]<br><code>general-log</code><br><code>general_log_file = /usr/local/var/log/mysqld.log</code></p>
<h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><p>MongoDB可以说是最简单的一个，直接执行</p>
<p><code>brew install mongodb</code><br>启动方法</p>
<p><code>mongod --fork</code></p>
<h2 id="PHPMyAdmin"><a href="#PHPMyAdmin" class="headerlink" title="PHPMyAdmin"></a>PHPMyAdmin</h2><p><code>phpmyadmin</code>几乎是管理<code>mysql</code>最容易的web应用了吧，每次我都顺道装上。</p>
<p>1.去官网下载最新的版本<br>2.解压到<code>~/Sites/phpmyadmin</code>下<br>3.在<code>phpmyadmin</code>目录下创建一个可写的<code>config</code>目录<br>4.打开<code>http://localhost/phpmyadmin/setup</code>，安装一个服务，最后保存（这里只需要输入帐号密码就够了）<br>5.将<code>config</code>下生成的<code>config.inc.php</code>移到<code>phpmyadmin</code>根目录下<br>6.删除<code>config</code></p>
<p>这样就装好了，虽然可能有点小复杂，但是来一次就习惯了。</p>
<p>这里很可能会遇到2002错误，就是找不到mysql.sock的问题，用下面方法解决</p>
<p><code>sudo mkdir /var/mysql</code><br><code>sudo ln -s /tmp/mysql.sock /var/mysql/mysql.sock</code></p>
<h2 id="RockMongo"><a href="#RockMongo" class="headerlink" title="RockMongo"></a>RockMongo</h2><p>RockMongo是MongoDB很好用的一个web应用，安装也很容易</p>
<p>1.去官网下载最新版本<br>2.解压到<code>~/Sites/rockmongo</code>下<br>3.运行<code>http://localhost/rockmongo</code>即可</p>
<p>完成</p>
<p>这样就在mac下配置好一个php开发环境了，enjoy it!</p>
]]></content>
  </entry>
  <entry>
    <title>消消乐小游戏</title>
    <url>/2015/20150720-2.html</url>
    <content><![CDATA[<h1 id="消消乐小游戏"><a href="#消消乐小游戏" class="headerlink" title="消消乐小游戏"></a>消消乐小游戏</h1><hr>
<p>使用HTML+CSS+JavaScript编写的简易消消乐小游戏！随着时间的推移会越来越快的出现随机位置随机大小的小星星，点击小小星星就会消失。<br>游戏功能如下：</p>
<blockquote>
<ul>
<li>开始游戏</li>
<li>暂停游戏</li>
<li>结束游戏</li>
<li>游戏时常记录</li>
<li>游戏分数统计，记录消掉星星的个数</li>
<li>游戏血条显示，设定结束关卡为10个星星</li>
</ul>
</blockquote>
<a id="more"></a>
<h2 id><a href="#" class="headerlink" title></a><img src="http://resoure.uiste.com/game.png" alt="cmd-markdown-logo"></h2><h2 id="技术点备注"><a href="#技术点备注" class="headerlink" title="技术点备注"></a>技术点备注</h2><blockquote>
<p>消除星星时通过obj.onclick=remove;<br>再通过remove()函数：this.parentNode.removeChild(this);进行消除</p>
</blockquote>
<hr>
<h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"zh-cn"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">	&lt;style type=<span class="string">"text/css"</span>&gt;</span><br><span class="line">		*&#123;</span><br><span class="line">			margin: <span class="number">0</span>px;</span><br><span class="line">			padding: <span class="number">0</span>px;</span><br><span class="line">		&#125;</span><br><span class="line">		#blood&#123;</span><br><span class="line">			margin-top:<span class="number">5</span>px;</span><br><span class="line">			width: <span class="number">300</span>px;</span><br><span class="line">			height: <span class="number">30</span>px;</span><br><span class="line">			border: <span class="number">1</span>px solid red;</span><br><span class="line">			display:block;</span><br><span class="line">		&#125;</span><br><span class="line">		#blood2&#123;</span><br><span class="line">			display: inline-block;</span><br><span class="line">			width:<span class="number">300</span>px;</span><br><span class="line">			height: <span class="number">30</span>px;</span><br><span class="line">			background: red;</span><br><span class="line">		&#125;</span><br><span class="line">	&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">	&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">	var time,time2,time3;</span></span><br><span class="line"><span class="string">	var count=0;</span></span><br><span class="line"><span class="string">	var score = 0;</span></span><br><span class="line"><span class="string">	var i=1000;</span></span><br><span class="line"><span class="string">	var n=0;</span></span><br><span class="line"><span class="string">		//启动定时器</span></span><br><span class="line"><span class="string">		function start()&#123;</span></span><br><span class="line"><span class="string">			window.clearInterval(time);</span></span><br><span class="line"><span class="string">			if(i&gt;100)&#123;i-=100;&#125;</span></span><br><span class="line"><span class="string">			//设定当页面出现的星星超过10个就结束游戏</span></span><br><span class="line"><span class="string">			time = window.setInterval('show()',i);</span></span><br><span class="line"><span class="string">		&#125;</span></span><br><span class="line"><span class="string">			//加快速度</span></span><br><span class="line"><span class="string">			function speed()&#123;</span></span><br><span class="line"><span class="string">			window.clearInterval(time2);</span></span><br><span class="line"><span class="string">			window.clearInterval(time3);</span></span><br><span class="line"><span class="string">			//显示游戏进行的时间</span></span><br><span class="line"><span class="string">			time3 = window.setInterval("</span>timeOver()<span class="string">",1000);</span></span><br><span class="line"><span class="string">			//点击开始默认先加载一次</span></span><br><span class="line"><span class="string">			window.setTimeout("</span>start()<span class="string">",0);</span></span><br><span class="line"><span class="string">			time2 = window.setInterval("</span>start()<span class="string">",5000);</span></span><br><span class="line"><span class="string">		&#125;</span></span><br><span class="line"><span class="string">		//开始显示星星</span></span><br><span class="line"><span class="string">		function show()&#123;</span></span><br><span class="line"><span class="string">			//创建对象</span></span><br><span class="line"><span class="string">			var obj = document.createElement('img');</span></span><br><span class="line"><span class="string">			//设置对象属性</span></span><br><span class="line"><span class="string">			//生成随机大小的星星</span></span><br><span class="line"><span class="string">			var size = Math.floor(Math.random()*30+30);</span></span><br><span class="line"><span class="string">			//生成随机的位置坐标,首先获取屏幕尺寸的大小</span></span><br><span class="line"><span class="string">			var h = parseInt(screen.availHeight);</span></span><br><span class="line"><span class="string">			var w = parseInt(screen.availWidth);</span></span><br><span class="line"><span class="string">			var x = Math.floor(Math.random()*(w-w*0.2)+w*0.1);</span></span><br><span class="line"><span class="string">			var y = Math.floor(Math.random()*(h-h*0.4)+h*0.1);</span></span><br><span class="line"><span class="string">			//通过src设置图片路径</span></span><br><span class="line"><span class="string">			obj.src="</span>images/xingxing.png<span class="string">";</span></span><br><span class="line"><span class="string">			obj.width = size;</span></span><br><span class="line"><span class="string">			//必须通过定位才能使用top和left功能</span></span><br><span class="line"><span class="string">			obj.style.position = "</span>absolute<span class="string">";</span></span><br><span class="line"><span class="string">			obj.style.top = y + "</span>px<span class="string">";</span></span><br><span class="line"><span class="string">			obj.style.left = x+ "</span>px<span class="string">";</span></span><br><span class="line"><span class="string">			//写入内容到页面中</span></span><br><span class="line"><span class="string">			document.body.appendChild(obj);</span></span><br><span class="line"><span class="string">			//记录写入到页面的次数</span></span><br><span class="line"><span class="string">			count++;</span></span><br><span class="line"><span class="string">			//设置血条的长度</span></span><br><span class="line"><span class="string">			var obj4 = document.getElementById("</span>blood2<span class="string">");</span></span><br><span class="line"><span class="string">			obj4.style.width = 300-(count * 30) +"</span>px<span class="string">";</span></span><br><span class="line"><span class="string">			//设定超过次数就结束游戏</span></span><br><span class="line"><span class="string">			if (count&gt;=10)&#123;</span></span><br><span class="line"><span class="string">				alert("</span>游戏结束，得分<span class="string">"+score+"</span>分<span class="string">");</span></span><br><span class="line"><span class="string">				window.clearInterval(time);</span></span><br><span class="line"><span class="string">				window.clearInterval(time2);</span></span><br><span class="line"><span class="string">				window.clearInterval(time3);</span></span><br><span class="line"><span class="string">				//游戏结束，清楚所有星星通过重新加载页面</span></span><br><span class="line"><span class="string">				location.reload();</span></span><br><span class="line"><span class="string">			&#125;</span></span><br><span class="line"><span class="string">			//添加点击事件用来消除星星</span></span><br><span class="line"><span class="string">			obj.onclick=remove;</span></span><br><span class="line"><span class="string">		&#125;</span></span><br><span class="line"><span class="string">		//消除星星</span></span><br><span class="line"><span class="string">		function remove()&#123;</span></span><br><span class="line"><span class="string">			this.parentNode.removeChild(this);</span></span><br><span class="line"><span class="string">			//记录消除的次数</span></span><br><span class="line"><span class="string">			count--;</span></span><br><span class="line"><span class="string">			//计算总分数</span></span><br><span class="line"><span class="string">			score++;</span></span><br><span class="line"><span class="string">			var obj5=document.getElementById("</span>score<span class="string">");</span></span><br><span class="line"><span class="string">			obj5.innerHTML="</span>得分:<span class="string">"+score+"</span>分<span class="string">";</span></span><br><span class="line"><span class="string">		&#125;</span></span><br><span class="line"><span class="string">		//显示游戏进行的时间</span></span><br><span class="line"><span class="string">		function timeOver()&#123;</span></span><br><span class="line"><span class="string">			n++;</span></span><br><span class="line"><span class="string">			var obj3 = document.getElementById("</span>overTime<span class="string">");</span></span><br><span class="line"><span class="string">			obj3.innerHTML="</span>游戏进行了<span class="string">"+n+"</span>秒<span class="string">";</span></span><br><span class="line"><span class="string">		&#125;</span></span><br><span class="line"><span class="string">		//暂停游戏</span></span><br><span class="line"><span class="string">		function pause()&#123;</span></span><br><span class="line"><span class="string">			alert("</span>暂停游戏<span class="string">");</span></span><br><span class="line"><span class="string">		&#125;</span></span><br><span class="line"><span class="string">	&lt;/script&gt;</span></span><br><span class="line"><span class="string">	&lt;title&gt;星星小游戏&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;input type="</span>button<span class="string">" value="</span>开始游戏<span class="string">" onclick="</span>speed()<span class="string">"&gt;&lt;/input&gt;</span></span><br><span class="line"><span class="string">&lt;input type="</span>button<span class="string">" value="</span>暂停游戏<span class="string">" onclick="</span>pause()<span class="string">"&gt;&lt;/input&gt;</span></span><br><span class="line"><span class="string">&lt;span id="</span>overTime<span class="string">"&gt;游戏进行了0秒&lt;/span&gt;｜</span></span><br><span class="line"><span class="string">&lt;span id="</span>score<span class="string">"&gt;得分:0分&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;span id="</span>blood<span class="string">"&gt;&lt;span id="</span>blood2<span class="string">"&gt;&lt;/span&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>代码</category>
      </categories>
      <tags>
        <tag>游戏</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Cmd Markdown 简明语法手册</title>
    <url>/2015/20150710-3.html</url>
    <content><![CDATA[<p><a href="https://www.zybuluo.com/mdeditor" title="作业部落旗下 Cmd 在线 Markdown 编辑阅读器" target="_blank" rel="noopener">『Cmd 技术渲染的沙箱页面，点击此处编写自己的文档』</a></p>
<h1 id="Cmd-Markdown-简明语法手册"><a href="#Cmd-Markdown-简明语法手册" class="headerlink" title="Cmd Markdown 简明语法手册"></a>Cmd Markdown 简明语法手册</h1><p>标签： Cmd-Markdown</p>
<hr>
<h3 id="1-斜体和粗体"><a href="#1-斜体和粗体" class="headerlink" title="1. 斜体和粗体"></a>1. 斜体和粗体</h3><p>使用 * 和 ** 表示斜体和粗体。</p>
<p>示例：</p>
<p>这是 <em>斜体</em>，这是 <strong>粗体</strong>。</p>
<h3 id="2-分级标题"><a href="#2-分级标题" class="headerlink" title="2. 分级标题"></a>2. 分级标题</h3><p>使用 === 表示一级标题，使用 — 表示二级标题。</p>
<p>示例：</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是一个一级标题</span><br><span class="line">============================</span><br><span class="line"></span><br><span class="line">这是一个二级标题</span><br><span class="line">--------------------------------------------------</span><br><span class="line"></span><br><span class="line">### 这是一个三级标题</span><br></pre></td></tr></table></figure>
<p>你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。</p>
<h3 id="3-外链接"><a href="#3-外链接" class="headerlink" title="3. 外链接"></a>3. 外链接</h3><p>使用 [描述](链接地址) 为文字增加外链接。</p>
<p>示例：</p>
<p>这是去往 <a href="http://ghosertblog.github.com" target="_blank" rel="noopener">本人博客</a> 的链接。</p>
<h3 id="4-无序列表"><a href="#4-无序列表" class="headerlink" title="4. 无序列表"></a>4. 无序列表</h3><p>使用 *，+，- 表示无序列表。</p>
<p>示例：</p>
<ul>
<li>无序列表项 一</li>
<li>无序列表项 二</li>
<li>无序列表项 三</li>
</ul>
<h3 id="5-有序列表"><a href="#5-有序列表" class="headerlink" title="5. 有序列表"></a>5. 有序列表</h3><p>使用数字和点表示有序列表。</p>
<p>示例：</p>
<ol>
<li>有序列表项 一</li>
<li>有序列表项 二</li>
<li>有序列表项 三</li>
</ol>
<h3 id="6-文字引用"><a href="#6-文字引用" class="headerlink" title="6. 文字引用"></a>6. 文字引用</h3><p>使用 &gt; 表示文字引用。</p>
<p>示例：</p>
<blockquote>
<p>野火烧不尽，春风吹又生。</p>
</blockquote>
<h3 id="7-行内代码块"><a href="#7-行内代码块" class="headerlink" title="7. 行内代码块"></a>7. 行内代码块</h3><p>使用 `代码` 表示行内代码块。</p>
<p>示例：</p>
<p>让我们聊聊 <code>html</code>。</p>
<h3 id="8-代码块"><a href="#8-代码块" class="headerlink" title="8.  代码块"></a>8.  代码块</h3><p>使用 四个缩进空格 表示代码块。</p>
<p>示例：</p>
<pre><code>这是一个代码块，此行左侧有四个不可见的空格。
</code></pre><h3 id="9-插入图像"><a href="#9-插入图像" class="headerlink" title="9.  插入图像"></a>9.  插入图像</h3><p>使用 ![描述](图片链接地址) 插入图像。</p>
<p>示例：</p>
<p><img src="https://www.zybuluo.com/static/img/my_head.jpg" alt="我的头像"></p>
<h1 id="Cmd-Markdown-高阶语法手册"><a href="#Cmd-Markdown-高阶语法手册" class="headerlink" title="Cmd Markdown 高阶语法手册"></a>Cmd Markdown 高阶语法手册</h1><h3 id="1-内容目录"><a href="#1-内容目录" class="headerlink" title="1. 内容目录"></a>1. 内容目录</h3><p>在段落中填写 <code>[TOC]</code> 以显示全文内容的目录结构。</p>
<p>[TOC]</p>
<h3 id="2-标签分类"><a href="#2-标签分类" class="headerlink" title="2. 标签分类"></a>2. 标签分类</h3><p>在编辑区任意行的列首位置输入以下代码给文稿标签：</p>
<p>标签： 数学 英语 Markdown</p>
<p>或者</p>
<p>Tags： 数学 英语 Markdown</p>
<h3 id="3-删除线"><a href="#3-删除线" class="headerlink" title="3. 删除线"></a>3. 删除线</h3><p>使用 ~~ 表示删除线。</p>
<p><del>这是一段错误的文本。</del></p>
<h3 id="4-注脚"><a href="#4-注脚" class="headerlink" title="4. 注脚"></a>4. 注脚</h3><p>使用 [^keyword] 表示注脚。</p>
<p>这是一个注脚[^footnote]的样例。</p>
<p>这是第二个注脚[^footnote2]的样例。</p>
<h3 id="5-LaTeX-公式"><a href="#5-LaTeX-公式" class="headerlink" title="5. LaTeX 公式"></a>5. LaTeX 公式</h3><p>$ 表示行内公式： </p>
<p>质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。</p>
<p>$$ 表示整行公式：</p>
<p>$$\sum_{i=1}^n a_i=0$$</p>
<p>$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$</p>
<p>$$\sum^{j-1}<em>{k=0}{\widehat{\gamma}</em>{kj} z_k}$$</p>
<p>访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">MathJax</a> 参考更多使用方法。</p>
<h3 id="6-加强的代码块"><a href="#6-加强的代码块" class="headerlink" title="6. 加强的代码块"></a>6. 加强的代码块</h3><p>支持四十一种编程语言的语法高亮的显示，行号显示。</p>
<p>非代码示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install vim-gnome</span><br></pre></td></tr></table></figure>
<p>Python 示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span><span class="params">(param1=<span class="string">''</span>, param2=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">'''A docstring'''</span></span><br><span class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Greater'</span></span><br><span class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">'''interpreter</span></span><br><span class="line"><span class="string"><span class="meta">... </span>prompt'''</span></span><br></pre></td></tr></table></figure>
<p>JavaScript 示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* nth element in the fibonacci series.</span></span><br><span class="line"><span class="comment">* @param n &gt;= 0</span></span><br><span class="line"><span class="comment">* @return the nth element, &gt;= 0.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> tmp;</span><br><span class="line">  <span class="keyword">while</span> (--n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    tmp = a;</span><br><span class="line">    a += b;</span><br><span class="line">    b = tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(fib(<span class="number">10</span>));</span><br></pre></td></tr></table></figure>
<h3 id="7-流程图"><a href="#7-流程图" class="headerlink" title="7. 流程图"></a>7. 流程图</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st=&gt;start: Start:&gt;https://www.zybuluo.com</span><br><span class="line">io=&gt;inputoutput: verification</span><br><span class="line">op=&gt;operation: Your Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">sub=&gt;subroutine: Your Subroutine</span><br><span class="line">e=&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;io-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;sub-&gt;io</span><br></pre></td></tr></table></figure>
<h4 id="更多语法参考：流程图语法参考"><a href="#更多语法参考：流程图语法参考" class="headerlink" title="更多语法参考：流程图语法参考"></a>更多语法参考：<a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener">流程图语法参考</a></h4><h3 id="8-序列图"><a href="#8-序列图" class="headerlink" title="8. 序列图"></a>8. 序列图</h3><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure>
<h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Title: Here is a title</span><br><span class="line">A-&gt;B: Normal line</span><br><span class="line">B--&gt;C: Dashed line</span><br><span class="line">C-&gt;&gt;D: Open arrow</span><br><span class="line">D--&gt;&gt;A: Dashed open arrow</span><br></pre></td></tr></table></figure>
<h4 id="更多语法参考：序列图语法参考"><a href="#更多语法参考：序列图语法参考" class="headerlink" title="更多语法参考：序列图语法参考"></a>更多语法参考：<a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="noopener">序列图语法参考</a></h4><h3 id="9-表格支持"><a href="#9-表格支持" class="headerlink" title="9. 表格支持"></a>9. 表格支持</h3><table>
<thead>
<tr>
<th>项目</th>
<th style="text-align:right">价格</th>
<th style="text-align:center">数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>计算机</td>
<td style="text-align:right">\$1600</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td>手机</td>
<td style="text-align:right">\$12</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td>管线</td>
<td style="text-align:right">\$1</td>
<td style="text-align:center">234</td>
</tr>
</tbody>
</table>
<h3 id="10-定义型列表"><a href="#10-定义型列表" class="headerlink" title="10. 定义型列表"></a>10. 定义型列表</h3><p>名词 1<br>:   定义 1（左侧有一个可见的冒号和四个不可见的空格）</p>
<p>代码块 2<br>:   这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）</p>
<pre><code>代码块（左侧有八个不可见的空格）
</code></pre><h3 id="11-Html-标签"><a href="#11-Html-标签" class="headerlink" title="11. Html 标签"></a>11. Html 标签</h3><p>本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：</p>
<pre><code>&lt;table&gt;
    &lt;tr&gt;
        &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt;
        &lt;th&gt;星期一&lt;/th&gt;
        &lt;th&gt;星期二&lt;/th&gt;
        &lt;th&gt;星期三&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;李强&lt;/td&gt;
        &lt;td&gt;张明&lt;/td&gt;
        &lt;td&gt;王平&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
</code></pre><table><br>    <tr><br>        <th rowspan="2">值班人员</th><br>        <th>星期一</th><br>        <th>星期二</th><br>        <th>星期三</th><br>    </tr><br>    <tr><br>        <td>李强</td><br>        <td>张明</td><br>        <td>王平</td><br>    </tr><br></table>

<h3 id="12-内嵌图标"><a href="#12-内嵌图标" class="headerlink" title="12. 内嵌图标"></a>12. 内嵌图标</h3><p>本站的图标系统对外开放，在文档中输入</p>
<pre><code>&lt;i class=&quot;icon-weibo&quot;&gt;&lt;/i&gt;
</code></pre><p>即显示微博的图标： <i class="icon-weibo icon-2x"></i></p>
<p>替换 上述 <code>i 标签</code> 内的 <code>icon-weibo</code> 以显示不同的图标，例如：</p>
<pre><code>&lt;i class=&quot;icon-renren&quot;&gt;&lt;/i&gt;
</code></pre><p>即显示人人的图标： <i class="icon-renren icon-2x"></i></p>
<p>更多的图标和玩法可以参看 <a href="http://fortawesome.github.io/Font-Awesome/3.2.1/icons/" target="_blank" rel="noopener">font-awesome</a> 官方网站。</p>
<h3 id="13-待办事宜-Todo-列表"><a href="#13-待办事宜-Todo-列表" class="headerlink" title="13. 待办事宜 Todo 列表"></a>13. 待办事宜 Todo 列表</h3><p>使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如：</p>
<pre><code>- [ ] **Cmd Markdown 开发**
    - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率
    - [ ] 支持以 PDF 格式导出文稿
    - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments)
    - [x] 改进 LaTex 功能
        - [x] 修复 LaTex 公式渲染问题
        - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers)
- [ ] **七月旅行准备**
    - [ ] 准备邮轮上需要携带的物品
    - [ ] 浏览日本免税店的物品
    - [x] 购买蓝宝石公主号七月一日的船票
</code></pre><p>对应显示如下待办事宜 Todo 列表：</p>
<ul>
<li>[ ] <strong>Cmd Markdown 开发</strong><ul>
<li>[ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>
<li>[ ] 支持以 PDF 格式导出文稿</li>
<li>[x] 新增Todo列表功能 <a href="https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments" target="_blank" rel="noopener">语法参考</a></li>
<li>[x] 改进 LaTex 功能<ul>
<li>[x] 修复 LaTex 公式渲染问题</li>
<li>[x] 新增 LaTex 公式编号功能 <a href="http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers" target="_blank" rel="noopener">语法参考</a></li>
</ul>
</li>
</ul>
</li>
<li>[ ] <strong>七月旅行准备</strong><ul>
<li>[ ] 准备邮轮上需要携带的物品</li>
<li>[ ] 浏览日本免税店的物品</li>
<li>[x] 购买蓝宝石公主号七月一日的船票</li>
</ul>
</li>
</ul>
<p>[^footnote]: 这是一个 <em>注脚</em> 的 <strong>文本</strong>。</p>
<p>[^footnote2]: 这是另一个 <em>注脚</em> 的 <strong>文本</strong>。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2015/20150710-1.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br><span class="line">$ hexo new post &lt;title&gt;</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<a id="more"></a>
<h3 id="Set-the-Directory"><a href="#Set-the-Directory" class="headerlink" title="Set the Directory"></a>Set the Directory</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tags:</span><br><span class="line">- 标签</span><br><span class="line">categories:</span><br><span class="line">- 分类</span><br></pre></td></tr></table></figure>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<h3 id="Clean-the-cache"><a href="#Clean-the-cache" class="headerlink" title="Clean the cache"></a>Clean the cache</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>
<h3 id="hexo-pro"><a href="#hexo-pro" class="headerlink" title="hexo pro"></a>hexo pro</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
